
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 43 00 20 31 40 00 00 6b d6 00 00 05 40 00 00     .C. 1@..k....@..
  10:	05 40 00 00 05 40 00 00 05 40 00 00 00 00 00 00     .@...@...@......
	...
  2c:	01 39 00 00 05 40 00 00 00 00 00 00 ad 38 00 00     .9...@.......8..
  3c:	05 40 00 00                                         .@..

00000040 <_irq_vector_table>:
  40:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..
  50:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..
  60:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..
  70:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..
  80:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..
  90:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..
  a0:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..
  b0:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..
  c0:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..
  d0:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..
  e0:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..
  f0:	b1 39 00 00 b1 39 00 00 b1 39 00 00 b1 39 00 00     .9...9...9...9..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <__data_size+0x72>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdb>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <__data_size+0x6a>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295
     208:	d204      	bcs.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <__data_size+0x6e>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295
     234:	d204      	bcs.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <__data_size+0x62>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295
     280:	d204      	bcs.n	28c <__data_size+0x2e>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <__data_size+0x2e>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <__data_size+0x66>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295
     2ac:	d204      	bcs.n	2b8 <__data_size+0x5a>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <__data_size+0x5a>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <__data_size+0x2e>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <__data_size+0x5a>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <__data_size+0x84>
     2d4:	b916      	cbnz	r6, 2dc <__data_size+0x7e>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <__data_size+0x78>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <__data_size+0x92>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <__data_size+0x9e>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <__data_size+0xa0>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295
     350:	d204      	bcs.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295
     37c:	d204      	bcs.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     39c:	d106      	bne.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <__data_size+0xa0>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <__data_size+0xa0>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>

000003d4 <main>:

#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(main);

int main(void)
{
     3d4:	b510      	push	{r4, lr}
	

	if (usb_enable(NULL)) {
     3d6:	2000      	movs	r0, #0
{
     3d8:	b08e      	sub	sp, #56	; 0x38
	if (usb_enable(NULL)) {
     3da:	f002 fd59 	bl	2e90 <usb_enable>
     3de:	4604      	mov	r4, r0
     3e0:	b110      	cbz	r0, 3e8 <CONFIG_LOG_FAILURE_REPORT_PERIOD>
		return 0;
     3e2:	2000      	movs	r0, #0
	// if(Initialize_LoRa(false) == 1){
	// 	Setup_LoRa_receive();
	// }


}
     3e4:	b00e      	add	sp, #56	; 0x38
     3e6:	bd10      	pop	{r4, pc}
	if(Initialize_LoRa(true) == 1){
     3e8:	2001      	movs	r0, #1
     3ea:	f000 f829 	bl	440 <Initialize_LoRa>
     3ee:	2800      	cmp	r0, #0
     3f0:	d0f8      	beq.n	3e4 <main+0x10>
		LOG_INF("Lora TX sucesfully initialized \n ");
     3f2:	4b0e      	ldr	r3, [pc, #56]	; (42c <CONFIG_FLASH_SIZE+0x2c>)
     3f4:	930d      	str	r3, [sp, #52]	; 0x34
     3f6:	2302      	movs	r3, #2
     3f8:	930c      	str	r3, [sp, #48]	; 0x30
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     3fa:	480d      	ldr	r0, [pc, #52]	; (430 <CONFIG_FLASH_SIZE+0x30>)
     3fc:	4623      	mov	r3, r4
     3fe:	aa0c      	add	r2, sp, #48	; 0x30
     400:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     404:	f001 fbe2 	bl	1bcc <z_impl_z_log_msg_static_create>
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     408:	2200      	movs	r2, #0
     40a:	2300      	movs	r3, #0
     40c:	e9cd 2306 	strd	r2, r3, [sp, #24]
     410:	2305      	movs	r3, #5
     412:	e9cd 4302 	strd	r4, r3, [sp, #8]
     416:	e9cd 4400 	strd	r4, r4, [sp]
     41a:	4b06      	ldr	r3, [pc, #24]	; (434 <CONFIG_FLASH_SIZE+0x34>)
     41c:	4906      	ldr	r1, [pc, #24]	; (438 <CONFIG_FLASH_SIZE+0x38>)
     41e:	9404      	str	r4, [sp, #16]
     420:	f44f 6280 	mov.w	r2, #1024	; 0x400
     424:	4805      	ldr	r0, [pc, #20]	; (43c <CONFIG_FLASH_SIZE+0x3c>)
     426:	f00a fea9 	bl	b17c <z_impl_k_thread_create>
}
     42a:	e7db      	b.n	3e4 <main+0x10>
     42c:	0000f5a8 	.word	0x0000f5a8
     430:	0000eff0 	.word	0x0000eff0
     434:	000004ed 	.word	0x000004ed
     438:	20002980 	.word	0x20002980
     43c:	20000438 	.word	0x20000438

00000440 <Initialize_LoRa>:
const struct device *const lora_dev = DEVICE_DT_GET(DEFAULT_RADIO_NODE);


// mode 0 rx
// mode 1 tx
bool Initialize_LoRa(bool mode){
     440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     444:	4607      	mov	r7, r0
     446:	b08a      	sub	sp, #40	; 0x28
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     448:	4e22      	ldr	r6, [pc, #136]	; (4d4 <Initialize_LoRa+0x94>)
     44a:	4630      	mov	r0, r6
     44c:	f00d ff7b 	bl	e346 <z_device_is_ready>
     450:	2502      	movs	r5, #2

	struct lora_modem_config config;
	int ret;

	if (!device_is_ready(lora_dev)) {
     452:	4604      	mov	r4, r0
     454:	b970      	cbnz	r0, 474 <Initialize_LoRa+0x34>
		LOG_ERR("LoRa device is not ready\n");
     456:	4b20      	ldr	r3, [pc, #128]	; (4d8 <Initialize_LoRa+0x98>)
     458:	e9cd 5308 	strd	r5, r3, [sp, #32]
     45c:	4603      	mov	r3, r0
     45e:	481f      	ldr	r0, [pc, #124]	; (4dc <Initialize_LoRa+0x9c>)
     460:	aa08      	add	r2, sp, #32
     462:	f44f 5182 	mov.w	r1, #4160	; 0x1040
        return 0;
     466:	2400      	movs	r4, #0
     468:	f001 fbb0 	bl	1bcc <z_impl_z_log_msg_static_create>
	if (ret < 0) {
		LOG_ERR("LoRa config failed\n");
        return 0;
	}
    return 1;
}
     46c:	4620      	mov	r0, r4
     46e:	b00a      	add	sp, #40	; 0x28
     470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("LoRa device is ready\n");
     474:	4b1a      	ldr	r3, [pc, #104]	; (4e0 <Initialize_LoRa+0xa0>)
     476:	e9cd 5308 	strd	r5, r3, [sp, #32]
     47a:	4818      	ldr	r0, [pc, #96]	; (4dc <Initialize_LoRa+0x9c>)
     47c:	2300      	movs	r3, #0
     47e:	aa08      	add	r2, sp, #32
     480:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     484:	f001 fba2 	bl	1bcc <z_impl_z_log_msg_static_create>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     488:	2100      	movs	r1, #0
     48a:	f641 109a 	movw	r0, #6554	; 0x199a
     48e:	f00b fc83 	bl	bd98 <z_impl_k_sleep>
	config.preamble_len = 8;
     492:	2308      	movs	r3, #8
     494:	f8ad 3008 	strh.w	r3, [sp, #8]
	config.frequency = 433000000;
     498:	4b12      	ldr	r3, [pc, #72]	; (4e4 <Initialize_LoRa+0xa4>)
     49a:	9300      	str	r3, [sp, #0]
	config.bandwidth = BW_125_KHZ;
     49c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
     4a0:	f8ad 3004 	strh.w	r3, [sp, #4]
	config.coding_rate = CR_4_5;
     4a4:	2301      	movs	r3, #1
     4a6:	f88d 3006 	strb.w	r3, [sp, #6]
	config.tx_power = 4;
     4aa:	2304      	movs	r3, #4
     4ac:	f88d 300a 	strb.w	r3, [sp, #10]
	config.iq_inverted = false;
     4b0:	f04f 0800 	mov.w	r8, #0
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
     4b4:	68b3      	ldr	r3, [r6, #8]
     4b6:	f8ad 800c 	strh.w	r8, [sp, #12]
	config.tx = mode;
     4ba:	f88d 700b 	strb.w	r7, [sp, #11]
     4be:	681b      	ldr	r3, [r3, #0]
     4c0:	4669      	mov	r1, sp
     4c2:	4630      	mov	r0, r6
     4c4:	4798      	blx	r3
	if (ret < 0) {
     4c6:	4540      	cmp	r0, r8
     4c8:	dad0      	bge.n	46c <Initialize_LoRa+0x2c>
		LOG_ERR("LoRa config failed\n");
     4ca:	4b07      	ldr	r3, [pc, #28]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     4cc:	e9cd 5308 	strd	r5, r3, [sp, #32]
     4d0:	4643      	mov	r3, r8
     4d2:	e7c4      	b.n	45e <Initialize_LoRa+0x1e>
     4d4:	0000edb4 	.word	0x0000edb4
     4d8:	0000f5cf 	.word	0x0000f5cf
     4dc:	0000efe8 	.word	0x0000efe8
     4e0:	0000f5e9 	.word	0x0000f5e9
     4e4:	19cf0e40 	.word	0x19cf0e40
     4e8:	0000f5ff 	.word	0x0000f5ff

000004ec <Setup_LoRa_send_thread>:



void Setup_LoRa_send_thread(void *param)
{
     4ec:	b530      	push	{r4, r5, lr}
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
     4ee:	4b12      	ldr	r3, [pc, #72]	; (538 <Setup_LoRa_send_thread+0x4c>)
     4f0:	4d12      	ldr	r5, [pc, #72]	; (53c <Setup_LoRa_send_thread+0x50>)
     4f2:	689c      	ldr	r4, [r3, #8]
     4f4:	b087      	sub	sp, #28
     4f6:	6863      	ldr	r3, [r4, #4]
     4f8:	480f      	ldr	r0, [pc, #60]	; (538 <Setup_LoRa_send_thread+0x4c>)
     4fa:	220a      	movs	r2, #10
     4fc:	4629      	mov	r1, r5
     4fe:	4798      	blx	r3
    int ret;
	while (1) {
		ret = lora_send(lora_dev, data, MAX_DATA_LEN);
		if (ret < 0) {
     500:	2800      	cmp	r0, #0
     502:	f04f 0302 	mov.w	r3, #2
     506:	da0f      	bge.n	528 <Setup_LoRa_send_thread+0x3c>
			LOG_WRN("LoRa send failed, try again in 5 seconds \n ");
     508:	4a0d      	ldr	r2, [pc, #52]	; (540 <Setup_LoRa_send_thread+0x54>)
     50a:	e9cd 3204 	strd	r3, r2, [sp, #16]
     50e:	2300      	movs	r3, #0
     510:	aa04      	add	r2, sp, #16
     512:	f44f 5184 	mov.w	r1, #4224	; 0x1080
     516:	480b      	ldr	r0, [pc, #44]	; (544 <Setup_LoRa_send_thread+0x58>)
     518:	f001 fb58 	bl	1bcc <z_impl_z_log_msg_static_create>
     51c:	2100      	movs	r1, #0
     51e:	f44f 3020 	mov.w	r0, #163840	; 0x28000
     522:	f00b fc39 	bl	bd98 <z_impl_k_sleep>
	while (1) {
     526:	e7e6      	b.n	4f6 <Setup_LoRa_send_thread+0xa>
		}
		else{
			LOG_INF("Data sent! \n ");
     528:	4a07      	ldr	r2, [pc, #28]	; (548 <Setup_LoRa_send_thread+0x5c>)
     52a:	e9cd 3204 	strd	r3, r2, [sp, #16]
     52e:	2300      	movs	r3, #0
     530:	aa04      	add	r2, sp, #16
     532:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     536:	e7ee      	b.n	516 <Setup_LoRa_send_thread+0x2a>
     538:	0000edb4 	.word	0x0000edb4
     53c:	20000254 	.word	0x20000254
     540:	0000f613 	.word	0x0000f613
     544:	0000efe8 	.word	0x0000efe8
     548:	0000f63f 	.word	0x0000f63f

0000054c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     550:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     552:	0784      	lsls	r4, r0, #30
{
     554:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     556:	f002 0304 	and.w	r3, r2, #4
     55a:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     55c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
     560:	f103 0301 	add.w	r3, r3, #1
     564:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
     568:	9203      	str	r2, [sp, #12]
     56a:	4605      	mov	r5, r0
     56c:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     56e:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
     570:	f040 81be 	bne.w	8f0 <__z_interrupt_stack_SIZEOF+0xb0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     574:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     576:	b130      	cbz	r0, 586 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     578:	2907      	cmp	r1, #7
     57a:	d809      	bhi.n	590 <cbvprintf_package+0x44>
		return -ENOSPC;
     57c:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     580:	b011      	add	sp, #68	; 0x44
     582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     586:	f001 0607 	and.w	r6, r1, #7
     58a:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     58c:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
     590:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     592:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
     596:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
     598:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     59c:	f04f 33ff 	mov.w	r3, #4294967295
     5a0:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     5a2:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     5a6:	464f      	mov	r7, r9
	bool parsing = false;
     5a8:	46cb      	mov	fp, r9
	size = sizeof(char *);
     5aa:	4653      	mov	r3, sl
			if (buf0 != NULL) {
     5ac:	b10d      	cbz	r5, 5b2 <cbvprintf_package+0x66>
				*(const char **)buf = s;
     5ae:	9a00      	ldr	r2, [sp, #0]
     5b0:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     5b2:	9805      	ldr	r0, [sp, #20]
     5b4:	2800      	cmp	r0, #0
     5b6:	f300 80eb 	bgt.w	790 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     5ba:	489a      	ldr	r0, [pc, #616]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     5bc:	9a00      	ldr	r2, [sp, #0]
     5be:	4282      	cmp	r2, r0
     5c0:	d303      	bcc.n	5ca <cbvprintf_package+0x7e>
     5c2:	4899      	ldr	r0, [pc, #612]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     5c4:	4282      	cmp	r2, r0
     5c6:	f0c0 80e3 	bcc.w	790 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     5ca:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     5cc:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     5d0:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     5d2:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     5d6:	f100 8106 	bmi.w	7e6 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     5da:	2f0f      	cmp	r7, #15
     5dc:	f200 80b4 	bhi.w	748 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     5e0:	2d00      	cmp	r5, #0
     5e2:	f000 8108 	beq.w	7f6 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
     5e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
     5ea:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
     5ee:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     5f0:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     5f4:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
     5f8:	9804      	ldr	r0, [sp, #16]
     5fa:	3001      	adds	r0, #1
     5fc:	9004      	str	r0, [sp, #16]
     5fe:	e0ea      	b.n	7d6 <cbvprintf_package+0x28a>
			switch (*fmt) {
     600:	287a      	cmp	r0, #122	; 0x7a
     602:	d860      	bhi.n	6c6 <cbvprintf_package+0x17a>
     604:	284b      	cmp	r0, #75	; 0x4b
     606:	d80e      	bhi.n	626 <cbvprintf_package+0xda>
     608:	2847      	cmp	r0, #71	; 0x47
     60a:	d85c      	bhi.n	6c6 <cbvprintf_package+0x17a>
     60c:	2829      	cmp	r0, #41	; 0x29
     60e:	d82f      	bhi.n	670 <cbvprintf_package+0x124>
     610:	2825      	cmp	r0, #37	; 0x25
     612:	d055      	beq.n	6c0 <cbvprintf_package+0x174>
     614:	d857      	bhi.n	6c6 <cbvprintf_package+0x17a>
     616:	2820      	cmp	r0, #32
     618:	d07d      	beq.n	716 <cbvprintf_package+0x1ca>
     61a:	3823      	subs	r0, #35	; 0x23
     61c:	f1d0 0b00 	rsbs	fp, r0, #0
     620:	eb4b 0b00 	adc.w	fp, fp, r0
     624:	e077      	b.n	716 <cbvprintf_package+0x1ca>
     626:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     62a:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     62e:	d84a      	bhi.n	6c6 <cbvprintf_package+0x17a>
     630:	e8df f00c 	tbb	[pc, ip]
     634:	49494971 	.word	0x49494971
     638:	49494949 	.word	0x49494949
     63c:	49494949 	.word	0x49494949
     640:	4949494c 	.word	0x4949494c
     644:	49494949 	.word	0x49494949
     648:	4c495a49 	.word	0x4c495a49
     64c:	5a5a5a4c 	.word	0x5a5a5a4c
     650:	496e4c71 	.word	0x496e4c71
     654:	4c184971 	.word	0x4c184971
     658:	83494918 	.word	0x83494918
     65c:	49494c80 	.word	0x49494c80
     660:	494c      	.short	0x494c
     662:	80          	.byte	0x80
     663:	00          	.byte	0x00
     664:	2000      	movs	r0, #0
     666:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
     66a:	f04f 0a04 	mov.w	sl, #4
     66e:	e039      	b.n	6e4 <cbvprintf_package+0x198>
			switch (*fmt) {
     670:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     674:	fa5f fc8c 	uxtb.w	ip, ip
     678:	2201      	movs	r2, #1
     67a:	fa02 fc0c 	lsl.w	ip, r2, ip
     67e:	ea1c 0f0e 	tst.w	ip, lr
     682:	d148      	bne.n	716 <cbvprintf_package+0x1ca>
     684:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
     688:	d12e      	bne.n	6e8 <cbvprintf_package+0x19c>
     68a:	ea1c 0b02 	ands.w	fp, ip, r2
     68e:	d042      	beq.n	716 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
     690:	3c01      	subs	r4, #1
     692:	4454      	add	r4, sl
     694:	f1ca 0c00 	rsb	ip, sl, #0
     698:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     69c:	2d00      	cmp	r5, #0
     69e:	d061      	beq.n	764 <cbvprintf_package+0x218>
     6a0:	eba3 0c05 	sub.w	ip, r3, r5
     6a4:	44a4      	add	ip, r4
     6a6:	45b4      	cmp	ip, r6
     6a8:	f63f af68 	bhi.w	57c <cbvprintf_package+0x30>
		if (is_str_arg) {
     6ac:	2800      	cmp	r0, #0
     6ae:	d168      	bne.n	782 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     6b0:	2b04      	cmp	r3, #4
     6b2:	d147      	bne.n	744 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
     6b4:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
     6b8:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     6ba:	3404      	adds	r4, #4
     6bc:	2304      	movs	r3, #4
     6be:	e02a      	b.n	716 <cbvprintf_package+0x1ca>
				arg_idx--;
     6c0:	9a01      	ldr	r2, [sp, #4]
     6c2:	3a01      	subs	r2, #1
     6c4:	9201      	str	r2, [sp, #4]
				parsing = false;
     6c6:	f04f 0b00 	mov.w	fp, #0
				continue;
     6ca:	e024      	b.n	716 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
     6cc:	f811 0c01 	ldrb.w	r0, [r1, #-1]
     6d0:	286c      	cmp	r0, #108	; 0x6c
     6d2:	d134      	bne.n	73e <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
     6d4:	f811 3c02 	ldrb.w	r3, [r1, #-2]
     6d8:	2000      	movs	r0, #0
     6da:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
     6dc:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
     6de:	d1c4      	bne.n	66a <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
     6e0:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
     6e4:	4653      	mov	r3, sl
     6e6:	e7d3      	b.n	690 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
     6e8:	f108 0807 	add.w	r8, r8, #7
     6ec:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
     6f0:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
     6f2:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
     6f6:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
     6fa:	b135      	cbz	r5, 70a <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
     6fc:	9806      	ldr	r0, [sp, #24]
     6fe:	4420      	add	r0, r4
     700:	42b0      	cmp	r0, r6
     702:	f63f af3b 	bhi.w	57c <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
     706:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
     70a:	3408      	adds	r4, #8
				parsing = false;
     70c:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
     710:	f04f 0a08 	mov.w	sl, #8
     714:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
     716:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     71a:	2800      	cmp	r0, #0
     71c:	d078      	beq.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
			if (!parsing) {
     71e:	f1bb 0f00 	cmp.w	fp, #0
     722:	f47f af6d 	bne.w	600 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
     726:	2825      	cmp	r0, #37	; 0x25
     728:	d1f5      	bne.n	716 <cbvprintf_package+0x1ca>
					arg_idx++;
     72a:	9b01      	ldr	r3, [sp, #4]
     72c:	3301      	adds	r3, #1
     72e:	9301      	str	r3, [sp, #4]
					parsing = true;
     730:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
     734:	f04f 0a04 	mov.w	sl, #4
     738:	e7ec      	b.n	714 <cbvprintf_package+0x1c8>
			switch (*fmt) {
     73a:	4658      	mov	r0, fp
     73c:	e793      	b.n	666 <cbvprintf_package+0x11a>
     73e:	2000      	movs	r0, #0
				parsing = false;
     740:	4683      	mov	fp, r0
     742:	e7a5      	b.n	690 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
     744:	2b08      	cmp	r3, #8
     746:	d002      	beq.n	74e <cbvprintf_package+0x202>
					return -EINVAL;
     748:	f06f 0015 	mvn.w	r0, #21
     74c:	e718      	b.n	580 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
     74e:	f108 0807 	add.w	r8, r8, #7
     752:	f028 0807 	bic.w	r8, r8, #7
     756:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
     75a:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
     75e:	3408      	adds	r4, #8
     760:	2308      	movs	r3, #8
     762:	e7d8      	b.n	716 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
     764:	b968      	cbnz	r0, 782 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     766:	2b04      	cmp	r3, #4
     768:	d102      	bne.n	770 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
     76a:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
     76e:	e7a4      	b.n	6ba <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
     770:	2b08      	cmp	r3, #8
     772:	d1e9      	bne.n	748 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
     774:	f108 0807 	add.w	r8, r8, #7
     778:	f028 0807 	bic.w	r8, r8, #7
     77c:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
     780:	e7ed      	b.n	75e <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     782:	9a05      	ldr	r2, [sp, #20]
     784:	3a01      	subs	r2, #1
     786:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
     788:	f858 2b04 	ldr.w	r2, [r8], #4
     78c:	9200      	str	r2, [sp, #0]
     78e:	e70d      	b.n	5ac <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
     790:	9a03      	ldr	r2, [sp, #12]
     792:	0790      	lsls	r0, r2, #30
     794:	d520      	bpl.n	7d8 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     796:	eba4 0e05 	sub.w	lr, r4, r5
     79a:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     79e:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     7a2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     7a6:	d2cf      	bcs.n	748 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     7a8:	2f0f      	cmp	r7, #15
     7aa:	d8cd      	bhi.n	748 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     7ac:	b1f5      	cbz	r5, 7ec <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
     7ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
     7b2:	eb0d 0e02 	add.w	lr, sp, r2
     7b6:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
     7b8:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     7ba:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     7be:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
     7c2:	f1bc 0f00 	cmp.w	ip, #0
     7c6:	f43f af17 	beq.w	5f8 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     7ca:	f060 007f 	orn	r0, r0, #127	; 0x7f
     7ce:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
     7d2:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
     7d6:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
     7d8:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
     7dc:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
     7de:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
     7e0:	f64f 7eda 	movw	lr, #65498	; 0xffda
     7e4:	e797      	b.n	716 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7e6:	f04f 0c00 	mov.w	ip, #0
     7ea:	e7da      	b.n	7a2 <cbvprintf_package+0x256>
				} else if (is_ro) {
     7ec:	f1bc 0f00 	cmp.w	ip, #0
     7f0:	d001      	beq.n	7f6 <cbvprintf_package+0x2aa>
					len += 1;
     7f2:	3601      	adds	r6, #1
     7f4:	e7ef      	b.n	7d6 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
     7f6:	9802      	ldr	r0, [sp, #8]
					len += 2;
     7f8:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
     7fa:	2800      	cmp	r0, #0
     7fc:	d1eb      	bne.n	7d6 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
     7fe:	9800      	ldr	r0, [sp, #0]
     800:	e9cd 3106 	strd	r3, r1, [sp, #24]
     804:	f00c ff45 	bl	d692 <strlen>
     808:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
     80c:	4406      	add	r6, r0
     80e:	e7e2      	b.n	7d6 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
     810:	1b63      	subs	r3, r4, r5
     812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     816:	d297      	bcs.n	748 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
     818:	b945      	cbnz	r5, 82c <CONFIG_ISR_STACK_SIZE+0x2c>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     81a:	f1a6 0408 	sub.w	r4, r6, #8
     81e:	18e0      	adds	r0, r4, r3
     820:	e6ae      	b.n	580 <cbvprintf_package+0x34>
     822:	bf00      	nop
     824:	0000ec8c 	.word	0x0000ec8c
     828:	00010798 	.word	0x00010798
	if (rws_pos_en) {
     82c:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
     82e:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     830:	089b      	lsrs	r3, r3, #2
     832:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     834:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
     838:	b1c2      	cbz	r2, 86c <__z_interrupt_stack_SIZEOF+0x2c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     83a:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     83c:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
     840:	f1b9 0f00 	cmp.w	r9, #0
     844:	d005      	beq.n	852 <__z_interrupt_stack_SIZEOF+0x12>
     846:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     848:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
     84a:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
     84e:	4297      	cmp	r7, r2
     850:	d10e      	bne.n	870 <__z_interrupt_stack_SIZEOF+0x30>
		if (BUF_OFFSET + 1 + size > len) {
     852:	f1c5 0301 	rsb	r3, r5, #1
     856:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
     85a:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
     85e:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
     860:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
     864:	4557      	cmp	r7, sl
     866:	d112      	bne.n	88e <__z_interrupt_stack_SIZEOF+0x4e>
	return BUF_OFFSET;
     868:	1b60      	subs	r0, r4, r5
     86a:	e689      	b.n	580 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     86c:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
     86e:	e7e5      	b.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     870:	f810 3b01 	ldrb.w	r3, [r0], #1
     874:	0619      	lsls	r1, r3, #24
     876:	d508      	bpl.n	88a <__z_interrupt_stack_SIZEOF+0x4a>
			if (BUF_OFFSET + 1 > len) {
     878:	eb04 0e0c 	add.w	lr, r4, ip
     87c:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     87e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     882:	f63f ae7b 	bhi.w	57c <cbvprintf_package+0x30>
			*buf++ = pos;
     886:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
     88a:	3201      	adds	r2, #1
     88c:	e7df      	b.n	84e <__z_interrupt_stack_SIZEOF+0xe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     88e:	f1b9 0f00 	cmp.w	r9, #0
     892:	d003      	beq.n	89c <__z_interrupt_stack_SIZEOF+0x5c>
     894:	f998 2000 	ldrsb.w	r2, [r8]
     898:	2a00      	cmp	r2, #0
     89a:	db17      	blt.n	8cc <__z_interrupt_stack_SIZEOF+0x8c>
		if (rws_pos_en) {
     89c:	9b02      	ldr	r3, [sp, #8]
     89e:	b1d3      	cbz	r3, 8d6 <__z_interrupt_stack_SIZEOF+0x96>
			*buf++ = str_ptr_arg[i];
     8a0:	f81a 200b 	ldrb.w	r2, [sl, fp]
     8a4:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
     8a8:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
     8aa:	9b01      	ldr	r3, [sp, #4]
     8ac:	1898      	adds	r0, r3, r2
     8ae:	4420      	add	r0, r4
     8b0:	42b0      	cmp	r0, r6
     8b2:	f63f ae63 	bhi.w	57c <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
     8b6:	f898 0000 	ldrb.w	r0, [r8]
     8ba:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
     8be:	9900      	ldr	r1, [sp, #0]
     8c0:	9203      	str	r2, [sp, #12]
     8c2:	4620      	mov	r0, r4
     8c4:	f00c fef5 	bl	d6b2 <memcpy>
		buf += size;
     8c8:	9a03      	ldr	r2, [sp, #12]
     8ca:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     8cc:	f10a 0a01 	add.w	sl, sl, #1
     8d0:	f108 0801 	add.w	r8, r8, #1
     8d4:	e7c6      	b.n	864 <__z_interrupt_stack_SIZEOF+0x24>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     8d6:	f898 2000 	ldrb.w	r2, [r8]
     8da:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
     8de:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     8e0:	9b02      	ldr	r3, [sp, #8]
     8e2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     8e6:	9800      	ldr	r0, [sp, #0]
     8e8:	f00c fed3 	bl	d692 <strlen>
     8ec:	1c42      	adds	r2, r0, #1
     8ee:	e7dc      	b.n	8aa <__z_interrupt_stack_SIZEOF+0x6a>
		return -EFAULT;
     8f0:	f06f 000d 	mvn.w	r0, #13
     8f4:	e644      	b.n	580 <cbvprintf_package+0x34>
     8f6:	bf00      	nop

000008f8 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8fc:	b095      	sub	sp, #84	; 0x54
     8fe:	af00      	add	r7, sp, #0
     900:	4604      	mov	r4, r0
     902:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
     906:	61bb      	str	r3, [r7, #24]
     908:	f3cb 03c0 	ubfx	r3, fp, #3, #1
     90c:	627a      	str	r2, [r7, #36]	; 0x24
     90e:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     910:	6239      	str	r1, [r7, #32]
     912:	b951      	cbnz	r1, 92a <cbprintf_package_convert+0x32>
	buf += ros_nbr;
     914:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
     916:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
     918:	7880      	ldrb	r0, [r0, #2]
     91a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     91e:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
     920:	6a3b      	ldr	r3, [r7, #32]
     922:	429e      	cmp	r6, r3
     924:	d81a      	bhi.n	95c <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
     926:	1b03      	subs	r3, r0, r4
     928:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     92a:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     92e:	78e3      	ldrb	r3, [r4, #3]
     930:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
     932:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
     934:	f1ba 0f00 	cmp.w	sl, #0
     938:	d002      	beq.n	940 <cbprintf_package_convert+0x48>
     93a:	f01b 0f01 	tst.w	fp, #1
     93e:	d117      	bne.n	970 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
     940:	697b      	ldr	r3, [r7, #20]
     942:	bb5b      	cbnz	r3, 99c <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
     944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     946:	b11b      	cbz	r3, 950 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
     948:	69ba      	ldr	r2, [r7, #24]
     94a:	6a39      	ldr	r1, [r7, #32]
     94c:	4620      	mov	r0, r4
     94e:	4798      	blx	r3
		}

		return in_len;
     950:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     952:	4628      	mov	r0, r5
     954:	3754      	adds	r7, #84	; 0x54
     956:	46bd      	mov	sp, r7
     958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
     95c:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
     95e:	4628      	mov	r0, r5
     960:	f00c fe97 	bl	d692 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
     964:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
     966:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
     968:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
     96a:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
     96c:	623b      	str	r3, [r7, #32]
     96e:	e7d7      	b.n	920 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
     970:	f894 8000 	ldrb.w	r8, [r4]
     974:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     976:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
     97a:	ea4f 0288 	mov.w	r2, r8, lsl #2
     97e:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
     980:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
     984:	2b00      	cmp	r3, #0
     986:	f040 8101 	bne.w	b8c <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
     98a:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
     98c:	46c1      	mov	r9, r8
     98e:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
     992:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
     994:	454b      	cmp	r3, r9
     996:	d14e      	bne.n	a36 <cbprintf_package_convert+0x13e>
     998:	44d0      	add	r8, sl
     99a:	e013      	b.n	9c4 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
     99c:	f01b 0f02 	tst.w	fp, #2
     9a0:	d0d0      	beq.n	944 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
     9a2:	f894 8000 	ldrb.w	r8, [r4]
     9a6:	ea4f 0388 	mov.w	r3, r8, lsl #2
     9aa:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     9ac:	6863      	ldr	r3, [r4, #4]
     9ae:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
     9b2:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
     9b6:	2b00      	cmp	r3, #0
     9b8:	d178      	bne.n	aac <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
     9ba:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     9bc:	f1ba 0f00 	cmp.w	sl, #0
     9c0:	d14e      	bne.n	a60 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
     9c2:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
     9c4:	f01b 0f05 	tst.w	fp, #5
     9c8:	bf0c      	ite	eq
     9ca:	2302      	moveq	r3, #2
     9cc:	2301      	movne	r3, #1
     9ce:	627b      	str	r3, [r7, #36]	; 0x24
     9d0:	697b      	ldr	r3, [r7, #20]
     9d2:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     9d6:	f00b 0302 	and.w	r3, fp, #2
     9da:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
     9dc:	45d0      	cmp	r8, sl
     9de:	d0b8      	beq.n	952 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
     9e0:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
     9e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
     9e8:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
     9ec:	4bac      	ldr	r3, [pc, #688]	; (ca0 <cbprintf_package_convert+0x3a8>)
     9ee:	4599      	cmp	r9, r3
     9f0:	d302      	bcc.n	9f8 <cbprintf_package_convert+0x100>
     9f2:	4bac      	ldr	r3, [pc, #688]	; (ca4 <cbprintf_package_convert+0x3ac>)
     9f4:	4599      	cmp	r9, r3
     9f6:	d339      	bcc.n	a6c <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     9f8:	693b      	ldr	r3, [r7, #16]
     9fa:	2b00      	cmp	r3, #0
     9fc:	d043      	beq.n	a86 <cbprintf_package_convert+0x18e>
     9fe:	69f8      	ldr	r0, [r7, #28]
     a00:	f00b ff4f 	bl	c8a2 <is_ptr>
     a04:	2800      	cmp	r0, #0
     a06:	d03e      	beq.n	a86 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     a08:	46e9      	mov	r9, sp
     a0a:	b08a      	sub	sp, #40	; 0x28
     a0c:	466a      	mov	r2, sp
     a0e:	4ba6      	ldr	r3, [pc, #664]	; (ca8 <cbprintf_package_convert+0x3b0>)
     a10:	6153      	str	r3, [r2, #20]
     a12:	69fb      	ldr	r3, [r7, #28]
     a14:	e9c2 3106 	strd	r3, r1, [r2, #24]
     a18:	f44f 7300 	mov.w	r3, #512	; 0x200
     a1c:	8413      	strh	r3, [r2, #32]
     a1e:	4ba3      	ldr	r3, [pc, #652]	; (cac <cbprintf_package_convert+0x3b4>)
     a20:	f842 3f10 	str.w	r3, [r2, #16]!
     a24:	48a2      	ldr	r0, [pc, #648]	; (cb0 <cbprintf_package_convert+0x3b8>)
     a26:	2300      	movs	r3, #0
     a28:	f44f 5112 	mov.w	r1, #9344	; 0x2480
     a2c:	f001 f8ce 	bl	1bcc <z_impl_z_log_msg_static_create>
				out_len -= 2;
     a30:	3d02      	subs	r5, #2
     a32:	46cd      	mov	sp, r9
				continue;
     a34:	e7d2      	b.n	9dc <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
     a36:	f819 2b01 	ldrb.w	r2, [r9], #1
     a3a:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     a3c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
     a40:	f00c fe27 	bl	d692 <strlen>
				if (strl && strl_cnt < strl_len) {
     a44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
     a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     a48:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     a4a:	b13a      	cbz	r2, a5c <cbprintf_package_convert+0x164>
     a4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
     a50:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
     a52:	bf3e      	ittt	cc
     a54:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
     a56:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
     a5a:	3601      	addcc	r6, #1
				out_len += len;
     a5c:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
     a5e:	e799      	b.n	994 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     a60:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
     a64:	bf1c      	itt	ne
     a66:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
     a68:	44d0      	addne	r8, sl
     a6a:	e7ab      	b.n	9c4 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     a6c:	693b      	ldr	r3, [r7, #16]
     a6e:	b123      	cbz	r3, a7a <cbprintf_package_convert+0x182>
     a70:	69f8      	ldr	r0, [r7, #28]
     a72:	f00b ff16 	bl	c8a2 <is_ptr>
     a76:	2800      	cmp	r0, #0
     a78:	d1c6      	bne.n	a08 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     a7a:	f01b 0f01 	tst.w	fp, #1
     a7e:	d105      	bne.n	a8c <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
     a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a82:	1aed      	subs	r5, r5, r3
     a84:	e7aa      	b.n	9dc <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     a86:	6a3b      	ldr	r3, [r7, #32]
     a88:	2b00      	cmp	r3, #0
     a8a:	d0a7      	beq.n	9dc <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
     a8c:	4648      	mov	r0, r9
     a8e:	f00c fe00 	bl	d692 <strlen>
				if (strl && strl_cnt < strl_len) {
     a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     a94:	b143      	cbz	r3, aa8 <cbprintf_package_convert+0x1b0>
     a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     a9a:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
     a9c:	bf3f      	itttt	cc
     a9e:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
     aa0:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
     aa2:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
     aa6:	3601      	addcc	r6, #1
				out_len += (len - 1);
     aa8:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
     aaa:	e797      	b.n	9dc <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     aac:	f1ba 0f00 	cmp.w	sl, #0
     ab0:	d071      	beq.n	b96 <cbprintf_package_convert+0x29e>
     ab2:	f01b 0604 	ands.w	r6, fp, #4
     ab6:	d071      	beq.n	b9c <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
     ab8:	46d1      	mov	r9, sl
		scpy_cnt = 0;
     aba:	2600      	movs	r6, #0
		dst = keep_str_pos;
     abc:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
     ac0:	4652      	mov	r2, sl
     ac2:	4641      	mov	r1, r8
     ac4:	f00c fdf5 	bl	d6b2 <memcpy>
	str_pos += ros_nbr;
     ac8:	697b      	ldr	r3, [r7, #20]
     aca:	005b      	lsls	r3, r3, #1
     acc:	60bb      	str	r3, [r7, #8]
     ace:	697b      	ldr	r3, [r7, #20]
     ad0:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
     ad2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
     ad6:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     ad8:	f00b 0302 	and.w	r3, fp, #2
     adc:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
     ade:	697b      	ldr	r3, [r7, #20]
     ae0:	4598      	cmp	r8, r3
     ae2:	d15d      	bne.n	ba0 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
     ae4:	7823      	ldrb	r3, [r4, #0]
     ae6:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     ae8:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     aea:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     aee:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     af2:	bf0c      	ite	eq
     af4:	ea4f 0159 	moveq.w	r1, r9, lsr #1
     af8:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     afa:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     afe:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     b00:	f040 809d 	bne.w	c3e <cbprintf_package_convert+0x346>
     b04:	f01b 0f04 	tst.w	fp, #4
     b08:	bf14      	ite	ne
     b0a:	4648      	movne	r0, r9
     b0c:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     b0e:	f894 b002 	ldrb.w	fp, [r4, #2]
     b12:	f894 8003 	ldrb.w	r8, [r4, #3]
     b16:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
     b18:	7062      	strb	r2, [r4, #1]
     b1a:	70a0      	strb	r0, [r4, #2]
     b1c:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
     b1e:	69ba      	ldr	r2, [r7, #24]
     b20:	68f9      	ldr	r1, [r7, #12]
     b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b24:	4620      	mov	r0, r4
     b26:	4798      	blx	r3
	if (rv < 0) {
     b28:	1e05      	subs	r5, r0, #0
     b2a:	f6ff af12 	blt.w	952 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
     b2e:	69fb      	ldr	r3, [r7, #28]
     b30:	7023      	strb	r3, [r4, #0]
     b32:	693b      	ldr	r3, [r7, #16]
     b34:	7063      	strb	r3, [r4, #1]
     b36:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     b3a:	69ba      	ldr	r2, [r7, #24]
     b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
     b3e:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     b42:	4649      	mov	r1, r9
     b44:	f107 0040 	add.w	r0, r7, #64	; 0x40
     b48:	4798      	blx	r3
	if (rv < 0) {
     b4a:	f1b0 0800 	subs.w	r8, r0, #0
     b4e:	f2c0 80a3 	blt.w	c98 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     b52:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
     b54:	69ba      	ldr	r2, [r7, #24]
     b56:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     b58:	eba3 010a 	sub.w	r1, r3, sl
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
     b60:	68bb      	ldr	r3, [r7, #8]
     b62:	1ac9      	subs	r1, r1, r3
     b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b66:	4798      	blx	r3
	if (rv < 0) {
     b68:	2800      	cmp	r0, #0
     b6a:	f2c0 8097 	blt.w	c9c <cbprintf_package_convert+0x3a4>
	out_len += rv;
     b6e:	44a8      	add	r8, r5
	out_len += rv;
     b70:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     b74:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
     b78:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     b7c:	45b3      	cmp	fp, r6
     b7e:	d360      	bcc.n	c42 <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
     b80:	2100      	movs	r1, #0
     b82:	69ba      	ldr	r2, [r7, #24]
     b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b86:	4608      	mov	r0, r1
     b88:	4798      	blx	r3
	return out_len;
     b8a:	e6e2      	b.n	952 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
     b8c:	f04f 0900 	mov.w	r9, #0
     b90:	f107 0030 	add.w	r0, r7, #48	; 0x30
     b94:	e794      	b.n	ac0 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
     b96:	4656      	mov	r6, sl
		keep_cnt = 0;
     b98:	46d1      	mov	r9, sl
     b9a:	e795      	b.n	ac8 <cbprintf_package_convert+0x1d0>
     b9c:	46b1      	mov	r9, r6
     b9e:	e793      	b.n	ac8 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
     ba0:	f818 1b02 	ldrb.w	r1, [r8], #2
     ba4:	4a3e      	ldr	r2, [pc, #248]	; (ca0 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
     ba6:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
     baa:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
     bae:	4293      	cmp	r3, r2
     bb0:	d302      	bcc.n	bb8 <cbprintf_package_convert+0x2c0>
     bb2:	4a3c      	ldr	r2, [pc, #240]	; (ca4 <cbprintf_package_convert+0x3ac>)
     bb4:	4293      	cmp	r3, r2
     bb6:	d31c      	bcc.n	bf2 <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     bb8:	693b      	ldr	r3, [r7, #16]
     bba:	b123      	cbz	r3, bc6 <cbprintf_package_convert+0x2ce>
     bbc:	69f8      	ldr	r0, [r7, #28]
     bbe:	f00b fe70 	bl	c8a2 <is_ptr>
     bc2:	2800      	cmp	r0, #0
     bc4:	d18b      	bne.n	ade <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     bc6:	687b      	ldr	r3, [r7, #4]
     bc8:	b9f3      	cbnz	r3, c08 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
     bca:	f109 0228 	add.w	r2, r9, #40	; 0x28
     bce:	f107 0028 	add.w	r0, r7, #40	; 0x28
     bd2:	4402      	add	r2, r0
     bd4:	f109 0301 	add.w	r3, r9, #1
     bd8:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
     bdc:	f107 0250 	add.w	r2, r7, #80	; 0x50
     be0:	fa52 f383 	uxtab	r3, r2, r3
     be4:	f109 0902 	add.w	r9, r9, #2
     be8:	fa5f f989 	uxtb.w	r9, r9
     bec:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
     bf0:	e775      	b.n	ade <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     bf2:	693b      	ldr	r3, [r7, #16]
     bf4:	b12b      	cbz	r3, c02 <cbprintf_package_convert+0x30a>
     bf6:	69f8      	ldr	r0, [r7, #28]
     bf8:	f00b fe53 	bl	c8a2 <is_ptr>
     bfc:	2800      	cmp	r0, #0
     bfe:	f47f af6e 	bne.w	ade <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     c02:	f01b 0f01 	tst.w	fp, #1
     c06:	d009      	beq.n	c1c <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
     c08:	f106 0228 	add.w	r2, r6, #40	; 0x28
     c0c:	f107 0128 	add.w	r1, r7, #40	; 0x28
     c10:	1c73      	adds	r3, r6, #1
     c12:	1856      	adds	r6, r2, r1
     c14:	f806 5c20 	strb.w	r5, [r6, #-32]
     c18:	b2de      	uxtb	r6, r3
     c1a:	e760      	b.n	ade <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     c1c:	f01b 0f04 	tst.w	fp, #4
     c20:	f43f af5d 	beq.w	ade <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
     c24:	f109 0228 	add.w	r2, r9, #40	; 0x28
     c28:	f107 0128 	add.w	r1, r7, #40	; 0x28
     c2c:	f109 0301 	add.w	r3, r9, #1
     c30:	eb02 0901 	add.w	r9, r2, r1
     c34:	f809 5c10 	strb.w	r5, [r9, #-16]
     c38:	fa5f f983 	uxtb.w	r9, r3
     c3c:	e74f      	b.n	ade <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     c3e:	2000      	movs	r0, #0
     c40:	e765      	b.n	b0e <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
     c42:	f81b 300a 	ldrb.w	r3, [fp, sl]
     c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
     c4a:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     c4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     c50:	b1fb      	cbz	r3, c92 <cbprintf_package_convert+0x39a>
     c52:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
     c56:	69ba      	ldr	r2, [r7, #24]
     c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c5a:	2101      	movs	r1, #1
     c5c:	f107 002f 	add.w	r0, r7, #47	; 0x2f
     c60:	4798      	blx	r3
		if (rv < 0) {
     c62:	2800      	cmp	r0, #0
     c64:	db1a      	blt.n	c9c <cbprintf_package_convert+0x3a4>
		out_len += rv;
     c66:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
     c68:	f1b8 0f00 	cmp.w	r8, #0
     c6c:	d106      	bne.n	c7c <cbprintf_package_convert+0x384>
     c6e:	4648      	mov	r0, r9
     c70:	f00c fd0f 	bl	d692 <strlen>
     c74:	f100 0801 	add.w	r8, r0, #1
     c78:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
     c7c:	69ba      	ldr	r2, [r7, #24]
     c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c80:	4641      	mov	r1, r8
     c82:	4648      	mov	r0, r9
     c84:	4798      	blx	r3
		if (rv < 0) {
     c86:	2800      	cmp	r0, #0
     c88:	db08      	blt.n	c9c <cbprintf_package_convert+0x3a4>
		out_len += rv;
     c8a:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     c8c:	f10b 0b01 	add.w	fp, fp, #1
     c90:	e774      	b.n	b7c <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
     c92:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
     c96:	e7de      	b.n	c56 <cbprintf_package_convert+0x35e>
     c98:	4645      	mov	r5, r8
     c9a:	e65a      	b.n	952 <cbprintf_package_convert+0x5a>
     c9c:	4605      	mov	r5, r0
     c9e:	e658      	b.n	952 <cbprintf_package_convert+0x5a>
     ca0:	0000ec8c 	.word	0x0000ec8c
     ca4:	00010798 	.word	0x00010798
     ca8:	0000f657 	.word	0x0000f657
     cac:	01000004 	.word	0x01000004
     cb0:	0000efb8 	.word	0x0000efb8

00000cb4 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
     cb4:	4b01      	ldr	r3, [pc, #4]	; (cbc <__printk_hook_install+0x8>)
     cb6:	6018      	str	r0, [r3, #0]
}
     cb8:	4770      	bx	lr
     cba:	bf00      	nop
     cbc:	20000000 	.word	0x20000000

00000cc0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     cc0:	b530      	push	{r4, r5, lr}
     cc2:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
     cc4:	2500      	movs	r5, #0
     cc6:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
     cca:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     ccc:	9500      	str	r5, [sp, #0]
     cce:	a903      	add	r1, sp, #12
     cd0:	4805      	ldr	r0, [pc, #20]	; (ce8 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
     cd2:	9505      	str	r5, [sp, #20]
     cd4:	f000 f918 	bl	f08 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     cd8:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
     cdc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     cde:	bfb8      	it	lt
     ce0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     ce2:	b007      	add	sp, #28
     ce4:	bd30      	pop	{r4, r5, pc}
     ce6:	bf00      	nop
     ce8:	0000c8f1 	.word	0x0000c8f1

00000cec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cf0:	8b05      	ldrh	r5, [r0, #24]
{
     cf2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     cf4:	0728      	lsls	r0, r5, #28
{
     cf6:	4690      	mov	r8, r2
	if (processing) {
     cf8:	d411      	bmi.n	d1e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     cfa:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cfc:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     d00:	f040 80cd 	bne.w	e9e <process_event+0x1b2>
			evt = process_recheck(mgr);
     d04:	4620      	mov	r0, r4
     d06:	f00c f80a 	bl	cd1e <process_recheck>
		}

		if (evt == EVT_NOP) {
     d0a:	b178      	cbz	r0, d2c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     d0c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d0e:	8b21      	ldrh	r1, [r4, #24]
     d10:	2804      	cmp	r0, #4
     d12:	d811      	bhi.n	d38 <process_event+0x4c>
     d14:	e8df f000 	tbb	[pc, r0]
     d18:	856d10c3 	.word	0x856d10c3
     d1c:	95          	.byte	0x95
     d1d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     d1e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     d20:	bf0c      	ite	eq
     d22:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     d26:	f045 0520 	orrne.w	r5, r5, #32
     d2a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d2c:	f388 8811 	msr	BASEPRI, r8
     d30:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d38:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d3c:	45aa      	cmp	sl, r5
     d3e:	f000 80a6 	beq.w	e8e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     d42:	2700      	movs	r7, #0
     d44:	46b9      	mov	r9, r7
     d46:	463e      	mov	r6, r7
     d48:	68a3      	ldr	r3, [r4, #8]
     d4a:	2b00      	cmp	r3, #0
     d4c:	f000 80bd 	beq.w	eca <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d50:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     d54:	8321      	strh	r1, [r4, #24]
     d56:	f388 8811 	msr	BASEPRI, r8
     d5a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     d5e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     d60:	2900      	cmp	r1, #0
     d62:	f000 80bb 	beq.w	edc <process_event+0x1f0>
	return node->next;
     d66:	680d      	ldr	r5, [r1, #0]
     d68:	2900      	cmp	r1, #0
     d6a:	f000 80b7 	beq.w	edc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     d6e:	f8d1 8004 	ldr.w	r8, [r1, #4]
     d72:	4633      	mov	r3, r6
     d74:	4652      	mov	r2, sl
     d76:	4620      	mov	r0, r4
     d78:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     d7a:	2d00      	cmp	r5, #0
     d7c:	d076      	beq.n	e6c <process_event+0x180>
     d7e:	682b      	ldr	r3, [r5, #0]
     d80:	4629      	mov	r1, r5
     d82:	461d      	mov	r5, r3
     d84:	e7f0      	b.n	d68 <process_event+0x7c>
     d86:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     d8a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     d8c:	2a01      	cmp	r2, #1
     d8e:	d81b      	bhi.n	dc8 <process_event+0xdc>
	list->head = NULL;
     d90:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d92:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     d96:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     d98:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d9a:	b289      	uxth	r1, r1
	list->tail = NULL;
     d9c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     da0:	d109      	bne.n	db6 <process_event+0xca>
     da2:	463b      	mov	r3, r7
     da4:	e003      	b.n	dae <process_event+0xc2>
				mgr->refs += 1U;
     da6:	8b62      	ldrh	r2, [r4, #26]
     da8:	3201      	adds	r2, #1
     daa:	8362      	strh	r2, [r4, #26]
	return node->next;
     dac:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     dae:	2b00      	cmp	r3, #0
     db0:	d1f9      	bne.n	da6 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     db2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     db6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     db8:	4620      	mov	r0, r4
     dba:	f00b ffb0 	bl	cd1e <process_recheck>
     dbe:	2800      	cmp	r0, #0
     dc0:	d07b      	beq.n	eba <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     dc2:	f041 0120 	orr.w	r1, r1, #32
     dc6:	e077      	b.n	eb8 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     dc8:	2b04      	cmp	r3, #4
     dca:	d10a      	bne.n	de2 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dcc:	f021 0107 	bic.w	r1, r1, #7
     dd0:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     dd2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     dd4:	4620      	mov	r0, r4
     dd6:	f00b ffa2 	bl	cd1e <process_recheck>
     dda:	b110      	cbz	r0, de2 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     ddc:	f041 0120 	orr.w	r1, r1, #32
     de0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     de2:	8b21      	ldrh	r1, [r4, #24]
     de4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     de8:	45aa      	cmp	sl, r5
     dea:	d050      	beq.n	e8e <process_event+0x1a2>
     dec:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     dee:	46b9      	mov	r9, r7
     df0:	e7aa      	b.n	d48 <process_event+0x5c>
			transit = mgr->transitions->start;
     df2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     df4:	f021 0107 	bic.w	r1, r1, #7
     df8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     dfc:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     dfe:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     e02:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     e04:	d12d      	bne.n	e62 <process_event+0x176>
		    || (transit != NULL)) {
     e06:	f1b9 0f00 	cmp.w	r9, #0
     e0a:	d040      	beq.n	e8e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     e0c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     e10:	8321      	strh	r1, [r4, #24]
     e12:	f388 8811 	msr	BASEPRI, r8
     e16:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     e1a:	493a      	ldr	r1, [pc, #232]	; (f04 <process_event+0x218>)
     e1c:	4620      	mov	r0, r4
     e1e:	47c8      	blx	r9
     e20:	e029      	b.n	e76 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e22:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     e26:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e28:	f041 0104 	orr.w	r1, r1, #4
     e2c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     e2e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     e30:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     e34:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     e36:	d0e6      	beq.n	e06 <process_event+0x11a>
     e38:	2700      	movs	r7, #0
		res = 0;
     e3a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e3c:	f04f 0a04 	mov.w	sl, #4
     e40:	e782      	b.n	d48 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e42:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     e46:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e48:	f041 0105 	orr.w	r1, r1, #5
     e4c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     e4e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     e50:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     e54:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     e56:	d0d6      	beq.n	e06 <process_event+0x11a>
     e58:	2700      	movs	r7, #0
		res = 0;
     e5a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e5c:	f04f 0a05 	mov.w	sl, #5
     e60:	e772      	b.n	d48 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     e62:	2700      	movs	r7, #0
		res = 0;
     e64:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e66:	f04f 0a06 	mov.w	sl, #6
     e6a:	e76d      	b.n	d48 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e6c:	462b      	mov	r3, r5
     e6e:	e787      	b.n	d80 <process_event+0x94>
			if (transit != NULL) {
     e70:	f1b9 0f00 	cmp.w	r9, #0
     e74:	d1d1      	bne.n	e1a <process_event+0x12e>
	__asm__ volatile(
     e76:	f04f 0320 	mov.w	r3, #32
     e7a:	f3ef 8811 	mrs	r8, BASEPRI
     e7e:	f383 8812 	msr	BASEPRI_MAX, r3
     e82:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     e86:	8b23      	ldrh	r3, [r4, #24]
     e88:	f023 0308 	bic.w	r3, r3, #8
     e8c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     e8e:	8b25      	ldrh	r5, [r4, #24]
     e90:	06ea      	lsls	r2, r5, #27
     e92:	d52e      	bpl.n	ef2 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     e94:	f025 0310 	bic.w	r3, r5, #16
     e98:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     e9a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     e9e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     ea0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     ea2:	2e00      	cmp	r6, #0
     ea4:	f6bf af6f 	bge.w	d86 <process_event+0x9a>
	list->head = NULL;
     ea8:	2300      	movs	r3, #0
		*clients = mgr->clients;
     eaa:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     eac:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     eb0:	f021 0107 	bic.w	r1, r1, #7
     eb4:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     eb8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     eba:	8b21      	ldrh	r1, [r4, #24]
     ebc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     ec0:	45aa      	cmp	sl, r5
     ec2:	f04f 0900 	mov.w	r9, #0
     ec6:	f47f af3f 	bne.w	d48 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     eca:	2f00      	cmp	r7, #0
     ecc:	d09b      	beq.n	e06 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     ece:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     ed2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     ed4:	f388 8811 	msr	BASEPRI, r8
     ed8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     edc:	2f00      	cmp	r7, #0
     ede:	d0c7      	beq.n	e70 <process_event+0x184>
	return node->next;
     ee0:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     ee2:	4639      	mov	r1, r7
     ee4:	4633      	mov	r3, r6
     ee6:	4652      	mov	r2, sl
     ee8:	4620      	mov	r0, r4
     eea:	f00b ff44 	bl	cd76 <notify_one>
	list->head = node;
     eee:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     ef0:	e7f4      	b.n	edc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     ef2:	06ab      	lsls	r3, r5, #26
     ef4:	f57f af1a 	bpl.w	d2c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     ef8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     efc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     efe:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     f02:	e6ff      	b.n	d04 <process_event+0x18>
     f04:	0000cda3 	.word	0x0000cda3

00000f08 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f0c:	4681      	mov	r9, r0
     f0e:	b095      	sub	sp, #84	; 0x54
     f10:	468b      	mov	fp, r1
     f12:	4617      	mov	r7, r2
     f14:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     f16:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     f18:	7838      	ldrb	r0, [r7, #0]
     f1a:	b908      	cbnz	r0, f20 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     f1c:	4628      	mov	r0, r5
     f1e:	e358      	b.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
			OUTC(*fp++);
     f20:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     f22:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     f24:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     f26:	d006      	beq.n	f36 <z_cbvprintf_impl+0x2e>
			OUTC('%');
     f28:	4659      	mov	r1, fp
     f2a:	47c8      	blx	r9
     f2c:	2800      	cmp	r0, #0
     f2e:	f2c0 8350 	blt.w	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
     f32:	3501      	adds	r5, #1
		if (bps == NULL) {
     f34:	e1fb      	b.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
		} state = {
     f36:	2218      	movs	r2, #24
     f38:	2100      	movs	r1, #0
     f3a:	a80e      	add	r0, sp, #56	; 0x38
     f3c:	f00c fbc4 	bl	d6c8 <memset>
	if (*sp == '%') {
     f40:	787b      	ldrb	r3, [r7, #1]
     f42:	2b25      	cmp	r3, #37	; 0x25
     f44:	d07d      	beq.n	1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
     f46:	2300      	movs	r3, #0
     f48:	1c78      	adds	r0, r7, #1
     f4a:	4698      	mov	r8, r3
     f4c:	469e      	mov	lr, r3
     f4e:	469c      	mov	ip, r3
     f50:	461e      	mov	r6, r3
     f52:	4601      	mov	r1, r0
		switch (*sp) {
     f54:	f810 2b01 	ldrb.w	r2, [r0], #1
     f58:	2a2b      	cmp	r2, #43	; 0x2b
     f5a:	f000 80a1 	beq.w	10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
     f5e:	f200 8098 	bhi.w	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
     f62:	2a20      	cmp	r2, #32
     f64:	f000 809f 	beq.w	10a6 <CONFIG_FPROTECT_BLOCK_SIZE+0xa6>
     f68:	2a23      	cmp	r2, #35	; 0x23
     f6a:	f000 809f 	beq.w	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     f6e:	b12b      	cbz	r3, f7c <z_cbvprintf_impl+0x74>
     f70:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     f78:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     f7c:	f1b8 0f00 	cmp.w	r8, #0
     f80:	d005      	beq.n	f8e <z_cbvprintf_impl+0x86>
     f82:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     f86:	f043 0320 	orr.w	r3, r3, #32
     f8a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     f8e:	f1be 0f00 	cmp.w	lr, #0
     f92:	d005      	beq.n	fa0 <z_cbvprintf_impl+0x98>
     f94:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     f98:	f043 0310 	orr.w	r3, r3, #16
     f9c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     fa0:	f1bc 0f00 	cmp.w	ip, #0
     fa4:	d005      	beq.n	fb2 <z_cbvprintf_impl+0xaa>
     fa6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     faa:	f043 0308 	orr.w	r3, r3, #8
     fae:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     fb2:	b12e      	cbz	r6, fc0 <z_cbvprintf_impl+0xb8>
     fb4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     fb8:	f043 0304 	orr.w	r3, r3, #4
     fbc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     fc0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     fc4:	f003 0044 	and.w	r0, r3, #68	; 0x44
     fc8:	2844      	cmp	r0, #68	; 0x44
     fca:	d103      	bne.n	fd4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     fcc:	f36f 1386 	bfc	r3, #6, #1
     fd0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     fd4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     fd8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     fde:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     fe2:	d17f      	bne.n	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
		conv->width_star = true;
     fe4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     fe8:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     fec:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     fee:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     ff2:	781a      	ldrb	r2, [r3, #0]
     ff4:	2a2e      	cmp	r2, #46	; 0x2e
     ff6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     ffa:	bf0c      	ite	eq
     ffc:	2101      	moveq	r1, #1
     ffe:	2100      	movne	r1, #0
    1000:	f361 0241 	bfi	r2, r1, #1, #1
    1004:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    1008:	d178      	bne.n	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
	if (*sp == '*') {
    100a:	785a      	ldrb	r2, [r3, #1]
    100c:	2a2a      	cmp	r2, #42	; 0x2a
    100e:	d06e      	beq.n	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
	++sp;
    1010:	3301      	adds	r3, #1
	size_t val = 0;
    1012:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1014:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1018:	4619      	mov	r1, r3
    101a:	f811 0b01 	ldrb.w	r0, [r1], #1
    101e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1022:	2e09      	cmp	r6, #9
    1024:	f240 8095 	bls.w	1152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
	conv->unsupported |= ((conv->prec_value < 0)
    1028:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    102c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    102e:	f3c1 0040 	ubfx	r0, r1, #1, #1
    1032:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    1036:	460a      	mov	r2, r1
    1038:	f360 0241 	bfi	r2, r0, #1, #1
    103c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1040:	e05c      	b.n	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
		conv->specifier = *sp++;
    1042:	1cba      	adds	r2, r7, #2
    1044:	9203      	str	r2, [sp, #12]
    1046:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    104a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    104e:	07da      	lsls	r2, r3, #31
    1050:	f140 812e 	bpl.w	12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>
			width = va_arg(ap, int);
    1054:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1058:	f1b8 0f00 	cmp.w	r8, #0
    105c:	da07      	bge.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
				conv->flag_dash = true;
    105e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1062:	f042 0204 	orr.w	r2, r2, #4
    1066:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    106a:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    106e:	075e      	lsls	r6, r3, #29
    1070:	f140 8127 	bpl.w	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
			int arg = va_arg(ap, int);
    1074:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1078:	f1ba 0f00 	cmp.w	sl, #0
    107c:	f280 8126 	bge.w	12cc <CONFIG_FPROTECT_BLOCK_SIZE+0x2cc>
				conv->prec_present = false;
    1080:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1084:	f36f 0341 	bfc	r3, #1, #1
    1088:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    108c:	f04f 3aff 	mov.w	sl, #4294967295
    1090:	e11c      	b.n	12cc <CONFIG_FPROTECT_BLOCK_SIZE+0x2cc>
		switch (*sp) {
    1092:	2a2d      	cmp	r2, #45	; 0x2d
    1094:	d00d      	beq.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
    1096:	2a30      	cmp	r2, #48	; 0x30
    1098:	f47f af69 	bne.w	f6e <z_cbvprintf_impl+0x66>
    109c:	2301      	movs	r3, #1
	} while (loop);
    109e:	e758      	b.n	f52 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    10a0:	f04f 0c01 	mov.w	ip, #1
    10a4:	e755      	b.n	f52 <z_cbvprintf_impl+0x4a>
    10a6:	f04f 0e01 	mov.w	lr, #1
    10aa:	e752      	b.n	f52 <z_cbvprintf_impl+0x4a>
    10ac:	f04f 0801 	mov.w	r8, #1
    10b0:	e74f      	b.n	f52 <z_cbvprintf_impl+0x4a>
    10b2:	2601      	movs	r6, #1
    10b4:	e74d      	b.n	f52 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    10b6:	fb0e 6202 	mla	r2, lr, r2, r6
    10ba:	3a30      	subs	r2, #48	; 0x30
    10bc:	4603      	mov	r3, r0
    10be:	4618      	mov	r0, r3
    10c0:	f810 6b01 	ldrb.w	r6, [r0], #1
    10c4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    10c8:	f1bc 0f09 	cmp.w	ip, #9
    10cc:	d9f3      	bls.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
	if (sp != wp) {
    10ce:	4299      	cmp	r1, r3
    10d0:	d08f      	beq.n	ff2 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    10d2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    10d6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    10d8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    10da:	f362 0141 	bfi	r1, r2, #1, #1
    10de:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    10e2:	e786      	b.n	ff2 <z_cbvprintf_impl+0xea>
    10e4:	460b      	mov	r3, r1
	size_t val = 0;
    10e6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    10e8:	f04f 0e0a 	mov.w	lr, #10
    10ec:	e7e7      	b.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
		conv->prec_star = true;
    10ee:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    10f2:	f042 0204 	orr.w	r2, r2, #4
    10f6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    10fa:	3302      	adds	r3, #2
	switch (*sp) {
    10fc:	781a      	ldrb	r2, [r3, #0]
    10fe:	2a6c      	cmp	r2, #108	; 0x6c
    1100:	d047      	beq.n	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
    1102:	d82b      	bhi.n	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
    1104:	2a68      	cmp	r2, #104	; 0x68
    1106:	d031      	beq.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
    1108:	2a6a      	cmp	r2, #106	; 0x6a
    110a:	d04b      	beq.n	11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
    110c:	2a4c      	cmp	r2, #76	; 0x4c
    110e:	d051      	beq.n	11b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b4>
	conv->specifier = *sp++;
    1110:	461a      	mov	r2, r3
    1112:	f812 3b01 	ldrb.w	r3, [r2], #1
    1116:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    1118:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    111a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    111e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    1122:	f200 80be 	bhi.w	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
    1126:	2b6d      	cmp	r3, #109	; 0x6d
    1128:	d851      	bhi.n	11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
    112a:	2b69      	cmp	r3, #105	; 0x69
    112c:	f200 80b9 	bhi.w	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
    1130:	2b57      	cmp	r3, #87	; 0x57
    1132:	d867      	bhi.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    1134:	2b41      	cmp	r3, #65	; 0x41
    1136:	d003      	beq.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
    1138:	3b45      	subs	r3, #69	; 0x45
    113a:	2b02      	cmp	r3, #2
    113c:	f200 80b1 	bhi.w	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
    1140:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1144:	2204      	movs	r2, #4
    1146:	f362 0302 	bfi	r3, r2, #0, #3
    114a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    114e:	2301      	movs	r3, #1
			break;
    1150:	e073      	b.n	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
		val = 10U * val + *sp++ - '0';
    1152:	fb0c 0202 	mla	r2, ip, r2, r0
    1156:	3a30      	subs	r2, #48	; 0x30
    1158:	460b      	mov	r3, r1
    115a:	e75d      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
	switch (*sp) {
    115c:	2a74      	cmp	r2, #116	; 0x74
    115e:	d025      	beq.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1160:	2a7a      	cmp	r2, #122	; 0x7a
    1162:	d1d5      	bne.n	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
		conv->length_mod = LENGTH_Z;
    1164:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1168:	2106      	movs	r1, #6
    116a:	e00c      	b.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
		if (*++sp == 'h') {
    116c:	785a      	ldrb	r2, [r3, #1]
    116e:	2a68      	cmp	r2, #104	; 0x68
    1170:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1174:	d106      	bne.n	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
			conv->length_mod = LENGTH_HH;
    1176:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1178:	f361 02c6 	bfi	r2, r1, #3, #4
    117c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    1180:	3302      	adds	r3, #2
    1182:	e7c5      	b.n	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
			conv->length_mod = LENGTH_H;
    1184:	2102      	movs	r1, #2
    1186:	f361 02c6 	bfi	r2, r1, #3, #4
    118a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    118e:	3301      	adds	r3, #1
    1190:	e7be      	b.n	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
		if (*++sp == 'l') {
    1192:	785a      	ldrb	r2, [r3, #1]
    1194:	2a6c      	cmp	r2, #108	; 0x6c
    1196:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    119a:	d101      	bne.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
			conv->length_mod = LENGTH_LL;
    119c:	2104      	movs	r1, #4
    119e:	e7eb      	b.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
			conv->length_mod = LENGTH_L;
    11a0:	2103      	movs	r1, #3
    11a2:	e7f0      	b.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
		conv->length_mod = LENGTH_J;
    11a4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    11a8:	2105      	movs	r1, #5
    11aa:	e7ec      	b.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
		conv->length_mod = LENGTH_T;
    11ac:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    11b0:	2107      	movs	r1, #7
    11b2:	e7e8      	b.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
		conv->unsupported = true;
    11b4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    11b8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    11bc:	f022 0202 	bic.w	r2, r2, #2
    11c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    11c4:	f042 0202 	orr.w	r2, r2, #2
    11c8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    11cc:	e7df      	b.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
	switch (conv->specifier) {
    11ce:	3b6e      	subs	r3, #110	; 0x6e
    11d0:	b2d9      	uxtb	r1, r3
    11d2:	2301      	movs	r3, #1
    11d4:	408b      	lsls	r3, r1
    11d6:	f240 4182 	movw	r1, #1154	; 0x482
    11da:	420b      	tst	r3, r1
    11dc:	d137      	bne.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    11de:	f013 0f24 	tst.w	r3, #36	; 0x24
    11e2:	d151      	bne.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
    11e4:	07d8      	lsls	r0, r3, #31
    11e6:	d55c      	bpl.n	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
		conv->specifier_cat = SPECIFIER_PTR;
    11e8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    11ec:	2103      	movs	r1, #3
    11ee:	f361 0302 	bfi	r3, r1, #0, #3
    11f2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    11f6:	f002 0378 	and.w	r3, r2, #120	; 0x78
    11fa:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    11fe:	424b      	negs	r3, r1
    1200:	414b      	adcs	r3, r1
    1202:	e01a      	b.n	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
	switch (conv->specifier) {
    1204:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    1208:	b2c9      	uxtb	r1, r1
    120a:	2001      	movs	r0, #1
    120c:	fa00 f101 	lsl.w	r1, r0, r1
    1210:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1214:	d194      	bne.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
    1216:	f640 0601 	movw	r6, #2049	; 0x801
    121a:	4231      	tst	r1, r6
    121c:	d11d      	bne.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
    121e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1222:	d03e      	beq.n	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
		conv->specifier_cat = SPECIFIER_SINT;
    1224:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1228:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    122c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1230:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1232:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1236:	d034      	beq.n	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
	bool unsupported = false;
    1238:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    123a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    123e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1242:	430b      	orrs	r3, r1
    1244:	f363 0241 	bfi	r2, r3, #1, #1
    1248:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    124c:	e6fd      	b.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
		conv->specifier_cat = SPECIFIER_UINT;
    124e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1252:	2102      	movs	r1, #2
    1254:	f361 0302 	bfi	r3, r1, #0, #3
    1258:	e7e8      	b.n	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
    125a:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    125e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    1260:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1264:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1268:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    126a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    126e:	bf02      	ittt	eq
    1270:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1274:	f041 0101 	orreq.w	r1, r1, #1
    1278:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    127c:	2b63      	cmp	r3, #99	; 0x63
    127e:	d1db      	bne.n	1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1280:	1e13      	subs	r3, r2, #0
    1282:	bf18      	it	ne
    1284:	2301      	movne	r3, #1
    1286:	e7d8      	b.n	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
		conv->specifier_cat = SPECIFIER_PTR;
    1288:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    128c:	2103      	movs	r1, #3
    128e:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1292:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1296:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    129a:	bf14      	ite	ne
    129c:	2301      	movne	r3, #1
    129e:	2300      	moveq	r3, #0
    12a0:	e7cb      	b.n	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
		conv->invalid = true;
    12a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    12a6:	f043 0301 	orr.w	r3, r3, #1
    12aa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    12ae:	e7c3      	b.n	1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>
		} else if (conv->width_present) {
    12b0:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    12b4:	2a00      	cmp	r2, #0
			width = conv->width_value;
    12b6:	bfb4      	ite	lt
    12b8:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    12bc:	f04f 38ff 	movge.w	r8, #4294967295
    12c0:	e6d5      	b.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
		} else if (conv->prec_present) {
    12c2:	0798      	lsls	r0, r3, #30
    12c4:	f57f aee2 	bpl.w	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
			precision = conv->prec_value;
    12c8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    12cc:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    12d0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    12d2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    12d6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    12da:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    12de:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    12e0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    12e4:	d133      	bne.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
			switch (length_mod) {
    12e6:	1ecb      	subs	r3, r1, #3
    12e8:	2b04      	cmp	r3, #4
    12ea:	d804      	bhi.n	12f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f6>
    12ec:	e8df f003 	tbb	[pc, r3]
    12f0:	21464621 	.word	0x21464621
    12f4:	21          	.byte	0x21
    12f5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    12f6:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    12f8:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    12fa:	ea4f 72e3 	mov.w	r2, r3, asr #31
    12fe:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1302:	d11c      	bne.n	133e <CONFIG_FPROTECT_BLOCK_SIZE+0x33e>
				value->sint = (signed char)value->sint;
    1304:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    1308:	17da      	asrs	r2, r3, #31
    130a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    130e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1310:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1314:	f013 0603 	ands.w	r6, r3, #3
    1318:	d050      	beq.n	13bc <CONFIG_FPROTECT_BLOCK_SIZE+0x3bc>
			OUTS(sp, fp);
    131a:	9b03      	ldr	r3, [sp, #12]
    131c:	463a      	mov	r2, r7
    131e:	4659      	mov	r1, fp
    1320:	4648      	mov	r0, r9
    1322:	f00b fe6b 	bl	cffc <outs>
    1326:	2800      	cmp	r0, #0
    1328:	f2c0 8153 	blt.w	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
    132c:	4405      	add	r5, r0
			continue;
    132e:	9f03      	ldr	r7, [sp, #12]
    1330:	e5f2      	b.n	f18 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1332:	f854 3b04 	ldr.w	r3, [r4], #4
    1336:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1338:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    133c:	e7e8      	b.n	1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
			} else if (length_mod == LENGTH_H) {
    133e:	2902      	cmp	r1, #2
    1340:	d1e5      	bne.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
				value->sint = (short)value->sint;
    1342:	b21a      	sxth	r2, r3
    1344:	f343 33c0 	sbfx	r3, r3, #15, #1
    1348:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    134c:	e7df      	b.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
		} else if (specifier_cat == SPECIFIER_UINT) {
    134e:	2b02      	cmp	r3, #2
    1350:	d124      	bne.n	139c <CONFIG_FPROTECT_BLOCK_SIZE+0x39c>
			switch (length_mod) {
    1352:	1ecb      	subs	r3, r1, #3
    1354:	2b04      	cmp	r3, #4
    1356:	d804      	bhi.n	1362 <CONFIG_FPROTECT_BLOCK_SIZE+0x362>
    1358:	e8df f003 	tbb	[pc, r3]
    135c:	18101018 	.word	0x18101018
    1360:	18          	.byte	0x18
    1361:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1362:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1364:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1368:	f04f 0200 	mov.w	r2, #0
    136c:	d014      	beq.n	1398 <CONFIG_FPROTECT_BLOCK_SIZE+0x398>
			} else if (length_mod == LENGTH_H) {
    136e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1370:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1374:	d1cc      	bne.n	1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
				value->uint = (unsigned short)value->uint;
    1376:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1378:	930e      	str	r3, [sp, #56]	; 0x38
    137a:	e7c9      	b.n	1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
					(uint_value_type)va_arg(ap,
    137c:	3407      	adds	r4, #7
    137e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1382:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1386:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    138a:	e7c1      	b.n	1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
					(uint_value_type)va_arg(ap, size_t);
    138c:	f854 3b04 	ldr.w	r3, [r4], #4
    1390:	930e      	str	r3, [sp, #56]	; 0x38
    1392:	2300      	movs	r3, #0
    1394:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1396:	e7bb      	b.n	1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
				value->uint = (unsigned char)value->uint;
    1398:	b2db      	uxtb	r3, r3
    139a:	e7cd      	b.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
		} else if (specifier_cat == SPECIFIER_FP) {
    139c:	2b04      	cmp	r3, #4
    139e:	d108      	bne.n	13b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b2>
					(sint_value_type)va_arg(ap, long long);
    13a0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    13a2:	f024 0407 	bic.w	r4, r4, #7
    13a6:	e9d4 2300 	ldrd	r2, r3, [r4]
    13aa:	3408      	adds	r4, #8
    13ac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    13b0:	e7ae      	b.n	1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
		} else if (specifier_cat == SPECIFIER_PTR) {
    13b2:	2b03      	cmp	r3, #3
    13b4:	d1ac      	bne.n	1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
			value->ptr = va_arg(ap, void *);
    13b6:	f854 3b04 	ldr.w	r3, [r4], #4
    13ba:	e7dd      	b.n	1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
		switch (conv->specifier) {
    13bc:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    13c0:	2878      	cmp	r0, #120	; 0x78
    13c2:	d8b4      	bhi.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
    13c4:	2862      	cmp	r0, #98	; 0x62
    13c6:	d81c      	bhi.n	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
    13c8:	2825      	cmp	r0, #37	; 0x25
    13ca:	f43f adad 	beq.w	f28 <z_cbvprintf_impl+0x20>
    13ce:	2858      	cmp	r0, #88	; 0x58
    13d0:	d1ad      	bne.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
			bps = encode_uint(value->uint, conv, buf, bpe);
    13d2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    13d6:	9300      	str	r3, [sp, #0]
    13d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    13dc:	ab08      	add	r3, sp, #32
    13de:	aa10      	add	r2, sp, #64	; 0x40
    13e0:	f00b fdc6 	bl	cf70 <encode_uint>
			if (precision >= 0) {
    13e4:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    13e8:	4607      	mov	r7, r0
			if (precision >= 0) {
    13ea:	f280 809a 	bge.w	1522 <CONFIG_FPROTECT_BLOCK_SIZE+0x522>
		if (bps == NULL) {
    13ee:	2f00      	cmp	r7, #0
    13f0:	d09d      	beq.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
		size_t nj_len = (bpe - bps);
    13f2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    13f6:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    13f8:	2e00      	cmp	r6, #0
    13fa:	f000 80c1 	beq.w	1580 <CONFIG_FPROTECT_BLOCK_SIZE+0x580>
			nj_len += 1U;
    13fe:	3001      	adds	r0, #1
    1400:	e0be      	b.n	1580 <CONFIG_FPROTECT_BLOCK_SIZE+0x580>
		switch (conv->specifier) {
    1402:	3863      	subs	r0, #99	; 0x63
    1404:	2815      	cmp	r0, #21
    1406:	d892      	bhi.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
    1408:	a201      	add	r2, pc, #4	; (adr r2, 1410 <CONFIG_FPROTECT_BLOCK_SIZE+0x410>)
    140a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    140e:	bf00      	nop
    1410:	000014e5 	.word	0x000014e5
    1414:	000014f7 	.word	0x000014f7
    1418:	0000132f 	.word	0x0000132f
    141c:	0000132f 	.word	0x0000132f
    1420:	0000132f 	.word	0x0000132f
    1424:	0000132f 	.word	0x0000132f
    1428:	000014f7 	.word	0x000014f7
    142c:	0000132f 	.word	0x0000132f
    1430:	0000132f 	.word	0x0000132f
    1434:	0000132f 	.word	0x0000132f
    1438:	0000132f 	.word	0x0000132f
    143c:	00001585 	.word	0x00001585
    1440:	0000151d 	.word	0x0000151d
    1444:	00001543 	.word	0x00001543
    1448:	0000132f 	.word	0x0000132f
    144c:	0000132f 	.word	0x0000132f
    1450:	00001469 	.word	0x00001469
    1454:	0000132f 	.word	0x0000132f
    1458:	0000151d 	.word	0x0000151d
    145c:	0000132f 	.word	0x0000132f
    1460:	0000132f 	.word	0x0000132f
    1464:	0000151d 	.word	0x0000151d
			if (precision >= 0) {
    1468:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    146c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    146e:	db35      	blt.n	14dc <CONFIG_FPROTECT_BLOCK_SIZE+0x4dc>
				len = strnlen(bps, precision);
    1470:	4651      	mov	r1, sl
    1472:	4638      	mov	r0, r7
    1474:	f00c f914 	bl	d6a0 <strnlen>
			bpe = bps + len;
    1478:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    147c:	2f00      	cmp	r7, #0
    147e:	f43f af56 	beq.w	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
		char sign = 0;
    1482:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1484:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1488:	f013 0210 	ands.w	r2, r3, #16
    148c:	9205      	str	r2, [sp, #20]
    148e:	f000 8093 	beq.w	15b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b8>
			nj_len += 2U;
    1492:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1494:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1496:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1498:	bf48      	it	mi
    149a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    149c:	9204      	str	r2, [sp, #16]
    149e:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    14a0:	bf48      	it	mi
    14a2:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    14a4:	f1b8 0f00 	cmp.w	r8, #0
    14a8:	f340 80a0 	ble.w	15ec <CONFIG_FPROTECT_BLOCK_SIZE+0x5ec>
			if (!conv->flag_dash) {
    14ac:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    14b0:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    14b4:	f3c2 0380 	ubfx	r3, r2, #2, #1
    14b8:	0750      	lsls	r0, r2, #29
    14ba:	9306      	str	r3, [sp, #24]
    14bc:	f100 8096 	bmi.w	15ec <CONFIG_FPROTECT_BLOCK_SIZE+0x5ec>
				if (conv->flag_zero) {
    14c0:	0651      	lsls	r1, r2, #25
    14c2:	f140 8089 	bpl.w	15d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d8>
					if (sign != 0) {
    14c6:	b13e      	cbz	r6, 14d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d8>
						OUTC(sign);
    14c8:	4659      	mov	r1, fp
    14ca:	4630      	mov	r0, r6
    14cc:	47c8      	blx	r9
    14ce:	2800      	cmp	r0, #0
    14d0:	db7f      	blt.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
    14d2:	9b06      	ldr	r3, [sp, #24]
    14d4:	3501      	adds	r5, #1
    14d6:	461e      	mov	r6, r3
					pad = '0';
    14d8:	2230      	movs	r2, #48	; 0x30
    14da:	e07e      	b.n	15da <CONFIG_FPROTECT_BLOCK_SIZE+0x5da>
				len = strlen(bps);
    14dc:	4638      	mov	r0, r7
    14de:	f00c f8d8 	bl	d692 <strlen>
    14e2:	e7c9      	b.n	1478 <CONFIG_FPROTECT_BLOCK_SIZE+0x478>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    14e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    14e6:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    14ea:	2600      	movs	r6, #0
			bps = buf;
    14ec:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    14ee:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    14f2:	2001      	movs	r0, #1
    14f4:	e7c6      	b.n	1484 <CONFIG_FPROTECT_BLOCK_SIZE+0x484>
			if (conv->flag_plus) {
    14f6:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    14f8:	bf5c      	itt	pl
    14fa:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    14fe:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1500:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    1504:	bf48      	it	mi
    1506:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1508:	2b00      	cmp	r3, #0
    150a:	f6bf af62 	bge.w	13d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d2>
				value->uint = (uint_value_type)-sint;
    150e:	4252      	negs	r2, r2
    1510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1514:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1518:	262d      	movs	r6, #45	; 0x2d
    151a:	e75a      	b.n	13d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d2>
		switch (conv->specifier) {
    151c:	2600      	movs	r6, #0
    151e:	e758      	b.n	13d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d2>
		char sign = 0;
    1520:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1522:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1526:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    152a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    152c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1530:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1532:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1536:	f67f af5a 	bls.w	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
					conv->pad0_value = precision - (int)len;
    153a:	ebaa 0303 	sub.w	r3, sl, r3
    153e:	9311      	str	r3, [sp, #68]	; 0x44
    1540:	e755      	b.n	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
			if (value->ptr != NULL) {
    1542:	980e      	ldr	r0, [sp, #56]	; 0x38
    1544:	b390      	cbz	r0, 15ac <CONFIG_FPROTECT_BLOCK_SIZE+0x5ac>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1546:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    154a:	9300      	str	r3, [sp, #0]
    154c:	aa10      	add	r2, sp, #64	; 0x40
    154e:	ab08      	add	r3, sp, #32
    1550:	2100      	movs	r1, #0
    1552:	f00b fd0d 	bl	cf70 <encode_uint>
				conv->altform_0c = true;
    1556:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    155a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    155e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1562:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    1566:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    156a:	4607      	mov	r7, r0
				conv->altform_0c = true;
    156c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1570:	dad6      	bge.n	1520 <CONFIG_FPROTECT_BLOCK_SIZE+0x520>
		if (bps == NULL) {
    1572:	2800      	cmp	r0, #0
    1574:	f43f aedb 	beq.w	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
		size_t nj_len = (bpe - bps);
    1578:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    157c:	1a18      	subs	r0, r3, r0
		char sign = 0;
    157e:	2600      	movs	r6, #0
    1580:	469a      	mov	sl, r3
    1582:	e77f      	b.n	1484 <CONFIG_FPROTECT_BLOCK_SIZE+0x484>
				store_count(conv, value->ptr, count);
    1584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    1586:	2907      	cmp	r1, #7
    1588:	f63f aed1 	bhi.w	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
    158c:	e8df f001 	tbb	[pc, r1]
    1590:	0c06040c 	.word	0x0c06040c
    1594:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1598:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    159a:	e6c8      	b.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
		*(short *)dp = (short)count;
    159c:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    159e:	e6c6      	b.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
		*(intmax_t *)dp = (intmax_t)count;
    15a0:	17ea      	asrs	r2, r5, #31
    15a2:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    15a6:	e6c2      	b.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    15a8:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    15aa:	e6c0      	b.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
    15ac:	4f2e      	ldr	r7, [pc, #184]	; (1668 <CONFIG_FPROTECT_BLOCK_SIZE+0x668>)
		char sign = 0;
    15ae:	4606      	mov	r6, r0
			bpe = bps + 5;
    15b0:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    15b4:	2005      	movs	r0, #5
    15b6:	e765      	b.n	1484 <CONFIG_FPROTECT_BLOCK_SIZE+0x484>
		} else if (conv->altform_0) {
    15b8:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    15ba:	bf48      	it	mi
    15bc:	3001      	addmi	r0, #1
    15be:	e769      	b.n	1494 <CONFIG_FPROTECT_BLOCK_SIZE+0x494>
    15c0:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    15c2:	4610      	mov	r0, r2
    15c4:	9206      	str	r2, [sp, #24]
    15c6:	4659      	mov	r1, fp
    15c8:	47c8      	blx	r9
    15ca:	2800      	cmp	r0, #0
    15cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    15d0:	da04      	bge.n	15dc <CONFIG_FPROTECT_BLOCK_SIZE+0x5dc>
#undef OUTS
#undef OUTC
}
    15d2:	b015      	add	sp, #84	; 0x54
    15d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    15d8:	2220      	movs	r2, #32
					pad = '0';
    15da:	4643      	mov	r3, r8
				while (width-- > 0) {
    15dc:	4619      	mov	r1, r3
    15de:	2900      	cmp	r1, #0
    15e0:	f103 33ff 	add.w	r3, r3, #4294967295
    15e4:	dcec      	bgt.n	15c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c0>
    15e6:	4445      	add	r5, r8
    15e8:	1a6d      	subs	r5, r5, r1
    15ea:	4698      	mov	r8, r3
		if (sign != 0) {
    15ec:	b12e      	cbz	r6, 15fa <CONFIG_FPROTECT_BLOCK_SIZE+0x5fa>
			OUTC(sign);
    15ee:	4659      	mov	r1, fp
    15f0:	4630      	mov	r0, r6
    15f2:	47c8      	blx	r9
    15f4:	2800      	cmp	r0, #0
    15f6:	dbec      	blt.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
    15f8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    15fa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    15fe:	06da      	lsls	r2, r3, #27
    1600:	d401      	bmi.n	1606 <CONFIG_FPROTECT_BLOCK_SIZE+0x606>
    1602:	071b      	lsls	r3, r3, #28
    1604:	d505      	bpl.n	1612 <CONFIG_FPROTECT_BLOCK_SIZE+0x612>
				OUTC('0');
    1606:	4659      	mov	r1, fp
    1608:	2030      	movs	r0, #48	; 0x30
    160a:	47c8      	blx	r9
    160c:	2800      	cmp	r0, #0
    160e:	dbe0      	blt.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
    1610:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1612:	9b05      	ldr	r3, [sp, #20]
    1614:	b133      	cbz	r3, 1624 <CONFIG_FPROTECT_BLOCK_SIZE+0x624>
				OUTC(conv->specifier);
    1616:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    161a:	4659      	mov	r1, fp
    161c:	47c8      	blx	r9
    161e:	2800      	cmp	r0, #0
    1620:	dbd7      	blt.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
    1622:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1624:	9e04      	ldr	r6, [sp, #16]
    1626:	442e      	add	r6, r5
    1628:	e005      	b.n	1636 <CONFIG_FPROTECT_BLOCK_SIZE+0x636>
				OUTC('0');
    162a:	4659      	mov	r1, fp
    162c:	2030      	movs	r0, #48	; 0x30
    162e:	47c8      	blx	r9
    1630:	2800      	cmp	r0, #0
    1632:	dbce      	blt.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
    1634:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1636:	1b73      	subs	r3, r6, r5
    1638:	2b00      	cmp	r3, #0
    163a:	dcf6      	bgt.n	162a <CONFIG_FPROTECT_BLOCK_SIZE+0x62a>
			OUTS(bps, bpe);
    163c:	4653      	mov	r3, sl
    163e:	463a      	mov	r2, r7
    1640:	4659      	mov	r1, fp
    1642:	4648      	mov	r0, r9
    1644:	f00b fcda 	bl	cffc <outs>
    1648:	2800      	cmp	r0, #0
    164a:	dbc2      	blt.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
    164c:	4405      	add	r5, r0
		while (width > 0) {
    164e:	44a8      	add	r8, r5
    1650:	eba8 0305 	sub.w	r3, r8, r5
    1654:	2b00      	cmp	r3, #0
    1656:	f77f ae6a 	ble.w	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
			OUTC(' ');
    165a:	4659      	mov	r1, fp
    165c:	2020      	movs	r0, #32
    165e:	47c8      	blx	r9
    1660:	2800      	cmp	r0, #0
    1662:	dbb6      	blt.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
    1664:	3501      	adds	r5, #1
			--width;
    1666:	e7f3      	b.n	1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>
    1668:	0000f70b 	.word	0x0000f70b

0000166c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    166c:	b508      	push	{r3, lr}
    166e:	4604      	mov	r4, r0
	__asm__ volatile(
    1670:	f04f 0220 	mov.w	r2, #32
    1674:	f3ef 8311 	mrs	r3, BASEPRI
    1678:	f382 8812 	msr	BASEPRI_MAX, r2
    167c:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    1680:	f007 f994 	bl	89ac <sys_clock_disable>
	}

	sys_arch_reboot(type);
    1684:	4620      	mov	r0, r4
    1686:	f002 fe77 	bl	4378 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    168a:	4803      	ldr	r0, [pc, #12]	; (1698 <sys_reboot+0x2c>)
    168c:	f00b f943 	bl	c916 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1690:	f002 f80a 	bl	36a8 <arch_cpu_idle>
    1694:	e7fc      	b.n	1690 <sys_reboot+0x24>
    1696:	bf00      	nop
    1698:	0000f711 	.word	0x0000f711

0000169c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    169c:	f007 b9ce 	b.w	8a3c <SystemInit>

000016a0 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    16a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    16a4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1700 <activate_foreach_backend+0x60>
{
    16a8:	4604      	mov	r4, r0
	while (mask_cpy) {
    16aa:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    16ac:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    16b0:	b914      	cbnz	r4, 16b8 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    16b2:	4638      	mov	r0, r7
    16b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    16b8:	fa94 f5a4 	rbit	r5, r4
    16bc:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    16c0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    16c4:	012e      	lsls	r6, r5, #4
    16c6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    16ca:	ea6f 0a03 	mvn.w	sl, r3
    16ce:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    16d2:	7b2b      	ldrb	r3, [r5, #12]
    16d4:	2b00      	cmp	r3, #0
    16d6:	d0eb      	beq.n	16b0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    16d8:	f858 3006 	ldr.w	r3, [r8, r6]
    16dc:	691b      	ldr	r3, [r3, #16]
    16de:	b94b      	cbnz	r3, 16f4 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    16e0:	4446      	add	r6, r8
			log_backend_enable(backend,
    16e2:	2204      	movs	r2, #4
    16e4:	6873      	ldr	r3, [r6, #4]
    16e6:	4628      	mov	r0, r5
    16e8:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    16ea:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    16ee:	f000 fa59 	bl	1ba4 <log_backend_enable>
    16f2:	e7dd      	b.n	16b0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    16f4:	4628      	mov	r0, r5
    16f6:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    16f8:	2800      	cmp	r0, #0
    16fa:	d1d9      	bne.n	16b0 <activate_foreach_backend+0x10>
    16fc:	e7f0      	b.n	16e0 <activate_foreach_backend+0x40>
    16fe:	bf00      	nop
    1700:	0000f060 	.word	0x0000f060

00001704 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    1704:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1706:	4910      	ldr	r1, [pc, #64]	; (1748 <enable_logger+0x44>)
    1708:	4810      	ldr	r0, [pc, #64]	; (174c <enable_logger+0x48>)
{
    170a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    170c:	2200      	movs	r2, #0
    170e:	f00d f8d7 	bl	e8c0 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1712:	4d0f      	ldr	r5, [pc, #60]	; (1750 <enable_logger+0x4c>)
    1714:	490f      	ldr	r1, [pc, #60]	; (1754 <enable_logger+0x50>)
    1716:	2200      	movs	r2, #0
    1718:	2300      	movs	r3, #0
    171a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    171e:	2400      	movs	r4, #0
    1720:	230e      	movs	r3, #14
    1722:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1726:	e9cd 4401 	strd	r4, r4, [sp, #4]
    172a:	4b0b      	ldr	r3, [pc, #44]	; (1758 <enable_logger+0x54>)
    172c:	9400      	str	r4, [sp, #0]
    172e:	f44f 7240 	mov.w	r2, #768	; 0x300
    1732:	4628      	mov	r0, r5
    1734:	f009 fd22 	bl	b17c <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1738:	4908      	ldr	r1, [pc, #32]	; (175c <enable_logger+0x58>)
    173a:	4628      	mov	r0, r5
    173c:	f00c fe65 	bl	e40a <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1740:	4620      	mov	r0, r4
    1742:	b009      	add	sp, #36	; 0x24
    1744:	bd30      	pop	{r4, r5, pc}
    1746:	bf00      	nop
    1748:	00001761 	.word	0x00001761
    174c:	20000940 	.word	0x20000940
    1750:	200004b8 	.word	0x200004b8
    1754:	20002dc0 	.word	0x20002dc0
    1758:	00001a51 	.word	0x00001a51
    175c:	0000f73a 	.word	0x0000f73a

00001760 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1760:	4801      	ldr	r0, [pc, #4]	; (1768 <log_process_thread_timer_expiry_fn+0x8>)
    1762:	f009 be99 	b.w	b498 <z_impl_k_sem_give>
    1766:	bf00      	nop
    1768:	2000037c 	.word	0x2000037c

0000176c <z_log_init>:
{
    176c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1770:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    1772:	481f      	ldr	r0, [pc, #124]	; (17f0 <z_log_init+0x84>)
{
    1774:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    1776:	f00b fec1 	bl	d4fc <atomic_inc>
    177a:	4606      	mov	r6, r0
    177c:	2800      	cmp	r0, #0
    177e:	d030      	beq.n	17e2 <z_log_init+0x76>
	uint32_t mask = 0;
    1780:	2500      	movs	r5, #0
}
    1782:	4628      	mov	r0, r5
    1784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    1788:	7b23      	ldrb	r3, [r4, #12]
    178a:	b173      	cbz	r3, 17aa <z_log_init+0x3e>
	if (backend->api->init) {
    178c:	6823      	ldr	r3, [r4, #0]
    178e:	68db      	ldr	r3, [r3, #12]
    1790:	b10b      	cbz	r3, 1796 <z_log_init+0x2a>
		backend->api->init(backend);
    1792:	4620      	mov	r0, r4
    1794:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    1796:	6823      	ldr	r3, [r4, #0]
    1798:	691b      	ldr	r3, [r3, #16]
    179a:	b9d3      	cbnz	r3, 17d2 <z_log_init+0x66>
				log_backend_enable(backend,
    179c:	6863      	ldr	r3, [r4, #4]
    179e:	2204      	movs	r2, #4
    17a0:	6819      	ldr	r1, [r3, #0]
    17a2:	4620      	mov	r0, r4
    17a4:	f000 f9fe 	bl	1ba4 <log_backend_enable>
			i++;
    17a8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    17aa:	3410      	adds	r4, #16
    17ac:	454c      	cmp	r4, r9
    17ae:	d3eb      	bcc.n	1788 <z_log_init+0x1c>
	if (blocking) {
    17b0:	f1b8 0f00 	cmp.w	r8, #0
    17b4:	d0e5      	beq.n	1782 <z_log_init+0x16>
		while (mask) {
    17b6:	2d00      	cmp	r5, #0
    17b8:	d0e2      	beq.n	1780 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    17ba:	4628      	mov	r0, r5
    17bc:	f7ff ff70 	bl	16a0 <activate_foreach_backend>
    17c0:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    17c2:	2f00      	cmp	r7, #0
    17c4:	d0f7      	beq.n	17b6 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    17c6:	2100      	movs	r1, #0
    17c8:	f44f 70a4 	mov.w	r0, #328	; 0x148
    17cc:	f00a fae4 	bl	bd98 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    17d0:	e7f1      	b.n	17b6 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    17d2:	4620      	mov	r0, r4
    17d4:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    17d6:	2800      	cmp	r0, #0
    17d8:	d0e0      	beq.n	179c <z_log_init+0x30>
				mask |= BIT(i);
    17da:	fa0a f306 	lsl.w	r3, sl, r6
    17de:	431d      	orrs	r5, r3
    17e0:	e7e2      	b.n	17a8 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    17e2:	4c04      	ldr	r4, [pc, #16]	; (17f4 <z_log_init+0x88>)
    17e4:	f8df 9010 	ldr.w	r9, [pc, #16]	; 17f8 <z_log_init+0x8c>
	uint32_t mask = 0;
    17e8:	4605      	mov	r5, r0
				mask |= BIT(i);
    17ea:	f04f 0a01 	mov.w	sl, #1
    17ee:	e7dd      	b.n	17ac <z_log_init+0x40>
    17f0:	20000c08 	.word	0x20000c08
    17f4:	0000f060 	.word	0x0000f060
    17f8:	0000f080 	.word	0x0000f080

000017fc <log_format_func_t_get>:
}
    17fc:	4b01      	ldr	r3, [pc, #4]	; (1804 <log_format_func_t_get+0x8>)
    17fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1802:	4770      	bx	lr
    1804:	0000f09c 	.word	0x0000f09c

00001808 <log_set_timestamp_func>:
{
    1808:	b508      	push	{r3, lr}
    180a:	4603      	mov	r3, r0
    180c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    180e:	b12b      	cbz	r3, 181c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    1810:	4a04      	ldr	r2, [pc, #16]	; (1824 <log_set_timestamp_func+0x1c>)
    1812:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    1814:	f000 fc78 	bl	2108 <log_output_timestamp_freq_set>
	return 0;
    1818:	2000      	movs	r0, #0
}
    181a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    181c:	f06f 0015 	mvn.w	r0, #21
    1820:	e7fb      	b.n	181a <log_set_timestamp_func+0x12>
    1822:	bf00      	nop
    1824:	20000004 	.word	0x20000004

00001828 <z_log_notify_backend_enabled>:
{
    1828:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    182a:	4c04      	ldr	r4, [pc, #16]	; (183c <z_log_notify_backend_enabled+0x14>)
    182c:	7823      	ldrb	r3, [r4, #0]
    182e:	b913      	cbnz	r3, 1836 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    1830:	4803      	ldr	r0, [pc, #12]	; (1840 <z_log_notify_backend_enabled+0x18>)
    1832:	f009 fe31 	bl	b498 <z_impl_k_sem_give>
	backend_attached = true;
    1836:	2301      	movs	r3, #1
    1838:	7023      	strb	r3, [r4, #0]
}
    183a:	bd10      	pop	{r4, pc}
    183c:	200023fc 	.word	0x200023fc
    1840:	2000037c 	.word	0x2000037c

00001844 <z_log_dropped>:
{
    1844:	b510      	push	{r4, lr}
    1846:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    1848:	4808      	ldr	r0, [pc, #32]	; (186c <z_log_dropped+0x28>)
    184a:	f00b fe57 	bl	d4fc <atomic_inc>
	if (buffered) {
    184e:	b15c      	cbz	r4, 1868 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1850:	f3bf 8f5b 	dmb	ish
    1854:	4b06      	ldr	r3, [pc, #24]	; (1870 <z_log_dropped+0x2c>)
    1856:	e853 1f00 	ldrex	r1, [r3]
    185a:	3901      	subs	r1, #1
    185c:	e843 1200 	strex	r2, r1, [r3]
    1860:	2a00      	cmp	r2, #0
    1862:	d1f8      	bne.n	1856 <z_log_dropped+0x12>
    1864:	f3bf 8f5b 	dmb	ish
}
    1868:	bd10      	pop	{r4, pc}
    186a:	bf00      	nop
    186c:	20000c00 	.word	0x20000c00
    1870:	20000c04 	.word	0x20000c04

00001874 <z_log_dropped_read_and_clear>:
}
    1874:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1876:	4b06      	ldr	r3, [pc, #24]	; (1890 <z_log_dropped_read_and_clear+0x1c>)
    1878:	f3bf 8f5b 	dmb	ish
    187c:	4601      	mov	r1, r0
    187e:	e853 0f00 	ldrex	r0, [r3]
    1882:	e843 1200 	strex	r2, r1, [r3]
    1886:	2a00      	cmp	r2, #0
    1888:	d1f9      	bne.n	187e <z_log_dropped_read_and_clear+0xa>
    188a:	f3bf 8f5b 	dmb	ish
    188e:	4770      	bx	lr
    1890:	20000c00 	.word	0x20000c00

00001894 <dropped_notify>:
{
    1894:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1896:	f7ff ffed 	bl	1874 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    189a:	4c08      	ldr	r4, [pc, #32]	; (18bc <dropped_notify+0x28>)
    189c:	4e08      	ldr	r6, [pc, #32]	; (18c0 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    189e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18a0:	42b4      	cmp	r4, r6
    18a2:	d300      	bcc.n	18a6 <dropped_notify+0x12>
}
    18a4:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    18a6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    18a8:	795b      	ldrb	r3, [r3, #5]
    18aa:	b12b      	cbz	r3, 18b8 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    18ac:	6823      	ldr	r3, [r4, #0]
    18ae:	685b      	ldr	r3, [r3, #4]
    18b0:	b113      	cbz	r3, 18b8 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    18b2:	4629      	mov	r1, r5
    18b4:	4620      	mov	r0, r4
    18b6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18b8:	3410      	adds	r4, #16
    18ba:	e7f1      	b.n	18a0 <dropped_notify+0xc>
    18bc:	0000f060 	.word	0x0000f060
    18c0:	0000f080 	.word	0x0000f080

000018c4 <z_log_msg_init>:
{
    18c4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    18c6:	4c04      	ldr	r4, [pc, #16]	; (18d8 <z_log_msg_init+0x14>)
    18c8:	4904      	ldr	r1, [pc, #16]	; (18dc <z_log_msg_init+0x18>)
    18ca:	4620      	mov	r0, r4
    18cc:	f00b fca7 	bl	d21e <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    18d0:	4b03      	ldr	r3, [pc, #12]	; (18e0 <z_log_msg_init+0x1c>)
    18d2:	601c      	str	r4, [r3, #0]
}
    18d4:	bd10      	pop	{r4, pc}
    18d6:	bf00      	nop
    18d8:	2000026c 	.word	0x2000026c
    18dc:	0000f088 	.word	0x0000f088
    18e0:	20000bf8 	.word	0x20000bf8

000018e4 <log_core_init>:
	panic_mode = false;
    18e4:	4a08      	ldr	r2, [pc, #32]	; (1908 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    18e6:	4809      	ldr	r0, [pc, #36]	; (190c <log_core_init+0x28>)
{
    18e8:	b508      	push	{r3, lr}
	panic_mode = false;
    18ea:	2300      	movs	r3, #0
    18ec:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    18ee:	4a08      	ldr	r2, [pc, #32]	; (1910 <log_core_init+0x2c>)
    18f0:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    18f2:	4a08      	ldr	r2, [pc, #32]	; (1914 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    18f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    18f8:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    18fa:	f7ff ff85 	bl	1808 <log_set_timestamp_func>
}
    18fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    1902:	f7ff bfdf 	b.w	18c4 <z_log_msg_init>
    1906:	bf00      	nop
    1908:	200023fd 	.word	0x200023fd
    190c:	0000d4f9 	.word	0x0000d4f9
    1910:	20000c00 	.word	0x20000c00
    1914:	20000c04 	.word	0x20000c04

00001918 <z_log_msg_alloc>:
{
    1918:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    191a:	2200      	movs	r2, #0
    191c:	4801      	ldr	r0, [pc, #4]	; (1924 <z_log_msg_alloc+0xc>)
    191e:	2300      	movs	r3, #0
    1920:	f00b bc9e 	b.w	d260 <mpsc_pbuf_alloc>
    1924:	2000026c 	.word	0x2000026c

00001928 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1928:	4801      	ldr	r0, [pc, #4]	; (1930 <z_log_msg_local_claim+0x8>)
    192a:	f00b bd37 	b.w	d39c <mpsc_pbuf_claim>
    192e:	bf00      	nop
    1930:	2000026c 	.word	0x2000026c

00001934 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    1934:	4b02      	ldr	r3, [pc, #8]	; (1940 <z_log_msg_free+0xc>)
{
    1936:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    1938:	6818      	ldr	r0, [r3, #0]
    193a:	f00b bd81 	b.w	d440 <mpsc_pbuf_free>
    193e:	bf00      	nop
    1940:	20000bf8 	.word	0x20000bf8

00001944 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    1944:	4801      	ldr	r0, [pc, #4]	; (194c <z_log_msg_pending+0x8>)
    1946:	f00b bdb7 	b.w	d4b8 <mpsc_pbuf_is_pending>
    194a:	bf00      	nop
    194c:	2000026c 	.word	0x2000026c

00001950 <z_impl_log_process>:
{
    1950:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    1952:	4b28      	ldr	r3, [pc, #160]	; (19f4 <z_impl_log_process+0xa4>)
    1954:	7818      	ldrb	r0, [r3, #0]
    1956:	2800      	cmp	r0, #0
    1958:	d04b      	beq.n	19f2 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    195a:	f7ff ffe5 	bl	1928 <z_log_msg_local_claim>
	if (msg) {
    195e:	4605      	mov	r5, r0
    1960:	b190      	cbz	r0, 1988 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1962:	f3bf 8f5b 	dmb	ish
    1966:	4b24      	ldr	r3, [pc, #144]	; (19f8 <z_impl_log_process+0xa8>)
    1968:	e853 1f00 	ldrex	r1, [r3]
    196c:	3901      	subs	r1, #1
    196e:	e843 1200 	strex	r2, r1, [r3]
    1972:	2a00      	cmp	r2, #0
    1974:	d1f8      	bne.n	1968 <z_impl_log_process+0x18>
    1976:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    197a:	4c20      	ldr	r4, [pc, #128]	; (19fc <z_impl_log_process+0xac>)
    197c:	4e20      	ldr	r6, [pc, #128]	; (1a00 <z_impl_log_process+0xb0>)
    197e:	42b4      	cmp	r4, r6
    1980:	d32d      	bcc.n	19de <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    1982:	4628      	mov	r0, r5
    1984:	f7ff ffd6 	bl	1934 <z_log_msg_free>
	return dropped_cnt > 0;
    1988:	4b1e      	ldr	r3, [pc, #120]	; (1a04 <z_impl_log_process+0xb4>)
    198a:	4c1f      	ldr	r4, [pc, #124]	; (1a08 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    198c:	681b      	ldr	r3, [r3, #0]
    198e:	2b00      	cmp	r3, #0
    1990:	dd19      	ble.n	19c6 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    1992:	f00c ff6d 	bl	e870 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    1996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    199a:	fba0 0302 	umull	r0, r3, r0, r2
    199e:	fb02 3101 	mla	r1, r2, r1, r3
    19a2:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    19a4:	e9d4 2000 	ldrd	r2, r0, [r4]
    19a8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    19ac:	1a9b      	subs	r3, r3, r2
    19ae:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    19b2:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    19b6:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    19ba:	4293      	cmp	r3, r2
    19bc:	f171 0100 	sbcs.w	r1, r1, #0
    19c0:	d301      	bcc.n	19c6 <z_impl_log_process+0x76>
				dropped_notify();
    19c2:	f7ff ff67 	bl	1894 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    19c6:	e9d4 3200 	ldrd	r3, r2, [r4]
    19ca:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    19ce:	f142 0200 	adc.w	r2, r2, #0
    19d2:	e9c4 3200 	strd	r3, r2, [r4]
}
    19d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    19da:	f7ff bfb3 	b.w	1944 <z_log_msg_pending>
	return backend->cb->active;
    19de:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    19e0:	795b      	ldrb	r3, [r3, #5]
    19e2:	b123      	cbz	r3, 19ee <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    19e4:	6823      	ldr	r3, [r4, #0]
    19e6:	4629      	mov	r1, r5
    19e8:	681b      	ldr	r3, [r3, #0]
    19ea:	4620      	mov	r0, r4
    19ec:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    19ee:	3410      	adds	r4, #16
    19f0:	e7c5      	b.n	197e <z_impl_log_process+0x2e>
}
    19f2:	bd70      	pop	{r4, r5, r6, pc}
    19f4:	200023fc 	.word	0x200023fc
    19f8:	20000c04 	.word	0x20000c04
    19fc:	0000f060 	.word	0x0000f060
    1a00:	0000f080 	.word	0x0000f080
    1a04:	20000c00 	.word	0x20000c00
    1a08:	20000938 	.word	0x20000938

00001a0c <z_impl_log_panic>:
{
    1a0c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    1a0e:	4d0d      	ldr	r5, [pc, #52]	; (1a44 <z_impl_log_panic+0x38>)
    1a10:	7829      	ldrb	r1, [r5, #0]
    1a12:	b961      	cbnz	r1, 1a2e <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    1a14:	2001      	movs	r0, #1
    1a16:	f7ff fea9 	bl	176c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1a1a:	4c0b      	ldr	r4, [pc, #44]	; (1a48 <z_impl_log_panic+0x3c>)
    1a1c:	4e0b      	ldr	r6, [pc, #44]	; (1a4c <z_impl_log_panic+0x40>)
    1a1e:	42b4      	cmp	r4, r6
    1a20:	d306      	bcc.n	1a30 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1a22:	f7ff ff95 	bl	1950 <z_impl_log_process>
		while (log_process() == true) {
    1a26:	2800      	cmp	r0, #0
    1a28:	d1fb      	bne.n	1a22 <z_impl_log_panic+0x16>
	panic_mode = true;
    1a2a:	2301      	movs	r3, #1
    1a2c:	702b      	strb	r3, [r5, #0]
}
    1a2e:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    1a30:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1a32:	795b      	ldrb	r3, [r3, #5]
    1a34:	b11b      	cbz	r3, 1a3e <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    1a36:	6823      	ldr	r3, [r4, #0]
    1a38:	4620      	mov	r0, r4
    1a3a:	689b      	ldr	r3, [r3, #8]
    1a3c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1a3e:	3410      	adds	r4, #16
    1a40:	e7ed      	b.n	1a1e <z_impl_log_panic+0x12>
    1a42:	bf00      	nop
    1a44:	200023fd 	.word	0x200023fd
    1a48:	0000f060 	.word	0x0000f060
    1a4c:	0000f080 	.word	0x0000f080

00001a50 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    1a50:	2100      	movs	r1, #0
{
    1a52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1a56:	4608      	mov	r0, r1
    1a58:	f7ff fe88 	bl	176c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1a5c:	4604      	mov	r4, r0
    1a5e:	b348      	cbz	r0, 1ab4 <log_process_thread_func+0x64>
    1a60:	f240 6867 	movw	r8, #1639	; 0x667
    1a64:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    1a68:	f00a f9ca 	bl	be00 <z_impl_z_current_get>
	proc_tid = process_tid;
    1a6c:	4b1a      	ldr	r3, [pc, #104]	; (1ad8 <log_process_thread_func+0x88>)
    1a6e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1a70:	b130      	cbz	r0, 1a80 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1a72:	4b1a      	ldr	r3, [pc, #104]	; (1adc <log_process_thread_func+0x8c>)
	    process_tid &&
    1a74:	681b      	ldr	r3, [r3, #0]
    1a76:	2b09      	cmp	r3, #9
    1a78:	dd02      	ble.n	1a80 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    1a7a:	4819      	ldr	r0, [pc, #100]	; (1ae0 <log_process_thread_func+0x90>)
    1a7c:	f009 fd0c 	bl	b498 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1a80:	4f18      	ldr	r7, [pc, #96]	; (1ae4 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    1a82:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1ae0 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1a86:	2500      	movs	r5, #0
		if (activate_mask) {
    1a88:	b144      	cbz	r4, 1a9c <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    1a8a:	4620      	mov	r0, r4
    1a8c:	f7ff fe08 	bl	16a0 <activate_foreach_backend>
			if (!activate_mask) {
    1a90:	4604      	mov	r4, r0
    1a92:	b918      	cbnz	r0, 1a9c <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    1a94:	f04f 38ff 	mov.w	r8, #4294967295
    1a98:	f04f 39ff 	mov.w	r9, #4294967295
    1a9c:	f7ff ff58 	bl	1950 <z_impl_log_process>
		if (log_process() == false) {
    1aa0:	4606      	mov	r6, r0
    1aa2:	b928      	cbnz	r0, 1ab0 <log_process_thread_func+0x60>
			if (processed_any) {
    1aa4:	b9b5      	cbnz	r5, 1ad4 <log_process_thread_func+0x84>
    1aa6:	4642      	mov	r2, r8
    1aa8:	464b      	mov	r3, r9
    1aaa:	4650      	mov	r0, sl
    1aac:	f009 fd1a 	bl	b4e4 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1ab0:	4635      	mov	r5, r6
    1ab2:	e7e9      	b.n	1a88 <log_process_thread_func+0x38>
    1ab4:	f04f 38ff 	mov.w	r8, #4294967295
    1ab8:	f04f 39ff 	mov.w	r9, #4294967295
    1abc:	e7d4      	b.n	1a68 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    1abe:	682b      	ldr	r3, [r5, #0]
    1ac0:	699b      	ldr	r3, [r3, #24]
    1ac2:	b11b      	cbz	r3, 1acc <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    1ac4:	2200      	movs	r2, #0
    1ac6:	4611      	mov	r1, r2
    1ac8:	4628      	mov	r0, r5
    1aca:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1acc:	3510      	adds	r5, #16
    1ace:	42bd      	cmp	r5, r7
    1ad0:	d3f5      	bcc.n	1abe <log_process_thread_func+0x6e>
    1ad2:	e7e8      	b.n	1aa6 <log_process_thread_func+0x56>
    1ad4:	4d04      	ldr	r5, [pc, #16]	; (1ae8 <log_process_thread_func+0x98>)
    1ad6:	e7fa      	b.n	1ace <log_process_thread_func+0x7e>
    1ad8:	20000bfc 	.word	0x20000bfc
    1adc:	20000c04 	.word	0x20000c04
    1ae0:	2000037c 	.word	0x2000037c
    1ae4:	0000f080 	.word	0x0000f080
    1ae8:	0000f060 	.word	0x0000f060

00001aec <z_log_msg_post_finalize>:
{
    1aec:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    1aee:	4818      	ldr	r0, [pc, #96]	; (1b50 <z_log_msg_post_finalize+0x64>)
    1af0:	f00b fd04 	bl	d4fc <atomic_inc>
	if (panic_mode) {
    1af4:	4b17      	ldr	r3, [pc, #92]	; (1b54 <z_log_msg_post_finalize+0x68>)
    1af6:	781b      	ldrb	r3, [r3, #0]
    1af8:	b17b      	cbz	r3, 1b1a <z_log_msg_post_finalize+0x2e>
    1afa:	f04f 0320 	mov.w	r3, #32
    1afe:	f3ef 8411 	mrs	r4, BASEPRI
    1b02:	f383 8812 	msr	BASEPRI_MAX, r3
    1b06:	f3bf 8f6f 	isb	sy
    1b0a:	f7ff ff21 	bl	1950 <z_impl_log_process>
	__asm__ volatile(
    1b0e:	f384 8811 	msr	BASEPRI, r4
    1b12:	f3bf 8f6f 	isb	sy
}
    1b16:	b002      	add	sp, #8
    1b18:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    1b1a:	4b0f      	ldr	r3, [pc, #60]	; (1b58 <z_log_msg_post_finalize+0x6c>)
    1b1c:	681b      	ldr	r3, [r3, #0]
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d0f9      	beq.n	1b16 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    1b22:	b950      	cbnz	r0, 1b3a <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    1b24:	2200      	movs	r2, #0
    1b26:	2300      	movs	r3, #0
    1b28:	e9cd 2300 	strd	r2, r3, [sp]
    1b2c:	480b      	ldr	r0, [pc, #44]	; (1b5c <z_log_msg_post_finalize+0x70>)
    1b2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1b32:	2300      	movs	r3, #0
    1b34:	f00a fba8 	bl	c288 <z_impl_k_timer_start>
    1b38:	e7ed      	b.n	1b16 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1b3a:	280a      	cmp	r0, #10
    1b3c:	d1eb      	bne.n	1b16 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    1b3e:	4807      	ldr	r0, [pc, #28]	; (1b5c <z_log_msg_post_finalize+0x70>)
    1b40:	f00c feca 	bl	e8d8 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1b44:	4806      	ldr	r0, [pc, #24]	; (1b60 <z_log_msg_post_finalize+0x74>)
}
    1b46:	b002      	add	sp, #8
    1b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b4c:	f009 bca4 	b.w	b498 <z_impl_k_sem_give>
    1b50:	20000c04 	.word	0x20000c04
    1b54:	200023fd 	.word	0x200023fd
    1b58:	20000bfc 	.word	0x20000bfc
    1b5c:	20000940 	.word	0x20000940
    1b60:	2000037c 	.word	0x2000037c

00001b64 <z_log_msg_commit>:
{
    1b64:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1b66:	4b06      	ldr	r3, [pc, #24]	; (1b80 <z_log_msg_commit+0x1c>)
    1b68:	681b      	ldr	r3, [r3, #0]
{
    1b6a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1b6c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    1b6e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1b70:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    1b72:	4804      	ldr	r0, [pc, #16]	; (1b84 <z_log_msg_commit+0x20>)
    1b74:	f00b fbf2 	bl	d35c <mpsc_pbuf_commit>
}
    1b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1b7c:	f7ff bfb6 	b.w	1aec <z_log_msg_post_finalize>
    1b80:	20000004 	.word	0x20000004
    1b84:	2000026c 	.word	0x2000026c

00001b88 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1b88:	4a04      	ldr	r2, [pc, #16]	; (1b9c <log_source_name_get+0x14>)
    1b8a:	4b05      	ldr	r3, [pc, #20]	; (1ba0 <log_source_name_get+0x18>)
    1b8c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    1b8e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    1b92:	bf34      	ite	cc
    1b94:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    1b98:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    1b9a:	4770      	bx	lr
    1b9c:	0000ef88 	.word	0x0000ef88
    1ba0:	0000f060 	.word	0x0000f060

00001ba4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1ba4:	4b08      	ldr	r3, [pc, #32]	; (1bc8 <log_backend_enable+0x24>)
    1ba6:	1ac3      	subs	r3, r0, r3
{
    1ba8:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    1baa:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    1bac:	6844      	ldr	r4, [r0, #4]
    1bae:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    1bb0:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    1bb2:	6843      	ldr	r3, [r0, #4]
    1bb4:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    1bb6:	6843      	ldr	r3, [r0, #4]
    1bb8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1bba:	6843      	ldr	r3, [r0, #4]
    1bbc:	2201      	movs	r2, #1
    1bbe:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    1bc0:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    1bc2:	f7ff be31 	b.w	1828 <z_log_notify_backend_enabled>
    1bc6:	bf00      	nop
    1bc8:	0000f060 	.word	0x0000f060

00001bcc <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    1bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bd0:	b08f      	sub	sp, #60	; 0x3c
    1bd2:	af04      	add	r7, sp, #16
    1bd4:	f3c1 284a 	ubfx	r8, r1, #9, #11
    1bd8:	60b8      	str	r0, [r7, #8]
    1bda:	460d      	mov	r5, r1
    1bdc:	4691      	mov	r9, r2
    1bde:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    1be0:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    1be2:	f1b8 0f00 	cmp.w	r8, #0
    1be6:	d063      	beq.n	1cb0 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    1be8:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    1bea:	f107 0314 	add.w	r3, r7, #20
    1bee:	f04f 0b04 	mov.w	fp, #4
    1bf2:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    1bf6:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    1bfa:	e9c7 6607 	strd	r6, r6, [r7, #28]
    1bfe:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    1c00:	9301      	str	r3, [sp, #4]
    1c02:	f8cd b008 	str.w	fp, [sp, #8]
    1c06:	f8cd a000 	str.w	sl, [sp]
    1c0a:	f107 031c 	add.w	r3, r7, #28
    1c0e:	68f9      	ldr	r1, [r7, #12]
    1c10:	4632      	mov	r2, r6
    1c12:	4648      	mov	r0, r9
    1c14:	f7fe fe70 	bl	8f8 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    1c18:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    1c1c:	4603      	mov	r3, r0
    1c1e:	d31c      	bcc.n	1c5a <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    1c20:	466c      	mov	r4, sp
    1c22:	b08a      	sub	sp, #40	; 0x28
    1c24:	f8d9 1004 	ldr.w	r1, [r9, #4]
    1c28:	ab04      	add	r3, sp, #16
    1c2a:	4826      	ldr	r0, [pc, #152]	; (1cc4 <z_impl_z_log_msg_static_create+0xf8>)
    1c2c:	e9c3 0105 	strd	r0, r1, [r3, #20]
    1c30:	f240 71ff 	movw	r1, #2047	; 0x7ff
    1c34:	61d9      	str	r1, [r3, #28]
    1c36:	461a      	mov	r2, r3
    1c38:	f44f 7100 	mov.w	r1, #512	; 0x200
    1c3c:	8419      	strh	r1, [r3, #32]
    1c3e:	4b22      	ldr	r3, [pc, #136]	; (1cc8 <z_impl_z_log_msg_static_create+0xfc>)
    1c40:	f842 3f10 	str.w	r3, [r2, #16]!
    1c44:	4821      	ldr	r0, [pc, #132]	; (1ccc <z_impl_z_log_msg_static_create+0x100>)
    1c46:	4633      	mov	r3, r6
    1c48:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    1c4c:	f7ff ffbe 	bl	1bcc <z_impl_z_log_msg_static_create>
    1c50:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    1c52:	372c      	adds	r7, #44	; 0x2c
    1c54:	46bd      	mov	sp, r7
    1c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    1c5a:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    1c5e:	f104 0017 	add.w	r0, r4, #23
    1c62:	4418      	add	r0, r3
    1c64:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1c68:	0880      	lsrs	r0, r0, #2
    1c6a:	603b      	str	r3, [r7, #0]
    1c6c:	f7ff fe54 	bl	1918 <z_log_msg_alloc>
    1c70:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    1c74:	4604      	mov	r4, r0
    1c76:	b190      	cbz	r0, 1c9e <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    1c78:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    1c7a:	4a15      	ldr	r2, [pc, #84]	; (1cd0 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    1c7c:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    1c80:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    1c84:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    1c88:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    1c8a:	e9cd a300 	strd	sl, r3, [sp]
    1c8e:	f8cd b008 	str.w	fp, [sp, #8]
    1c92:	68f9      	ldr	r1, [r7, #12]
    1c94:	f107 031c 	add.w	r3, r7, #28
    1c98:	4648      	mov	r0, r9
    1c9a:	f7fe fe2d 	bl	8f8 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    1c9e:	f368 2553 	bfi	r5, r8, #9, #11
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	68b9      	ldr	r1, [r7, #8]
    1ca6:	462a      	mov	r2, r5
    1ca8:	4620      	mov	r0, r4
    1caa:	f00b fc5d 	bl	d568 <z_log_msg_finalize>
    1cae:	e7d0      	b.n	1c52 <z_impl_z_log_msg_static_create+0x86>
    1cb0:	f104 0017 	add.w	r0, r4, #23
    1cb4:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1cb8:	0880      	lsrs	r0, r0, #2
    1cba:	f7ff fe2d 	bl	1918 <z_log_msg_alloc>
    1cbe:	4604      	mov	r4, r0
    1cc0:	e7ed      	b.n	1c9e <z_impl_z_log_msg_static_create+0xd2>
    1cc2:	bf00      	nop
    1cc4:	0000f74f 	.word	0x0000f74f
    1cc8:	01000004 	.word	0x01000004
    1ccc:	0000efd0 	.word	0x0000efd0
    1cd0:	0000d53d 	.word	0x0000d53d

00001cd4 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cd8:	b087      	sub	sp, #28
    1cda:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    1cde:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    1ce2:	4604      	mov	r4, r0
    1ce4:	460f      	mov	r7, r1
    1ce6:	4693      	mov	fp, r2
    1ce8:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    1cea:	b3a6      	cbz	r6, 1d56 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    1cec:	2110      	movs	r1, #16
    1cee:	f8cd 9000 	str.w	r9, [sp]
    1cf2:	4633      	mov	r3, r6
    1cf4:	4652      	mov	r2, sl
    1cf6:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1cf8:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    1cfc:	f7fe fc26 	bl	54c <cbvprintf_package>
    1d00:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    1d02:	f105 0017 	add.w	r0, r5, #23
    1d06:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    1d08:	4b14      	ldr	r3, [pc, #80]	; (1d5c <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    1d0a:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    1d0c:	f004 0407 	and.w	r4, r4, #7
    1d10:	f00b 0b07 	and.w	fp, fp, #7
    1d14:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    1d16:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    1d1a:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    1d1e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    1d22:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    1d24:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    1d26:	f7ff fdf7 	bl	1918 <z_log_msg_alloc>
	struct log_msg_desc desc =
    1d2a:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    1d2e:	4605      	mov	r5, r0
    1d30:	b140      	cbz	r0, 1d44 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1d32:	b13e      	cbz	r6, 1d44 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    1d34:	9903      	ldr	r1, [sp, #12]
    1d36:	f8cd 9000 	str.w	r9, [sp]
    1d3a:	4633      	mov	r3, r6
    1d3c:	4652      	mov	r2, sl
    1d3e:	3010      	adds	r0, #16
    1d40:	f7fe fc04 	bl	54c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    1d44:	4643      	mov	r3, r8
    1d46:	4622      	mov	r2, r4
    1d48:	4639      	mov	r1, r7
    1d4a:	4628      	mov	r0, r5
	}
}
    1d4c:	b007      	add	sp, #28
    1d4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    1d52:	f00b bc09 	b.w	d568 <z_log_msg_finalize>
		plen = 0;
    1d56:	4631      	mov	r1, r6
    1d58:	e7d3      	b.n	1d02 <z_impl_z_log_msg_runtime_vcreate+0x2e>
    1d5a:	bf00      	nop
    1d5c:	000ffe00 	.word	0x000ffe00

00001d60 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1d60:	b40e      	push	{r1, r2, r3}
    1d62:	b503      	push	{r0, r1, lr}
    1d64:	ab03      	add	r3, sp, #12
    1d66:	4601      	mov	r1, r0
    1d68:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1d6c:	4804      	ldr	r0, [pc, #16]	; (1d80 <print_formatted+0x20>)
	va_start(args, fmt);
    1d6e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1d70:	f00b fc20 	bl	d5b4 <cbvprintf>
	va_end(args);

	return length;
}
    1d74:	b002      	add	sp, #8
    1d76:	f85d eb04 	ldr.w	lr, [sp], #4
    1d7a:	b003      	add	sp, #12
    1d7c:	4770      	bx	lr
    1d7e:	bf00      	nop
    1d80:	0000d5dd 	.word	0x0000d5dd

00001d84 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1d84:	06ca      	lsls	r2, r1, #27
    1d86:	d405      	bmi.n	1d94 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1d88:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    1d8a:	bf4c      	ite	mi
    1d8c:	4902      	ldrmi	r1, [pc, #8]	; (1d98 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    1d8e:	4903      	ldrpl	r1, [pc, #12]	; (1d9c <newline_print+0x18>)
    1d90:	f7ff bfe6 	b.w	1d60 <print_formatted>
	}
}
    1d94:	4770      	bx	lr
    1d96:	bf00      	nop
    1d98:	0000f78f 	.word	0x0000f78f
    1d9c:	0000f78e 	.word	0x0000f78e

00001da0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    1da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1da4:	b089      	sub	sp, #36	; 0x24
    1da6:	469b      	mov	fp, r3
    1da8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1dac:	9304      	str	r3, [sp, #16]
    1dae:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    1db2:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    1db4:	9b04      	ldr	r3, [sp, #16]
{
    1db6:	9206      	str	r2, [sp, #24]
    1db8:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    1dbc:	4604      	mov	r4, r0
    1dbe:	460d      	mov	r5, r1
	if (!raw_string) {
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	f000 8087 	beq.w	1ed4 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1dc6:	f006 0308 	and.w	r3, r6, #8
    1dca:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    1dcc:	f00b fbb4 	bl	d538 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1dd0:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    1dd4:	4602      	mov	r2, r0
    1dd6:	2800      	cmp	r0, #0
    1dd8:	d04b      	beq.n	1e72 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    1dda:	4986      	ldr	r1, [pc, #536]	; (1ff4 <log_output_process+0x254>)
    1ddc:	4620      	mov	r0, r4
    1dde:	f7ff ffbf 	bl	1d60 <print_formatted>
    1de2:	4680      	mov	r8, r0
	if (stamp) {
    1de4:	f1ba 0f00 	cmp.w	sl, #0
    1de8:	d008      	beq.n	1dfc <log_output_process+0x5c>
	if (!format) {
    1dea:	f016 0f44 	tst.w	r6, #68	; 0x44
    1dee:	d142      	bne.n	1e76 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1df0:	4981      	ldr	r1, [pc, #516]	; (1ff8 <log_output_process+0x258>)
    1df2:	462a      	mov	r2, r5
    1df4:	4620      	mov	r0, r4
    1df6:	f7ff ffb3 	bl	1d60 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1dfa:	4480      	add	r8, r0
	if (color) {
    1dfc:	f006 0301 	and.w	r3, r6, #1
    1e00:	b15b      	cbz	r3, 1e1a <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    1e02:	4b7e      	ldr	r3, [pc, #504]	; (1ffc <log_output_process+0x25c>)
    1e04:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    1e06:	497e      	ldr	r1, [pc, #504]	; (2000 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    1e08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    1e0c:	4b7d      	ldr	r3, [pc, #500]	; (2004 <log_output_process+0x264>)
    1e0e:	4620      	mov	r0, r4
    1e10:	2a00      	cmp	r2, #0
    1e12:	bf08      	it	eq
    1e14:	461a      	moveq	r2, r3
    1e16:	f7ff ffa3 	bl	1d60 <print_formatted>
	if (level_on) {
    1e1a:	f006 0308 	and.w	r3, r6, #8
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d055      	beq.n	1ece <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    1e22:	4b79      	ldr	r3, [pc, #484]	; (2008 <log_output_process+0x268>)
    1e24:	9a04      	ldr	r2, [sp, #16]
    1e26:	4979      	ldr	r1, [pc, #484]	; (200c <log_output_process+0x26c>)
    1e28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1e2c:	4620      	mov	r0, r4
    1e2e:	f7ff ff97 	bl	1d60 <print_formatted>
    1e32:	4605      	mov	r5, r0
	if (domain) {
    1e34:	9b06      	ldr	r3, [sp, #24]
    1e36:	b12b      	cbz	r3, 1e44 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    1e38:	4975      	ldr	r1, [pc, #468]	; (2010 <log_output_process+0x270>)
    1e3a:	461a      	mov	r2, r3
    1e3c:	4620      	mov	r0, r4
    1e3e:	f7ff ff8f 	bl	1d60 <print_formatted>
    1e42:	4405      	add	r5, r0
	if (source) {
    1e44:	f1bb 0f00 	cmp.w	fp, #0
    1e48:	d005      	beq.n	1e56 <log_output_process+0xb6>
		total += print_formatted(output,
    1e4a:	4972      	ldr	r1, [pc, #456]	; (2014 <log_output_process+0x274>)
    1e4c:	465a      	mov	r2, fp
    1e4e:	4620      	mov	r0, r4
    1e50:	f7ff ff86 	bl	1d60 <print_formatted>
    1e54:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    1e56:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    1e58:	f1b9 0f00 	cmp.w	r9, #0
    1e5c:	d149      	bne.n	1ef2 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    1e5e:	2f00      	cmp	r7, #0
    1e60:	d14f      	bne.n	1f02 <log_output_process+0x162>
	if (color) {
    1e62:	07f3      	lsls	r3, r6, #31
    1e64:	f100 80c0 	bmi.w	1fe8 <log_output_process+0x248>
	newline_print(output, flags);
    1e68:	4631      	mov	r1, r6
    1e6a:	4620      	mov	r0, r4
    1e6c:	f7ff ff8a 	bl	1d84 <newline_print>
}
    1e70:	e0b4      	b.n	1fdc <log_output_process+0x23c>
	uint32_t length = 0U;
    1e72:	4680      	mov	r8, r0
    1e74:	e7b6      	b.n	1de4 <log_output_process+0x44>
	} else if (freq != 0U) {
    1e76:	4b68      	ldr	r3, [pc, #416]	; (2018 <log_output_process+0x278>)
    1e78:	6818      	ldr	r0, [r3, #0]
    1e7a:	2800      	cmp	r0, #0
    1e7c:	d0bd      	beq.n	1dfa <log_output_process+0x5a>
		timestamp /= timestamp_div;
    1e7e:	4b67      	ldr	r3, [pc, #412]	; (201c <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    1e80:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1e84:	681b      	ldr	r3, [r3, #0]
    1e86:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    1e8a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1e8e:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    1e92:	fb00 5513 	mls	r5, r0, r3, r5
    1e96:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    1e9a:	fb0e f505 	mul.w	r5, lr, r5
    1e9e:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    1ea2:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1ea4:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    1ea8:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1eac:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    1eb0:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1eb4:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    1eb8:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1eba:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    1ebe:	4958      	ldr	r1, [pc, #352]	; (2020 <log_output_process+0x280>)
    1ec0:	e9cd c501 	strd	ip, r5, [sp, #4]
    1ec4:	4652      	mov	r2, sl
    1ec6:	4620      	mov	r0, r4
    1ec8:	f7ff ff4a 	bl	1d60 <print_formatted>
    1ecc:	e795      	b.n	1dfa <log_output_process+0x5a>
	int total = 0;
    1ece:	f006 0508 	and.w	r5, r6, #8
    1ed2:	e7af      	b.n	1e34 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1ed4:	f1bb 0f01 	cmp.w	fp, #1
    1ed8:	d106      	bne.n	1ee8 <log_output_process+0x148>
	if (package) {
    1eda:	f1b9 0f00 	cmp.w	r9, #0
    1ede:	d164      	bne.n	1faa <log_output_process+0x20a>
	if (data_len) {
    1ee0:	2f00      	cmp	r7, #0
    1ee2:	d07b      	beq.n	1fdc <log_output_process+0x23c>
		prefix_offset = 0;
    1ee4:	2500      	movs	r5, #0
    1ee6:	e00c      	b.n	1f02 <log_output_process+0x162>
	if (package) {
    1ee8:	f1b9 0f00 	cmp.w	r9, #0
    1eec:	d0f8      	beq.n	1ee0 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1eee:	484d      	ldr	r0, [pc, #308]	; (2024 <log_output_process+0x284>)
    1ef0:	e05c      	b.n	1fac <log_output_process+0x20c>
		cb = out_func;
    1ef2:	484d      	ldr	r0, [pc, #308]	; (2028 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1ef4:	494d      	ldr	r1, [pc, #308]	; (202c <log_output_process+0x28c>)
    1ef6:	464b      	mov	r3, r9
    1ef8:	4622      	mov	r2, r4
    1efa:	f00a fca1 	bl	c840 <cbpprintf_external>
	if (data_len) {
    1efe:	2f00      	cmp	r7, #0
    1f00:	d068      	beq.n	1fd4 <log_output_process+0x234>
		print_formatted(output, " ");
    1f02:	f8df 912c 	ldr.w	r9, [pc, #300]	; 2030 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    1f06:	f8df a12c 	ldr.w	sl, [pc, #300]	; 2034 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1f0a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    1f0c:	4631      	mov	r1, r6
    1f0e:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1f10:	46b8      	mov	r8, r7
    1f12:	bf28      	it	cs
    1f14:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    1f18:	f7ff ff34 	bl	1d84 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    1f1c:	f04f 0b00 	mov.w	fp, #0
    1f20:	455d      	cmp	r5, fp
    1f22:	dc45      	bgt.n	1fb0 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    1f24:	9b05      	ldr	r3, [sp, #20]
    1f26:	4651      	mov	r1, sl
    1f28:	781a      	ldrb	r2, [r3, #0]
    1f2a:	4620      	mov	r0, r4
    1f2c:	f7ff ff18 	bl	1d60 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f30:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    1f34:	f01b 0f07 	tst.w	fp, #7
    1f38:	d103      	bne.n	1f42 <log_output_process+0x1a2>
			print_formatted(output, " ");
    1f3a:	4649      	mov	r1, r9
    1f3c:	4620      	mov	r0, r4
    1f3e:	f7ff ff0f 	bl	1d60 <print_formatted>
		if (i < length) {
    1f42:	45d8      	cmp	r8, fp
    1f44:	d93b      	bls.n	1fbe <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    1f46:	9b05      	ldr	r3, [sp, #20]
    1f48:	4651      	mov	r1, sl
    1f4a:	f813 200b 	ldrb.w	r2, [r3, fp]
    1f4e:	4620      	mov	r0, r4
    1f50:	f7ff ff06 	bl	1d60 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f54:	f10b 0b01 	add.w	fp, fp, #1
    1f58:	f1bb 0f10 	cmp.w	fp, #16
    1f5c:	d1ea      	bne.n	1f34 <log_output_process+0x194>
	print_formatted(output, "|");
    1f5e:	4936      	ldr	r1, [pc, #216]	; (2038 <log_output_process+0x298>)
    1f60:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f62:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    1f66:	f7ff fefb 	bl	1d60 <print_formatted>
		if (i < length) {
    1f6a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    1f6c:	9b05      	ldr	r3, [sp, #20]
    1f6e:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    1f70:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    1f74:	295f      	cmp	r1, #95	; 0x5f
    1f76:	bf28      	it	cs
    1f78:	222e      	movcs	r2, #46	; 0x2e
    1f7a:	4930      	ldr	r1, [pc, #192]	; (203c <log_output_process+0x29c>)
    1f7c:	4620      	mov	r0, r4
    1f7e:	f7ff feef 	bl	1d60 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f82:	f10b 0b01 	add.w	fp, fp, #1
    1f86:	f1bb 0f10 	cmp.w	fp, #16
    1f8a:	d01d      	beq.n	1fc8 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    1f8c:	f01b 0f07 	tst.w	fp, #7
    1f90:	d103      	bne.n	1f9a <log_output_process+0x1fa>
			print_formatted(output, " ");
    1f92:	4649      	mov	r1, r9
    1f94:	4620      	mov	r0, r4
    1f96:	f7ff fee3 	bl	1d60 <print_formatted>
		if (i < length) {
    1f9a:	45d8      	cmp	r8, fp
    1f9c:	465a      	mov	r2, fp
    1f9e:	d8e5      	bhi.n	1f6c <log_output_process+0x1cc>
			print_formatted(output, " ");
    1fa0:	4649      	mov	r1, r9
    1fa2:	4620      	mov	r0, r4
    1fa4:	f7ff fedc 	bl	1d60 <print_formatted>
    1fa8:	e7eb      	b.n	1f82 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1faa:	481f      	ldr	r0, [pc, #124]	; (2028 <log_output_process+0x288>)
		prefix_offset = 0;
    1fac:	9d04      	ldr	r5, [sp, #16]
    1fae:	e7a1      	b.n	1ef4 <log_output_process+0x154>
		print_formatted(output, " ");
    1fb0:	4649      	mov	r1, r9
    1fb2:	4620      	mov	r0, r4
    1fb4:	f7ff fed4 	bl	1d60 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1fb8:	f10b 0b01 	add.w	fp, fp, #1
    1fbc:	e7b0      	b.n	1f20 <log_output_process+0x180>
			print_formatted(output, "   ");
    1fbe:	4920      	ldr	r1, [pc, #128]	; (2040 <log_output_process+0x2a0>)
    1fc0:	4620      	mov	r0, r4
    1fc2:	f7ff fecd 	bl	1d60 <print_formatted>
    1fc6:	e7c5      	b.n	1f54 <log_output_process+0x1b4>
		data += length;
    1fc8:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    1fca:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    1fce:	4443      	add	r3, r8
    1fd0:	9305      	str	r3, [sp, #20]
	} while (len);
    1fd2:	d19a      	bne.n	1f0a <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    1fd4:	9b04      	ldr	r3, [sp, #16]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	f47f af43 	bne.w	1e62 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    1fdc:	4620      	mov	r0, r4
}
    1fde:	b009      	add	sp, #36	; 0x24
    1fe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    1fe4:	f00b baed 	b.w	d5c2 <log_output_flush>
		print_formatted(output, "%s", log_color);
    1fe8:	4a06      	ldr	r2, [pc, #24]	; (2004 <log_output_process+0x264>)
    1fea:	4905      	ldr	r1, [pc, #20]	; (2000 <log_output_process+0x260>)
    1fec:	4620      	mov	r0, r4
    1fee:	f7ff feb7 	bl	1d60 <print_formatted>
}
    1ff2:	e739      	b.n	1e68 <log_output_process+0xc8>
    1ff4:	0000f796 	.word	0x0000f796
    1ff8:	0000f79a 	.word	0x0000f79a
    1ffc:	0000f0ac 	.word	0x0000f0ac
    2000:	00010501 	.word	0x00010501
    2004:	0000f791 	.word	0x0000f791
    2008:	0000f0c0 	.word	0x0000f0c0
    200c:	0000f7bf 	.word	0x0000f7bf
    2010:	0000f7c5 	.word	0x0000f7c5
    2014:	0000f7c9 	.word	0x0000f7c9
    2018:	20000c10 	.word	0x20000c10
    201c:	20000c0c 	.word	0x20000c0c
    2020:	0000f7a3 	.word	0x0000f7a3
    2024:	0000d613 	.word	0x0000d613
    2028:	0000d5dd 	.word	0x0000d5dd
    202c:	0000d5b5 	.word	0x0000d5b5
    2030:	0000f64b 	.word	0x0000f64b
    2034:	0000f7ce 	.word	0x0000f7ce
    2038:	0000f7d8 	.word	0x0000f7d8
    203c:	0000f7da 	.word	0x0000f7da
    2040:	0000f7d4 	.word	0x0000f7d4

00002044 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    2048:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    204a:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    204c:	688e      	ldr	r6, [r1, #8]
    204e:	b086      	sub	sp, #24
    2050:	4605      	mov	r5, r0
    2052:	460c      	mov	r4, r1
    2054:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    2056:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    205a:	b15b      	cbz	r3, 2074 <log_output_msg_process+0x30>
    205c:	4a13      	ldr	r2, [pc, #76]	; (20ac <log_output_msg_process+0x68>)
    205e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    2060:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2064:	2900      	cmp	r1, #0
    2066:	db1f      	blt.n	20a8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    2068:	7820      	ldrb	r0, [r4, #0]
    206a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    206e:	f7ff fd8b 	bl	1b88 <log_source_name_get>
    2072:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2074:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    2076:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    2078:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    207c:	9700      	str	r7, [sp, #0]
    207e:	f3c2 224a 	ubfx	r2, r2, #9, #11
    2082:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    2084:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    2088:	f3c0 100b 	ubfx	r0, r0, #4, #12
    208c:	bf08      	it	eq
    208e:	2100      	moveq	r1, #0
    2090:	e9cd 0803 	strd	r0, r8, [sp, #12]
    2094:	e9cd 1401 	strd	r1, r4, [sp, #4]
    2098:	2200      	movs	r2, #0
    209a:	4631      	mov	r1, r6
    209c:	4628      	mov	r0, r5
    209e:	f7ff fe7f 	bl	1da0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    20a2:	b006      	add	sp, #24
    20a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    20a8:	2300      	movs	r3, #0
    20aa:	e7e3      	b.n	2074 <log_output_msg_process+0x30>
    20ac:	0000ef88 	.word	0x0000ef88

000020b0 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    20b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20b2:	f242 730f 	movw	r3, #9999	; 0x270f
    20b6:	428b      	cmp	r3, r1
    20b8:	bf28      	it	cs
    20ba:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    20bc:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20be:	4a0f      	ldr	r2, [pc, #60]	; (20fc <log_output_dropped_process+0x4c>)
{
    20c0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20c2:	2105      	movs	r1, #5
    20c4:	4668      	mov	r0, sp
    20c6:	f00a fc33 	bl	c930 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    20ca:	6863      	ldr	r3, [r4, #4]
    20cc:	490c      	ldr	r1, [pc, #48]	; (2100 <log_output_dropped_process+0x50>)
    20ce:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20d0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    20d2:	220b      	movs	r2, #11
    20d4:	4628      	mov	r0, r5
    20d6:	f00b fa60 	bl	d59a <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    20da:	6863      	ldr	r3, [r4, #4]
    20dc:	4632      	mov	r2, r6
    20de:	4669      	mov	r1, sp
    20e0:	4628      	mov	r0, r5
    20e2:	685b      	ldr	r3, [r3, #4]
    20e4:	f00b fa59 	bl	d59a <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    20e8:	6863      	ldr	r3, [r4, #4]
    20ea:	4906      	ldr	r1, [pc, #24]	; (2104 <log_output_dropped_process+0x54>)
    20ec:	685b      	ldr	r3, [r3, #4]
    20ee:	221b      	movs	r2, #27
    20f0:	4628      	mov	r0, r5
    20f2:	f00b fa52 	bl	d59a <buffer_write>
		     output->control_block->ctx);
}
    20f6:	b002      	add	sp, #8
    20f8:	bd70      	pop	{r4, r5, r6, pc}
    20fa:	bf00      	nop
    20fc:	0001026c 	.word	0x0001026c
    2100:	0000f7f9 	.word	0x0000f7f9
    2104:	0000f7dd 	.word	0x0000f7dd

00002108 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2108:	4a07      	ldr	r2, [pc, #28]	; (2128 <log_output_timestamp_freq_set+0x20>)
    210a:	2100      	movs	r1, #0
    210c:	2301      	movs	r3, #1
    210e:	4290      	cmp	r0, r2
    2110:	d806      	bhi.n	2120 <log_output_timestamp_freq_set+0x18>
    2112:	4a06      	ldr	r2, [pc, #24]	; (212c <log_output_timestamp_freq_set+0x24>)
    2114:	b901      	cbnz	r1, 2118 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    2116:	2301      	movs	r3, #1
    2118:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    211a:	4b05      	ldr	r3, [pc, #20]	; (2130 <log_output_timestamp_freq_set+0x28>)
    211c:	6018      	str	r0, [r3, #0]
}
    211e:	4770      	bx	lr
		frequency /= 2U;
    2120:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2122:	005b      	lsls	r3, r3, #1
    2124:	2101      	movs	r1, #1
    2126:	e7f2      	b.n	210e <log_output_timestamp_freq_set+0x6>
    2128:	000f4240 	.word	0x000f4240
    212c:	20000c0c 	.word	0x20000c0c
    2130:	20000c10 	.word	0x20000c10

00002134 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2134:	4b01      	ldr	r3, [pc, #4]	; (213c <log_backend_rtt_init+0x8>)
    2136:	2201      	movs	r2, #1
    2138:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    213a:	4770      	bx	lr
    213c:	200023fe 	.word	0x200023fe

00002140 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2140:	4b01      	ldr	r3, [pc, #4]	; (2148 <format_set+0x8>)
	return 0;
}
    2142:	2000      	movs	r0, #0
	log_format_current = log_type;
    2144:	6019      	str	r1, [r3, #0]
}
    2146:	4770      	bx	lr
    2148:	20000c28 	.word	0x20000c28

0000214c <panic>:
	panic_mode = true;
    214c:	4b02      	ldr	r3, [pc, #8]	; (2158 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    214e:	4803      	ldr	r0, [pc, #12]	; (215c <panic+0x10>)
    2150:	2201      	movs	r2, #1
    2152:	701a      	strb	r2, [r3, #0]
    2154:	f00b ba35 	b.w	d5c2 <log_output_flush>
    2158:	200023ff 	.word	0x200023ff
    215c:	0000f0f0 	.word	0x0000f0f0

00002160 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2160:	4801      	ldr	r0, [pc, #4]	; (2168 <dropped+0x8>)
    2162:	f7ff bfa5 	b.w	20b0 <log_output_dropped_process>
    2166:	bf00      	nop
    2168:	0000f0f0 	.word	0x0000f0f0

0000216c <process>:
{
    216c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    216e:	4b06      	ldr	r3, [pc, #24]	; (2188 <process+0x1c>)
    2170:	6818      	ldr	r0, [r3, #0]
{
    2172:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2174:	f7ff fb42 	bl	17fc <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    2178:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    217a:	4603      	mov	r3, r0
}
    217c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    2180:	4802      	ldr	r0, [pc, #8]	; (218c <process+0x20>)
    2182:	220f      	movs	r2, #15
    2184:	4718      	bx	r3
    2186:	bf00      	nop
    2188:	20000c28 	.word	0x20000c28
    218c:	0000f0f0 	.word	0x0000f0f0

00002190 <on_failed_write>:
	if (retry_cnt == 0) {
    2190:	b910      	cbnz	r0, 2198 <on_failed_write+0x8>
		host_present = false;
    2192:	4b07      	ldr	r3, [pc, #28]	; (21b0 <on_failed_write+0x20>)
    2194:	7018      	strb	r0, [r3, #0]
}
    2196:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2198:	4b06      	ldr	r3, [pc, #24]	; (21b4 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    219a:	781b      	ldrb	r3, [r3, #0]
    219c:	b11b      	cbz	r3, 21a6 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    219e:	f241 3088 	movw	r0, #5000	; 0x1388
    21a2:	f00c bb67 	b.w	e874 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    21a6:	20a4      	movs	r0, #164	; 0xa4
    21a8:	2100      	movs	r1, #0
    21aa:	f009 bdf5 	b.w	bd98 <z_impl_k_sleep>
    21ae:	bf00      	nop
    21b0:	200023fe 	.word	0x200023fe
    21b4:	200023ff 	.word	0x200023ff

000021b8 <data_out_block_mode>:
{
    21b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    21bc:	f8df 9074 	ldr.w	r9, [pc, #116]	; 2234 <data_out_block_mode+0x7c>
    21c0:	4f1d      	ldr	r7, [pc, #116]	; (2238 <data_out_block_mode+0x80>)
{
    21c2:	4680      	mov	r8, r0
    21c4:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    21c6:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    21c8:	f899 5000 	ldrb.w	r5, [r9]
    21cc:	b995      	cbnz	r5, 21f4 <data_out_block_mode+0x3c>
			RTT_LOCK();
    21ce:	f008 fde3 	bl	ad98 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    21d2:	4628      	mov	r0, r5
    21d4:	4632      	mov	r2, r6
    21d6:	4641      	mov	r1, r8
    21d8:	f008 fd8c 	bl	acf4 <SEGGER_RTT_WriteSkipNoLock>
    21dc:	4605      	mov	r5, r0
			RTT_UNLOCK();
    21de:	f008 fde5 	bl	adac <zephyr_rtt_mutex_unlock>
		if (ret) {
    21e2:	b1e5      	cbz	r5, 221e <data_out_block_mode+0x66>
	host_present = true;
    21e4:	2301      	movs	r3, #1
    21e6:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    21e8:	f899 3000 	ldrb.w	r3, [r9]
    21ec:	b973      	cbnz	r3, 220c <data_out_block_mode+0x54>
}
    21ee:	4630      	mov	r0, r6
    21f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    21f4:	4632      	mov	r2, r6
    21f6:	4641      	mov	r1, r8
    21f8:	2000      	movs	r0, #0
    21fa:	f008 fd7b 	bl	acf4 <SEGGER_RTT_WriteSkipNoLock>
    21fe:	4605      	mov	r5, r0
    2200:	e7ef      	b.n	21e2 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    2202:	4620      	mov	r0, r4
    2204:	f7ff ffc4 	bl	2190 <on_failed_write>
    2208:	1e65      	subs	r5, r4, #1
    220a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    220c:	2000      	movs	r0, #0
    220e:	f008 fdb9 	bl	ad84 <SEGGER_RTT_HasDataUp>
    2212:	2800      	cmp	r0, #0
    2214:	d0eb      	beq.n	21ee <data_out_block_mode+0x36>
    2216:	783b      	ldrb	r3, [r7, #0]
    2218:	2b00      	cmp	r3, #0
    221a:	d1f2      	bne.n	2202 <data_out_block_mode+0x4a>
    221c:	e7e7      	b.n	21ee <data_out_block_mode+0x36>
		} else if (host_present) {
    221e:	783b      	ldrb	r3, [r7, #0]
    2220:	2b00      	cmp	r3, #0
    2222:	d0e4      	beq.n	21ee <data_out_block_mode+0x36>
			retry_cnt--;
    2224:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    2226:	4620      	mov	r0, r4
    2228:	f7ff ffb2 	bl	2190 <on_failed_write>
	} while ((ret == 0) && host_present);
    222c:	783b      	ldrb	r3, [r7, #0]
    222e:	2b00      	cmp	r3, #0
    2230:	d1ca      	bne.n	21c8 <data_out_block_mode+0x10>
    2232:	e7dc      	b.n	21ee <data_out_block_mode+0x36>
    2234:	200023ff 	.word	0x200023ff
    2238:	200023fe 	.word	0x200023fe

0000223c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    223c:	4b01      	ldr	r3, [pc, #4]	; (2244 <format_set+0x8>)
	return 0;
}
    223e:	2000      	movs	r0, #0
	log_format_current = log_type;
    2240:	6019      	str	r1, [r3, #0]
}
    2242:	4770      	bx	lr
    2244:	20000c40 	.word	0x20000c40

00002248 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    2248:	4b02      	ldr	r3, [pc, #8]	; (2254 <panic+0xc>)
	log_output_flush(output);
    224a:	4803      	ldr	r0, [pc, #12]	; (2258 <panic+0x10>)
    224c:	2201      	movs	r2, #1
    224e:	701a      	strb	r2, [r3, #0]
    2250:	f00b b9b7 	b.w	d5c2 <log_output_flush>
    2254:	20002411 	.word	0x20002411
    2258:	0000f11c 	.word	0x0000f11c

0000225c <dropped>:
	log_output_dropped_process(output, cnt);
    225c:	4801      	ldr	r0, [pc, #4]	; (2264 <dropped+0x8>)
    225e:	f7ff bf27 	b.w	20b0 <log_output_dropped_process>
    2262:	bf00      	nop
    2264:	0000f11c 	.word	0x0000f11c

00002268 <process>:
{
    2268:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    226a:	4b06      	ldr	r3, [pc, #24]	; (2284 <process+0x1c>)
    226c:	6818      	ldr	r0, [r3, #0]
{
    226e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2270:	f7ff fac4 	bl	17fc <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    2274:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2276:	4603      	mov	r3, r0
}
    2278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    227c:	4802      	ldr	r0, [pc, #8]	; (2288 <process+0x20>)
    227e:	220f      	movs	r2, #15
    2280:	4718      	bx	r3
    2282:	bf00      	nop
    2284:	20000c40 	.word	0x20000c40
    2288:	0000f11c 	.word	0x0000f11c

0000228c <char_out>:
{
    228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    228e:	4f07      	ldr	r7, [pc, #28]	; (22ac <char_out+0x20>)
    2290:	460d      	mov	r5, r1
    2292:	4604      	mov	r4, r0
    2294:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    2296:	42b4      	cmp	r4, r6
    2298:	d101      	bne.n	229e <char_out+0x12>
}
    229a:	4628      	mov	r0, r5
    229c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    229e:	f814 1b01 	ldrb.w	r1, [r4], #1
    22a2:	68bb      	ldr	r3, [r7, #8]
    22a4:	4801      	ldr	r0, [pc, #4]	; (22ac <char_out+0x20>)
    22a6:	685b      	ldr	r3, [r3, #4]
    22a8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    22aa:	e7f4      	b.n	2296 <char_out+0xa>
    22ac:	0000ed6c 	.word	0x0000ed6c

000022b0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    22b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    22b4:	4605      	mov	r5, r0
	__asm__ volatile(
    22b6:	f04f 0320 	mov.w	r3, #32
    22ba:	f3ef 8611 	mrs	r6, BASEPRI
    22be:	f383 8812 	msr	BASEPRI_MAX, r3
    22c2:	f3bf 8f6f 	isb	sy
	return list->head;
    22c6:	4b0e      	ldr	r3, [pc, #56]	; (2300 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    22c8:	4f0e      	ldr	r7, [pc, #56]	; (2304 <pm_state_notify+0x54>)
    22ca:	681c      	ldr	r4, [r3, #0]
    22cc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2308 <pm_state_notify+0x58>
    22d0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    22d4:	b92c      	cbnz	r4, 22e2 <pm_state_notify+0x32>
	__asm__ volatile(
    22d6:	f386 8811 	msr	BASEPRI, r6
    22da:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    22de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    22e2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    22e6:	2d00      	cmp	r5, #0
    22e8:	bf18      	it	ne
    22ea:	4613      	movne	r3, r2
		if (callback) {
    22ec:	b12b      	cbz	r3, 22fa <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    22ee:	f898 2010 	ldrb.w	r2, [r8, #16]
    22f2:	fb09 f202 	mul.w	r2, r9, r2
    22f6:	5cb8      	ldrb	r0, [r7, r2]
    22f8:	4798      	blx	r3
	return node->next;
    22fa:	6824      	ldr	r4, [r4, #0]
    22fc:	e7ea      	b.n	22d4 <pm_state_notify+0x24>
    22fe:	bf00      	nop
    2300:	20000c5c 	.word	0x20000c5c
    2304:	20000c50 	.word	0x20000c50
    2308:	200021e8 	.word	0x200021e8

0000230c <pm_system_resume>:

void pm_system_resume(void)
{
    230c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    230e:	4b19      	ldr	r3, [pc, #100]	; (2374 <pm_system_resume+0x68>)
    2310:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2312:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2316:	f004 031f 	and.w	r3, r4, #31
    231a:	2201      	movs	r2, #1
    231c:	409a      	lsls	r2, r3
    231e:	4b16      	ldr	r3, [pc, #88]	; (2378 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2320:	0961      	lsrs	r1, r4, #5
    2322:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2326:	43d0      	mvns	r0, r2
    2328:	e853 1f00 	ldrex	r1, [r3]
    232c:	ea01 0500 	and.w	r5, r1, r0
    2330:	e843 5600 	strex	r6, r5, [r3]
    2334:	2e00      	cmp	r6, #0
    2336:	d1f7      	bne.n	2328 <pm_system_resume+0x1c>
    2338:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    233c:	420a      	tst	r2, r1
    233e:	d013      	beq.n	2368 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2340:	4b0e      	ldr	r3, [pc, #56]	; (237c <pm_system_resume+0x70>)
    2342:	4d0f      	ldr	r5, [pc, #60]	; (2380 <pm_system_resume+0x74>)
    2344:	b18b      	cbz	r3, 236a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2346:	230c      	movs	r3, #12
    2348:	4363      	muls	r3, r4
    234a:	18ea      	adds	r2, r5, r3
    234c:	5ce8      	ldrb	r0, [r5, r3]
    234e:	7851      	ldrb	r1, [r2, #1]
    2350:	f00b f9d2 	bl	d6f8 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2354:	2000      	movs	r0, #0
    2356:	f7ff ffab 	bl	22b0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    235a:	230c      	movs	r3, #12
    235c:	435c      	muls	r4, r3
    235e:	192a      	adds	r2, r5, r4
    2360:	2300      	movs	r3, #0
    2362:	512b      	str	r3, [r5, r4]
    2364:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2368:	bd70      	pop	{r4, r5, r6, pc}
    236a:	f383 8811 	msr	BASEPRI, r3
    236e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2372:	e7ef      	b.n	2354 <pm_system_resume+0x48>
    2374:	200021e8 	.word	0x200021e8
    2378:	20000c64 	.word	0x20000c64
    237c:	0000d6f9 	.word	0x0000d6f9
    2380:	20000c50 	.word	0x20000c50

00002384 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2388:	4b35      	ldr	r3, [pc, #212]	; (2460 <pm_system_suspend+0xdc>)
{
    238a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    238c:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    238e:	f04f 0320 	mov.w	r3, #32
    2392:	f3ef 8811 	mrs	r8, BASEPRI
    2396:	f383 8812 	msr	BASEPRI_MAX, r3
    239a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    239e:	240c      	movs	r4, #12
    23a0:	4b30      	ldr	r3, [pc, #192]	; (2464 <pm_system_suspend+0xe0>)
    23a2:	4e31      	ldr	r6, [pc, #196]	; (2468 <pm_system_suspend+0xe4>)
    23a4:	436c      	muls	r4, r5
    23a6:	191a      	adds	r2, r3, r4
    23a8:	5d19      	ldrb	r1, [r3, r4]
    23aa:	2900      	cmp	r1, #0
    23ac:	d04c      	beq.n	2448 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    23ae:	ca07      	ldmia	r2, {r0, r1, r2}
    23b0:	eb06 0c04 	add.w	ip, r6, r4
    23b4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    23b8:	2200      	movs	r2, #0
    23ba:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    23bc:	f388 8811 	msr	BASEPRI, r8
    23c0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    23c4:	230c      	movs	r3, #12
    23c6:	436b      	muls	r3, r5
    23c8:	18f2      	adds	r2, r6, r3
    23ca:	5cf0      	ldrb	r0, [r6, r3]
    23cc:	2800      	cmp	r0, #0
    23ce:	d039      	beq.n	2444 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    23d0:	1c7b      	adds	r3, r7, #1
    23d2:	d010      	beq.n	23f6 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    23d4:	f8d2 c008 	ldr.w	ip, [r2, #8]
    23d8:	4c24      	ldr	r4, [pc, #144]	; (246c <pm_system_suspend+0xe8>)
    23da:	4a25      	ldr	r2, [pc, #148]	; (2470 <pm_system_suspend+0xec>)
    23dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    23e0:	2100      	movs	r1, #0
    23e2:	fbec 4100 	umlal	r4, r1, ip, r0
    23e6:	2300      	movs	r3, #0
    23e8:	4620      	mov	r0, r4
    23ea:	f7fd fe89 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    23ee:	2101      	movs	r1, #1
    23f0:	1a38      	subs	r0, r7, r0
    23f2:	f006 fa9f 	bl	8934 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    23f6:	f009 fc15 	bl	bc24 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    23fa:	2001      	movs	r0, #1
    23fc:	f7ff ff58 	bl	22b0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2400:	f3bf 8f5b 	dmb	ish
    2404:	4b1b      	ldr	r3, [pc, #108]	; (2474 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2406:	096a      	lsrs	r2, r5, #5
    2408:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    240c:	f005 011f 	and.w	r1, r5, #31
    2410:	2201      	movs	r2, #1
    2412:	408a      	lsls	r2, r1
    2414:	e853 0f00 	ldrex	r0, [r3]
    2418:	4310      	orrs	r0, r2
    241a:	e843 0100 	strex	r1, r0, [r3]
    241e:	2900      	cmp	r1, #0
    2420:	d1f8      	bne.n	2414 <pm_system_suspend+0x90>
    2422:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2426:	4b14      	ldr	r3, [pc, #80]	; (2478 <pm_system_suspend+0xf4>)
    2428:	b13b      	cbz	r3, 243a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    242a:	230c      	movs	r3, #12
    242c:	fb03 f005 	mul.w	r0, r3, r5
    2430:	1833      	adds	r3, r6, r0
    2432:	5c30      	ldrb	r0, [r6, r0]
    2434:	7859      	ldrb	r1, [r3, #1]
    2436:	f00b f953 	bl	d6e0 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    243a:	f7ff ff67 	bl	230c <pm_system_resume>
	k_sched_unlock();
    243e:	f009 fc05 	bl	bc4c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    2442:	2001      	movs	r0, #1
}
    2444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    2448:	4601      	mov	r1, r0
    244a:	4628      	mov	r0, r5
    244c:	f000 f816 	bl	247c <pm_policy_next_state>
		if (info != NULL) {
    2450:	2800      	cmp	r0, #0
    2452:	d0b3      	beq.n	23bc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    2454:	c807      	ldmia	r0, {r0, r1, r2}
    2456:	4434      	add	r4, r6
    2458:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    245c:	e7ae      	b.n	23bc <pm_system_suspend+0x38>
    245e:	bf00      	nop
    2460:	200021e8 	.word	0x200021e8
    2464:	20000c44 	.word	0x20000c44
    2468:	20000c50 	.word	0x20000c50
    246c:	000f423f 	.word	0x000f423f
    2470:	000f4240 	.word	0x000f4240
    2474:	20000c64 	.word	0x20000c64
    2478:	0000d6e1 	.word	0x0000d6e1

0000247c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2480:	b085      	sub	sp, #20
    2482:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2484:	a903      	add	r1, sp, #12
    2486:	f000 f843 	bl	2510 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    248a:	4b1e      	ldr	r3, [pc, #120]	; (2504 <pm_policy_next_state+0x88>)
    248c:	9d03      	ldr	r5, [sp, #12]
    248e:	f8d3 a000 	ldr.w	sl, [r3]
    2492:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2508 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2496:	1e43      	subs	r3, r0, #1
    2498:	b21b      	sxth	r3, r3
    249a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    249e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    24a0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    24a4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    24a8:	f04f 0b00 	mov.w	fp, #0
    24ac:	b924      	cbnz	r4, 24b8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    24ae:	46a1      	mov	r9, r4
}
    24b0:	4648      	mov	r0, r9
    24b2:	b005      	add	sp, #20
    24b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24b8:	6868      	ldr	r0, [r5, #4]
    24ba:	4a14      	ldr	r2, [pc, #80]	; (250c <pm_policy_next_state+0x90>)
    24bc:	46c4      	mov	ip, r8
    24be:	4659      	mov	r1, fp
    24c0:	fbe0 c107 	umlal	ip, r1, r0, r7
    24c4:	2300      	movs	r3, #0
    24c6:	4660      	mov	r0, ip
    24c8:	f7fd fe1a 	bl	100 <__aeabi_uldivmod>
    24cc:	9001      	str	r0, [sp, #4]
    24ce:	68a8      	ldr	r0, [r5, #8]
    24d0:	4a0e      	ldr	r2, [pc, #56]	; (250c <pm_policy_next_state+0x90>)
    24d2:	46c4      	mov	ip, r8
    24d4:	4659      	mov	r1, fp
    24d6:	fbe0 c107 	umlal	ip, r1, r0, r7
    24da:	2300      	movs	r3, #0
    24dc:	4660      	mov	r0, ip
    24de:	f7fd fe0f 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    24e2:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    24e6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    24e8:	d001      	beq.n	24ee <pm_policy_next_state+0x72>
    24ea:	4582      	cmp	sl, r0
    24ec:	d905      	bls.n	24fa <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    24ee:	1c73      	adds	r3, r6, #1
    24f0:	d0de      	beq.n	24b0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    24f2:	9b01      	ldr	r3, [sp, #4]
    24f4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    24f6:	42b0      	cmp	r0, r6
    24f8:	d9da      	bls.n	24b0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    24fa:	3c01      	subs	r4, #1
    24fc:	b2a4      	uxth	r4, r4
    24fe:	3d0c      	subs	r5, #12
    2500:	e7d4      	b.n	24ac <pm_policy_next_state+0x30>
    2502:	bf00      	nop
    2504:	20000008 	.word	0x20000008
    2508:	000f423f 	.word	0x000f423f
    250c:	000f4240 	.word	0x000f4240

00002510 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2510:	b908      	cbnz	r0, 2516 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2512:	4b02      	ldr	r3, [pc, #8]	; (251c <pm_state_cpu_get_all+0xc>)
    2514:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2516:	2000      	movs	r0, #0
    2518:	4770      	bx	lr
    251a:	bf00      	nop
    251c:	0000f12c 	.word	0x0000f12c

00002520 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    2520:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2522:	4b0c      	ldr	r3, [pc, #48]	; (2554 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2524:	4e0c      	ldr	r6, [pc, #48]	; (2558 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2526:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2528:	4b0c      	ldr	r3, [pc, #48]	; (255c <class_handler+0x3c>)
    252a:	42b3      	cmp	r3, r6
    252c:	d303      	bcc.n	2536 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    252e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2532:	bcf0      	pop	{r4, r5, r6, r7}
    2534:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    2536:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2538:	42bd      	cmp	r5, r7
    253a:	d309      	bcc.n	2550 <class_handler+0x30>
		if (iface->class_handler &&
    253c:	691c      	ldr	r4, [r3, #16]
    253e:	b13c      	cbz	r4, 2550 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    2540:	f895 c002 	ldrb.w	ip, [r5, #2]
    2544:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    2546:	45ac      	cmp	ip, r5
    2548:	d102      	bne.n	2550 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    254a:	4623      	mov	r3, r4
}
    254c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    254e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2550:	3324      	adds	r3, #36	; 0x24
    2552:	e7ea      	b.n	252a <class_handler+0xa>
    2554:	20000c68 	.word	0x20000c68
    2558:	20000431 	.word	0x20000431
    255c:	20000431 	.word	0x20000431

00002560 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    2560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2564:	4c13      	ldr	r4, [pc, #76]	; (25b4 <custom_handler+0x54>)
    2566:	f8df 8050 	ldr.w	r8, [pc, #80]	; 25b8 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    256a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 25bc <custom_handler+0x5c>
{
    256e:	4605      	mov	r5, r0
    2570:	460e      	mov	r6, r1
    2572:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2574:	4544      	cmp	r4, r8
    2576:	d303      	bcc.n	2580 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    2578:	f06f 0085 	mvn.w	r0, #133	; 0x85
    257c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    2580:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2582:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    2586:	429a      	cmp	r2, r3
    2588:	d312      	bcc.n	25b0 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    258a:	69a3      	ldr	r3, [r4, #24]
    258c:	b183      	cbz	r3, 25b0 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    258e:	7890      	ldrb	r0, [r2, #2]
    2590:	7929      	ldrb	r1, [r5, #4]
    2592:	4288      	cmp	r0, r1
    2594:	d105      	bne.n	25a2 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    2596:	463a      	mov	r2, r7
    2598:	4631      	mov	r1, r6
    259a:	4628      	mov	r0, r5
}
    259c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    25a0:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    25a2:	7952      	ldrb	r2, [r2, #5]
    25a4:	2a01      	cmp	r2, #1
    25a6:	d103      	bne.n	25b0 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    25a8:	463a      	mov	r2, r7
    25aa:	4631      	mov	r1, r6
    25ac:	4628      	mov	r0, r5
    25ae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    25b0:	3424      	adds	r4, #36	; 0x24
    25b2:	e7df      	b.n	2574 <custom_handler+0x14>
    25b4:	20000431 	.word	0x20000431
    25b8:	20000431 	.word	0x20000431
    25bc:	20000c68 	.word	0x20000c68

000025c0 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    25c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    25c4:	4c0b      	ldr	r4, [pc, #44]	; (25f4 <vendor_handler+0x34>)
    25c6:	f8df 8030 	ldr.w	r8, [pc, #48]	; 25f8 <vendor_handler+0x38>
{
    25ca:	4605      	mov	r5, r0
    25cc:	460e      	mov	r6, r1
    25ce:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    25d0:	4544      	cmp	r4, r8
    25d2:	d302      	bcc.n	25da <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    25d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    25d8:	e009      	b.n	25ee <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    25da:	6963      	ldr	r3, [r4, #20]
    25dc:	b90b      	cbnz	r3, 25e2 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    25de:	3424      	adds	r4, #36	; 0x24
    25e0:	e7f6      	b.n	25d0 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    25e2:	463a      	mov	r2, r7
    25e4:	4631      	mov	r1, r6
    25e6:	4628      	mov	r0, r5
    25e8:	4798      	blx	r3
    25ea:	2800      	cmp	r0, #0
    25ec:	d1f7      	bne.n	25de <vendor_handler+0x1e>
}
    25ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25f2:	bf00      	nop
    25f4:	20000431 	.word	0x20000431
    25f8:	20000431 	.word	0x20000431

000025fc <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    25fc:	4802      	ldr	r0, [pc, #8]	; (2608 <usb_reset_alt_setting+0xc>)
    25fe:	2208      	movs	r2, #8
    2600:	2100      	movs	r1, #0
    2602:	f00b b861 	b.w	d6c8 <memset>
    2606:	bf00      	nop
    2608:	20000d23 	.word	0x20000d23

0000260c <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    260c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    260e:	4b0b      	ldr	r3, [pc, #44]	; (263c <is_ep_valid.part.0+0x30>)
    2610:	4c0b      	ldr	r4, [pc, #44]	; (2640 <is_ep_valid.part.0+0x34>)
    2612:	42a3      	cmp	r3, r4
    2614:	d301      	bcc.n	261a <is_ep_valid.part.0+0xe>
	return false;
    2616:	2000      	movs	r0, #0
}
    2618:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    261a:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    261c:	7f1e      	ldrb	r6, [r3, #28]
    261e:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    2620:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2622:	b2d5      	uxtb	r5, r2
    2624:	42ae      	cmp	r6, r5
    2626:	d801      	bhi.n	262c <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2628:	3324      	adds	r3, #36	; 0x24
    262a:	e7f2      	b.n	2612 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    262c:	3201      	adds	r2, #1
    262e:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    2632:	4285      	cmp	r5, r0
    2634:	d1f5      	bne.n	2622 <is_ep_valid.part.0+0x16>
		return true;
    2636:	2001      	movs	r0, #1
    2638:	e7ee      	b.n	2618 <is_ep_valid.part.0+0xc>
    263a:	bf00      	nop
    263c:	20000431 	.word	0x20000431
    2640:	20000431 	.word	0x20000431

00002644 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    2644:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    2646:	4809      	ldr	r0, [pc, #36]	; (266c <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    2648:	7803      	ldrb	r3, [r0, #0]
    264a:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    264e:	330a      	adds	r3, #10
    2650:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    2654:	b13b      	cbz	r3, 2666 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    2656:	f100 0208 	add.w	r2, r0, #8
    265a:	f100 0110 	add.w	r1, r0, #16
    265e:	4798      	blx	r3
    2660:	43c0      	mvns	r0, r0
    2662:	0fc0      	lsrs	r0, r0, #31
}
    2664:	bd08      	pop	{r3, pc}
		return false;
    2666:	4618      	mov	r0, r3
    2668:	e7fc      	b.n	2664 <usb_handle_request.constprop.0+0x20>
    266a:	bf00      	nop
    266c:	20000c68 	.word	0x20000c68

00002670 <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
    2670:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    2672:	4b07      	ldr	r3, [pc, #28]	; (2690 <usb_device_init.part.0+0x20>)
    2674:	9305      	str	r3, [sp, #20]
    2676:	4807      	ldr	r0, [pc, #28]	; (2694 <usb_device_init.part.0+0x24>)
    2678:	2302      	movs	r3, #2
    267a:	aa04      	add	r2, sp, #16
    267c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2680:	9304      	str	r3, [sp, #16]
    2682:	f00a ffd5 	bl	d630 <z_log_msg_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    2686:	f04f 30ff 	mov.w	r0, #4294967295
    268a:	b007      	add	sp, #28
    268c:	f85d fb04 	ldr.w	pc, [sp], #4
    2690:	0000f852 	.word	0x0000f852
    2694:	0000f048 	.word	0x0000f048

00002698 <get_ep_bm_from_addr.part.0>:
static uint32_t get_ep_bm_from_addr(uint8_t ep)
    2698:	b580      	push	{r7, lr}
    269a:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
    269c:	b088      	sub	sp, #32
    269e:	466a      	mov	r2, sp
    26a0:	4b06      	ldr	r3, [pc, #24]	; (26bc <get_ep_bm_from_addr.part.0+0x24>)
    26a2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    26a6:	2303      	movs	r3, #3
    26a8:	f842 3f10 	str.w	r3, [r2, #16]!
    26ac:	4804      	ldr	r0, [pc, #16]	; (26c0 <get_ep_bm_from_addr.part.0+0x28>)
    26ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    26b2:	f00a ffbd 	bl	d630 <z_log_msg_static_create.constprop.0>
}
    26b6:	2000      	movs	r0, #0
    26b8:	46bd      	mov	sp, r7
    26ba:	bd80      	pop	{r7, pc}
    26bc:	0000f877 	.word	0x0000f877
    26c0:	0000f048 	.word	0x0000f048

000026c4 <disable_endpoint>:
{
    26c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26c6:	af00      	add	r7, sp, #0
    26c8:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
    26ca:	f00b f835 	bl	d738 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    26ce:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_disable(ep_addr);
    26d2:	4604      	mov	r4, r0
	if (ret == -EALREADY) {
    26d4:	d11a      	bne.n	270c <disable_endpoint+0x48>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_addr);
    26d6:	466c      	mov	r4, sp
    26d8:	b088      	sub	sp, #32
    26da:	466a      	mov	r2, sp
    26dc:	4b15      	ldr	r3, [pc, #84]	; (2734 <disable_endpoint+0x70>)
    26de:	4816      	ldr	r0, [pc, #88]	; (2738 <disable_endpoint+0x74>)
    26e0:	e9c2 3505 	strd	r3, r5, [r2, #20]
    26e4:	2303      	movs	r3, #3
    26e6:	f842 3f10 	str.w	r3, [r2, #16]!
    26ea:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    26ee:	f00a ff9f 	bl	d630 <z_log_msg_static_create.constprop.0>
    26f2:	46a5      	mov	sp, r4
	ep_bm = get_ep_bm_from_addr(ep_addr);
    26f4:	4628      	mov	r0, r5
    26f6:	f00a ff9e 	bl	d636 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    26fa:	4a10      	ldr	r2, [pc, #64]	; (273c <disable_endpoint+0x78>)
    26fc:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2700:	ea23 0300 	bic.w	r3, r3, r0
    2704:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    2708:	2400      	movs	r4, #0
    270a:	e010      	b.n	272e <disable_endpoint+0x6a>
	} else if (ret) {
    270c:	2800      	cmp	r0, #0
    270e:	d0f1      	beq.n	26f4 <disable_endpoint+0x30>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
    2710:	466e      	mov	r6, sp
    2712:	b088      	sub	sp, #32
    2714:	466a      	mov	r2, sp
    2716:	4b0a      	ldr	r3, [pc, #40]	; (2740 <disable_endpoint+0x7c>)
    2718:	4807      	ldr	r0, [pc, #28]	; (2738 <disable_endpoint+0x74>)
    271a:	e9c2 3505 	strd	r3, r5, [r2, #20]
    271e:	2303      	movs	r3, #3
    2720:	f842 3f10 	str.w	r3, [r2, #16]!
    2724:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2728:	f00a ff82 	bl	d630 <z_log_msg_static_create.constprop.0>
    272c:	46b5      	mov	sp, r6
}
    272e:	4620      	mov	r0, r4
    2730:	46bd      	mov	sp, r7
    2732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2734:	0000f892 	.word	0x0000f892
    2738:	0000f048 	.word	0x0000f048
    273c:	20000c68 	.word	0x20000c68
    2740:	0000f8b3 	.word	0x0000f8b3

00002744 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    2744:	2804      	cmp	r0, #4
{
    2746:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    274a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 27e8 <forward_status_cb+0xa4>
    274e:	4604      	mov	r4, r0
    2750:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    2752:	d015      	beq.n	2780 <forward_status_cb+0x3c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2754:	2801      	cmp	r0, #1
    2756:	d12f      	bne.n	27b8 <forward_status_cb+0x74>
		if (usb_dev.configured) {
    2758:	f8df 8090 	ldr.w	r8, [pc, #144]	; 27ec <forward_status_cb+0xa8>
    275c:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    2760:	b353      	cbz	r3, 27b8 <forward_status_cb+0x74>
			usb_cancel_transfers();
    2762:	f000 fe71 	bl	3448 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2766:	4d22      	ldr	r5, [pc, #136]	; (27f0 <forward_status_cb+0xac>)
    2768:	454d      	cmp	r5, r9
    276a:	d222      	bcs.n	27b2 <forward_status_cb+0x6e>
		ep_data = cfg_data->endpoint;
    276c:	6a2a      	ldr	r2, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    276e:	f04f 0a00 	mov.w	sl, #0
    2772:	7f2b      	ldrb	r3, [r5, #28]
    2774:	fa5f f68a 	uxtb.w	r6, sl
    2778:	42b3      	cmp	r3, r6
    277a:	d804      	bhi.n	2786 <forward_status_cb+0x42>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    277c:	3524      	adds	r5, #36	; 0x24
    277e:	e7f3      	b.n	2768 <forward_status_cb+0x24>
		usb_reset_alt_setting();
    2780:	f7ff ff3c 	bl	25fc <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2784:	e7e8      	b.n	2758 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    2786:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
    278a:	9201      	str	r2, [sp, #4]
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    278c:	7930      	ldrb	r0, [r6, #4]
    278e:	f00a ffd3 	bl	d738 <usb_dc_ep_disable>
    2792:	4683      	mov	fp, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    2794:	7930      	ldrb	r0, [r6, #4]
    2796:	f00a ff4e 	bl	d636 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    279a:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    279e:	9a01      	ldr	r2, [sp, #4]
	usb_dev.ep_bm &= ~ep_bm;
    27a0:	ea23 0300 	bic.w	r3, r3, r0
			if (ret < 0) {
    27a4:	f1bb 0f00 	cmp.w	fp, #0
	usb_dev.ep_bm &= ~ep_bm;
    27a8:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    27ac:	f10a 0a01 	add.w	sl, sl, #1
    27b0:	dadf      	bge.n	2772 <forward_status_cb+0x2e>
			usb_dev.configured = false;
    27b2:	2300      	movs	r3, #0
    27b4:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    27b8:	4d0d      	ldr	r5, [pc, #52]	; (27f0 <forward_status_cb+0xac>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    27ba:	454d      	cmp	r5, r9
    27bc:	d308      	bcc.n	27d0 <forward_status_cb+0x8c>
	if (usb_dev.user_status_callback) {
    27be:	4b0b      	ldr	r3, [pc, #44]	; (27ec <forward_status_cb+0xa8>)
    27c0:	6a1b      	ldr	r3, [r3, #32]
    27c2:	b16b      	cbz	r3, 27e0 <forward_status_cb+0x9c>
		usb_dev.user_status_callback(status, param);
    27c4:	4639      	mov	r1, r7
    27c6:	4620      	mov	r0, r4
}
    27c8:	b003      	add	sp, #12
    27ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    27ce:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    27d0:	68eb      	ldr	r3, [r5, #12]
    27d2:	b11b      	cbz	r3, 27dc <forward_status_cb+0x98>
			cfg_data->cb_usb_status(cfg_data, status, param);
    27d4:	463a      	mov	r2, r7
    27d6:	4621      	mov	r1, r4
    27d8:	4628      	mov	r0, r5
    27da:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    27dc:	3524      	adds	r5, #36	; 0x24
    27de:	e7ec      	b.n	27ba <forward_status_cb+0x76>
}
    27e0:	b003      	add	sp, #12
    27e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27e6:	bf00      	nop
    27e8:	20000431 	.word	0x20000431
    27ec:	20000c68 	.word	0x20000c68
    27f0:	20000431 	.word	0x20000431

000027f4 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    27f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27f6:	b083      	sub	sp, #12
	uint8_t ep = setup->wIndex;
    27f8:	b2c4      	uxtb	r4, r0
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    27fa:	af00      	add	r7, sp, #0
	if (USB_EP_GET_IDX(ep) == 0) {
    27fc:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    27fe:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    2800:	71fc      	strb	r4, [r7, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    2802:	d007      	beq.n	2814 <usb_halt_endpoint_req.isra.0+0x20>
    2804:	4620      	mov	r0, r4
    2806:	f7ff ff01 	bl	260c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    280a:	b1e8      	cbz	r0, 2848 <usb_halt_endpoint_req.isra.0+0x54>
	return (usb_dev.configuration != 0);
    280c:	4b1c      	ldr	r3, [pc, #112]	; (2880 <usb_halt_endpoint_req.isra.0+0x8c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    280e:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    2812:	b1c8      	cbz	r0, 2848 <usb_halt_endpoint_req.isra.0+0x54>
		if (halt) {
    2814:	4e1a      	ldr	r6, [pc, #104]	; (2880 <usb_halt_endpoint_req.isra.0+0x8c>)
    2816:	b1d5      	cbz	r5, 284e <usb_halt_endpoint_req.isra.0+0x5a>
			LOG_INF("Set halt ep 0x%02x", ep);
    2818:	466d      	mov	r5, sp
    281a:	b088      	sub	sp, #32
    281c:	466a      	mov	r2, sp
    281e:	4b19      	ldr	r3, [pc, #100]	; (2884 <usb_halt_endpoint_req.isra.0+0x90>)
    2820:	4819      	ldr	r0, [pc, #100]	; (2888 <usb_halt_endpoint_req.isra.0+0x94>)
    2822:	e9c2 3405 	strd	r3, r4, [r2, #20]
    2826:	2303      	movs	r3, #3
    2828:	f842 3f10 	str.w	r3, [r2, #16]!
    282c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    2830:	f00a fefe 	bl	d630 <z_log_msg_static_create.constprop.0>
    2834:	46ad      	mov	sp, r5
			usb_dc_ep_set_stall(ep);
    2836:	79f8      	ldrb	r0, [r7, #7]
    2838:	f002 faac 	bl	4d94 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    283c:	69f3      	ldr	r3, [r6, #28]
    283e:	b113      	cbz	r3, 2846 <usb_halt_endpoint_req.isra.0+0x52>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    2840:	1df9      	adds	r1, r7, #7
    2842:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2844:	4798      	blx	r3
		return true;
    2846:	2001      	movs	r0, #1
}
    2848:	370c      	adds	r7, #12
    284a:	46bd      	mov	sp, r7
    284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
    284e:	466d      	mov	r5, sp
    2850:	b088      	sub	sp, #32
    2852:	466a      	mov	r2, sp
    2854:	4b0d      	ldr	r3, [pc, #52]	; (288c <usb_halt_endpoint_req.isra.0+0x98>)
    2856:	480c      	ldr	r0, [pc, #48]	; (2888 <usb_halt_endpoint_req.isra.0+0x94>)
    2858:	e9c2 3405 	strd	r3, r4, [r2, #20]
    285c:	2303      	movs	r3, #3
    285e:	f842 3f10 	str.w	r3, [r2, #16]!
    2862:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    2866:	f00a fee3 	bl	d630 <z_log_msg_static_create.constprop.0>
    286a:	46ad      	mov	sp, r5
			usb_dc_ep_clear_stall(ep);
    286c:	79f8      	ldrb	r0, [r7, #7]
    286e:	f002 facb 	bl	4e08 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    2872:	69f3      	ldr	r3, [r6, #28]
    2874:	2b00      	cmp	r3, #0
    2876:	d0e6      	beq.n	2846 <usb_halt_endpoint_req.isra.0+0x52>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2878:	1df9      	adds	r1, r7, #7
    287a:	2009      	movs	r0, #9
    287c:	e7e2      	b.n	2844 <usb_halt_endpoint_req.isra.0+0x50>
    287e:	bf00      	nop
    2880:	20000c68 	.word	0x20000c68
    2884:	0000f8d5 	.word	0x0000f8d5
    2888:	0000f048 	.word	0x0000f048
    288c:	0000f8e8 	.word	0x0000f8e8

00002890 <set_endpoint>:
{
    2890:	b5f0      	push	{r4, r5, r6, r7, lr}
    2892:	b083      	sub	sp, #12
    2894:	af00      	add	r7, sp, #0
    2896:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2898:	7880      	ldrb	r0, [r0, #2]
    289a:	7038      	strb	r0, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    289c:	7923      	ldrb	r3, [r4, #4]
    289e:	7962      	ldrb	r2, [r4, #5]
	if (ep_bm & usb_dev.ep_bm) {
    28a0:	4d36      	ldr	r5, [pc, #216]	; (297c <set_endpoint+0xec>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    28a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    28a6:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    28a8:	78e3      	ldrb	r3, [r4, #3]
    28aa:	f003 0303 	and.w	r3, r3, #3
    28ae:	713b      	strb	r3, [r7, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    28b0:	f00a fec1 	bl	d636 <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    28b4:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    28b8:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    28ba:	4606      	mov	r6, r0
	if (ep_bm & usb_dev.ep_bm) {
    28bc:	d00c      	beq.n	28d8 <set_endpoint+0x48>
		reset_endpoint(ep_desc);
    28be:	78a4      	ldrb	r4, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    28c0:	4620      	mov	r0, r4
    28c2:	f000 fda3 	bl	340c <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    28c6:	4620      	mov	r0, r4
    28c8:	f7ff fefc 	bl	26c4 <disable_endpoint>
		if (!k_is_in_isr()) {
    28cc:	f00b fd97 	bl	e3fe <k_is_in_isr>
    28d0:	b910      	cbnz	r0, 28d8 <set_endpoint+0x48>
	return z_impl_k_usleep(us);
    28d2:	2096      	movs	r0, #150	; 0x96
    28d4:	f009 fa7a 	bl	bdcc <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    28d8:	4638      	mov	r0, r7
    28da:	f002 fa27 	bl	4d2c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    28de:	f110 0f78 	cmn.w	r0, #120	; 0x78
    28e2:	783b      	ldrb	r3, [r7, #0]
    28e4:	d12d      	bne.n	2942 <set_endpoint+0xb2>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
    28e6:	466c      	mov	r4, sp
    28e8:	b088      	sub	sp, #32
    28ea:	466a      	mov	r2, sp
    28ec:	4924      	ldr	r1, [pc, #144]	; (2980 <set_endpoint+0xf0>)
    28ee:	4825      	ldr	r0, [pc, #148]	; (2984 <set_endpoint+0xf4>)
    28f0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    28f4:	2303      	movs	r3, #3
    28f6:	f842 3f10 	str.w	r3, [r2, #16]!
    28fa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    28fe:	f00a fe97 	bl	d630 <z_log_msg_static_create.constprop.0>
    2902:	46a5      	mov	sp, r4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2904:	7838      	ldrb	r0, [r7, #0]
    2906:	f002 fabb 	bl	4e80 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    290a:	f110 0f78 	cmn.w	r0, #120	; 0x78
    290e:	d12d      	bne.n	296c <set_endpoint+0xdc>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
    2910:	466c      	mov	r4, sp
    2912:	b088      	sub	sp, #32
    2914:	783b      	ldrb	r3, [r7, #0]
    2916:	466a      	mov	r2, sp
    2918:	491b      	ldr	r1, [pc, #108]	; (2988 <set_endpoint+0xf8>)
    291a:	481a      	ldr	r0, [pc, #104]	; (2984 <set_endpoint+0xf4>)
    291c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2920:	2303      	movs	r3, #3
    2922:	f842 3f10 	str.w	r3, [r2, #16]!
    2926:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    292a:	f00a fe81 	bl	d630 <z_log_msg_static_create.constprop.0>
    292e:	46a5      	mov	sp, r4
	usb_dev.ep_bm |= ep_bm;
    2930:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	usb_dev.configured = true;
    2934:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    2936:	4333      	orrs	r3, r6
	usb_dev.configured = true;
    2938:	f885 00b9 	strb.w	r0, [r5, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    293c:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	return true;
    2940:	e011      	b.n	2966 <set_endpoint+0xd6>
	} else if (ret) {
    2942:	2800      	cmp	r0, #0
    2944:	d0de      	beq.n	2904 <set_endpoint+0x74>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    2946:	466c      	mov	r4, sp
    2948:	b088      	sub	sp, #32
    294a:	466a      	mov	r2, sp
    294c:	490f      	ldr	r1, [pc, #60]	; (298c <set_endpoint+0xfc>)
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    294e:	480d      	ldr	r0, [pc, #52]	; (2984 <set_endpoint+0xf4>)
    2950:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2954:	2303      	movs	r3, #3
    2956:	f842 3f10 	str.w	r3, [r2, #16]!
    295a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    295e:	f00a fe67 	bl	d630 <z_log_msg_static_create.constprop.0>
		return false;
    2962:	2000      	movs	r0, #0
    2964:	46a5      	mov	sp, r4
}
    2966:	370c      	adds	r7, #12
    2968:	46bd      	mov	sp, r7
    296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (ret) {
    296c:	2800      	cmp	r0, #0
    296e:	d0df      	beq.n	2930 <set_endpoint+0xa0>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    2970:	466c      	mov	r4, sp
    2972:	b088      	sub	sp, #32
    2974:	783b      	ldrb	r3, [r7, #0]
    2976:	466a      	mov	r2, sp
    2978:	4905      	ldr	r1, [pc, #20]	; (2990 <set_endpoint+0x100>)
    297a:	e7e8      	b.n	294e <set_endpoint+0xbe>
    297c:	20000c68 	.word	0x20000c68
    2980:	0000f8fd 	.word	0x0000f8fd
    2984:	0000f048 	.word	0x0000f048
    2988:	0000f944 	.word	0x0000f944
    298c:	0000f920 	.word	0x0000f920
    2990:	0000f964 	.word	0x0000f964

00002994 <usb_handle_standard_request>:
{
    2994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    2998:	4ea3      	ldr	r6, [pc, #652]	; (2c28 <usb_handle_standard_request+0x294>)
    299a:	69b3      	ldr	r3, [r6, #24]
{
    299c:	4604      	mov	r4, r0
    299e:	460f      	mov	r7, r1
    29a0:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    29a2:	b9fb      	cbnz	r3, 29e4 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    29a4:	7823      	ldrb	r3, [r4, #0]
    29a6:	f003 031f 	and.w	r3, r3, #31
    29aa:	2b01      	cmp	r3, #1
    29ac:	f000 809d 	beq.w	2aea <usb_handle_standard_request+0x156>
    29b0:	2b02      	cmp	r3, #2
    29b2:	f000 8104 	beq.w	2bbe <usb_handle_standard_request+0x22a>
    29b6:	bb33      	cbnz	r3, 2a06 <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    29b8:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    29bc:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    29be:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    29c0:	2800      	cmp	r0, #0
    29c2:	da34      	bge.n	2a2e <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    29c4:	2906      	cmp	r1, #6
    29c6:	d012      	beq.n	29ee <usb_handle_standard_request+0x5a>
    29c8:	2908      	cmp	r1, #8
    29ca:	d02b      	beq.n	2a24 <usb_handle_standard_request+0x90>
    29cc:	b9d9      	cbnz	r1, 2a06 <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    29ce:	2301      	movs	r3, #1
    29d0:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    29d2:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    29d4:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    29d8:	005b      	lsls	r3, r3, #1
    29da:	f043 0301 	orr.w	r3, r3, #1
    29de:	7013      	strb	r3, [r2, #0]
		*len = 2;
    29e0:	2302      	movs	r3, #2
    29e2:	e12a      	b.n	2c3a <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    29e4:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    29e6:	2800      	cmp	r0, #0
    29e8:	d1dc      	bne.n	29a4 <usb_handle_standard_request+0x10>
		return 0;
    29ea:	2000      	movs	r0, #0
    29ec:	e00d      	b.n	2a0a <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    29ee:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    29f0:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    29f2:	1f01      	subs	r1, r0, #4
    29f4:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    29f6:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    29f8:	d905      	bls.n	2a06 <usb_handle_standard_request+0x72>
    29fa:	2807      	cmp	r0, #7
    29fc:	d803      	bhi.n	2a06 <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    29fe:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    2a00:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    2a02:	780c      	ldrb	r4, [r1, #0]
    2a04:	b91c      	cbnz	r4, 2a0e <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    2a06:	f06f 0015 	mvn.w	r0, #21
}
    2a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    2a0e:	784e      	ldrb	r6, [r1, #1]
    2a10:	4566      	cmp	r6, ip
    2a12:	d103      	bne.n	2a1c <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    2a14:	429a      	cmp	r2, r3
    2a16:	f000 810b 	beq.w	2c30 <usb_handle_standard_request+0x29c>
			cur_index++;
    2a1a:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    2a1c:	4421      	add	r1, r4
    2a1e:	e7f0      	b.n	2a02 <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    2a20:	780b      	ldrb	r3, [r1, #0]
    2a22:	e10a      	b.n	2c3a <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
    2a24:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2a28:	7013      	strb	r3, [r2, #0]
				*len = 1;
    2a2a:	2301      	movs	r3, #1
    2a2c:	e105      	b.n	2c3a <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
    2a2e:	3901      	subs	r1, #1
    2a30:	2908      	cmp	r1, #8
    2a32:	d8e8      	bhi.n	2a06 <usb_handle_standard_request+0x72>
    2a34:	a301      	add	r3, pc, #4	; (adr r3, 2a3c <usb_handle_standard_request+0xa8>)
    2a36:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    2a3a:	bf00      	nop
    2a3c:	00002ad5 	.word	0x00002ad5
    2a40:	00002a07 	.word	0x00002a07
    2a44:	00002ae3 	.word	0x00002ae3
    2a48:	00002a07 	.word	0x00002a07
    2a4c:	00002a61 	.word	0x00002a61
    2a50:	00002a07 	.word	0x00002a07
    2a54:	00002a07 	.word	0x00002a07
    2a58:	00002a07 	.word	0x00002a07
    2a5c:	00002a6d 	.word	0x00002a6d
			return !usb_dc_set_address(setup->wValue);
    2a60:	78a0      	ldrb	r0, [r4, #2]
    2a62:	f002 f91f 	bl	4ca4 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    2a66:	2800      	cmp	r0, #0
    2a68:	d0bf      	beq.n	29ea <usb_handle_standard_request+0x56>
    2a6a:	e7cc      	b.n	2a06 <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    2a6c:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2a6e:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    2a70:	bb63      	cbnz	r3, 2acc <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    2a72:	f7ff fdc3 	bl	25fc <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2a76:	8863      	ldrh	r3, [r4, #2]
    2a78:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    2a7c:	69f3      	ldr	r3, [r6, #28]
    2a7e:	2b00      	cmp	r3, #0
    2a80:	d0b3      	beq.n	29ea <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2a82:	496a      	ldr	r1, [pc, #424]	; (2c2c <usb_handle_standard_request+0x298>)
    2a84:	2003      	movs	r0, #3
    2a86:	4798      	blx	r3
    2a88:	e7af      	b.n	29ea <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    2a8a:	786b      	ldrb	r3, [r5, #1]
    2a8c:	2b04      	cmp	r3, #4
    2a8e:	d010      	beq.n	2ab2 <usb_handle_standard_request+0x11e>
    2a90:	2b05      	cmp	r3, #5
    2a92:	d011      	beq.n	2ab8 <usb_handle_standard_request+0x124>
    2a94:	2b02      	cmp	r3, #2
    2a96:	d104      	bne.n	2aa2 <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2a98:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    2a9a:	8863      	ldrh	r3, [r4, #2]
				found = true;
    2a9c:	42bb      	cmp	r3, r7
    2a9e:	bf08      	it	eq
    2aa0:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    2aa2:	782b      	ldrb	r3, [r5, #0]
    2aa4:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    2aa6:	782b      	ldrb	r3, [r5, #0]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d1ee      	bne.n	2a8a <usb_handle_standard_request+0xf6>
	if (found) {
    2aac:	2800      	cmp	r0, #0
    2aae:	d0aa      	beq.n	2a06 <usb_handle_standard_request+0x72>
    2ab0:	e7df      	b.n	2a72 <usb_handle_standard_request+0xde>
			cur_alt_setting =
    2ab2:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    2ab6:	e7f4      	b.n	2aa2 <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    2ab8:	8863      	ldrh	r3, [r4, #2]
    2aba:	42bb      	cmp	r3, r7
    2abc:	d1f1      	bne.n	2aa2 <usb_handle_standard_request+0x10e>
    2abe:	f1b8 0f00 	cmp.w	r8, #0
    2ac2:	d1ee      	bne.n	2aa2 <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    2ac4:	4628      	mov	r0, r5
    2ac6:	f7ff fee3 	bl	2890 <set_endpoint>
			break;
    2aca:	e7ea      	b.n	2aa2 <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    2acc:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    2ace:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    2ad0:	46b8      	mov	r8, r7
    2ad2:	e7e8      	b.n	2aa6 <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2ad4:	8863      	ldrh	r3, [r4, #2]
    2ad6:	2b01      	cmp	r3, #1
    2ad8:	d195      	bne.n	2a06 <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    2ada:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    2adc:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    2ae0:	e783      	b.n	29ea <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2ae2:	8863      	ldrh	r3, [r4, #2]
    2ae4:	2b01      	cmp	r3, #1
    2ae6:	d18e      	bne.n	2a06 <usb_handle_standard_request+0x72>
    2ae8:	e7f8      	b.n	2adc <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    2aea:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2aee:	f8d5 c000 	ldr.w	ip, [r5]
    2af2:	2b00      	cmp	r3, #0
    2af4:	d087      	beq.n	2a06 <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2af6:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    2af8:	88a3      	ldrh	r3, [r4, #4]
    2afa:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2afe:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    2b00:	7810      	ldrb	r0, [r2, #0]
    2b02:	2800      	cmp	r0, #0
    2b04:	f43f af7f 	beq.w	2a06 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    2b08:	7851      	ldrb	r1, [r2, #1]
    2b0a:	2902      	cmp	r1, #2
    2b0c:	d104      	bne.n	2b18 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
    2b0e:	f892 8004 	ldrb.w	r8, [r2, #4]
    2b12:	45f0      	cmp	r8, lr
    2b14:	f200 8093 	bhi.w	2c3e <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
    2b18:	4402      	add	r2, r0
    2b1a:	e7f1      	b.n	2b00 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    2b1c:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    2b20:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    2b24:	6039      	str	r1, [r7, #0]
			return true;
    2b26:	e760      	b.n	29ea <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    2b28:	4415      	add	r5, r2
    2b2a:	e094      	b.n	2c56 <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    2b2c:	2a0b      	cmp	r2, #11
    2b2e:	f47f af6a 	bne.w	2a06 <usb_handle_standard_request+0x72>
	bool ret = false;
    2b32:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    2b34:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2b38:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    2b3a:	46ba      	mov	sl, r7
    2b3c:	e006      	b.n	2b4c <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
    2b3e:	786b      	ldrb	r3, [r5, #1]
    2b40:	2b04      	cmp	r3, #4
    2b42:	d00f      	beq.n	2b64 <usb_handle_standard_request+0x1d0>
    2b44:	2b05      	cmp	r3, #5
    2b46:	d021      	beq.n	2b8c <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
    2b48:	782b      	ldrb	r3, [r5, #0]
    2b4a:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    2b4c:	782b      	ldrb	r3, [r5, #0]
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d1f5      	bne.n	2b3e <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
    2b52:	69f3      	ldr	r3, [r6, #28]
    2b54:	b113      	cbz	r3, 2b5c <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    2b56:	4651      	mov	r1, sl
    2b58:	2007      	movs	r0, #7
    2b5a:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    2b5c:	2f00      	cmp	r7, #0
    2b5e:	f47f af44 	bne.w	29ea <usb_handle_standard_request+0x56>
    2b62:	e750      	b.n	2a06 <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2b64:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    2b68:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2b6a:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    2b6e:	4598      	cmp	r8, r3
    2b70:	d1ea      	bne.n	2b48 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
    2b72:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2b74:	4599      	cmp	r9, r3
    2b76:	d1e7      	bne.n	2b48 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2b78:	f1b8 0f07 	cmp.w	r8, #7
    2b7c:	d81c      	bhi.n	2bb8 <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
    2b7e:	eb06 0308 	add.w	r3, r6, r8
		return true;
    2b82:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    2b84:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    2b88:	2701      	movs	r7, #1
    2b8a:	e7dd      	b.n	2b48 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
    2b8c:	88a3      	ldrh	r3, [r4, #4]
    2b8e:	4543      	cmp	r3, r8
    2b90:	d1da      	bne.n	2b48 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
    2b92:	78a3      	ldrb	r3, [r4, #2]
    2b94:	454b      	cmp	r3, r9
    2b96:	d00a      	beq.n	2bae <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
    2b98:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2b9a:	4638      	mov	r0, r7
    2b9c:	f000 fc36 	bl	340c <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    2ba0:	4638      	mov	r0, r7
    2ba2:	f7ff fd8f 	bl	26c4 <disable_endpoint>
    2ba6:	fab0 f780 	clz	r7, r0
    2baa:	097f      	lsrs	r7, r7, #5
    2bac:	e7cc      	b.n	2b48 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
    2bae:	4628      	mov	r0, r5
    2bb0:	f7ff fe6e 	bl	2890 <set_endpoint>
    2bb4:	4607      	mov	r7, r0
    2bb6:	e7c7      	b.n	2b48 <usb_handle_standard_request+0x1b4>
    2bb8:	46aa      	mov	sl, r5
	return false;
    2bba:	2700      	movs	r7, #0
    2bbc:	e7c4      	b.n	2b48 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
    2bbe:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2bc2:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2bc4:	2a00      	cmp	r2, #0
    2bc6:	da18      	bge.n	2bfa <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    2bc8:	2b00      	cmp	r3, #0
    2bca:	f47f af1c 	bne.w	2a06 <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    2bce:	7924      	ldrb	r4, [r4, #4]
    2bd0:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    2bd2:	0663      	lsls	r3, r4, #25
    2bd4:	d00a      	beq.n	2bec <usb_handle_standard_request+0x258>
    2bd6:	4620      	mov	r0, r4
    2bd8:	f7ff fd18 	bl	260c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2bdc:	2800      	cmp	r0, #0
    2bde:	f43f af12 	beq.w	2a06 <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2be2:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2be6:	2b00      	cmp	r3, #0
    2be8:	f43f af0d 	beq.w	2a06 <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    2bec:	4629      	mov	r1, r5
    2bee:	4620      	mov	r0, r4
    2bf0:	f002 f92a 	bl	4e48 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    2bf4:	2300      	movs	r3, #0
    2bf6:	706b      	strb	r3, [r5, #1]
    2bf8:	e6f2      	b.n	29e0 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    2bfa:	2b01      	cmp	r3, #1
    2bfc:	d008      	beq.n	2c10 <usb_handle_standard_request+0x27c>
    2bfe:	2b03      	cmp	r3, #3
    2c00:	f47f af01 	bne.w	2a06 <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    2c04:	8863      	ldrh	r3, [r4, #2]
    2c06:	2b00      	cmp	r3, #0
    2c08:	f47f aefd 	bne.w	2a06 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    2c0c:	2101      	movs	r1, #1
    2c0e:	e003      	b.n	2c18 <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    2c10:	8861      	ldrh	r1, [r4, #2]
    2c12:	2900      	cmp	r1, #0
    2c14:	f47f aef7 	bne.w	2a06 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    2c18:	88a0      	ldrh	r0, [r4, #4]
    2c1a:	f7ff fdeb 	bl	27f4 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    2c1e:	2800      	cmp	r0, #0
    2c20:	f47f aee3 	bne.w	29ea <usb_handle_standard_request+0x56>
    2c24:	e6ef      	b.n	2a06 <usb_handle_standard_request+0x72>
    2c26:	bf00      	nop
    2c28:	20000c68 	.word	0x20000c68
    2c2c:	20000d22 	.word	0x20000d22
		if (type == USB_DESC_CONFIGURATION) {
    2c30:	2802      	cmp	r0, #2
		*data = p;
    2c32:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    2c34:	f47f aef4 	bne.w	2a20 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    2c38:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    2c3a:	603b      	str	r3, [r7, #0]
		return true;
    2c3c:	e6d5      	b.n	29ea <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    2c3e:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    2c42:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2c44:	2800      	cmp	r0, #0
    2c46:	f6bf af71 	bge.w	2b2c <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
    2c4a:	2a00      	cmp	r2, #0
    2c4c:	f43f af66 	beq.w	2b1c <usb_handle_standard_request+0x188>
    2c50:	2a0a      	cmp	r2, #10
    2c52:	f47f aed8 	bne.w	2a06 <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    2c56:	782a      	ldrb	r2, [r5, #0]
    2c58:	2a00      	cmp	r2, #0
    2c5a:	f43f aed4 	beq.w	2a06 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    2c5e:	7869      	ldrb	r1, [r5, #1]
    2c60:	2904      	cmp	r1, #4
    2c62:	f47f af61 	bne.w	2b28 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2c66:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    2c68:	428b      	cmp	r3, r1
    2c6a:	f47f af5d 	bne.w	2b28 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2c6e:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    2c70:	bf96      	itet	ls
    2c72:	199b      	addls	r3, r3, r6
	return 0;
    2c74:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    2c76:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    2c7a:	f88c 3000 	strb.w	r3, [ip]
    2c7e:	e6d4      	b.n	2a2a <usb_handle_standard_request+0x96>

00002c80 <usb_write>:
{
    2c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c84:	b083      	sub	sp, #12
    2c86:	af00      	add	r7, sp, #0
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    2c88:	4e14      	ldr	r6, [pc, #80]	; (2cdc <usb_write+0x5c>)
{
    2c8a:	6079      	str	r1, [r7, #4]
    2c8c:	4604      	mov	r4, r0
    2c8e:	4690      	mov	r8, r2
    2c90:	4699      	mov	r9, r3
    2c92:	2504      	movs	r5, #4
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    2c94:	f04f 0a03 	mov.w	sl, #3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    2c98:	6879      	ldr	r1, [r7, #4]
    2c9a:	464b      	mov	r3, r9
    2c9c:	4642      	mov	r2, r8
    2c9e:	4620      	mov	r0, r4
    2ca0:	f002 f918 	bl	4ed4 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    2ca4:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    2ca8:	4683      	mov	fp, r0
		if (ret == -EAGAIN) {
    2caa:	d112      	bne.n	2cd2 <usb_write+0x52>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    2cac:	f8c7 d000 	str.w	sp, [r7]
    2cb0:	b088      	sub	sp, #32
    2cb2:	466a      	mov	r2, sp
    2cb4:	480a      	ldr	r0, [pc, #40]	; (2ce0 <usb_write+0x60>)
    2cb6:	e9c2 6405 	strd	r6, r4, [r2, #20]
    2cba:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    2cbe:	f842 af10 	str.w	sl, [r2, #16]!
    2cc2:	f00a fcb5 	bl	d630 <z_log_msg_static_create.constprop.0>
    2cc6:	f8d7 d000 	ldr.w	sp, [r7]
	z_impl_k_yield();
    2cca:	f008 ffe3 	bl	bc94 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    2cce:	3d01      	subs	r5, #1
    2cd0:	d1e2      	bne.n	2c98 <usb_write+0x18>
}
    2cd2:	4658      	mov	r0, fp
    2cd4:	370c      	adds	r7, #12
    2cd6:	46bd      	mov	sp, r7
    2cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cdc:	0000f985 	.word	0x0000f985
    2ce0:	0000f048 	.word	0x0000f048

00002ce4 <usb_data_to_host>:
{
    2ce4:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    2ce6:	4c13      	ldr	r4, [pc, #76]	; (2d34 <usb_data_to_host+0x50>)
    2ce8:	7d23      	ldrb	r3, [r4, #20]
    2cea:	b9cb      	cbnz	r3, 2d20 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    2cec:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2cee:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    2cf0:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2cf2:	ab01      	add	r3, sp, #4
    2cf4:	2080      	movs	r0, #128	; 0x80
    2cf6:	f7ff ffc3 	bl	2c80 <usb_write>
		usb_dev.data_buf += chunk;
    2cfa:	9a01      	ldr	r2, [sp, #4]
    2cfc:	68a3      	ldr	r3, [r4, #8]
    2cfe:	4413      	add	r3, r2
    2d00:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2d02:	68e3      	ldr	r3, [r4, #12]
    2d04:	1a9b      	subs	r3, r3, r2
    2d06:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    2d08:	b943      	cbnz	r3, 2d1c <usb_data_to_host+0x38>
    2d0a:	b13a      	cbz	r2, 2d1c <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2d0c:	6923      	ldr	r3, [r4, #16]
    2d0e:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    2d10:	429a      	cmp	r2, r3
    2d12:	dd03      	ble.n	2d1c <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    2d14:	069b      	lsls	r3, r3, #26
    2d16:	d101      	bne.n	2d1c <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    2d18:	2301      	movs	r3, #1
    2d1a:	7523      	strb	r3, [r4, #20]
}
    2d1c:	b002      	add	sp, #8
    2d1e:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    2d20:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2d22:	461a      	mov	r2, r3
    2d24:	4619      	mov	r1, r3
    2d26:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    2d28:	7523      	strb	r3, [r4, #20]
}
    2d2a:	b002      	add	sp, #8
    2d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2d30:	f002 b8d0 	b.w	4ed4 <usb_dc_ep_write>
    2d34:	20000c68 	.word	0x20000c68

00002d38 <usb_handle_control_transfer>:
{
    2d38:	b570      	push	{r4, r5, r6, lr}
    2d3a:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
    2d3c:	2300      	movs	r3, #0
{
    2d3e:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    2d40:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    2d42:	4606      	mov	r6, r0
    2d44:	2800      	cmp	r0, #0
    2d46:	d167      	bne.n	2e18 <usb_handle_control_transfer+0xe0>
    2d48:	2900      	cmp	r1, #0
    2d4a:	d13f      	bne.n	2dcc <usb_handle_control_transfer+0x94>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    2d4c:	2208      	movs	r2, #8
    2d4e:	460b      	mov	r3, r1
    2d50:	eb0d 0102 	add.w	r1, sp, r2
    2d54:	f00a fd09 	bl	d76a <usb_dc_ep_read>
    2d58:	2800      	cmp	r0, #0
    2d5a:	da04      	bge.n	2d66 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2d5c:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2d5e:	f002 f819 	bl	4d94 <usb_dc_ep_set_stall>
}
    2d62:	b00a      	add	sp, #40	; 0x28
    2d64:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    2d66:	4c31      	ldr	r4, [pc, #196]	; (2e2c <usb_handle_control_transfer+0xf4>)
    2d68:	9a02      	ldr	r2, [sp, #8]
    2d6a:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2d6c:	9a03      	ldr	r2, [sp, #12]
    2d6e:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    2d70:	f104 0238 	add.w	r2, r4, #56	; 0x38
    2d74:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    2d76:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    2d7a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    2d7e:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    2d80:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    2d82:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    2d86:	db14      	blt.n	2db2 <usb_handle_control_transfer+0x7a>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    2d88:	2b80      	cmp	r3, #128	; 0x80
    2d8a:	d90e      	bls.n	2daa <usb_handle_control_transfer+0x72>
				LOG_ERR("Request buffer too small");
    2d8c:	4b28      	ldr	r3, [pc, #160]	; (2e30 <usb_handle_control_transfer+0xf8>)
    2d8e:	4829      	ldr	r0, [pc, #164]	; (2e34 <usb_handle_control_transfer+0xfc>)
    2d90:	9309      	str	r3, [sp, #36]	; 0x24
    2d92:	aa08      	add	r2, sp, #32
    2d94:	2302      	movs	r3, #2
    2d96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d9a:	9308      	str	r3, [sp, #32]
    2d9c:	f00a fc48 	bl	d630 <z_log_msg_static_create.constprop.0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2da0:	2080      	movs	r0, #128	; 0x80
    2da2:	f001 fff7 	bl	4d94 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2da6:	4628      	mov	r0, r5
    2da8:	e7d9      	b.n	2d5e <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    2daa:	b113      	cbz	r3, 2db2 <usb_handle_control_transfer+0x7a>
				usb_dev.data_buf_residue = setup->wLength;
    2dac:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    2db0:	e7d7      	b.n	2d62 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    2db2:	f7ff fc47 	bl	2644 <usb_handle_request.constprop.0>
    2db6:	2800      	cmp	r0, #0
    2db8:	d0d0      	beq.n	2d5c <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    2dba:	88e2      	ldrh	r2, [r4, #6]
    2dbc:	6923      	ldr	r3, [r4, #16]
    2dbe:	429a      	cmp	r2, r3
    2dc0:	bfd4      	ite	le
    2dc2:	60e2      	strle	r2, [r4, #12]
    2dc4:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    2dc6:	f7ff ff8d 	bl	2ce4 <usb_data_to_host>
    2dca:	e7ca      	b.n	2d62 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    2dcc:	4c17      	ldr	r4, [pc, #92]	; (2e2c <usb_handle_control_transfer+0xf4>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2dce:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    2dd2:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2dd4:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    2dd6:	dc05      	bgt.n	2de4 <usb_handle_control_transfer+0xac>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2dd8:	4602      	mov	r2, r0
    2dda:	f00a fcc6 	bl	d76a <usb_dc_ep_read>
    2dde:	2800      	cmp	r0, #0
    2de0:	dabf      	bge.n	2d62 <usb_handle_control_transfer+0x2a>
    2de2:	e7bb      	b.n	2d5c <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2de4:	f00a fcc1 	bl	d76a <usb_dc_ep_read>
    2de8:	2800      	cmp	r0, #0
    2dea:	da04      	bge.n	2df6 <usb_handle_control_transfer+0xbe>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2dec:	2080      	movs	r0, #128	; 0x80
    2dee:	f001 ffd1 	bl	4d94 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2df2:	4630      	mov	r0, r6
    2df4:	e7b3      	b.n	2d5e <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    2df6:	9a01      	ldr	r2, [sp, #4]
    2df8:	68a3      	ldr	r3, [r4, #8]
    2dfa:	4413      	add	r3, r2
    2dfc:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2dfe:	68e3      	ldr	r3, [r4, #12]
    2e00:	1a9b      	subs	r3, r3, r2
    2e02:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    2e04:	2b00      	cmp	r3, #0
    2e06:	d1ac      	bne.n	2d62 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    2e08:	f104 0338 	add.w	r3, r4, #56	; 0x38
    2e0c:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    2e0e:	f7ff fc19 	bl	2644 <usb_handle_request.constprop.0>
    2e12:	2800      	cmp	r0, #0
    2e14:	d1d7      	bne.n	2dc6 <usb_handle_control_transfer+0x8e>
    2e16:	e7a1      	b.n	2d5c <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    2e18:	2880      	cmp	r0, #128	; 0x80
    2e1a:	d1a2      	bne.n	2d62 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2e1c:	4b03      	ldr	r3, [pc, #12]	; (2e2c <usb_handle_control_transfer+0xf4>)
    2e1e:	68da      	ldr	r2, [r3, #12]
    2e20:	2a00      	cmp	r2, #0
    2e22:	d1d0      	bne.n	2dc6 <usb_handle_control_transfer+0x8e>
    2e24:	7d1b      	ldrb	r3, [r3, #20]
    2e26:	2b00      	cmp	r3, #0
    2e28:	d1cd      	bne.n	2dc6 <usb_handle_control_transfer+0x8e>
    2e2a:	e79a      	b.n	2d62 <usb_handle_control_transfer+0x2a>
    2e2c:	20000c68 	.word	0x20000c68
    2e30:	0000f9ac 	.word	0x0000f9ac
    2e34:	0000f048 	.word	0x0000f048

00002e38 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    2e38:	4b05      	ldr	r3, [pc, #20]	; (2e50 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    2e3a:	4a06      	ldr	r2, [pc, #24]	; (2e54 <usb_set_config+0x1c>)
    2e3c:	629a      	str	r2, [r3, #40]	; 0x28
    2e3e:	4a06      	ldr	r2, [pc, #24]	; (2e58 <usb_set_config+0x20>)
    2e40:	62da      	str	r2, [r3, #44]	; 0x2c
    2e42:	4a06      	ldr	r2, [pc, #24]	; (2e5c <usb_set_config+0x24>)
    2e44:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    2e46:	4a06      	ldr	r2, [pc, #24]	; (2e60 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    2e48:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    2e4a:	619a      	str	r2, [r3, #24]
}
    2e4c:	2000      	movs	r0, #0
    2e4e:	4770      	bx	lr
    2e50:	20000c68 	.word	0x20000c68
    2e54:	00002995 	.word	0x00002995
    2e58:	00002521 	.word	0x00002521
    2e5c:	000025c1 	.word	0x000025c1
    2e60:	00002561 	.word	0x00002561

00002e64 <usb_device_init>:
{
    2e64:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    2e66:	4b09      	ldr	r3, [pc, #36]	; (2e8c <usb_device_init+0x28>)
    2e68:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    2e6c:	b954      	cbnz	r4, 2e84 <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    2e6e:	f000 f8e7 	bl	3040 <usb_get_device_descriptor>
	if (!device_descriptor) {
    2e72:	b918      	cbnz	r0, 2e7c <usb_device_init+0x18>
}
    2e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2e78:	f7ff bbfa 	b.w	2670 <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    2e7c:	f7ff ffdc 	bl	2e38 <usb_set_config>
	return 0;
    2e80:	4620      	mov	r0, r4
}
    2e82:	bd10      	pop	{r4, pc}
		return -EALREADY;
    2e84:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2e88:	e7fb      	b.n	2e82 <usb_device_init+0x1e>
    2e8a:	bf00      	nop
    2e8c:	20000c68 	.word	0x20000c68

00002e90 <usb_enable>:
{
    2e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e94:	4604      	mov	r4, r0
    2e96:	b086      	sub	sp, #24
	if (usb_dev.enabled == true) {
    2e98:	4d3f      	ldr	r5, [pc, #252]	; (2f98 <usb_enable+0x108>)
	return z_impl_k_mutex_lock(mutex, timeout);
    2e9a:	4840      	ldr	r0, [pc, #256]	; (2f9c <usb_enable+0x10c>)
    2e9c:	f04f 32ff 	mov.w	r2, #4294967295
    2ea0:	f04f 33ff 	mov.w	r3, #4294967295
    2ea4:	f008 fa0e 	bl	b2c4 <z_impl_k_mutex_lock>
    2ea8:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    2eac:	b196      	cbz	r6, 2ed4 <usb_enable+0x44>
		LOG_WRN("USB device support already enabled");
    2eae:	4b3c      	ldr	r3, [pc, #240]	; (2fa0 <usb_enable+0x110>)
    2eb0:	9305      	str	r3, [sp, #20]
    2eb2:	483c      	ldr	r0, [pc, #240]	; (2fa4 <usb_enable+0x114>)
    2eb4:	2302      	movs	r3, #2
    2eb6:	aa04      	add	r2, sp, #16
    2eb8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		ret = -EALREADY;
    2ebc:	f06f 0477 	mvn.w	r4, #119	; 0x77
		LOG_WRN("USB device support already enabled");
    2ec0:	9304      	str	r3, [sp, #16]
    2ec2:	f00a fbb5 	bl	d630 <z_log_msg_static_create.constprop.0>
	return z_impl_k_mutex_unlock(mutex);
    2ec6:	4835      	ldr	r0, [pc, #212]	; (2f9c <usb_enable+0x10c>)
    2ec8:	f008 fa76 	bl	b3b8 <z_impl_k_mutex_unlock>
}
    2ecc:	4620      	mov	r0, r4
    2ece:	b006      	add	sp, #24
    2ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	usb_dev.status_callback = cb;
    2ed4:	4834      	ldr	r0, [pc, #208]	; (2fa8 <usb_enable+0x118>)
	usb_dev.user_status_callback = status_cb;
    2ed6:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    2ed8:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    2eda:	f002 f96f 	bl	51bc <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    2ede:	f001 feaf 	bl	4c40 <usb_dc_attach>
	if (ret < 0) {
    2ee2:	1e04      	subs	r4, r0, #0
    2ee4:	dbef      	blt.n	2ec6 <usb_enable+0x36>
	ret = usb_transfer_init();
    2ee6:	f000 fad3 	bl	3490 <usb_transfer_init>
	if (ret < 0) {
    2eea:	1e04      	subs	r4, r0, #0
    2eec:	dbeb      	blt.n	2ec6 <usb_enable+0x36>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2eee:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    2ef0:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2ef2:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    2ef6:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    2efa:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2efe:	f001 ff15 	bl	4d2c <usb_dc_ep_configure>
	if (ret < 0) {
    2f02:	1e04      	subs	r4, r0, #0
    2f04:	dbdf      	blt.n	2ec6 <usb_enable+0x36>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2f06:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    2f08:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2f0a:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2f0e:	f001 ff0d 	bl	4d2c <usb_dc_ep_configure>
	if (ret < 0) {
    2f12:	1e04      	subs	r4, r0, #0
    2f14:	dbd7      	blt.n	2ec6 <usb_enable+0x36>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2f16:	4925      	ldr	r1, [pc, #148]	; (2fac <usb_enable+0x11c>)
    2f18:	4630      	mov	r0, r6
    2f1a:	f002 f93b 	bl	5194 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2f1e:	1e04      	subs	r4, r0, #0
    2f20:	dbd1      	blt.n	2ec6 <usb_enable+0x36>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2f22:	4922      	ldr	r1, [pc, #136]	; (2fac <usb_enable+0x11c>)
    2f24:	4638      	mov	r0, r7
    2f26:	f002 f935 	bl	5194 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2f2a:	1e04      	subs	r4, r0, #0
    2f2c:	dbcb      	blt.n	2ec6 <usb_enable+0x36>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2f2e:	4c20      	ldr	r4, [pc, #128]	; (2fb0 <usb_enable+0x120>)
    2f30:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2fb4 <usb_enable+0x124>
    2f34:	4544      	cmp	r4, r8
    2f36:	d31a      	bcc.n	2f6e <usb_enable+0xde>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2f38:	2000      	movs	r0, #0
    2f3a:	f001 ffa1 	bl	4e80 <usb_dc_ep_enable>
	if (ret < 0) {
    2f3e:	1e04      	subs	r4, r0, #0
    2f40:	dbc1      	blt.n	2ec6 <usb_enable+0x36>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2f42:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2f46:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2f48:	f043 0301 	orr.w	r3, r3, #1
    2f4c:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2f50:	f001 ff96 	bl	4e80 <usb_dc_ep_enable>
	if (ret < 0) {
    2f54:	1e04      	subs	r4, r0, #0
    2f56:	dbb6      	blt.n	2ec6 <usb_enable+0x36>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    2f58:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2f60:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    2f64:	2301      	movs	r3, #1
    2f66:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    2f6a:	2400      	movs	r4, #0
    2f6c:	e7ab      	b.n	2ec6 <usb_enable+0x36>
		ep_data = cfg_data->endpoint;
    2f6e:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2f70:	2600      	movs	r6, #0
    2f72:	7f22      	ldrb	r2, [r4, #28]
    2f74:	b2f3      	uxtb	r3, r6
    2f76:	429a      	cmp	r2, r3
    2f78:	d801      	bhi.n	2f7e <usb_enable+0xee>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2f7a:	3424      	adds	r4, #36	; 0x24
    2f7c:	e7da      	b.n	2f34 <usb_enable+0xa4>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    2f7e:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    2f82:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    2f86:	7910      	ldrb	r0, [r2, #4]
    2f88:	f002 f904 	bl	5194 <usb_dc_ep_set_callback>
    2f8c:	3601      	adds	r6, #1
    2f8e:	2800      	cmp	r0, #0
    2f90:	d0ef      	beq.n	2f72 <usb_enable+0xe2>
    2f92:	f04f 34ff 	mov.w	r4, #4294967295
    2f96:	e796      	b.n	2ec6 <usb_enable+0x36>
    2f98:	20000c68 	.word	0x20000c68
    2f9c:	20000368 	.word	0x20000368
    2fa0:	0000f9c5 	.word	0x0000f9c5
    2fa4:	0000f048 	.word	0x0000f048
    2fa8:	00002745 	.word	0x00002745
    2fac:	00002d39 	.word	0x00002d39
    2fb0:	20000431 	.word	0x20000431
    2fb4:	20000431 	.word	0x20000431

00002fb8 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2fb8:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2fba:	4b1f      	ldr	r3, [pc, #124]	; (3038 <CONFIG_USB_DEVICE_VID+0x55>)
{
    2fbc:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2fbe:	aa05      	add	r2, sp, #20
    2fc0:	f103 0510 	add.w	r5, r3, #16
    2fc4:	6818      	ldr	r0, [r3, #0]
    2fc6:	6859      	ldr	r1, [r3, #4]
    2fc8:	4614      	mov	r4, r2
    2fca:	c403      	stmia	r4!, {r0, r1}
    2fcc:	3308      	adds	r3, #8
    2fce:	42ab      	cmp	r3, r5
    2fd0:	4622      	mov	r2, r4
    2fd2:	d1f7      	bne.n	2fc4 <usb_update_sn_string_descriptor+0xc>
    2fd4:	781b      	ldrb	r3, [r3, #0]
    2fd6:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    2fd8:	2210      	movs	r2, #16
    2fda:	2100      	movs	r1, #0
    2fdc:	a801      	add	r0, sp, #4
    2fde:	f00a fb73 	bl	d6c8 <memset>
	memset(sn, 0, sizeof(sn));
    2fe2:	2212      	movs	r2, #18
    2fe4:	2100      	movs	r1, #0
    2fe6:	4815      	ldr	r0, [pc, #84]	; (303c <CONFIG_USB_DEVICE_VID+0x59>)
    2fe8:	f00a fb6e 	bl	d6c8 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2fec:	2110      	movs	r1, #16
    2fee:	a801      	add	r0, sp, #4
    2ff0:	f00a fcae 	bl	d950 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2ff4:	2800      	cmp	r0, #0
    2ff6:	dd1b      	ble.n	3030 <CONFIG_USB_DEVICE_VID+0x4d>
		skip = MAX(0, hwlen - usblen);
    2ff8:	2808      	cmp	r0, #8
    2ffa:	bfb8      	it	lt
    2ffc:	2008      	movlt	r0, #8
    2ffe:	3809      	subs	r0, #9
    3000:	ab01      	add	r3, sp, #4
    3002:	490e      	ldr	r1, [pc, #56]	; (303c <CONFIG_USB_DEVICE_VID+0x59>)
    3004:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    3006:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3008:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    300c:	ac0a      	add	r4, sp, #40	; 0x28
    300e:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3012:	f003 030f 	and.w	r3, r3, #15
    3016:	3328      	adds	r3, #40	; 0x28
    3018:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    301a:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    301c:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3020:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3024:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    3026:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3028:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    302a:	f101 0102 	add.w	r1, r1, #2
    302e:	d1eb      	bne.n	3008 <CONFIG_USB_DEVICE_VID+0x25>
		}
	}

	return sn;
}
    3030:	4802      	ldr	r0, [pc, #8]	; (303c <CONFIG_USB_DEVICE_VID+0x59>)
    3032:	b00b      	add	sp, #44	; 0x2c
    3034:	bd30      	pop	{r4, r5, pc}
    3036:	bf00      	nop
    3038:	0000f9f3 	.word	0x0000f9f3
    303c:	20002412 	.word	0x20002412

00003040 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    3040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3044:	4c83      	ldr	r4, [pc, #524]	; (3254 <usb_get_device_descriptor+0x214>)
    3046:	b08b      	sub	sp, #44	; 0x2c
    3048:	af00      	add	r7, sp, #0
	uint8_t str_descr_idx = 0U;
    304a:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    304c:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    3050:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    3052:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    3054:	46b0      	mov	r8, r6
	while (head->bLength != 0U) {
    3056:	7823      	ldrb	r3, [r4, #0]
    3058:	b943      	cbnz	r3, 306c <usb_get_device_descriptor+0x2c>
	if ((head + 1) != __usb_descriptor_end) {
    305a:	4b7f      	ldr	r3, [pc, #508]	; (3258 <usb_get_device_descriptor+0x218>)
    305c:	3402      	adds	r4, #2
    305e:	429c      	cmp	r4, r3
    3060:	d1f3      	bne.n	304a <usb_get_device_descriptor+0xa>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    3062:	487c      	ldr	r0, [pc, #496]	; (3254 <usb_get_device_descriptor+0x214>)
}
    3064:	372c      	adds	r7, #44	; 0x2c
    3066:	46bd      	mov	sp, r7
    3068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    306c:	7863      	ldrb	r3, [r4, #1]
    306e:	2b05      	cmp	r3, #5
    3070:	d805      	bhi.n	307e <usb_get_device_descriptor+0x3e>
    3072:	e8df f003 	tbb	[pc, r3]
    3076:	04a6      	.short	0x04a6
    3078:	3f07a603 	.word	0x3f07a603
    307c:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    307e:	7823      	ldrb	r3, [r4, #0]
    3080:	441c      	add	r4, r3
    3082:	e7e8      	b.n	3056 <usb_get_device_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    3084:	78e3      	ldrb	r3, [r4, #3]
    3086:	2b00      	cmp	r3, #0
    3088:	d1f9      	bne.n	307e <usb_get_device_descriptor+0x3e>
			if (if_descr->bInterfaceNumber == 0U) {
    308a:	78a3      	ldrb	r3, [r4, #2]
    308c:	b343      	cbz	r3, 30e0 <usb_get_device_descriptor+0xa0>
			numof_ifaces++;
    308e:	f10a 0a01 	add.w	sl, sl, #1
    3092:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    3096:	e7f2      	b.n	307e <usb_get_device_descriptor+0x3e>
		if (cfg_data->interface_descriptor == iface) {
    3098:	686a      	ldr	r2, [r5, #4]
    309a:	4294      	cmp	r4, r2
    309c:	d023      	beq.n	30e6 <usb_get_device_descriptor+0xa6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    309e:	3524      	adds	r5, #36	; 0x24
    30a0:	429d      	cmp	r5, r3
    30a2:	d3f9      	bcc.n	3098 <usb_get_device_descriptor+0x58>
					LOG_ERR("There is no usb_cfg_data "
    30a4:	466d      	mov	r5, sp
    30a6:	b088      	sub	sp, #32
    30a8:	466a      	mov	r2, sp
    30aa:	4b6c      	ldr	r3, [pc, #432]	; (325c <usb_get_device_descriptor+0x21c>)
    30ac:	e9c2 3405 	strd	r3, r4, [r2, #20]
    30b0:	2303      	movs	r3, #3
    30b2:	f842 3f10 	str.w	r3, [r2, #16]!
    30b6:	486a      	ldr	r0, [pc, #424]	; (3260 <usb_get_device_descriptor+0x220>)
    30b8:	2300      	movs	r3, #0
    30ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    30be:	f7fe fd85 	bl	1bcc <z_impl_z_log_msg_static_create>
    30c2:	46ad      	mov	sp, r5
		LOG_ERR("Failed to fixup USB descriptor");
    30c4:	4b67      	ldr	r3, [pc, #412]	; (3264 <usb_get_device_descriptor+0x224>)
    30c6:	627b      	str	r3, [r7, #36]	; 0x24
    30c8:	2302      	movs	r3, #2
    30ca:	623b      	str	r3, [r7, #32]
    30cc:	4864      	ldr	r0, [pc, #400]	; (3260 <usb_get_device_descriptor+0x220>)
    30ce:	2300      	movs	r3, #0
    30d0:	f107 0220 	add.w	r2, r7, #32
    30d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    30d8:	f7fe fd78 	bl	1bcc <z_impl_z_log_msg_static_create>
		return NULL;
    30dc:	2000      	movs	r0, #0
    30de:	e7c1      	b.n	3064 <usb_get_device_descriptor+0x24>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    30e0:	4d61      	ldr	r5, [pc, #388]	; (3268 <usb_get_device_descriptor+0x228>)
    30e2:	4b62      	ldr	r3, [pc, #392]	; (326c <usb_get_device_descriptor+0x22c>)
    30e4:	e7dc      	b.n	30a0 <usb_get_device_descriptor+0x60>
				if (cfg_data->interface_config) {
    30e6:	68ab      	ldr	r3, [r5, #8]
    30e8:	2b00      	cmp	r3, #0
    30ea:	d0d0      	beq.n	308e <usb_get_device_descriptor+0x4e>
					cfg_data->interface_config(head,
    30ec:	4651      	mov	r1, sl
    30ee:	4620      	mov	r0, r4
    30f0:	4798      	blx	r3
    30f2:	e7cc      	b.n	308e <usb_get_device_descriptor+0x4e>
			if (!cfg_data) {
    30f4:	2d00      	cmp	r5, #0
    30f6:	d162      	bne.n	31be <usb_get_device_descriptor+0x17e>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    30f8:	4b5d      	ldr	r3, [pc, #372]	; (3270 <usb_get_device_descriptor+0x230>)
				LOG_ERR("Failed to validate endpoints");
    30fa:	627b      	str	r3, [r7, #36]	; 0x24
    30fc:	2302      	movs	r3, #2
    30fe:	623b      	str	r3, [r7, #32]
    3100:	4857      	ldr	r0, [pc, #348]	; (3260 <usb_get_device_descriptor+0x220>)
    3102:	2300      	movs	r3, #0
    3104:	f107 0220 	add.w	r2, r7, #32
    3108:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    310c:	f7fe fd5e 	bl	1bcc <z_impl_z_log_msg_static_create>
				return -1;
    3110:	e7d8      	b.n	30c4 <usb_get_device_descriptor+0x84>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    3112:	6a29      	ldr	r1, [r5, #32]
    3114:	78a0      	ldrb	r0, [r4, #2]
    3116:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    311a:	790b      	ldrb	r3, [r1, #4]
    311c:	4298      	cmp	r0, r3
    311e:	d005      	beq.n	312c <usb_get_device_descriptor+0xec>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    3120:	3201      	adds	r2, #1
    3122:	7f2b      	ldrb	r3, [r5, #28]
    3124:	429a      	cmp	r2, r3
    3126:	d3f4      	bcc.n	3112 <usb_get_device_descriptor+0xd2>
				LOG_ERR("Failed to validate endpoints");
    3128:	4b52      	ldr	r3, [pc, #328]	; (3274 <usb_get_device_descriptor+0x234>)
    312a:	e7e6      	b.n	30fa <usb_get_device_descriptor+0xba>
    312c:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    3130:	78e0      	ldrb	r0, [r4, #3]
    3132:	f000 0003 	and.w	r0, r0, #3
    3136:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    3138:	7920      	ldrb	r0, [r4, #4]
    313a:	f894 c005 	ldrb.w	ip, [r4, #5]
    313e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    3142:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    3144:	f994 0002 	ldrsb.w	r0, [r4, #2]
    3148:	2800      	cmp	r0, #0
    314a:	fa5f f389 	uxtb.w	r3, r9
    314e:	da28      	bge.n	31a2 <usb_get_device_descriptor+0x162>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    3150:	f109 0010 	add.w	r0, r9, #16
    3154:	f04f 0c01 	mov.w	ip, #1
    3158:	fa0c f000 	lsl.w	r0, ip, r0
    315c:	ea10 0f0b 	tst.w	r0, fp
    3160:	d127      	bne.n	31b2 <usb_get_device_descriptor+0x172>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    3162:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    3166:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    3168:	f107 0010 	add.w	r0, r7, #16
    316c:	e9c7 3101 	strd	r3, r1, [r7, #4]
    3170:	60fa      	str	r2, [r7, #12]
    3172:	f001 fda9 	bl	4cc8 <usb_dc_ep_check_cap>
    3176:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    317a:	687b      	ldr	r3, [r7, #4]
    317c:	b9c8      	cbnz	r0, 31b2 <usb_get_device_descriptor+0x172>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    317e:	7c3a      	ldrb	r2, [r7, #16]
    3180:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    3182:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    3186:	bf18      	it	ne
    3188:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    318a:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
    318c:	bf18      	it	ne
    318e:	b2db      	uxtbne	r3, r3
    3190:	f04f 0201 	mov.w	r2, #1
    3194:	bf14      	ite	ne
    3196:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
    3198:	fa02 f209 	lsleq.w	r2, r2, r9
    319c:	ea4b 0b02 	orr.w	fp, fp, r2
				return 0;
    31a0:	e76d      	b.n	307e <usb_get_device_descriptor+0x3e>
				if ((*requested_ep & (1U << (idx)))) {
    31a2:	2001      	movs	r0, #1
    31a4:	fa00 f009 	lsl.w	r0, r0, r9
    31a8:	ea10 0f0b 	tst.w	r0, fp
    31ac:	d101      	bne.n	31b2 <usb_get_device_descriptor+0x172>
    31ae:	4618      	mov	r0, r3
    31b0:	e7d9      	b.n	3166 <usb_get_device_descriptor+0x126>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    31b2:	f109 0901 	add.w	r9, r9, #1
    31b6:	f1b9 0f10 	cmp.w	r9, #16
    31ba:	d1b9      	bne.n	3130 <usb_get_device_descriptor+0xf0>
    31bc:	e7b0      	b.n	3120 <usb_get_device_descriptor+0xe0>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    31be:	2200      	movs	r2, #0
    31c0:	e7af      	b.n	3122 <usb_get_device_descriptor+0xe2>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    31c2:	2e03      	cmp	r6, #3
    31c4:	d12a      	bne.n	321c <usb_get_device_descriptor+0x1dc>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    31c6:	f7ff fef7 	bl	2fb8 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    31ca:	4681      	mov	r9, r0
    31cc:	b1a8      	cbz	r0, 31fa <usb_get_device_descriptor+0x1ba>
	runtime_sn_len = strlen(runtime_sn);
    31ce:	f00a fa60 	bl	d692 <strlen>
	if (!runtime_sn_len) {
    31d2:	60f8      	str	r0, [r7, #12]
    31d4:	b188      	cbz	r0, 31fa <usb_get_device_descriptor+0x1ba>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    31d6:	4828      	ldr	r0, [pc, #160]	; (3278 <usb_get_device_descriptor+0x238>)
    31d8:	f00a fa5b 	bl	d692 <strlen>
	if (runtime_sn_len != default_sn_len) {
    31dc:	68fa      	ldr	r2, [r7, #12]
    31de:	4282      	cmp	r2, r0
    31e0:	d017      	beq.n	3212 <usb_get_device_descriptor+0x1d2>
		LOG_ERR("the new SN descriptor doesn't have the same "
    31e2:	4b26      	ldr	r3, [pc, #152]	; (327c <usb_get_device_descriptor+0x23c>)
    31e4:	627b      	str	r3, [r7, #36]	; 0x24
    31e6:	2302      	movs	r3, #2
    31e8:	623b      	str	r3, [r7, #32]
    31ea:	481d      	ldr	r0, [pc, #116]	; (3260 <usb_get_device_descriptor+0x220>)
    31ec:	2300      	movs	r3, #0
    31ee:	f107 0220 	add.w	r2, r7, #32
    31f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    31f6:	f7fe fce9 	bl	1bcc <z_impl_z_log_msg_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    31fa:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    31fc:	f06f 0102 	mvn.w	r1, #2
    3200:	18e2      	adds	r2, r4, r3
    3202:	1b09      	subs	r1, r1, r4
    3204:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    3208:	42d1      	cmn	r1, r2
    320a:	d50e      	bpl.n	322a <usb_get_device_descriptor+0x1ea>
			str_descr_idx += 1U;
    320c:	3601      	adds	r6, #1
    320e:	b2f6      	uxtb	r6, r6
			break;
    3210:	e735      	b.n	307e <usb_get_device_descriptor+0x3e>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    3212:	4649      	mov	r1, r9
    3214:	1ca0      	adds	r0, r4, #2
    3216:	f00a fa4c 	bl	d6b2 <memcpy>
			if (str_descr_idx) {
    321a:	e7ee      	b.n	31fa <usb_get_device_descriptor+0x1ba>
    321c:	2e00      	cmp	r6, #0
    321e:	d1ec      	bne.n	31fa <usb_get_device_descriptor+0x1ba>
				if (!cfg_descr) {
    3220:	f1b8 0f00 	cmp.w	r8, #0
    3224:	d10a      	bne.n	323c <usb_get_device_descriptor+0x1fc>
					LOG_ERR("Incomplete device descriptor");
    3226:	4b16      	ldr	r3, [pc, #88]	; (3280 <usb_get_device_descriptor+0x240>)
    3228:	e767      	b.n	30fa <usb_get_device_descriptor+0xba>
		buf[i] = 0U;
    322a:	f04f 0000 	mov.w	r0, #0
    322e:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    3232:	f813 0901 	ldrb.w	r0, [r3], #-1
    3236:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    323a:	e7e5      	b.n	3208 <usb_get_device_descriptor+0x1c8>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    323c:	eba4 0308 	sub.w	r3, r4, r8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    3240:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    3244:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3248:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    324c:	f888 a004 	strb.w	sl, [r8, #4]
    3250:	e7dc      	b.n	320c <usb_get_device_descriptor+0x1cc>
    3252:	bf00      	nop
    3254:	200003ac 	.word	0x200003ac
    3258:	20000431 	.word	0x20000431
    325c:	0000fa04 	.word	0x0000fa04
    3260:	0000f040 	.word	0x0000f040
    3264:	0000faea 	.word	0x0000faea
    3268:	20000431 	.word	0x20000431
    326c:	20000431 	.word	0x20000431
    3270:	0000fa24 	.word	0x0000fa24
    3274:	0000fa65 	.word	0x0000fa65
    3278:	0000f9f3 	.word	0x0000f9f3
    327c:	0000fa82 	.word	0x0000fa82
    3280:	0000facd 	.word	0x0000facd

00003284 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    3284:	b510      	push	{r4, lr}
    3286:	4b09      	ldr	r3, [pc, #36]	; (32ac <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3288:	2100      	movs	r1, #0
    328a:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    328c:	781c      	ldrb	r4, [r3, #0]
    328e:	4284      	cmp	r4, r0
    3290:	d105      	bne.n	329e <usb_ep_get_transfer+0x1a>
    3292:	685c      	ldr	r4, [r3, #4]
    3294:	b11c      	cbz	r4, 329e <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    3296:	2348      	movs	r3, #72	; 0x48
    3298:	fb03 2001 	mla	r0, r3, r1, r2
		}
	}

	return NULL;
}
    329c:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    329e:	3101      	adds	r1, #1
    32a0:	2904      	cmp	r1, #4
    32a2:	f103 0348 	add.w	r3, r3, #72	; 0x48
    32a6:	d1f1      	bne.n	328c <usb_ep_get_transfer+0x8>
	return NULL;
    32a8:	2000      	movs	r0, #0
    32aa:	e7f7      	b.n	329c <usb_ep_get_transfer+0x18>
    32ac:	20000d30 	.word	0x20000d30

000032b0 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    32b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    32b4:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    32b6:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    32ba:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
    32be:	3310      	adds	r3, #16
{
    32c0:	af00      	add	r7, sp, #0
    32c2:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    32c4:	d111      	bne.n	32ea <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    32c6:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    32c8:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
    32cc:	f013 0602 	ands.w	r6, r3, #2
    32d0:	d04e      	beq.n	3370 <usb_transfer_work+0xc0>
		if (!trans->bsize) {
    32d2:	bb0a      	cbnz	r2, 3318 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    32d4:	f013 0304 	ands.w	r3, r3, #4
    32d8:	d104      	bne.n	32e4 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    32da:	461a      	mov	r2, r3
    32dc:	4619      	mov	r1, r3
    32de:	4628      	mov	r0, r5
    32e0:	f7ff fcce 	bl	2c80 <usb_write>
			}
			trans->status = 0;
    32e4:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    32e6:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    32ea:	f854 3c30 	ldr.w	r3, [r4, #-48]
    32ee:	3310      	adds	r3, #16
    32f0:	d00e      	beq.n	3310 <usb_transfer_work+0x60>
    32f2:	f854 6c20 	ldr.w	r6, [r4, #-32]
    32f6:	b15e      	cbz	r6, 3310 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    32f8:	f854 8c24 	ldr.w	r8, [r4, #-36]
		void *priv = trans->priv;
    32fc:	f854 9c1c 	ldr.w	r9, [r4, #-28]

		if (k_is_in_isr()) {
    3300:	f00b f87d 	bl	e3fe <k_is_in_isr>
    3304:	2800      	cmp	r0, #0
    3306:	d06f      	beq.n	33e8 <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3308:	483d      	ldr	r0, [pc, #244]	; (3400 <usb_transfer_work+0x150>)
    330a:	4621      	mov	r1, r4
    330c:	f00b f956 	bl	e5bc <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    3310:	370c      	adds	r7, #12
    3312:	46bd      	mov	sp, r7
    3314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    3318:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    331c:	1d3b      	adds	r3, r7, #4
    331e:	4628      	mov	r0, r5
    3320:	f7ff fcae 	bl	2c80 <usb_write>
		if (ret) {
    3324:	b198      	cbz	r0, 334e <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    3326:	466e      	mov	r6, sp
    3328:	b088      	sub	sp, #32
    332a:	466a      	mov	r2, sp
    332c:	4b35      	ldr	r3, [pc, #212]	; (3404 <usb_transfer_work+0x154>)
    332e:	61d5      	str	r5, [r2, #28]
    3330:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3334:	2304      	movs	r3, #4
    3336:	f842 3f10 	str.w	r3, [r2, #16]!
    333a:	4833      	ldr	r0, [pc, #204]	; (3408 <usb_transfer_work+0x158>)
    333c:	2300      	movs	r3, #0
    333e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    3342:	f7fe fc43 	bl	1bcc <z_impl_z_log_msg_static_create>
    3346:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    3348:	f06f 0315 	mvn.w	r3, #21
    334c:	e7cb      	b.n	32e6 <usb_transfer_work+0x36>
		trans->buffer += bytes;
    334e:	687a      	ldr	r2, [r7, #4]
    3350:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    3354:	4413      	add	r3, r2
    3356:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    335a:	f854 3c28 	ldr.w	r3, [r4, #-40]
    335e:	1a9b      	subs	r3, r3, r2
    3360:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    3364:	f854 3c24 	ldr.w	r3, [r4, #-36]
    3368:	4413      	add	r3, r2
    336a:	f844 3c24 	str.w	r3, [r4, #-36]
    336e:	e7bc      	b.n	32ea <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    3370:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    3374:	1d3b      	adds	r3, r7, #4
    3376:	4628      	mov	r0, r5
    3378:	f001 fe4e 	bl	5018 <usb_dc_ep_read_wait>
		if (ret) {
    337c:	b188      	cbz	r0, 33a2 <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    337e:	46e8      	mov	r8, sp
    3380:	b088      	sub	sp, #32
    3382:	466a      	mov	r2, sp
    3384:	4b1f      	ldr	r3, [pc, #124]	; (3404 <usb_transfer_work+0x154>)
    3386:	61d5      	str	r5, [r2, #28]
    3388:	e9c2 3005 	strd	r3, r0, [r2, #20]
    338c:	2304      	movs	r3, #4
    338e:	f842 3f10 	str.w	r3, [r2, #16]!
    3392:	481d      	ldr	r0, [pc, #116]	; (3408 <usb_transfer_work+0x158>)
    3394:	4633      	mov	r3, r6
    3396:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    339a:	f7fe fc17 	bl	1bcc <z_impl_z_log_msg_static_create>
    339e:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    33a0:	e7d2      	b.n	3348 <usb_transfer_work+0x98>
		trans->buffer += bytes;
    33a2:	687e      	ldr	r6, [r7, #4]
    33a4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    33a8:	4433      	add	r3, r6
    33aa:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    33ae:	f854 3c28 	ldr.w	r3, [r4, #-40]
    33b2:	1b9b      	subs	r3, r3, r6
    33b4:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    33b8:	f854 3c24 	ldr.w	r3, [r4, #-36]
    33bc:	4433      	add	r3, r6
    33be:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    33c2:	2e00      	cmp	r6, #0
    33c4:	d08e      	beq.n	32e4 <usb_transfer_work+0x34>
    33c6:	4628      	mov	r0, r5
    33c8:	f001 fefe 	bl	51c8 <usb_dc_ep_mps>
    33cc:	fbb6 f3f0 	udiv	r3, r6, r0
    33d0:	fb03 6610 	mls	r6, r3, r0, r6
    33d4:	2e00      	cmp	r6, #0
    33d6:	d185      	bne.n	32e4 <usb_transfer_work+0x34>
    33d8:	f854 3c28 	ldr.w	r3, [r4, #-40]
    33dc:	2b00      	cmp	r3, #0
    33de:	d081      	beq.n	32e4 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    33e0:	4628      	mov	r0, r5
    33e2:	f001 fe7f 	bl	50e4 <usb_dc_ep_read_continue>
    33e6:	e780      	b.n	32ea <usb_transfer_work+0x3a>
		trans->cb = NULL;
    33e8:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
    33ec:	f1a4 0018 	sub.w	r0, r4, #24
    33f0:	f008 f852 	bl	b498 <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    33f4:	464a      	mov	r2, r9
    33f6:	4641      	mov	r1, r8
    33f8:	4628      	mov	r0, r5
    33fa:	47b0      	blx	r6
    33fc:	e788      	b.n	3310 <usb_transfer_work+0x60>
    33fe:	bf00      	nop
    3400:	20000b38 	.word	0x20000b38
    3404:	0000fb18 	.word	0x0000fb18
    3408:	0000f058 	.word	0x0000f058

0000340c <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
    340c:	b510      	push	{r4, lr}
	__asm__ volatile(
    340e:	f04f 0320 	mov.w	r3, #32
    3412:	f3ef 8411 	mrs	r4, BASEPRI
    3416:	f383 8812 	msr	BASEPRI_MAX, r3
    341a:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    341e:	f7ff ff31 	bl	3284 <usb_ep_get_transfer>
	if (!trans) {
    3422:	b150      	cbz	r0, 343a <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    3424:	6843      	ldr	r3, [r0, #4]
    3426:	3310      	adds	r3, #16
    3428:	d107      	bne.n	343a <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    342a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    342e:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3430:	f100 0134 	add.w	r1, r0, #52	; 0x34
    3434:	4803      	ldr	r0, [pc, #12]	; (3444 <usb_cancel_transfer+0x38>)
    3436:	f00b f8c1 	bl	e5bc <k_work_submit_to_queue>
	__asm__ volatile(
    343a:	f384 8811 	msr	BASEPRI, r4
    343e:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    3442:	bd10      	pop	{r4, pc}
    3444:	20000b38 	.word	0x20000b38

00003448 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    3448:	b570      	push	{r4, r5, r6, lr}
    344a:	4c0f      	ldr	r4, [pc, #60]	; (3488 <usb_cancel_transfers+0x40>)
    344c:	2504      	movs	r5, #4
	__asm__ volatile(
    344e:	f04f 0320 	mov.w	r3, #32
    3452:	f3ef 8611 	mrs	r6, BASEPRI
    3456:	f383 8812 	msr	BASEPRI_MAX, r3
    345a:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    345e:	6863      	ldr	r3, [r4, #4]
    3460:	3310      	adds	r3, #16
    3462:	d107      	bne.n	3474 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    3464:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3468:	4808      	ldr	r0, [pc, #32]	; (348c <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    346a:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    346c:	f104 0134 	add.w	r1, r4, #52	; 0x34
    3470:	f00b f8a4 	bl	e5bc <k_work_submit_to_queue>
	__asm__ volatile(
    3474:	f386 8811 	msr	BASEPRI, r6
    3478:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    347c:	3d01      	subs	r5, #1
    347e:	f104 0448 	add.w	r4, r4, #72	; 0x48
    3482:	d1e4      	bne.n	344e <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    3484:	bd70      	pop	{r4, r5, r6, pc}
    3486:	bf00      	nop
    3488:	20000d30 	.word	0x20000d30
    348c:	20000b38 	.word	0x20000b38

00003490 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    3490:	b570      	push	{r4, r5, r6, lr}
    3492:	4c0a      	ldr	r4, [pc, #40]	; (34bc <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3494:	4e0a      	ldr	r6, [pc, #40]	; (34c0 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3496:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3498:	4631      	mov	r1, r6
    349a:	4620      	mov	r0, r4
    349c:	f00b f871 	bl	e582 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    34a0:	2201      	movs	r2, #1
    34a2:	f1a4 0018 	sub.w	r0, r4, #24
    34a6:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    34a8:	3501      	adds	r5, #1
    34aa:	f00b f848 	bl	e53e <z_impl_k_sem_init>
    34ae:	2d04      	cmp	r5, #4
    34b0:	f104 0448 	add.w	r4, r4, #72	; 0x48
    34b4:	d1f0      	bne.n	3498 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    34b6:	2000      	movs	r0, #0
    34b8:	bd70      	pop	{r4, r5, r6, pc}
    34ba:	bf00      	nop
    34bc:	20000d64 	.word	0x20000d64
    34c0:	000032b1 	.word	0x000032b1

000034c4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    34c4:	4801      	ldr	r0, [pc, #4]	; (34cc <nrf_cc3xx_platform_abort_init+0x8>)
    34c6:	f009 b813 	b.w	c4f0 <nrf_cc3xx_platform_set_abort>
    34ca:	bf00      	nop
    34cc:	0000f12c 	.word	0x0000f12c

000034d0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    34d0:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    34d2:	4604      	mov	r4, r0
    34d4:	b918      	cbnz	r0, 34de <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    34d6:	4b0f      	ldr	r3, [pc, #60]	; (3514 <mutex_free_platform+0x44>)
    34d8:	480f      	ldr	r0, [pc, #60]	; (3518 <mutex_free_platform+0x48>)
    34da:	685b      	ldr	r3, [r3, #4]
    34dc:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    34de:	6861      	ldr	r1, [r4, #4]
    34e0:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    34e4:	d00f      	beq.n	3506 <mutex_free_platform+0x36>
    34e6:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    34ea:	d00c      	beq.n	3506 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    34ec:	4d0b      	ldr	r5, [pc, #44]	; (351c <mutex_free_platform+0x4c>)
    34ee:	42a9      	cmp	r1, r5
    34f0:	d009      	beq.n	3506 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    34f2:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    34f6:	d007      	beq.n	3508 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    34f8:	4809      	ldr	r0, [pc, #36]	; (3520 <mutex_free_platform+0x50>)
    34fa:	4621      	mov	r1, r4
    34fc:	f00a ff56 	bl	e3ac <k_mem_slab_free>
        mutex->mutex = NULL;
    3500:	2300      	movs	r3, #0
    3502:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3504:	6065      	str	r5, [r4, #4]
}
    3506:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3508:	6820      	ldr	r0, [r4, #0]
    350a:	2214      	movs	r2, #20
    350c:	f00a f8dc 	bl	d6c8 <memset>
    3510:	e7f8      	b.n	3504 <mutex_free_platform+0x34>
    3512:	bf00      	nop
    3514:	200001f4 	.word	0x200001f4
    3518:	0000fb42 	.word	0x0000fb42
    351c:	a95c5f2c 	.word	0xa95c5f2c
    3520:	20001350 	.word	0x20001350

00003524 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3524:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3526:	b320      	cbz	r0, 3572 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3528:	6843      	ldr	r3, [r0, #4]
    352a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    352e:	d110      	bne.n	3552 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3530:	2201      	movs	r2, #1
    3532:	6803      	ldr	r3, [r0, #0]
    3534:	f3bf 8f5b 	dmb	ish
    3538:	e853 1f00 	ldrex	r1, [r3]
    353c:	2900      	cmp	r1, #0
    353e:	d103      	bne.n	3548 <mutex_lock_platform+0x24>
    3540:	e843 2000 	strex	r0, r2, [r3]
    3544:	2800      	cmp	r0, #0
    3546:	d1f7      	bne.n	3538 <mutex_lock_platform+0x14>
    3548:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    354c:	d10d      	bne.n	356a <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    354e:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    3550:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3552:	4a09      	ldr	r2, [pc, #36]	; (3578 <mutex_lock_platform+0x54>)
    3554:	4293      	cmp	r3, r2
    3556:	d00a      	beq.n	356e <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3558:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    355a:	f04f 32ff 	mov.w	r2, #4294967295
    355e:	f04f 33ff 	mov.w	r3, #4294967295
    3562:	f007 feaf 	bl	b2c4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3566:	2800      	cmp	r0, #0
    3568:	d0f1      	beq.n	354e <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    356a:	4804      	ldr	r0, [pc, #16]	; (357c <mutex_lock_platform+0x58>)
    356c:	e7f0      	b.n	3550 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    356e:	4804      	ldr	r0, [pc, #16]	; (3580 <mutex_lock_platform+0x5c>)
    3570:	e7ee      	b.n	3550 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3572:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3576:	e7eb      	b.n	3550 <mutex_lock_platform+0x2c>
    3578:	a95c5f2c 	.word	0xa95c5f2c
    357c:	ffff8fe9 	.word	0xffff8fe9
    3580:	ffff8fea 	.word	0xffff8fea

00003584 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3584:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3586:	b1d8      	cbz	r0, 35c0 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3588:	6843      	ldr	r3, [r0, #4]
    358a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    358e:	d110      	bne.n	35b2 <mutex_unlock_platform+0x2e>
    3590:	2200      	movs	r2, #0
    3592:	6803      	ldr	r3, [r0, #0]
    3594:	f3bf 8f5b 	dmb	ish
    3598:	e853 1f00 	ldrex	r1, [r3]
    359c:	2901      	cmp	r1, #1
    359e:	d103      	bne.n	35a8 <mutex_unlock_platform+0x24>
    35a0:	e843 2000 	strex	r0, r2, [r3]
    35a4:	2800      	cmp	r0, #0
    35a6:	d1f7      	bne.n	3598 <mutex_unlock_platform+0x14>
    35a8:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    35ac:	d10b      	bne.n	35c6 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    35ae:	2000      	movs	r0, #0
    }
}
    35b0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    35b2:	4a07      	ldr	r2, [pc, #28]	; (35d0 <mutex_unlock_platform+0x4c>)
    35b4:	4293      	cmp	r3, r2
    35b6:	d008      	beq.n	35ca <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    35b8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    35ba:	f007 fefd 	bl	b3b8 <z_impl_k_mutex_unlock>
    35be:	e7f6      	b.n	35ae <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    35c0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    35c4:	e7f4      	b.n	35b0 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    35c6:	4803      	ldr	r0, [pc, #12]	; (35d4 <mutex_unlock_platform+0x50>)
    35c8:	e7f2      	b.n	35b0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    35ca:	4803      	ldr	r0, [pc, #12]	; (35d8 <mutex_unlock_platform+0x54>)
    35cc:	e7f0      	b.n	35b0 <mutex_unlock_platform+0x2c>
    35ce:	bf00      	nop
    35d0:	a95c5f2c 	.word	0xa95c5f2c
    35d4:	ffff8fe9 	.word	0xffff8fe9
    35d8:	ffff8fea 	.word	0xffff8fea

000035dc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    35dc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    35de:	4604      	mov	r4, r0
    35e0:	b918      	cbnz	r0, 35ea <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    35e2:	4b1d      	ldr	r3, [pc, #116]	; (3658 <mutex_init_platform+0x7c>)
    35e4:	481d      	ldr	r0, [pc, #116]	; (365c <mutex_init_platform+0x80>)
    35e6:	685b      	ldr	r3, [r3, #4]
    35e8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    35ea:	6863      	ldr	r3, [r4, #4]
    35ec:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    35f0:	d02f      	beq.n	3652 <mutex_init_platform+0x76>
    35f2:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    35f6:	d02c      	beq.n	3652 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    35f8:	4a19      	ldr	r2, [pc, #100]	; (3660 <mutex_init_platform+0x84>)
    35fa:	4293      	cmp	r3, r2
    35fc:	d119      	bne.n	3632 <mutex_init_platform+0x56>
    35fe:	6823      	ldr	r3, [r4, #0]
    3600:	bb03      	cbnz	r3, 3644 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3602:	4818      	ldr	r0, [pc, #96]	; (3664 <mutex_init_platform+0x88>)
    3604:	f04f 32ff 	mov.w	r2, #4294967295
    3608:	f04f 33ff 	mov.w	r3, #4294967295
    360c:	4621      	mov	r1, r4
    360e:	f007 fd55 	bl	b0bc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3612:	b908      	cbnz	r0, 3618 <mutex_init_platform+0x3c>
    3614:	6823      	ldr	r3, [r4, #0]
    3616:	b91b      	cbnz	r3, 3620 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    3618:	4b0f      	ldr	r3, [pc, #60]	; (3658 <mutex_init_platform+0x7c>)
    361a:	4813      	ldr	r0, [pc, #76]	; (3668 <mutex_init_platform+0x8c>)
    361c:	685b      	ldr	r3, [r3, #4]
    361e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3620:	6820      	ldr	r0, [r4, #0]
    3622:	2214      	movs	r2, #20
    3624:	2100      	movs	r1, #0
    3626:	f00a f84f 	bl	d6c8 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    362a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    362e:	6063      	str	r3, [r4, #4]
    3630:	e008      	b.n	3644 <mutex_init_platform+0x68>
    switch(flags){
    3632:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3636:	d80d      	bhi.n	3654 <mutex_init_platform+0x78>
    3638:	2b3a      	cmp	r3, #58	; 0x3a
    363a:	d003      	beq.n	3644 <mutex_init_platform+0x68>
    363c:	f640 62ba 	movw	r2, #3770	; 0xeba
    3640:	4293      	cmp	r3, r2
    3642:	d1de      	bne.n	3602 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3644:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3646:	f00a fef6 	bl	e436 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    364a:	6863      	ldr	r3, [r4, #4]
    364c:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    3650:	6063      	str	r3, [r4, #4]
}
    3652:	bd10      	pop	{r4, pc}
    switch(flags){
    3654:	4a05      	ldr	r2, [pc, #20]	; (366c <mutex_init_platform+0x90>)
    3656:	e7f3      	b.n	3640 <mutex_init_platform+0x64>
    3658:	200001f4 	.word	0x200001f4
    365c:	0000fb42 	.word	0x0000fb42
    3660:	a95c5f2c 	.word	0xa95c5f2c
    3664:	20001350 	.word	0x20001350
    3668:	0000fb68 	.word	0x0000fb68
    366c:	3a00003a 	.word	0x3a00003a

00003670 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3670:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3672:	4906      	ldr	r1, [pc, #24]	; (368c <nrf_cc3xx_platform_mutex_init+0x1c>)
    3674:	4806      	ldr	r0, [pc, #24]	; (3690 <nrf_cc3xx_platform_mutex_init+0x20>)
    3676:	2340      	movs	r3, #64	; 0x40
    3678:	2214      	movs	r2, #20
    367a:	f00a fe89 	bl	e390 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    367e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3682:	4904      	ldr	r1, [pc, #16]	; (3694 <nrf_cc3xx_platform_mutex_init+0x24>)
    3684:	4804      	ldr	r0, [pc, #16]	; (3698 <nrf_cc3xx_platform_mutex_init+0x28>)
    3686:	f008 bfa5 	b.w	c5d4 <nrf_cc3xx_platform_set_mutexes>
    368a:	bf00      	nop
    368c:	20000e50 	.word	0x20000e50
    3690:	20001350 	.word	0x20001350
    3694:	0000f134 	.word	0x0000f134
    3698:	0000f148 	.word	0x0000f148

0000369c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    369c:	4901      	ldr	r1, [pc, #4]	; (36a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    369e:	2210      	movs	r2, #16
	str	r2, [r1]
    36a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    36a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    36a4:	e000ed10 	.word	0xe000ed10

000036a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    36a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    36aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    36ac:	f380 8811 	msr	BASEPRI, r0
	isb
    36b0:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    36b4:	f3bf 8f4f 	dsb	sy
    36b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    36ba:	b662      	cpsie	i
	isb
    36bc:	f3bf 8f6f 	isb	sy

	bx	lr
    36c0:	4770      	bx	lr
    36c2:	bf00      	nop

000036c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    36c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    36c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    36c8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    36cc:	f3bf 8f4f 	dsb	sy
    36d0:	bf20      	wfe

	msr	BASEPRI, r0
    36d2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    36d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    36d8:	4770      	bx	lr
    36da:	bf00      	nop

000036dc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    36dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36e0:	4681      	mov	r9, r0
    36e2:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    36e4:	460c      	mov	r4, r1
    36e6:	2900      	cmp	r1, #0
    36e8:	d04c      	beq.n	3784 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    36ea:	466e      	mov	r6, sp
    36ec:	b08a      	sub	sp, #40	; 0x28
    36ee:	e9d1 1200 	ldrd	r1, r2, [r1]
    36f2:	68a3      	ldr	r3, [r4, #8]
    36f4:	466d      	mov	r5, sp
    36f6:	4827      	ldr	r0, [pc, #156]	; (3794 <z_arm_fatal_error+0xb8>)
    36f8:	46a8      	mov	r8, r5
    36fa:	f04f 0a05 	mov.w	sl, #5
    36fe:	e9c5 0105 	strd	r0, r1, [r5, #20]
    3702:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3706:	f848 af10 	str.w	sl, [r8, #16]!
    370a:	4823      	ldr	r0, [pc, #140]	; (3798 <z_arm_fatal_error+0xbc>)
    370c:	4642      	mov	r2, r8
    370e:	2300      	movs	r3, #0
    3710:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    3714:	f7fe fa5a 	bl	1bcc <z_impl_z_log_msg_static_create>
    3718:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    371a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    371e:	6963      	ldr	r3, [r4, #20]
    3720:	46ad      	mov	sp, r5
    3722:	481e      	ldr	r0, [pc, #120]	; (379c <z_arm_fatal_error+0xc0>)
    3724:	f8c5 a010 	str.w	sl, [r5, #16]
    3728:	e9c5 0105 	strd	r0, r1, [r5, #20]
    372c:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3730:	4819      	ldr	r0, [pc, #100]	; (3798 <z_arm_fatal_error+0xbc>)
    3732:	2300      	movs	r3, #0
    3734:	4642      	mov	r2, r8
    3736:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    373a:	f7fe fa47 	bl	1bcc <z_impl_z_log_msg_static_create>
    373e:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3740:	b088      	sub	sp, #32
    3742:	69e3      	ldr	r3, [r4, #28]
    3744:	466d      	mov	r5, sp
    3746:	4a16      	ldr	r2, [pc, #88]	; (37a0 <z_arm_fatal_error+0xc4>)
    3748:	46a8      	mov	r8, r5
    374a:	f04f 0a03 	mov.w	sl, #3
    374e:	e9c5 2305 	strd	r2, r3, [r5, #20]
    3752:	f848 af10 	str.w	sl, [r8, #16]!
    3756:	4810      	ldr	r0, [pc, #64]	; (3798 <z_arm_fatal_error+0xbc>)
    3758:	2300      	movs	r3, #0
    375a:	4642      	mov	r2, r8
    375c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3760:	f7fe fa34 	bl	1bcc <z_impl_z_log_msg_static_create>
    3764:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3766:	69a3      	ldr	r3, [r4, #24]
    3768:	46ad      	mov	sp, r5
    376a:	4a0e      	ldr	r2, [pc, #56]	; (37a4 <z_arm_fatal_error+0xc8>)
    376c:	f8c5 a010 	str.w	sl, [r5, #16]
    3770:	e9c5 2305 	strd	r2, r3, [r5, #20]
    3774:	4808      	ldr	r0, [pc, #32]	; (3798 <z_arm_fatal_error+0xbc>)
    3776:	2300      	movs	r3, #0
    3778:	4642      	mov	r2, r8
    377a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    377e:	f7fe fa25 	bl	1bcc <z_impl_z_log_msg_static_create>
    3782:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3784:	4621      	mov	r1, r4
    3786:	4648      	mov	r0, r9
    3788:	f007 fb16 	bl	adb8 <z_fatal_error>
}
    378c:	46bd      	mov	sp, r7
    378e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3792:	bf00      	nop
    3794:	0000fb95 	.word	0x0000fb95
    3798:	0000f000 	.word	0x0000f000
    379c:	0000fbc4 	.word	0x0000fbc4
    37a0:	0000fbf3 	.word	0x0000fbf3
    37a4:	0000fc02 	.word	0x0000fc02

000037a8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    37a8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    37aa:	2800      	cmp	r0, #0
    37ac:	db07      	blt.n	37be <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    37ae:	4a04      	ldr	r2, [pc, #16]	; (37c0 <arch_irq_enable+0x18>)
    37b0:	0941      	lsrs	r1, r0, #5
    37b2:	2301      	movs	r3, #1
    37b4:	f000 001f 	and.w	r0, r0, #31
    37b8:	4083      	lsls	r3, r0
    37ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    37be:	4770      	bx	lr
    37c0:	e000e100 	.word	0xe000e100

000037c4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    37c4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    37c6:	2800      	cmp	r0, #0
    37c8:	db0c      	blt.n	37e4 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    37ca:	0943      	lsrs	r3, r0, #5
    37cc:	4906      	ldr	r1, [pc, #24]	; (37e8 <arch_irq_disable+0x24>)
    37ce:	f000 001f 	and.w	r0, r0, #31
    37d2:	3320      	adds	r3, #32
    37d4:	2201      	movs	r2, #1
    37d6:	4082      	lsls	r2, r0
    37d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    37dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    37e0:	f3bf 8f6f 	isb	sy
}
    37e4:	4770      	bx	lr
    37e6:	bf00      	nop
    37e8:	e000e100 	.word	0xe000e100

000037ec <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    37ec:	4b05      	ldr	r3, [pc, #20]	; (3804 <arch_irq_is_enabled+0x18>)
    37ee:	0942      	lsrs	r2, r0, #5
    37f0:	f000 001f 	and.w	r0, r0, #31
    37f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    37f8:	2301      	movs	r3, #1
    37fa:	fa03 f000 	lsl.w	r0, r3, r0
}
    37fe:	4010      	ands	r0, r2
    3800:	4770      	bx	lr
    3802:	bf00      	nop
    3804:	e000e100 	.word	0xe000e100

00003808 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3808:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    380a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    380c:	bfa8      	it	ge
    380e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3812:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3816:	bfb8      	it	lt
    3818:	4b06      	ldrlt	r3, [pc, #24]	; (3834 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    381a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    381e:	bfac      	ite	ge
    3820:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3824:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3828:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    382a:	bfb4      	ite	lt
    382c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    382e:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    3832:	4770      	bx	lr
    3834:	e000ed14 	.word	0xe000ed14

00003838 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3838:	bf30      	wfi
    b z_SysNmiOnReset
    383a:	f7ff bffd 	b.w	3838 <z_SysNmiOnReset>
    383e:	bf00      	nop

00003840 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3840:	4a0b      	ldr	r2, [pc, #44]	; (3870 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3842:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3844:	4b0b      	ldr	r3, [pc, #44]	; (3874 <z_arm_prep_c+0x34>)
    3846:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    384a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    384c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3850:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3854:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3858:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    385c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3860:	f007 fb66 	bl	af30 <z_bss_zero>
	z_data_copy();
    3864:	f008 fb44 	bl	bef0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3868:	f000 fbd6 	bl	4018 <z_arm_interrupt_init>
	z_cstart();
    386c:	f007 fba4 	bl	afb8 <z_cstart>
    3870:	00000000 	.word	0x00000000
    3874:	e000ed00 	.word	0xe000ed00

00003878 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3878:	4a09      	ldr	r2, [pc, #36]	; (38a0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    387a:	490a      	ldr	r1, [pc, #40]	; (38a4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    387c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    387e:	6809      	ldr	r1, [r1, #0]
    3880:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3882:	4909      	ldr	r1, [pc, #36]	; (38a8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3884:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3886:	684b      	ldr	r3, [r1, #4]
    3888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    388c:	604b      	str	r3, [r1, #4]
    388e:	2300      	movs	r3, #0
    3890:	f383 8811 	msr	BASEPRI, r3
    3894:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3898:	6893      	ldr	r3, [r2, #8]
}
    389a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    389c:	4770      	bx	lr
    389e:	bf00      	nop
    38a0:	200021e8 	.word	0x200021e8
    38a4:	0000f4cc 	.word	0x0000f4cc
    38a8:	e000ed00 	.word	0xe000ed00

000038ac <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    38ac:	4912      	ldr	r1, [pc, #72]	; (38f8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    38ae:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    38b0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    38b4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    38b6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    38ba:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    38be:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    38c0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    38c4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    38c8:	4f0c      	ldr	r7, [pc, #48]	; (38fc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    38ca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    38ce:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    38d0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    38d2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    38d4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    38d6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    38d8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    38da:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    38de:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    38e0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    38e2:	f000 fc35 	bl	4150 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    38e6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    38ea:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    38ee:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    38f2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    38f6:	4770      	bx	lr
    ldr r1, =_kernel
    38f8:	200021e8 	.word	0x200021e8
    ldr v4, =_SCS_ICSR
    38fc:	e000ed04 	.word	0xe000ed04

00003900 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3900:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3904:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3906:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    390a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    390e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3910:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3914:	2902      	cmp	r1, #2
    beq _oops
    3916:	d0ff      	beq.n	3918 <_oops>

00003918 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3918:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    391a:	f009 fe9e 	bl	d65a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    391e:	bd01      	pop	{r0, pc}

00003920 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3920:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3924:	9b00      	ldr	r3, [sp, #0]
    3926:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    392a:	490a      	ldr	r1, [pc, #40]	; (3954 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    392c:	9b01      	ldr	r3, [sp, #4]
    392e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3932:	9b02      	ldr	r3, [sp, #8]
    3934:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3938:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    393c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3940:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3944:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3948:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    394a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    394c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    394e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3950:	4770      	bx	lr
    3952:	bf00      	nop
    3954:	0000c94b 	.word	0x0000c94b

00003958 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3958:	4a09      	ldr	r2, [pc, #36]	; (3980 <z_check_thread_stack_fail+0x28>)
{
    395a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    395c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    395e:	b170      	cbz	r0, 397e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3960:	f113 0f16 	cmn.w	r3, #22
    3964:	6e80      	ldr	r0, [r0, #104]	; 0x68
    3966:	d005      	beq.n	3974 <z_check_thread_stack_fail+0x1c>
    3968:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    396c:	429a      	cmp	r2, r3
    396e:	d805      	bhi.n	397c <z_check_thread_stack_fail+0x24>
    3970:	4283      	cmp	r3, r0
    3972:	d203      	bcs.n	397c <z_check_thread_stack_fail+0x24>
		return 0;
    3974:	4281      	cmp	r1, r0
    3976:	bf28      	it	cs
    3978:	2000      	movcs	r0, #0
    397a:	4770      	bx	lr
    397c:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    397e:	4770      	bx	lr
    3980:	200021e8 	.word	0x200021e8

00003984 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3984:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3986:	4b09      	ldr	r3, [pc, #36]	; (39ac <arch_switch_to_main_thread+0x28>)
{
    3988:	460d      	mov	r5, r1
    398a:	4614      	mov	r4, r2
	_current = main_thread;
    398c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    398e:	f000 fbdf 	bl	4150 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3992:	4620      	mov	r0, r4
    3994:	f385 8809 	msr	PSP, r5
    3998:	2100      	movs	r1, #0
    399a:	b663      	cpsie	if
    399c:	f381 8811 	msr	BASEPRI, r1
    39a0:	f3bf 8f6f 	isb	sy
    39a4:	2200      	movs	r2, #0
    39a6:	2300      	movs	r3, #0
    39a8:	f008 ffcf 	bl	c94a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    39ac:	200021e8 	.word	0x200021e8

000039b0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    39b0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    39b2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    39b4:	4a0b      	ldr	r2, [pc, #44]	; (39e4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    39b6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    39b8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    39ba:	bf1e      	ittt	ne
	movne	r1, #0
    39bc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    39be:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    39c0:	f00a fd2a 	blne	e418 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    39c4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    39c6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    39ca:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    39ce:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    39d2:	4905      	ldr	r1, [pc, #20]	; (39e8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    39d4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    39d6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    39d8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    39da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    39de:	4903      	ldr	r1, [pc, #12]	; (39ec <_isr_wrapper+0x3c>)
	bx r1
    39e0:	4708      	bx	r1
    39e2:	0000      	.short	0x0000
	ldr r2, =_kernel
    39e4:	200021e8 	.word	0x200021e8
	ldr r1, =_sw_isr_table
    39e8:	0000edcc 	.word	0x0000edcc
	ldr r1, =z_arm_int_exit
    39ec:	000039f1 	.word	0x000039f1

000039f0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    39f0:	4b04      	ldr	r3, [pc, #16]	; (3a04 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    39f2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    39f4:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    39f6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    39f8:	d003      	beq.n	3a02 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    39fa:	4903      	ldr	r1, [pc, #12]	; (3a08 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    39fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3a00:	600a      	str	r2, [r1, #0]

00003a02 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3a02:	4770      	bx	lr
	ldr r3, =_kernel
    3a04:	200021e8 	.word	0x200021e8
	ldr r1, =_SCS_ICSR
    3a08:	e000ed04 	.word	0xe000ed04

00003a0c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a10:	b086      	sub	sp, #24
    3a12:	4606      	mov	r6, r0
    3a14:	af00      	add	r7, sp, #0
    3a16:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3a18:	4b47      	ldr	r3, [pc, #284]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3a1a:	617b      	str	r3, [r7, #20]
    3a1c:	2402      	movs	r4, #2
    3a1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3a22:	4846      	ldr	r0, [pc, #280]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3a24:	613c      	str	r4, [r7, #16]
    3a26:	f107 0210 	add.w	r2, r7, #16
    3a2a:	f009 fe25 	bl	d678 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3a2e:	4b44      	ldr	r3, [pc, #272]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a32:	04d9      	lsls	r1, r3, #19
    3a34:	d56d      	bpl.n	3b12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7a>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    3a36:	4b43      	ldr	r3, [pc, #268]	; (3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>)
    3a38:	4840      	ldr	r0, [pc, #256]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3a3a:	e9c7 4304 	strd	r4, r3, [r7, #16]
    3a3e:	f107 0210 	add.w	r2, r7, #16
    3a42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3a46:	f009 fe17 	bl	d678 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    3a4a:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3a4c:	4b3c      	ldr	r3, [pc, #240]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a50:	051a      	lsls	r2, r3, #20
    3a52:	d50b      	bpl.n	3a6c <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    3a54:	4b3c      	ldr	r3, [pc, #240]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3a56:	617b      	str	r3, [r7, #20]
    3a58:	2302      	movs	r3, #2
    3a5a:	4838      	ldr	r0, [pc, #224]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3a5c:	613b      	str	r3, [r7, #16]
    3a5e:	f107 0210 	add.w	r2, r7, #16
    3a62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3a66:	f009 fe07 	bl	d678 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3a6a:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3a6c:	4c34      	ldr	r4, [pc, #208]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3a6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3a70:	059b      	lsls	r3, r3, #22
    3a72:	d523      	bpl.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    3a74:	46e8      	mov	r8, sp
    3a76:	4b35      	ldr	r3, [pc, #212]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3a78:	617b      	str	r3, [r7, #20]
    3a7a:	2302      	movs	r3, #2
    3a7c:	482f      	ldr	r0, [pc, #188]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3a7e:	613b      	str	r3, [r7, #16]
    3a80:	f107 0210 	add.w	r2, r7, #16
    3a84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3a88:	f009 fdf6 	bl	d678 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3a8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3a8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3a90:	0410      	lsls	r0, r2, #16
    3a92:	d512      	bpl.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3a94:	b088      	sub	sp, #32
    3a96:	466a      	mov	r2, sp
    3a98:	492d      	ldr	r1, [pc, #180]	; (3b50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb8>)
    3a9a:	4828      	ldr	r0, [pc, #160]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3a9c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3aa0:	2303      	movs	r3, #3
    3aa2:	f842 3f10 	str.w	r3, [r2, #16]!
    3aa6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3aaa:	f009 fde5 	bl	d678 <z_log_msg_static_create.constprop.0>
    3aae:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    3ab0:	b11e      	cbz	r6, 3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3ab2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ab4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3ab8:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3aba:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3abc:	4b20      	ldr	r3, [pc, #128]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ac0:	0559      	lsls	r1, r3, #21
    3ac2:	d50b      	bpl.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    3ac4:	4b23      	ldr	r3, [pc, #140]	; (3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>)
    3ac6:	617b      	str	r3, [r7, #20]
    3ac8:	2302      	movs	r3, #2
    3aca:	481c      	ldr	r0, [pc, #112]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3acc:	613b      	str	r3, [r7, #16]
    3ace:	f107 0210 	add.w	r2, r7, #16
    3ad2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ad6:	f009 fdcf 	bl	d678 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3ada:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3adc:	4b18      	ldr	r3, [pc, #96]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ae0:	05d2      	lsls	r2, r2, #23
    3ae2:	d518      	bpl.n	3b16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7e>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    3ae4:	4b1c      	ldr	r3, [pc, #112]	; (3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>)
    3ae6:	617b      	str	r3, [r7, #20]
    3ae8:	2302      	movs	r3, #2
    3aea:	4814      	ldr	r0, [pc, #80]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3aec:	613b      	str	r3, [r7, #16]
    3aee:	f107 0210 	add.w	r2, r7, #16
    3af2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3af6:	f009 fdbf 	bl	d678 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    3afa:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3afc:	4a10      	ldr	r2, [pc, #64]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3afe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3b00:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3b04:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    3b06:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    3b08:	2300      	movs	r3, #0
    3b0a:	702b      	strb	r3, [r5, #0]
}
    3b0c:	46bd      	mov	sp, r7
    3b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    3b12:	2016      	movs	r0, #22
    3b14:	e79a      	b.n	3a4c <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b18:	049b      	lsls	r3, r3, #18
    3b1a:	d5ef      	bpl.n	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3b1c:	4b0f      	ldr	r3, [pc, #60]	; (3b5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc4>)
    3b1e:	617b      	str	r3, [r7, #20]
    3b20:	2302      	movs	r3, #2
    3b22:	4806      	ldr	r0, [pc, #24]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3b24:	613b      	str	r3, [r7, #16]
    3b26:	f107 0210 	add.w	r2, r7, #16
    3b2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3b2e:	f009 fda3 	bl	d678 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    3b32:	201c      	movs	r0, #28
    3b34:	e7e2      	b.n	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
    3b36:	bf00      	nop
    3b38:	0000fc30 	.word	0x0000fc30
    3b3c:	0000f000 	.word	0x0000f000
    3b40:	e000ed00 	.word	0xe000ed00
    3b44:	0000fc46 	.word	0x0000fc46
    3b48:	0000fc57 	.word	0x0000fc57
    3b4c:	0000fc6a 	.word	0x0000fc6a
    3b50:	0000fc83 	.word	0x0000fc83
    3b54:	0000fc98 	.word	0x0000fc98
    3b58:	0000fcb3 	.word	0x0000fcb3
    3b5c:	0000fccb 	.word	0x0000fccb

00003b60 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3b60:	b510      	push	{r4, lr}
    3b62:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3b64:	4b36      	ldr	r3, [pc, #216]	; (3c40 <usage_fault.constprop.0+0xe0>)
    3b66:	4837      	ldr	r0, [pc, #220]	; (3c44 <usage_fault.constprop.0+0xe4>)
    3b68:	9305      	str	r3, [sp, #20]
    3b6a:	aa04      	add	r2, sp, #16
    3b6c:	2402      	movs	r4, #2
    3b6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3b72:	9404      	str	r4, [sp, #16]
    3b74:	f009 fd80 	bl	d678 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3b78:	4b33      	ldr	r3, [pc, #204]	; (3c48 <usage_fault.constprop.0+0xe8>)
    3b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b7c:	019a      	lsls	r2, r3, #6
    3b7e:	d55d      	bpl.n	3c3c <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    3b80:	4b32      	ldr	r3, [pc, #200]	; (3c4c <usage_fault.constprop.0+0xec>)
    3b82:	4830      	ldr	r0, [pc, #192]	; (3c44 <usage_fault.constprop.0+0xe4>)
    3b84:	aa04      	add	r2, sp, #16
    3b86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3b8a:	e9cd 4304 	strd	r4, r3, [sp, #16]
    3b8e:	f009 fd73 	bl	d678 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    3b92:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3b94:	4b2c      	ldr	r3, [pc, #176]	; (3c48 <usage_fault.constprop.0+0xe8>)
    3b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b98:	01db      	lsls	r3, r3, #7
    3b9a:	d50a      	bpl.n	3bb2 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    3b9c:	4b2c      	ldr	r3, [pc, #176]	; (3c50 <usage_fault.constprop.0+0xf0>)
    3b9e:	4829      	ldr	r0, [pc, #164]	; (3c44 <usage_fault.constprop.0+0xe4>)
    3ba0:	9305      	str	r3, [sp, #20]
    3ba2:	aa04      	add	r2, sp, #16
    3ba4:	2302      	movs	r3, #2
    3ba6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3baa:	9304      	str	r3, [sp, #16]
    3bac:	f009 fd64 	bl	d678 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3bb0:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3bb2:	4b25      	ldr	r3, [pc, #148]	; (3c48 <usage_fault.constprop.0+0xe8>)
    3bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3bb6:	031c      	lsls	r4, r3, #12
    3bb8:	d50a      	bpl.n	3bd0 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    3bba:	4b26      	ldr	r3, [pc, #152]	; (3c54 <usage_fault.constprop.0+0xf4>)
    3bbc:	4821      	ldr	r0, [pc, #132]	; (3c44 <usage_fault.constprop.0+0xe4>)
    3bbe:	9305      	str	r3, [sp, #20]
    3bc0:	aa04      	add	r2, sp, #16
    3bc2:	2302      	movs	r3, #2
    3bc4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3bc8:	9304      	str	r3, [sp, #16]
    3bca:	f009 fd55 	bl	d678 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3bce:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3bd0:	4b1d      	ldr	r3, [pc, #116]	; (3c48 <usage_fault.constprop.0+0xe8>)
    3bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3bd4:	0359      	lsls	r1, r3, #13
    3bd6:	d50a      	bpl.n	3bee <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3bd8:	4b1f      	ldr	r3, [pc, #124]	; (3c58 <usage_fault.constprop.0+0xf8>)
    3bda:	481a      	ldr	r0, [pc, #104]	; (3c44 <usage_fault.constprop.0+0xe4>)
    3bdc:	9305      	str	r3, [sp, #20]
    3bde:	aa04      	add	r2, sp, #16
    3be0:	2302      	movs	r3, #2
    3be2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3be6:	9304      	str	r3, [sp, #16]
    3be8:	f009 fd46 	bl	d678 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3bec:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3bee:	4b16      	ldr	r3, [pc, #88]	; (3c48 <usage_fault.constprop.0+0xe8>)
    3bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3bf2:	039a      	lsls	r2, r3, #14
    3bf4:	d50a      	bpl.n	3c0c <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3bf6:	4b19      	ldr	r3, [pc, #100]	; (3c5c <usage_fault.constprop.0+0xfc>)
    3bf8:	4812      	ldr	r0, [pc, #72]	; (3c44 <usage_fault.constprop.0+0xe4>)
    3bfa:	9305      	str	r3, [sp, #20]
    3bfc:	aa04      	add	r2, sp, #16
    3bfe:	2302      	movs	r3, #2
    3c00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3c04:	9304      	str	r3, [sp, #16]
    3c06:	f009 fd37 	bl	d678 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3c0a:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3c0c:	4b0e      	ldr	r3, [pc, #56]	; (3c48 <usage_fault.constprop.0+0xe8>)
    3c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c10:	03db      	lsls	r3, r3, #15
    3c12:	d50a      	bpl.n	3c2a <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3c14:	4b12      	ldr	r3, [pc, #72]	; (3c60 <usage_fault.constprop.0+0x100>)
    3c16:	480b      	ldr	r0, [pc, #44]	; (3c44 <usage_fault.constprop.0+0xe4>)
    3c18:	9305      	str	r3, [sp, #20]
    3c1a:	aa04      	add	r2, sp, #16
    3c1c:	2302      	movs	r3, #2
    3c1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3c22:	9304      	str	r3, [sp, #16]
    3c24:	f009 fd28 	bl	d678 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    3c28:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3c2a:	4a07      	ldr	r2, [pc, #28]	; (3c48 <usage_fault.constprop.0+0xe8>)
    3c2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3c2e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3c32:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3c36:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3c38:	b006      	add	sp, #24
    3c3a:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    3c3c:	201d      	movs	r0, #29
    3c3e:	e7a9      	b.n	3b94 <usage_fault.constprop.0+0x34>
    3c40:	0000fcfa 	.word	0x0000fcfa
    3c44:	0000f000 	.word	0x0000f000
    3c48:	e000ed00 	.word	0xe000ed00
    3c4c:	0000fd12 	.word	0x0000fd12
    3c50:	0000fd25 	.word	0x0000fd25
    3c54:	0000fd3f 	.word	0x0000fd3f
    3c58:	0000fd5d 	.word	0x0000fd5d
    3c5c:	0000fd82 	.word	0x0000fd82
    3c60:	0000fd9c 	.word	0x0000fd9c

00003c64 <mem_manage_fault>:
{
    3c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c68:	b086      	sub	sp, #24
    3c6a:	4681      	mov	r9, r0
    3c6c:	af00      	add	r7, sp, #0
    3c6e:	468a      	mov	sl, r1
    3c70:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3c72:	4b51      	ldr	r3, [pc, #324]	; (3db8 <mem_manage_fault+0x154>)
    3c74:	617b      	str	r3, [r7, #20]
    3c76:	2402      	movs	r4, #2
    3c78:	4850      	ldr	r0, [pc, #320]	; (3dbc <mem_manage_fault+0x158>)
    3c7a:	613c      	str	r4, [r7, #16]
    3c7c:	f107 0210 	add.w	r2, r7, #16
    3c80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3c84:	f009 fcf8 	bl	d678 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3c88:	4b4d      	ldr	r3, [pc, #308]	; (3dc0 <mem_manage_fault+0x15c>)
    3c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c8c:	06de      	lsls	r6, r3, #27
    3c8e:	d545      	bpl.n	3d1c <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3c90:	4b4c      	ldr	r3, [pc, #304]	; (3dc4 <mem_manage_fault+0x160>)
    3c92:	484a      	ldr	r0, [pc, #296]	; (3dbc <mem_manage_fault+0x158>)
    3c94:	e9c7 4304 	strd	r4, r3, [r7, #16]
    3c98:	f107 0210 	add.w	r2, r7, #16
    3c9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    3ca0:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    3ca2:	f009 fce9 	bl	d678 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3ca6:	4b46      	ldr	r3, [pc, #280]	; (3dc0 <mem_manage_fault+0x15c>)
    3ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3caa:	071d      	lsls	r5, r3, #28
    3cac:	d50b      	bpl.n	3cc6 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    3cae:	4b46      	ldr	r3, [pc, #280]	; (3dc8 <mem_manage_fault+0x164>)
    3cb0:	617b      	str	r3, [r7, #20]
    3cb2:	2302      	movs	r3, #2
    3cb4:	4841      	ldr	r0, [pc, #260]	; (3dbc <mem_manage_fault+0x158>)
    3cb6:	613b      	str	r3, [r7, #16]
    3cb8:	f107 0210 	add.w	r2, r7, #16
    3cbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3cc0:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    3cc2:	f009 fcd9 	bl	d678 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3cc6:	4d3e      	ldr	r5, [pc, #248]	; (3dc0 <mem_manage_fault+0x15c>)
    3cc8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3cca:	0798      	lsls	r0, r3, #30
    3ccc:	d528      	bpl.n	3d20 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
    3cce:	466c      	mov	r4, sp
    3cd0:	4b3e      	ldr	r3, [pc, #248]	; (3dcc <mem_manage_fault+0x168>)
    3cd2:	617b      	str	r3, [r7, #20]
    3cd4:	2302      	movs	r3, #2
    3cd6:	613b      	str	r3, [r7, #16]
    3cd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3cdc:	4837      	ldr	r0, [pc, #220]	; (3dbc <mem_manage_fault+0x158>)
    3cde:	f107 0210 	add.w	r2, r7, #16
    3ce2:	f009 fcc9 	bl	d678 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    3ce6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3ce8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3cea:	0619      	lsls	r1, r3, #24
    3cec:	d560      	bpl.n	3db0 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3cee:	b088      	sub	sp, #32
    3cf0:	466a      	mov	r2, sp
    3cf2:	4b37      	ldr	r3, [pc, #220]	; (3dd0 <mem_manage_fault+0x16c>)
    3cf4:	4831      	ldr	r0, [pc, #196]	; (3dbc <mem_manage_fault+0x158>)
    3cf6:	e9c2 3605 	strd	r3, r6, [r2, #20]
    3cfa:	2303      	movs	r3, #3
    3cfc:	f842 3f10 	str.w	r3, [r2, #16]!
    3d00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3d04:	f009 fcb8 	bl	d678 <z_log_msg_static_create.constprop.0>
    3d08:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    3d0a:	f1ba 0f00 	cmp.w	sl, #0
    3d0e:	d003      	beq.n	3d18 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3d10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3d16:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    3d18:	2413      	movs	r4, #19
    3d1a:	e003      	b.n	3d24 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    3d1c:	2410      	movs	r4, #16
    3d1e:	e7c2      	b.n	3ca6 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    3d20:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3d24:	4b26      	ldr	r3, [pc, #152]	; (3dc0 <mem_manage_fault+0x15c>)
    3d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d28:	07da      	lsls	r2, r3, #31
    3d2a:	d50b      	bpl.n	3d44 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
    3d2c:	4b29      	ldr	r3, [pc, #164]	; (3dd4 <mem_manage_fault+0x170>)
    3d2e:	617b      	str	r3, [r7, #20]
    3d30:	2302      	movs	r3, #2
    3d32:	4822      	ldr	r0, [pc, #136]	; (3dbc <mem_manage_fault+0x158>)
    3d34:	613b      	str	r3, [r7, #16]
    3d36:	f107 0210 	add.w	r2, r7, #16
    3d3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    3d3e:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    3d40:	f009 fc9a 	bl	d678 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3d44:	4b1e      	ldr	r3, [pc, #120]	; (3dc0 <mem_manage_fault+0x15c>)
    3d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d48:	069b      	lsls	r3, r3, #26
    3d4a:	d50b      	bpl.n	3d64 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
    3d4c:	4b22      	ldr	r3, [pc, #136]	; (3dd8 <mem_manage_fault+0x174>)
    3d4e:	617b      	str	r3, [r7, #20]
    3d50:	2302      	movs	r3, #2
    3d52:	481a      	ldr	r0, [pc, #104]	; (3dbc <mem_manage_fault+0x158>)
    3d54:	613b      	str	r3, [r7, #16]
    3d56:	f107 0210 	add.w	r2, r7, #16
    3d5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    3d5e:	2415      	movs	r4, #21
		PR_FAULT_INFO(
    3d60:	f009 fc8a 	bl	d678 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3d64:	4b16      	ldr	r3, [pc, #88]	; (3dc0 <mem_manage_fault+0x15c>)
    3d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d68:	06d5      	lsls	r5, r2, #27
    3d6a:	d402      	bmi.n	3d72 <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3d6e:	0790      	lsls	r0, r2, #30
    3d70:	d50a      	bpl.n	3d88 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3d72:	685b      	ldr	r3, [r3, #4]
    3d74:	0519      	lsls	r1, r3, #20
    3d76:	d507      	bpl.n	3d88 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3d78:	4649      	mov	r1, r9
    3d7a:	4630      	mov	r0, r6
    3d7c:	f7ff fdec 	bl	3958 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3d80:	b110      	cbz	r0, 3d88 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3d82:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3d86:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3d88:	4b0d      	ldr	r3, [pc, #52]	; (3dc0 <mem_manage_fault+0x15c>)
    3d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d8c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3d8e:	bf42      	ittt	mi
    3d90:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3d92:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3d96:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d9a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3d9e:	629a      	str	r2, [r3, #40]	; 0x28
}
    3da0:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    3da2:	2300      	movs	r3, #0
}
    3da4:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    3da6:	f888 3000 	strb.w	r3, [r8]
}
    3daa:	46bd      	mov	sp, r7
    3dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    3db0:	f06f 0615 	mvn.w	r6, #21
    3db4:	e7b0      	b.n	3d18 <mem_manage_fault+0xb4>
    3db6:	bf00      	nop
    3db8:	0000fdc7 	.word	0x0000fdc7
    3dbc:	0000f000 	.word	0x0000f000
    3dc0:	e000ed00 	.word	0xe000ed00
    3dc4:	0000fddd 	.word	0x0000fddd
    3dc8:	0000fc57 	.word	0x0000fc57
    3dcc:	0000fe10 	.word	0x0000fe10
    3dd0:	0000fe28 	.word	0x0000fe28
    3dd4:	0000fe3e 	.word	0x0000fe3e
    3dd8:	0000fccb 	.word	0x0000fccb

00003ddc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3de0:	4b77      	ldr	r3, [pc, #476]	; (3fc0 <z_arm_fault+0x1e4>)
{
    3de2:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3de4:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    3de8:	af00      	add	r7, sp, #0
    3dea:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3dec:	f3c8 0408 	ubfx	r4, r8, #0, #9
    3df0:	2600      	movs	r6, #0
    3df2:	f386 8811 	msr	BASEPRI, r6
    3df6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3dfa:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3dfe:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3e02:	d10e      	bne.n	3e22 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3e04:	f002 030c 	and.w	r3, r2, #12
    3e08:	2b08      	cmp	r3, #8
    3e0a:	d119      	bne.n	3e40 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3e0c:	4b6d      	ldr	r3, [pc, #436]	; (3fc4 <z_arm_fault+0x1e8>)
    3e0e:	61fb      	str	r3, [r7, #28]
    3e10:	2302      	movs	r3, #2
    3e12:	486d      	ldr	r0, [pc, #436]	; (3fc8 <z_arm_fault+0x1ec>)
    3e14:	61bb      	str	r3, [r7, #24]
    3e16:	f107 0218 	add.w	r2, r7, #24
    3e1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e1e:	f009 fc2b 	bl	d678 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    3e22:	2600      	movs	r6, #0
		return NULL;
    3e24:	4635      	mov	r5, r6
	*recoverable = false;
    3e26:	2300      	movs	r3, #0
    3e28:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    3e2a:	1ee3      	subs	r3, r4, #3
    3e2c:	2b09      	cmp	r3, #9
    3e2e:	f200 80a6 	bhi.w	3f7e <z_arm_fault+0x1a2>
    3e32:	e8df f003 	tbb	[pc, r3]
    3e36:	990a      	.short	0x990a
    3e38:	a4a4959c 	.word	0xa4a4959c
    3e3c:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3e40:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3e42:	bf4c      	ite	mi
    3e44:	460d      	movmi	r5, r1
			*nested_exc = true;
    3e46:	2601      	movpl	r6, #1
    3e48:	e7ed      	b.n	3e26 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    3e4a:	46e9      	mov	r9, sp
    3e4c:	4b5f      	ldr	r3, [pc, #380]	; (3fcc <z_arm_fault+0x1f0>)
    3e4e:	61fb      	str	r3, [r7, #28]
    3e50:	f04f 0802 	mov.w	r8, #2
    3e54:	f107 0218 	add.w	r2, r7, #24
    3e58:	485b      	ldr	r0, [pc, #364]	; (3fc8 <z_arm_fault+0x1ec>)
    3e5a:	f8c7 8018 	str.w	r8, [r7, #24]
    3e5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e62:	f009 fc09 	bl	d678 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    3e66:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3e68:	4c55      	ldr	r4, [pc, #340]	; (3fc0 <z_arm_fault+0x1e4>)
	*recoverable = false;
    3e6a:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3e6e:	079a      	lsls	r2, r3, #30
    3e70:	d50b      	bpl.n	3e8a <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    3e72:	4b57      	ldr	r3, [pc, #348]	; (3fd0 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    3e74:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    3e78:	4853      	ldr	r0, [pc, #332]	; (3fc8 <z_arm_fault+0x1ec>)
    3e7a:	f107 0218 	add.w	r2, r7, #24
    3e7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e82:	f009 fbf9 	bl	d678 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3e86:	2400      	movs	r4, #0
    3e88:	e041      	b.n	3f0e <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3e8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	da01      	bge.n	3e94 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    3e90:	4b50      	ldr	r3, [pc, #320]	; (3fd4 <z_arm_fault+0x1f8>)
    3e92:	e7ef      	b.n	3e74 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3e94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3e96:	005b      	lsls	r3, r3, #1
    3e98:	d5f5      	bpl.n	3e86 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    3e9a:	4b4f      	ldr	r3, [pc, #316]	; (3fd8 <z_arm_fault+0x1fc>)
    3e9c:	484a      	ldr	r0, [pc, #296]	; (3fc8 <z_arm_fault+0x1ec>)
    3e9e:	e9c7 8306 	strd	r8, r3, [r7, #24]
    3ea2:	f107 0218 	add.w	r2, r7, #24
    3ea6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3eaa:	f009 fbe5 	bl	d678 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3eae:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3eb0:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3eb6:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3eb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ebc:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3ec0:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    3ec2:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3eca:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3ecc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ed0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3ed4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3ed8:	429a      	cmp	r2, r3
    3eda:	d008      	beq.n	3eee <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3edc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ede:	b2db      	uxtb	r3, r3
    3ee0:	b38b      	cbz	r3, 3f46 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    3ee2:	1dfa      	adds	r2, r7, #7
    3ee4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3ee6:	4628      	mov	r0, r5
    3ee8:	f7ff febc 	bl	3c64 <mem_manage_fault>
    3eec:	e03a      	b.n	3f64 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3eee:	b088      	sub	sp, #32
    3ef0:	682b      	ldr	r3, [r5, #0]
    3ef2:	466a      	mov	r2, sp
    3ef4:	4939      	ldr	r1, [pc, #228]	; (3fdc <z_arm_fault+0x200>)
    3ef6:	4834      	ldr	r0, [pc, #208]	; (3fc8 <z_arm_fault+0x1ec>)
    3ef8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3efc:	2303      	movs	r3, #3
    3efe:	f842 3f10 	str.w	r3, [r2, #16]!
    3f02:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3f06:	f009 fbb7 	bl	d678 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    3f0a:	682c      	ldr	r4, [r5, #0]
    3f0c:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3f0e:	79fb      	ldrb	r3, [r7, #7]
    3f10:	b9ab      	cbnz	r3, 3f3e <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3f12:	2220      	movs	r2, #32
    3f14:	4629      	mov	r1, r5
    3f16:	f107 0008 	add.w	r0, r7, #8
    3f1a:	f009 fbca 	bl	d6b2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f20:	2e00      	cmp	r6, #0
    3f22:	d047      	beq.n	3fb4 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3f24:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3f28:	b922      	cbnz	r2, 3f34 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3f2a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3f2e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3f32:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    3f34:	f107 0108 	add.w	r1, r7, #8
    3f38:	4620      	mov	r0, r4
    3f3a:	f7ff fbcf 	bl	36dc <z_arm_fatal_error>
}
    3f3e:	372c      	adds	r7, #44	; 0x2c
    3f40:	46bd      	mov	sp, r7
    3f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    3f46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f48:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    3f4c:	d004      	beq.n	3f58 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    3f4e:	1df9      	adds	r1, r7, #7
    3f50:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3f52:	f7ff fd5b 	bl	3a0c <bus_fault.constprop.0>
    3f56:	e005      	b.n	3f64 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    3f58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3f5e:	d392      	bcc.n	3e86 <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    3f60:	f7ff fdfe 	bl	3b60 <usage_fault.constprop.0>
    3f64:	4604      	mov	r4, r0
    3f66:	e7d2      	b.n	3f0e <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    3f68:	1dfa      	adds	r2, r7, #7
    3f6a:	2100      	movs	r1, #0
    3f6c:	e7bb      	b.n	3ee6 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    3f6e:	1df9      	adds	r1, r7, #7
    3f70:	2000      	movs	r0, #0
    3f72:	e7ee      	b.n	3f52 <z_arm_fault+0x176>
	PR_FAULT_INFO(
    3f74:	4b1a      	ldr	r3, [pc, #104]	; (3fe0 <z_arm_fault+0x204>)
    3f76:	61fb      	str	r3, [r7, #28]
    3f78:	2302      	movs	r3, #2
    3f7a:	61bb      	str	r3, [r7, #24]
    3f7c:	e77c      	b.n	3e78 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    3f7e:	4a19      	ldr	r2, [pc, #100]	; (3fe4 <z_arm_fault+0x208>)
    3f80:	4b19      	ldr	r3, [pc, #100]	; (3fe8 <z_arm_fault+0x20c>)
    3f82:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    3f86:	46e8      	mov	r8, sp
    3f88:	b08a      	sub	sp, #40	; 0x28
    3f8a:	bf18      	it	ne
    3f8c:	4613      	movne	r3, r2
    3f8e:	466a      	mov	r2, sp
    3f90:	4916      	ldr	r1, [pc, #88]	; (3fec <z_arm_fault+0x210>)
    3f92:	480d      	ldr	r0, [pc, #52]	; (3fc8 <z_arm_fault+0x1ec>)
    3f94:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3f98:	f44f 7300 	mov.w	r3, #512	; 0x200
    3f9c:	8413      	strh	r3, [r2, #32]
    3f9e:	3c10      	subs	r4, #16
    3fa0:	4b13      	ldr	r3, [pc, #76]	; (3ff0 <z_arm_fault+0x214>)
    3fa2:	61d4      	str	r4, [r2, #28]
    3fa4:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    3fa8:	f842 3f10 	str.w	r3, [r2, #16]!
    3fac:	f009 fb64 	bl	d678 <z_log_msg_static_create.constprop.0>
    3fb0:	46c5      	mov	sp, r8
}
    3fb2:	e768      	b.n	3e86 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3fb4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3fb8:	f023 0301 	bic.w	r3, r3, #1
    3fbc:	e7b9      	b.n	3f32 <z_arm_fault+0x156>
    3fbe:	bf00      	nop
    3fc0:	e000ed00 	.word	0xe000ed00
    3fc4:	0000fe8b 	.word	0x0000fe8b
    3fc8:	0000f000 	.word	0x0000f000
    3fcc:	0000feb6 	.word	0x0000feb6
    3fd0:	0000fecd 	.word	0x0000fecd
    3fd4:	0000feee 	.word	0x0000feee
    3fd8:	0000fefc 	.word	0x0000fefc
    3fdc:	0000ff1b 	.word	0x0000ff1b
    3fe0:	0000ff37 	.word	0x0000ff37
    3fe4:	0000fe72 	.word	0x0000fe72
    3fe8:	0000fe5d 	.word	0x0000fe5d
    3fec:	0000ff5b 	.word	0x0000ff5b
    3ff0:	01000004 	.word	0x01000004

00003ff4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3ff4:	4a02      	ldr	r2, [pc, #8]	; (4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>)
    3ff6:	6953      	ldr	r3, [r2, #20]
    3ff8:	f043 0310 	orr.w	r3, r3, #16
    3ffc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3ffe:	4770      	bx	lr
    4000:	e000ed00 	.word	0xe000ed00

00004004 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4004:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4008:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    400c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    400e:	4672      	mov	r2, lr
	bl z_arm_fault
    4010:	f7ff fee4 	bl	3ddc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4014:	bd01      	pop	{r0, pc}
    4016:	bf00      	nop

00004018 <z_arm_interrupt_init>:
    4018:	4804      	ldr	r0, [pc, #16]	; (402c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    401a:	2300      	movs	r3, #0
    401c:	2120      	movs	r1, #32
    401e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4020:	3301      	adds	r3, #1
    4022:	2b30      	cmp	r3, #48	; 0x30
    4024:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4028:	d1f9      	bne.n	401e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    402a:	4770      	bx	lr
    402c:	e000e100 	.word	0xe000e100

00004030 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4030:	2000      	movs	r0, #0
    msr CONTROL, r0
    4032:	f380 8814 	msr	CONTROL, r0
    isb
    4036:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    403a:	f7fd fb2f 	bl	169c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    403e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4040:	490d      	ldr	r1, [pc, #52]	; (4078 <__start+0x48>)
    str r0, [r1]
    4042:	6008      	str	r0, [r1, #0]
    dsb
    4044:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4048:	480c      	ldr	r0, [pc, #48]	; (407c <__start+0x4c>)
    msr msp, r0
    404a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    404e:	f000 f82b 	bl	40a8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4052:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4054:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4058:	4809      	ldr	r0, [pc, #36]	; (4080 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    405a:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    405e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4060:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4064:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4068:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    406a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    406c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4070:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4074:	f7ff fbe4 	bl	3840 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4078:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    407c:	20004300 	.word	0x20004300
    ldr r0, =z_interrupt_stacks
    4080:	20003540 	.word	0x20003540

00004084 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4084:	4907      	ldr	r1, [pc, #28]	; (40a4 <z_arm_clear_arm_mpu_config+0x20>)
    4086:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    408a:	2300      	movs	r3, #0
	int num_regions =
    408c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    4090:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    4092:	4293      	cmp	r3, r2
    4094:	db00      	blt.n	4098 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    4096:	4770      	bx	lr
  MPU->RNR = rnr;
    4098:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    409c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    40a0:	3301      	adds	r3, #1
    40a2:	e7f6      	b.n	4092 <z_arm_clear_arm_mpu_config+0xe>
    40a4:	e000ed00 	.word	0xe000ed00

000040a8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    40a8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    40aa:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    40ac:	2300      	movs	r3, #0
    40ae:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    40b2:	f7ff ffe7 	bl	4084 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    40b6:	4b14      	ldr	r3, [pc, #80]	; (4108 <z_arm_init_arch_hw_at_boot+0x60>)
    40b8:	f04f 32ff 	mov.w	r2, #4294967295
    40bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    40c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    40c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    40c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    40cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    40d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    40d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    40d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    40dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    40e0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    40e4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    40e8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    40ec:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    40f0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    40f4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    40f8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    40fc:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    40fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4102:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4106:	bd08      	pop	{r3, pc}
    4108:	e000e100 	.word	0xe000e100

0000410c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    410c:	4b08      	ldr	r3, [pc, #32]	; (4130 <z_impl_k_thread_abort+0x24>)
    410e:	689b      	ldr	r3, [r3, #8]
    4110:	4283      	cmp	r3, r0
    4112:	d10b      	bne.n	412c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4114:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4118:	b143      	cbz	r3, 412c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    411a:	4b06      	ldr	r3, [pc, #24]	; (4134 <z_impl_k_thread_abort+0x28>)
    411c:	685a      	ldr	r2, [r3, #4]
    411e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4122:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    412a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    412c:	f007 be6e 	b.w	be0c <z_thread_abort>
    4130:	200021e8 	.word	0x200021e8
    4134:	e000ed00 	.word	0xe000ed00

00004138 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4138:	4b02      	ldr	r3, [pc, #8]	; (4144 <z_arm_configure_static_mpu_regions+0xc>)
    413a:	4a03      	ldr	r2, [pc, #12]	; (4148 <z_arm_configure_static_mpu_regions+0x10>)
    413c:	4803      	ldr	r0, [pc, #12]	; (414c <z_arm_configure_static_mpu_regions+0x14>)
    413e:	2101      	movs	r1, #1
    4140:	f000 b892 	b.w	4268 <arm_core_mpu_configure_static_mpu_regions>
    4144:	20040000 	.word	0x20040000
    4148:	20000000 	.word	0x20000000
    414c:	0000f158 	.word	0x0000f158

00004150 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4150:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4152:	4b05      	ldr	r3, [pc, #20]	; (4168 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    4154:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    4156:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4158:	4a04      	ldr	r2, [pc, #16]	; (416c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    415a:	2140      	movs	r1, #64	; 0x40
    415c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4160:	4618      	mov	r0, r3
    4162:	2101      	movs	r1, #1
    4164:	f000 b88a 	b.w	427c <arm_core_mpu_configure_dynamic_mpu_regions>
    4168:	2000136c 	.word	0x2000136c
    416c:	150b0000 	.word	0x150b0000

00004170 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4174:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 422c <mpu_configure_regions+0xbc>
    4178:	469c      	mov	ip, r3
    417a:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    417c:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    417e:	2300      	movs	r3, #0
    4180:	428b      	cmp	r3, r1
    4182:	da1a      	bge.n	41ba <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    4184:	6844      	ldr	r4, [r0, #4]
    4186:	2c00      	cmp	r4, #0
    4188:	d04d      	beq.n	4226 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    418a:	f1bc 0f00 	cmp.w	ip, #0
    418e:	d01d      	beq.n	41cc <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4190:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4192:	4234      	tst	r4, r6
    4194:	d015      	beq.n	41c2 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4196:	466c      	mov	r4, sp
    4198:	b088      	sub	sp, #32
    419a:	466a      	mov	r2, sp
    419c:	4924      	ldr	r1, [pc, #144]	; (4230 <mpu_configure_regions+0xc0>)
    419e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    41a2:	2303      	movs	r3, #3
    41a4:	f842 3f10 	str.w	r3, [r2, #16]!
    41a8:	4822      	ldr	r0, [pc, #136]	; (4234 <mpu_configure_regions+0xc4>)
    41aa:	2300      	movs	r3, #0
    41ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    41b0:	f7fd fd0c 	bl	1bcc <z_impl_z_log_msg_static_create>
			return -EINVAL;
    41b4:	f06f 0515 	mvn.w	r5, #21
    41b8:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    41ba:	4628      	mov	r0, r5
    41bc:	46bd      	mov	sp, r7
    41be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    41c2:	2c1f      	cmp	r4, #31
    41c4:	d9e7      	bls.n	4196 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    41c6:	6802      	ldr	r2, [r0, #0]
		&&
    41c8:	4216      	tst	r6, r2
    41ca:	d1e4      	bne.n	4196 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    41cc:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    41ce:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    41d0:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    41d2:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    41d6:	d914      	bls.n	4202 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    41d8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    41dc:	d813      	bhi.n	4206 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    41de:	3c01      	subs	r4, #1
    41e0:	fab4 f484 	clz	r4, r4
    41e4:	f1c4 041f 	rsb	r4, r4, #31
    41e8:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    41ea:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    41ee:	ea46 0604 	orr.w	r6, r6, r4
    41f2:	d90a      	bls.n	420a <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    41f4:	466c      	mov	r4, sp
    41f6:	b088      	sub	sp, #32
    41f8:	466a      	mov	r2, sp
    41fa:	4b0f      	ldr	r3, [pc, #60]	; (4238 <mpu_configure_regions+0xc8>)
    41fc:	e9c2 3505 	strd	r3, r5, [r2, #20]
    4200:	e7cf      	b.n	41a2 <mpu_configure_regions+0x32>
		return REGION_32B;
    4202:	2408      	movs	r4, #8
    4204:	e7f1      	b.n	41ea <mpu_configure_regions+0x7a>
		return REGION_4G;
    4206:	243e      	movs	r4, #62	; 0x3e
    4208:	e7ef      	b.n	41ea <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    420a:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    420e:	432a      	orrs	r2, r5
    4210:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4214:	f046 0601 	orr.w	r6, r6, #1
    4218:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    421c:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    4220:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4222:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    4226:	3301      	adds	r3, #1
    4228:	300c      	adds	r0, #12
    422a:	e7a9      	b.n	4180 <mpu_configure_regions+0x10>
    422c:	e000ed00 	.word	0xe000ed00
    4230:	0000ff72 	.word	0x0000ff72
    4234:	0000eff8 	.word	0x0000eff8
    4238:	0000ff95 	.word	0x0000ff95

0000423c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    423c:	4b04      	ldr	r3, [pc, #16]	; (4250 <arm_core_mpu_enable+0x14>)
    423e:	2205      	movs	r2, #5
    4240:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4248:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    424c:	4770      	bx	lr
    424e:	bf00      	nop
    4250:	e000ed00 	.word	0xe000ed00

00004254 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4254:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4258:	4b02      	ldr	r3, [pc, #8]	; (4264 <arm_core_mpu_disable+0x10>)
    425a:	2200      	movs	r2, #0
    425c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4260:	4770      	bx	lr
    4262:	bf00      	nop
    4264:	e000ed00 	.word	0xe000ed00

00004268 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4268:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    426a:	4c03      	ldr	r4, [pc, #12]	; (4278 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    426c:	2301      	movs	r3, #1
    426e:	7822      	ldrb	r2, [r4, #0]
    4270:	f7ff ff7e 	bl	4170 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4274:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    4276:	bd10      	pop	{r4, pc}
    4278:	20002424 	.word	0x20002424

0000427c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    427c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    427e:	4a09      	ldr	r2, [pc, #36]	; (42a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    4280:	2300      	movs	r3, #0
    4282:	7812      	ldrb	r2, [r2, #0]
    4284:	f7ff ff74 	bl	4170 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4288:	f110 0f16 	cmn.w	r0, #22
    428c:	d003      	beq.n	4296 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    428e:	4b06      	ldr	r3, [pc, #24]	; (42a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    4290:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4292:	2807      	cmp	r0, #7
    4294:	dd00      	ble.n	4298 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4296:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    4298:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    429c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    42a0:	3001      	adds	r0, #1
    42a2:	e7f6      	b.n	4292 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    42a4:	20002424 	.word	0x20002424
    42a8:	e000ed00 	.word	0xe000ed00

000042ac <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    42ac:	4914      	ldr	r1, [pc, #80]	; (4300 <z_arm_mpu_init+0x54>)
    42ae:	6808      	ldr	r0, [r1, #0]
    42b0:	2808      	cmp	r0, #8
{
    42b2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    42b4:	d821      	bhi.n	42fa <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    42b6:	f7ff ffcd 	bl	4254 <arm_core_mpu_disable>
    42ba:	4c12      	ldr	r4, [pc, #72]	; (4304 <z_arm_mpu_init+0x58>)
    42bc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    42be:	2200      	movs	r2, #0
    42c0:	4290      	cmp	r0, r2
    42c2:	f101 010c 	add.w	r1, r1, #12
    42c6:	d105      	bne.n	42d4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    42c8:	4b0f      	ldr	r3, [pc, #60]	; (4308 <z_arm_mpu_init+0x5c>)
    42ca:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    42cc:	f7ff ffb6 	bl	423c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    42d0:	2000      	movs	r0, #0
}
    42d2:	bd10      	pop	{r4, pc}
    42d4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    42d8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    42dc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    42e0:	4313      	orrs	r3, r2
    42e2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    42e6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    42ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
    42ee:	f043 0301 	orr.w	r3, r3, #1
    42f2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    42f6:	3201      	adds	r2, #1
    42f8:	e7e2      	b.n	42c0 <z_arm_mpu_init+0x14>
		return -1;
    42fa:	f04f 30ff 	mov.w	r0, #4294967295
    42fe:	e7e8      	b.n	42d2 <z_arm_mpu_init+0x26>
    4300:	0000f164 	.word	0x0000f164
    4304:	e000ed00 	.word	0xe000ed00
    4308:	20002424 	.word	0x20002424

0000430c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    430c:	4b01      	ldr	r3, [pc, #4]	; (4314 <__stdout_hook_install+0x8>)
    430e:	6018      	str	r0, [r3, #0]
}
    4310:	4770      	bx	lr
    4312:	bf00      	nop
    4314:	2000002c 	.word	0x2000002c

00004318 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
    4318:	b510      	push	{r4, lr}
	__asm__ volatile(
    431a:	f04f 0320 	mov.w	r3, #32
    431e:	f3ef 8011 	mrs	r0, BASEPRI
    4322:	f383 8812 	msr	BASEPRI_MAX, r3
    4326:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    432a:	4a11      	ldr	r2, [pc, #68]	; (4370 <nordicsemi_nrf52_init+0x58>)
    432c:	2301      	movs	r3, #1
    432e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4336:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    433a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    433e:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    4342:	2c08      	cmp	r4, #8
    4344:	d108      	bne.n	4358 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4346:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    434a:	2905      	cmp	r1, #5
    434c:	d804      	bhi.n	4358 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    434e:	4c09      	ldr	r4, [pc, #36]	; (4374 <nordicsemi_nrf52_init+0x5c>)
    4350:	5c61      	ldrb	r1, [r4, r1]
    4352:	b109      	cbz	r1, 4358 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    4354:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    4358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    435c:	2201      	movs	r2, #1
    435e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    4362:	f380 8811 	msr	BASEPRI, r0
    4366:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    436a:	2000      	movs	r0, #0
    436c:	bd10      	pop	{r4, pc}
    436e:	bf00      	nop
    4370:	4001e000 	.word	0x4001e000
    4374:	0000ffca 	.word	0x0000ffca

00004378 <sys_arch_reboot>:
    *p_gpregret = val;
    4378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    437c:	b2c0      	uxtb	r0, r0
    437e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    4382:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4386:	4905      	ldr	r1, [pc, #20]	; (439c <sys_arch_reboot+0x24>)
    4388:	4b05      	ldr	r3, [pc, #20]	; (43a0 <sys_arch_reboot+0x28>)
    438a:	68ca      	ldr	r2, [r1, #12]
    438c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4390:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4392:	60cb      	str	r3, [r1, #12]
    4394:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4398:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    439a:	e7fd      	b.n	4398 <sys_arch_reboot+0x20>
    439c:	e000ed00 	.word	0xe000ed00
    43a0:	05fa0004 	.word	0x05fa0004

000043a4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    43a4:	b120      	cbz	r0, 43b0 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    43a6:	4b03      	ldr	r3, [pc, #12]	; (43b4 <arch_busy_wait+0x10>)
    43a8:	0180      	lsls	r0, r0, #6
    43aa:	f043 0301 	orr.w	r3, r3, #1
    43ae:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    43b0:	4770      	bx	lr
    43b2:	bf00      	nop
    43b4:	0000f080 	.word	0x0000f080

000043b8 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    43b8:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    43ba:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    43be:	d512      	bpl.n	43e6 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    43c0:	2b08      	cmp	r3, #8
    43c2:	d105      	bne.n	43d0 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    43c4:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    43c6:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    43ca:	d506      	bpl.n	43da <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    43cc:	480e      	ldr	r0, [pc, #56]	; (4408 <endpoint_ctx+0x50>)
    43ce:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    43d0:	f010 0f78 	tst.w	r0, #120	; 0x78
    43d4:	d112      	bne.n	43fc <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    43d6:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    43da:	204c      	movs	r0, #76	; 0x4c
    43dc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    43e0:	4b0a      	ldr	r3, [pc, #40]	; (440c <endpoint_ctx+0x54>)
    43e2:	4418      	add	r0, r3
    43e4:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    43e6:	2b08      	cmp	r3, #8
    43e8:	d105      	bne.n	43f6 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    43ea:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    43ec:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    43f0:	d506      	bpl.n	4400 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    43f2:	4807      	ldr	r0, [pc, #28]	; (4410 <endpoint_ctx+0x58>)
    43f4:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    43f6:	f010 0f78 	tst.w	r0, #120	; 0x78
    43fa:	d0f6      	beq.n	43ea <endpoint_ctx+0x32>
		return NULL;
    43fc:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    43fe:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    4400:	4804      	ldr	r0, [pc, #16]	; (4414 <endpoint_ctx+0x5c>)
    4402:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4406:	4770      	bx	lr
    4408:	200014c4 	.word	0x200014c4
    440c:	20001378 	.word	0x20001378
    4410:	200015e4 	.word	0x200015e4
    4414:	200014e4 	.word	0x200014e4

00004418 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4418:	4901      	ldr	r1, [pc, #4]	; (4420 <usbd_work_schedule+0x8>)
    441a:	4802      	ldr	r0, [pc, #8]	; (4424 <usbd_work_schedule+0xc>)
    441c:	f00a b8ce 	b.w	e5bc <k_work_submit_to_queue>
    4420:	200013a0 	.word	0x200013a0
    4424:	20000978 	.word	0x20000978

00004428 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    4428:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    442a:	4801      	ldr	r0, [pc, #4]	; (4430 <usbd_evt_put+0x8>)
    442c:	f00a b87c 	b.w	e528 <k_queue_append>
    4430:	20000394 	.word	0x20000394

00004434 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    4434:	4802      	ldr	r0, [pc, #8]	; (4440 <usbd_evt_get+0xc>)
    4436:	2200      	movs	r2, #0
    4438:	2300      	movs	r3, #0
    443a:	f006 bff9 	b.w	b430 <z_impl_k_queue_get>
    443e:	bf00      	nop
    4440:	20000394 	.word	0x20000394

00004444 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    4444:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4446:	4c05      	ldr	r4, [pc, #20]	; (445c <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    4448:	f7ff fff4 	bl	4434 <usbd_evt_get>
		if (ev) {
    444c:	b120      	cbz	r0, 4458 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    444e:	1d01      	adds	r1, r0, #4
    4450:	4620      	mov	r0, r4
    4452:	f009 ffab 	bl	e3ac <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    4456:	e7f7      	b.n	4448 <usbd_evt_flush+0x4>
}
    4458:	bd10      	pop	{r4, pc}
    445a:	bf00      	nop
    445c:	200002e8 	.word	0x200002e8

00004460 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    4460:	b510      	push	{r4, lr}
    4462:	b088      	sub	sp, #32
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    4464:	4818      	ldr	r0, [pc, #96]	; (44c8 <usbd_evt_alloc+0x68>)
    4466:	2200      	movs	r2, #0
    4468:	2300      	movs	r3, #0
    446a:	a901      	add	r1, sp, #4
    446c:	f006 fe26 	bl	b0bc <k_mem_slab_alloc>
    4470:	b330      	cbz	r0, 44c0 <usbd_evt_alloc+0x60>
			     (void **)&block.data, K_NO_WAIT)) {
		LOG_ERR("USBD event allocation failed!");
    4472:	4b16      	ldr	r3, [pc, #88]	; (44cc <usbd_evt_alloc+0x6c>)
    4474:	4816      	ldr	r0, [pc, #88]	; (44d0 <usbd_evt_alloc+0x70>)
    4476:	9307      	str	r3, [sp, #28]
    4478:	aa06      	add	r2, sp, #24
    447a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    447e:	2402      	movs	r4, #2
    4480:	9406      	str	r4, [sp, #24]
    4482:	f009 f952 	bl	d72a <z_log_msg_static_create.constprop.0>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    4486:	f7ff ffdd 	bl	4444 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    448a:	480f      	ldr	r0, [pc, #60]	; (44c8 <usbd_evt_alloc+0x68>)
    448c:	2200      	movs	r2, #0
    448e:	2300      	movs	r3, #0
    4490:	a901      	add	r1, sp, #4
    4492:	f006 fe13 	bl	b0bc <k_mem_slab_alloc>
    4496:	b150      	cbz	r0, 44ae <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    4498:	4b0e      	ldr	r3, [pc, #56]	; (44d4 <usbd_evt_alloc+0x74>)
    449a:	480d      	ldr	r0, [pc, #52]	; (44d0 <usbd_evt_alloc+0x70>)
    449c:	aa06      	add	r2, sp, #24
    449e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    44a2:	e9cd 4306 	strd	r4, r3, [sp, #24]
    44a6:	f009 f940 	bl	d72a <z_log_msg_static_create.constprop.0>
			__ASSERT_NO_MSG(0);
			return NULL;
    44aa:	2000      	movs	r0, #0
    44ac:	e00a      	b.n	44c4 <usbd_evt_alloc+0x64>
		}

		ev = (struct usbd_event *)block.data;
    44ae:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    44b0:	2304      	movs	r3, #4
		ev->block = block;
    44b2:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    44b4:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    44b6:	f7ff ffb7 	bl	4428 <usbd_evt_put>
		usbd_work_schedule();
    44ba:	f7ff ffad 	bl	4418 <usbd_work_schedule>

		return NULL;
    44be:	e7f4      	b.n	44aa <usbd_evt_alloc+0x4a>
	}

	ev = (struct usbd_event *)block.data;
    44c0:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    44c2:	6040      	str	r0, [r0, #4]

	return ev;
}
    44c4:	b008      	add	sp, #32
    44c6:	bd10      	pop	{r4, pc}
    44c8:	200002e8 	.word	0x200002e8
    44cc:	0000ffd4 	.word	0x0000ffd4
    44d0:	0000f050 	.word	0x0000f050
    44d4:	0000fff2 	.word	0x0000fff2

000044d8 <usb_dc_power_event_handler>:

static K_TIMER_DEFINE(delay_timer, attached_evt_delay_handler, NULL);
#endif

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
    44d8:	b598      	push	{r3, r4, r7, lr}
    44da:	2802      	cmp	r0, #2
    44dc:	af00      	add	r7, sp, #0
    44de:	d811      	bhi.n	4504 <usb_dc_power_event_handler+0x2c>
    44e0:	4b10      	ldr	r3, [pc, #64]	; (4524 <usb_dc_power_event_handler+0x4c>)
    44e2:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    44e4:	f7ff ffbc 	bl	4460 <usbd_evt_alloc>
	if (!ev) {
    44e8:	b150      	cbz	r0, 4500 <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    44ea:	2200      	movs	r2, #0
    44ec:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    44ee:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    44f0:	f7ff ff9a 	bl	4428 <usbd_evt_put>
	if (usbd_ctx.attached) {
    44f4:	4b0c      	ldr	r3, [pc, #48]	; (4528 <usb_dc_power_event_handler+0x50>)
    44f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    44fa:	b10b      	cbz	r3, 4500 <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    44fc:	f7ff ff8c 	bl	4418 <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    4500:	46bd      	mov	sp, r7
    4502:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    4504:	466c      	mov	r4, sp
    4506:	b088      	sub	sp, #32
    4508:	466a      	mov	r2, sp
    450a:	4b08      	ldr	r3, [pc, #32]	; (452c <usb_dc_power_event_handler+0x54>)
	switch (event) {
    450c:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    4510:	2303      	movs	r3, #3
    4512:	f842 3f10 	str.w	r3, [r2, #16]!
    4516:	4806      	ldr	r0, [pc, #24]	; (4530 <usb_dc_power_event_handler+0x58>)
    4518:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    451c:	f009 f905 	bl	d72a <z_log_msg_static_create.constprop.0>
    4520:	46a5      	mov	sp, r4
    4522:	e7ed      	b.n	4500 <usb_dc_power_event_handler+0x28>
    4524:	000101e4 	.word	0x000101e4
    4528:	20001378 	.word	0x20001378
    452c:	0001000e 	.word	0x0001000e
    4530:	0000f050 	.word	0x0000f050

00004534 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    4534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    4538:	f890 8002 	ldrb.w	r8, [r0, #2]
{
    453c:	4606      	mov	r6, r0
    453e:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    4540:	4640      	mov	r0, r8
    4542:	f7ff ff39 	bl	43b8 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4546:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    454a:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    454c:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    454e:	d025      	beq.n	459c <usbd_event_transfer_data+0x68>
		switch (p_event->data.eptransfer.status) {
    4550:	b19c      	cbz	r4, 457a <usbd_event_transfer_data+0x46>
    4552:	2c03      	cmp	r4, #3
    4554:	d01f      	beq.n	4596 <usbd_event_transfer_data+0x62>
			usbd_work_schedule();
		}
		break;

		default: {
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    4556:	466d      	mov	r5, sp
    4558:	b088      	sub	sp, #32
    455a:	466a      	mov	r2, sp
    455c:	4b2a      	ldr	r3, [pc, #168]	; (4608 <usbd_event_transfer_data+0xd4>)
    455e:	f8c2 801c 	str.w	r8, [r2, #28]
    4562:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4566:	2304      	movs	r3, #4
    4568:	f842 3f10 	str.w	r3, [r2, #16]!
    456c:	4827      	ldr	r0, [pc, #156]	; (460c <usbd_event_transfer_data+0xd8>)
    456e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4572:	f009 f8da 	bl	d72a <z_log_msg_static_create.constprop.0>
    4576:	46ad      	mov	sp, r5
    4578:	e00d      	b.n	4596 <usbd_event_transfer_data+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    457a:	f7ff ff71 	bl	4460 <usbd_evt_alloc>
			if (!ev) {
    457e:	4603      	mov	r3, r0
    4580:	b148      	cbz	r0, 4596 <usbd_event_transfer_data+0x62>
			ev->evt_type = USBD_EVT_EP;
    4582:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4584:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    4586:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4588:	2203      	movs	r2, #3
    458a:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    458c:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    458e:	f7ff ff4b 	bl	4428 <usbd_evt_put>
			usbd_work_schedule();
    4592:	f7ff ff41 	bl	4418 <usbd_work_schedule>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    4596:	46bd      	mov	sp, r7
    4598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (p_event->data.eptransfer.status) {
    459c:	b154      	cbz	r4, 45b4 <usbd_event_transfer_data+0x80>
    459e:	2c01      	cmp	r4, #1
    45a0:	d1d9      	bne.n	4556 <usbd_event_transfer_data+0x22>
			struct usbd_event *ev = usbd_evt_alloc();
    45a2:	f7ff ff5d 	bl	4460 <usbd_evt_alloc>
			if (!ev) {
    45a6:	4603      	mov	r3, r0
    45a8:	2800      	cmp	r0, #0
    45aa:	d0f4      	beq.n	4596 <usbd_event_transfer_data+0x62>
			ep_ctx->read_pending = true;
    45ac:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    45ae:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    45b0:	7304      	strb	r4, [r0, #12]
    45b2:	e7eb      	b.n	458c <usbd_event_transfer_data+0x58>
			struct usbd_event *ev = usbd_evt_alloc();
    45b4:	f7ff ff54 	bl	4460 <usbd_evt_alloc>
			if (!ev) {
    45b8:	2800      	cmp	r0, #0
    45ba:	d0ec      	beq.n	4596 <usbd_event_transfer_data+0x62>
				p_event->data.eptransfer.ep);
    45bc:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    45be:	4b14      	ldr	r3, [pc, #80]	; (4610 <usbd_event_transfer_data+0xdc>)
    45c0:	f012 0f80 	tst.w	r2, #128	; 0x80
    45c4:	f002 0108 	and.w	r1, r2, #8
    45c8:	d011      	beq.n	45ee <usbd_event_transfer_data+0xba>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    45ca:	b141      	cbz	r1, 45de <usbd_event_transfer_data+0xaa>
        {
            ret = p_reg->ISOIN.AMOUNT;
    45cc:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    45d0:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    45d2:	2301      	movs	r3, #1
    45d4:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    45d6:	2302      	movs	r3, #2
    45d8:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    45da:	6085      	str	r5, [r0, #8]
    45dc:	e7d7      	b.n	458e <usbd_event_transfer_data+0x5a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    45de:	f002 020f 	and.w	r2, r2, #15
    45e2:	2114      	movs	r1, #20
    45e4:	fb01 3302 	mla	r3, r1, r2, r3
    45e8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    45ec:	e7f0      	b.n	45d0 <usbd_event_transfer_data+0x9c>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    45ee:	b111      	cbz	r1, 45f6 <usbd_event_transfer_data+0xc2>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    45f0:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    45f4:	e7ec      	b.n	45d0 <usbd_event_transfer_data+0x9c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    45f6:	f002 020f 	and.w	r2, r2, #15
    45fa:	2114      	movs	r1, #20
    45fc:	fb01 3302 	mla	r3, r1, r2, r3
    4600:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    4604:	e7e4      	b.n	45d0 <usbd_event_transfer_data+0x9c>
    4606:	bf00      	nop
    4608:	00010029 	.word	0x00010029
    460c:	0000f050 	.word	0x0000f050
    4610:	40027000 	.word	0x40027000

00004614 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    4614:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    4616:	4812      	ldr	r0, [pc, #72]	; (4660 <usb_init+0x4c>)
    4618:	f005 febc 	bl	a394 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    461c:	4b11      	ldr	r3, [pc, #68]	; (4664 <usb_init+0x50>)
    461e:	4298      	cmp	r0, r3
    4620:	d11a      	bne.n	4658 <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    4622:	4811      	ldr	r0, [pc, #68]	; (4668 <usb_init+0x54>)
    4624:	f004 ff4a 	bl	94bc <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    4628:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    462a:	4810      	ldr	r0, [pc, #64]	; (466c <usb_init+0x58>)
    462c:	f004 ff8c 	bl	9548 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    4630:	490f      	ldr	r1, [pc, #60]	; (4670 <usb_init+0x5c>)
    4632:	4810      	ldr	r0, [pc, #64]	; (4674 <usb_init+0x60>)
    4634:	9400      	str	r4, [sp, #0]
    4636:	f04f 33ff 	mov.w	r3, #4294967295
    463a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    463e:	f007 f8b1 	bl	b7a4 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    4642:	490d      	ldr	r1, [pc, #52]	; (4678 <usb_init+0x64>)
    4644:	480b      	ldr	r0, [pc, #44]	; (4674 <usb_init+0x60>)
    4646:	f009 fee0 	bl	e40a <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    464a:	480c      	ldr	r0, [pc, #48]	; (467c <usb_init+0x68>)
    464c:	490c      	ldr	r1, [pc, #48]	; (4680 <usb_init+0x6c>)
    464e:	f009 ff98 	bl	e582 <k_work_init>

	return 0;
    4652:	4620      	mov	r0, r4
}
    4654:	b002      	add	sp, #8
    4656:	bd10      	pop	{r4, pc}
		return -EIO;
    4658:	f06f 0004 	mvn.w	r0, #4
    465c:	e7fa      	b.n	4654 <usb_init+0x40>
    465e:	bf00      	nop
    4660:	000046c5 	.word	0x000046c5
    4664:	0bad0000 	.word	0x0bad0000
    4668:	000101e7 	.word	0x000101e7
    466c:	0000f184 	.word	0x0000f184
    4670:	20003100 	.word	0x20003100
    4674:	20000978 	.word	0x20000978
    4678:	00010055 	.word	0x00010055
    467c:	200013a0 	.word	0x200013a0
    4680:	0000489d 	.word	0x0000489d

00004684 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    4684:	b510      	push	{r4, lr}
    4686:	490e      	ldr	r1, [pc, #56]	; (46c0 <hfxo_stop.constprop.0.isra.0+0x3c>)
    4688:	f3bf 8f5b 	dmb	ish
    468c:	2300      	movs	r3, #0
    468e:	e851 2f00 	ldrex	r2, [r1]
    4692:	2a01      	cmp	r2, #1
    4694:	d103      	bne.n	469e <hfxo_stop.constprop.0.isra.0+0x1a>
    4696:	e841 3000 	strex	r0, r3, [r1]
    469a:	2800      	cmp	r0, #0
    469c:	d1f7      	bne.n	468e <hfxo_stop.constprop.0.isra.0+0xa>
    469e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    46a2:	d10c      	bne.n	46be <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    46a4:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    46a8:	3914      	subs	r1, #20
    46aa:	4620      	mov	r0, r4
    46ac:	f008 fc17 	bl	cede <onoff_cancel>

	if (rv == -EALREADY) {
    46b0:	3078      	adds	r0, #120	; 0x78
    46b2:	d104      	bne.n	46be <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    46b4:	4620      	mov	r0, r4
}
    46b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46ba:	f008 bbeb 	b.w	ce94 <onoff_release>
    46be:	bd10      	pop	{r4, pc}
    46c0:	20001398 	.word	0x20001398

000046c4 <usbd_event_handler>:
{
    46c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46c8:	b088      	sub	sp, #32
    46ca:	4606      	mov	r6, r0
    46cc:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    46ce:	2214      	movs	r2, #20
    46d0:	2100      	movs	r1, #0
    46d2:	f107 000c 	add.w	r0, r7, #12
    46d6:	f008 fff7 	bl	d6c8 <memset>
	switch (p_event->type) {
    46da:	7833      	ldrb	r3, [r6, #0]
    46dc:	3b01      	subs	r3, #1
    46de:	2b05      	cmp	r3, #5
    46e0:	d821      	bhi.n	4726 <usbd_event_handler+0x62>
    46e2:	e8df f003 	tbb	[pc, r3]
    46e6:	039b      	.short	0x039b
    46e8:	158d1313 	.word	0x158d1313
    46ec:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    46ee:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
    46f0:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    46f2:	f7ff feb5 	bl	4460 <usbd_evt_alloc>
		if (!ev) {
    46f6:	4603      	mov	r3, r0
    46f8:	b1a8      	cbz	r0, 4726 <usbd_event_handler+0x62>
		ev->evt_type = evt.evt_type;
    46fa:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    46fc:	f100 0208 	add.w	r2, r0, #8
    4700:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    4704:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    4708:	4618      	mov	r0, r3
    470a:	e034      	b.n	4776 <usbd_event_handler+0xb2>
	switch (p_event->type) {
    470c:	2304      	movs	r3, #4
    470e:	e7ee      	b.n	46ee <usbd_event_handler+0x2a>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    4710:	f896 8002 	ldrb.w	r8, [r6, #2]
    4714:	4640      	mov	r0, r8
    4716:	f7ff fe4f 	bl	43b8 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    471a:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    471c:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    471e:	b133      	cbz	r3, 472e <usbd_event_handler+0x6a>
    4720:	3b01      	subs	r3, #1
    4722:	2b02      	cmp	r3, #2
    4724:	d968      	bls.n	47f8 <usbd_event_handler+0x134>
}
    4726:	3720      	adds	r7, #32
    4728:	46bd      	mov	sp, r7
    472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    472e:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    4732:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4734:	d024      	beq.n	4780 <usbd_event_handler+0xbc>
		switch (p_event->data.eptransfer.status) {
    4736:	b19c      	cbz	r4, 4760 <usbd_event_handler+0x9c>
    4738:	2c03      	cmp	r4, #3
    473a:	d0f4      	beq.n	4726 <usbd_event_handler+0x62>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    473c:	466d      	mov	r5, sp
    473e:	b088      	sub	sp, #32
    4740:	466a      	mov	r2, sp
    4742:	4b37      	ldr	r3, [pc, #220]	; (4820 <usbd_event_handler+0x15c>)
    4744:	f8c2 801c 	str.w	r8, [r2, #28]
    4748:	e9c2 3405 	strd	r3, r4, [r2, #20]
    474c:	2304      	movs	r3, #4
    474e:	f842 3f10 	str.w	r3, [r2, #16]!
    4752:	4834      	ldr	r0, [pc, #208]	; (4824 <usbd_event_handler+0x160>)
    4754:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4758:	f008 ffe7 	bl	d72a <z_log_msg_static_create.constprop.0>
    475c:	46ad      	mov	sp, r5
    475e:	e7e2      	b.n	4726 <usbd_event_handler+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    4760:	f7ff fe7e 	bl	4460 <usbd_evt_alloc>
			if (!ev) {
    4764:	4603      	mov	r3, r0
    4766:	2800      	cmp	r0, #0
    4768:	d0dd      	beq.n	4726 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    476a:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    476c:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    476e:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4770:	2203      	movs	r2, #3
    4772:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4774:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    4776:	f7ff fe57 	bl	4428 <usbd_evt_put>
		usbd_work_schedule();
    477a:	f7ff fe4d 	bl	4418 <usbd_work_schedule>
    477e:	e7d2      	b.n	4726 <usbd_event_handler+0x62>
		switch (p_event->data.eptransfer.status) {
    4780:	b154      	cbz	r4, 4798 <usbd_event_handler+0xd4>
    4782:	2c01      	cmp	r4, #1
    4784:	d1da      	bne.n	473c <usbd_event_handler+0x78>
			struct usbd_event *ev = usbd_evt_alloc();
    4786:	f7ff fe6b 	bl	4460 <usbd_evt_alloc>
			if (!ev) {
    478a:	4603      	mov	r3, r0
    478c:	2800      	cmp	r0, #0
    478e:	d0ca      	beq.n	4726 <usbd_event_handler+0x62>
			ep_ctx->read_pending = true;
    4790:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    4792:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4794:	7304      	strb	r4, [r0, #12]
    4796:	e7ed      	b.n	4774 <usbd_event_handler+0xb0>
			struct usbd_event *ev = usbd_evt_alloc();
    4798:	f7ff fe62 	bl	4460 <usbd_evt_alloc>
			if (!ev) {
    479c:	4604      	mov	r4, r0
    479e:	2800      	cmp	r0, #0
    47a0:	d0c1      	beq.n	4726 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    47a2:	2301      	movs	r3, #1
    47a4:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    47a6:	2302      	movs	r3, #2
    47a8:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    47aa:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    47ac:	78b0      	ldrb	r0, [r6, #2]
    47ae:	f105 010c 	add.w	r1, r5, #12
    47b2:	f009 fd92 	bl	e2da <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    47b6:	b170      	cbz	r0, 47d6 <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
    47b8:	466e      	mov	r6, sp
    47ba:	b088      	sub	sp, #32
    47bc:	466a      	mov	r2, sp
    47be:	4b1a      	ldr	r3, [pc, #104]	; (4828 <usbd_event_handler+0x164>)
    47c0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    47c4:	2303      	movs	r3, #3
    47c6:	f842 3f10 	str.w	r3, [r2, #16]!
    47ca:	4816      	ldr	r0, [pc, #88]	; (4824 <usbd_event_handler+0x160>)
    47cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    47d0:	f008 ffab 	bl	d72a <z_log_msg_static_create.constprop.0>
    47d4:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    47d6:	4a15      	ldr	r2, [pc, #84]	; (482c <usbd_event_handler+0x168>)
    47d8:	68e9      	ldr	r1, [r5, #12]
    47da:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    47de:	428b      	cmp	r3, r1
    47e0:	d906      	bls.n	47f0 <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    47e2:	1a5b      	subs	r3, r3, r1
    47e4:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    47e8:	f006 f810 	bl	a80c <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    47ec:	4620      	mov	r0, r4
    47ee:	e7c2      	b.n	4776 <usbd_event_handler+0xb2>
				ctx->ctrl_read_len = 0U;
    47f0:	2300      	movs	r3, #0
    47f2:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    47f6:	e7f9      	b.n	47ec <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
    47f8:	4630      	mov	r0, r6
    47fa:	f7ff fe9b 	bl	4534 <usbd_event_transfer_data>
	if (put_evt) {
    47fe:	e792      	b.n	4726 <usbd_event_handler+0x62>
		nrfx_usbd_setup_get(&drv_setup);
    4800:	1d38      	adds	r0, r7, #4
    4802:	f005 ffdd 	bl	a7c0 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    4806:	797b      	ldrb	r3, [r7, #5]
    4808:	2b05      	cmp	r3, #5
    480a:	d103      	bne.n	4814 <usbd_event_handler+0x150>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    480c:	793b      	ldrb	r3, [r7, #4]
    480e:	f013 0f60 	tst.w	r3, #96	; 0x60
    4812:	d088      	beq.n	4726 <usbd_event_handler+0x62>
			evt.evt.ep_evt.ep = ep_ctx;
    4814:	4b06      	ldr	r3, [pc, #24]	; (4830 <usbd_event_handler+0x16c>)
    4816:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
    4818:	2401      	movs	r4, #1
    481a:	e76a      	b.n	46f2 <usbd_event_handler+0x2e>
	switch (p_event->type) {
    481c:	2402      	movs	r4, #2
    481e:	e768      	b.n	46f2 <usbd_event_handler+0x2e>
    4820:	00010029 	.word	0x00010029
    4824:	0000f050 	.word	0x0000f050
    4828:	00010060 	.word	0x00010060
    482c:	20001378 	.word	0x20001378
    4830:	200014e4 	.word	0x200014e4

00004834 <eps_ctx_init>:
{
    4834:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4836:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4838:	f064 007f 	orn	r0, r4, #127	; 0x7f
    483c:	b2c0      	uxtb	r0, r0
    483e:	f7ff fdbb 	bl	43b8 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4842:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4844:	f008 ff5e 	bl	d704 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4848:	2c08      	cmp	r4, #8
    484a:	d1f5      	bne.n	4838 <eps_ctx_init+0x4>
    484c:	4d0e      	ldr	r5, [pc, #56]	; (4888 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    484e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4850:	b2e0      	uxtb	r0, r4
    4852:	f7ff fdb1 	bl	43b8 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    4856:	6903      	ldr	r3, [r0, #16]
    4858:	b903      	cbnz	r3, 485c <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    485a:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    485c:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    485e:	f008 ff51 	bl	d704 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4862:	2c08      	cmp	r4, #8
    4864:	f105 0540 	add.w	r5, r5, #64	; 0x40
    4868:	d1f2      	bne.n	4850 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    486a:	4808      	ldr	r0, [pc, #32]	; (488c <eps_ctx_init+0x58>)
    486c:	f008 ff4a 	bl	d704 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    4870:	4b07      	ldr	r3, [pc, #28]	; (4890 <eps_ctx_init+0x5c>)
    4872:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    4876:	b912      	cbnz	r2, 487e <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    4878:	4a06      	ldr	r2, [pc, #24]	; (4894 <eps_ctx_init+0x60>)
    487a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    487e:	4806      	ldr	r0, [pc, #24]	; (4898 <eps_ctx_init+0x64>)
    4880:	f008 ff40 	bl	d704 <ep_ctx_reset>
}
    4884:	2000      	movs	r0, #0
    4886:	bd38      	pop	{r3, r4, r5, pc}
    4888:	20001a08 	.word	0x20001a08
    488c:	200014c4 	.word	0x200014c4
    4890:	20001378 	.word	0x20001378
    4894:	20001608 	.word	0x20001608
    4898:	200015e4 	.word	0x200015e4

0000489c <usbd_work_handler>:
{
    489c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
    48a0:	4ca3      	ldr	r4, [pc, #652]	; (4b30 <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    48a2:	f8df a290 	ldr.w	sl, [pc, #656]	; 4b34 <usbd_work_handler+0x298>
{
    48a6:	b086      	sub	sp, #24
    48a8:	4680      	mov	r8, r0
    48aa:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    48ac:	f7ff fdc2 	bl	4434 <usbd_evt_get>
    48b0:	4606      	mov	r6, r0
    48b2:	b918      	cbnz	r0, 48bc <usbd_work_handler+0x20>
}
    48b4:	3718      	adds	r7, #24
    48b6:	46bd      	mov	sp, r7
    48b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    48bc:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    48c0:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    48c2:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    48c6:	b93a      	cbnz	r2, 48d8 <usbd_work_handler+0x3c>
    48c8:	2b00      	cmp	r3, #0
    48ca:	f000 80af 	beq.w	4a2c <usbd_work_handler+0x190>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    48ce:	4899      	ldr	r0, [pc, #612]	; (4b34 <usbd_work_handler+0x298>)
    48d0:	4649      	mov	r1, r9
    48d2:	f009 fd6b 	bl	e3ac <k_mem_slab_free>
}
    48d6:	e7e9      	b.n	48ac <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    48d8:	2b04      	cmp	r3, #4
    48da:	f200 8195 	bhi.w	4c08 <usbd_work_handler+0x36c>
    48de:	e8df f013 	tbh	[pc, r3, lsl #1]
    48e2:	00a5      	.short	0x00a5
    48e4:	013b0005 	.word	0x013b0005
    48e8:	01780151 	.word	0x01780151
			if (!ctx->attached) {
    48ec:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    48f0:	b983      	cbnz	r3, 4914 <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    48f2:	68b3      	ldr	r3, [r6, #8]
    48f4:	466d      	mov	r5, sp
    48f6:	b088      	sub	sp, #32
    48f8:	7a5b      	ldrb	r3, [r3, #9]
    48fa:	466a      	mov	r2, sp
    48fc:	498e      	ldr	r1, [pc, #568]	; (4b38 <usbd_work_handler+0x29c>)
    48fe:	488f      	ldr	r0, [pc, #572]	; (4b3c <usbd_work_handler+0x2a0>)
    4900:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4904:	2303      	movs	r3, #3
    4906:	f842 3f10 	str.w	r3, [r2, #16]!
    490a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    490e:	f008 ff0c 	bl	d72a <z_log_msg_static_create.constprop.0>
    4912:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    4914:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4916:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    4918:	2b03      	cmp	r3, #3
    491a:	d839      	bhi.n	4990 <usbd_work_handler+0xf4>
    491c:	e8df f003 	tbb	[pc, r3]
    4920:	736e3f02 	.word	0x736e3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4924:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    4926:	2208      	movs	r2, #8
    4928:	2100      	movs	r1, #0
    492a:	4630      	mov	r0, r6
    492c:	f008 fecc 	bl	d6c8 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4930:	4b83      	ldr	r3, [pc, #524]	; (4b40 <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4932:	4884      	ldr	r0, [pc, #528]	; (4b44 <usbd_work_handler+0x2a8>)
    4934:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    4938:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    493a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    493e:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4940:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4944:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    4948:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    494c:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    494e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4952:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    4956:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    495a:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    495c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4960:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    4964:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4968:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    496a:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    496c:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    496e:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4970:	f008 fe9f 	bl	d6b2 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    4974:	682b      	ldr	r3, [r5, #0]
    4976:	7a68      	ldrb	r0, [r5, #9]
    4978:	2100      	movs	r1, #0
    497a:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    497c:	f996 3000 	ldrsb.w	r3, [r6]
    4980:	2b00      	cmp	r3, #0
    4982:	db08      	blt.n	4996 <usbd_work_handler+0xfa>
    4984:	88f3      	ldrh	r3, [r6, #6]
    4986:	b133      	cbz	r3, 4996 <usbd_work_handler+0xfa>
		ctx->ctrl_read_len = usbd_setup->wLength;
    4988:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    498c:	f005 ff3e 	bl	a80c <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4990:	4649      	mov	r1, r9
    4992:	4650      	mov	r0, sl
    4994:	e79d      	b.n	48d2 <usbd_work_handler+0x36>
		ctx->ctrl_read_len = 0U;
    4996:	2300      	movs	r3, #0
    4998:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    499c:	e7f8      	b.n	4990 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_pending) {
    499e:	7f6b      	ldrb	r3, [r5, #29]
    49a0:	2b00      	cmp	r3, #0
    49a2:	d0f5      	beq.n	4990 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_complete) {
    49a4:	7f2b      	ldrb	r3, [r5, #28]
    49a6:	2b00      	cmp	r3, #0
    49a8:	d0f2      	beq.n	4990 <usbd_work_handler+0xf4>
	ep_ctx->read_pending = false;
    49aa:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    49ac:	4866      	ldr	r0, [pc, #408]	; (4b48 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
    49ae:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    49b0:	f04f 32ff 	mov.w	r2, #4294967295
    49b4:	f04f 33ff 	mov.w	r3, #4294967295
	ep_ctx->read_complete = false;
    49b8:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    49ba:	f008 feb9 	bl	d730 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    49be:	696b      	ldr	r3, [r5, #20]
    49c0:	603b      	str	r3, [r7, #0]
    49c2:	686b      	ldr	r3, [r5, #4]
    49c4:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    49c8:	4639      	mov	r1, r7
    49ca:	7a68      	ldrb	r0, [r5, #9]
    49cc:	f005 fd24 	bl	a418 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    49d0:	4b5e      	ldr	r3, [pc, #376]	; (4b4c <usbd_work_handler+0x2b0>)
    49d2:	4298      	cmp	r0, r3
    49d4:	d00e      	beq.n	49f4 <usbd_work_handler+0x158>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    49d6:	466d      	mov	r5, sp
    49d8:	b088      	sub	sp, #32
    49da:	466a      	mov	r2, sp
    49dc:	4b5c      	ldr	r3, [pc, #368]	; (4b50 <usbd_work_handler+0x2b4>)
    49de:	e9c2 3005 	strd	r3, r0, [r2, #20]
    49e2:	2303      	movs	r3, #3
    49e4:	f842 3f10 	str.w	r3, [r2, #16]!
    49e8:	4854      	ldr	r0, [pc, #336]	; (4b3c <usbd_work_handler+0x2a0>)
    49ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    49ee:	f008 fe9c 	bl	d72a <z_log_msg_static_create.constprop.0>
    49f2:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    49f4:	4854      	ldr	r0, [pc, #336]	; (4b48 <usbd_work_handler+0x2ac>)
    49f6:	f008 fe9d 	bl	d734 <k_mutex_unlock.isra.0>
    49fa:	e7c9      	b.n	4990 <usbd_work_handler+0xf4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    49fc:	682b      	ldr	r3, [r5, #0]
    49fe:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4a00:	7a68      	ldrb	r0, [r5, #9]
    4a02:	4798      	blx	r3
		break;
    4a04:	e7c4      	b.n	4990 <usbd_work_handler+0xf4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4a06:	7aab      	ldrb	r3, [r5, #10]
    4a08:	b96b      	cbnz	r3, 4a26 <usbd_work_handler+0x18a>
    4a0a:	7feb      	ldrb	r3, [r5, #31]
    4a0c:	b95b      	cbnz	r3, 4a26 <usbd_work_handler+0x18a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4a0e:	484e      	ldr	r0, [pc, #312]	; (4b48 <usbd_work_handler+0x2ac>)
    4a10:	f04f 32ff 	mov.w	r2, #4294967295
    4a14:	f04f 33ff 	mov.w	r3, #4294967295
    4a18:	f008 fe8a 	bl	d730 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    4a1c:	f005 ff26 	bl	a86c <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    4a20:	4849      	ldr	r0, [pc, #292]	; (4b48 <usbd_work_handler+0x2ac>)
    4a22:	f008 fe87 	bl	d734 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4a26:	682b      	ldr	r3, [r5, #0]
    4a28:	2102      	movs	r1, #2
    4a2a:	e7e9      	b.n	4a00 <usbd_work_handler+0x164>
	switch (pwr_evt->state) {
    4a2c:	7a33      	ldrb	r3, [r6, #8]
    4a2e:	2b04      	cmp	r3, #4
    4a30:	d8ae      	bhi.n	4990 <usbd_work_handler+0xf4>
    4a32:	e8df f003 	tbb	[pc, r3]
    4a36:	0359      	.short	0x0359
    4a38:	6723      	.short	0x6723
    4a3a:	73          	.byte	0x73
    4a3b:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    4a3c:	f005 fc74 	bl	a328 <nrfx_usbd_is_enabled>
    4a40:	4605      	mov	r5, r0
    4a42:	2800      	cmp	r0, #0
    4a44:	d1a4      	bne.n	4990 <usbd_work_handler+0xf4>
			nrfx_usbd_enable();
    4a46:	f005 fbab 	bl	a1a0 <nrfx_usbd_enable>
    4a4a:	f3bf 8f5b 	dmb	ish
    4a4e:	4941      	ldr	r1, [pc, #260]	; (4b54 <usbd_work_handler+0x2b8>)
    4a50:	2301      	movs	r3, #1
    4a52:	e851 2f00 	ldrex	r2, [r1]
    4a56:	2a00      	cmp	r2, #0
    4a58:	d103      	bne.n	4a62 <usbd_work_handler+0x1c6>
    4a5a:	e841 3000 	strex	r0, r3, [r1]
    4a5e:	2800      	cmp	r0, #0
    4a60:	d1f7      	bne.n	4a52 <usbd_work_handler+0x1b6>
    4a62:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    4a66:	d193      	bne.n	4990 <usbd_work_handler+0xf4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4a68:	f841 5c08 	str.w	r5, [r1, #-8]
    4a6c:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4a70:	69e0      	ldr	r0, [r4, #28]
    4a72:	6163      	str	r3, [r4, #20]
    4a74:	3914      	subs	r1, #20
    4a76:	f008 f9b5 	bl	cde4 <onoff_request>
    4a7a:	e789      	b.n	4990 <usbd_work_handler+0xf4>
	switch (pwr_evt->state) {
    4a7c:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4a7e:	f065 007f 	orn	r0, r5, #127	; 0x7f
    4a82:	b2c0      	uxtb	r0, r0
    4a84:	f7ff fc98 	bl	43b8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4a88:	7a03      	ldrb	r3, [r0, #8]
    4a8a:	b113      	cbz	r3, 4a92 <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4a8c:	7a40      	ldrb	r0, [r0, #9]
    4a8e:	f006 f89d 	bl	abcc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    4a92:	3501      	adds	r5, #1
    4a94:	2d08      	cmp	r5, #8
    4a96:	d1f2      	bne.n	4a7e <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
    4a98:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    4a9c:	b11b      	cbz	r3, 4aa6 <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4a9e:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    4aa2:	f006 f893 	bl	abcc <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    4aa6:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4aa8:	b2e8      	uxtb	r0, r5
    4aaa:	f7ff fc85 	bl	43b8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4aae:	7a03      	ldrb	r3, [r0, #8]
    4ab0:	b113      	cbz	r3, 4ab8 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4ab2:	7a40      	ldrb	r0, [r0, #9]
    4ab4:	f006 f88a 	bl	abcc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    4ab8:	3501      	adds	r5, #1
    4aba:	2d08      	cmp	r5, #8
    4abc:	d1f4      	bne.n	4aa8 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
    4abe:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4ac2:	b11b      	cbz	r3, 4acc <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4ac4:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    4ac8:	f006 f880 	bl	abcc <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    4acc:	2001      	movs	r0, #1
    4ace:	f005 fc0d 	bl	a2ec <nrfx_usbd_start>
		ctx->ready = true;
    4ad2:	2301      	movs	r3, #1
    4ad4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    4ad8:	6823      	ldr	r3, [r4, #0]
    4ada:	2b00      	cmp	r3, #0
    4adc:	f43f af58 	beq.w	4990 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    4ae0:	2100      	movs	r1, #0
    4ae2:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    4ae4:	4798      	blx	r3
    4ae6:	e753      	b.n	4990 <usbd_work_handler+0xf4>
		ctx->ready = false;
    4ae8:	2500      	movs	r5, #0
    4aea:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    4aee:	f006 f829 	bl	ab44 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    4af2:	f7ff fdc7 	bl	4684 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    4af6:	6823      	ldr	r3, [r4, #0]
    4af8:	2b00      	cmp	r3, #0
    4afa:	f43f af49 	beq.w	4990 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    4afe:	4629      	mov	r1, r5
    4b00:	2004      	movs	r0, #4
    4b02:	e7ef      	b.n	4ae4 <usbd_work_handler+0x248>
		if (dev_ready()) {
    4b04:	2a00      	cmp	r2, #0
    4b06:	f43f af43 	beq.w	4990 <usbd_work_handler+0xf4>
			nrfx_usbd_suspend();
    4b0a:	f005 fc17 	bl	a33c <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    4b0e:	6823      	ldr	r3, [r4, #0]
    4b10:	2b00      	cmp	r3, #0
    4b12:	f43f af3d 	beq.w	4990 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    4b16:	2100      	movs	r1, #0
    4b18:	2005      	movs	r0, #5
    4b1a:	e7e3      	b.n	4ae4 <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
    4b1c:	6823      	ldr	r3, [r4, #0]
    4b1e:	2b00      	cmp	r3, #0
    4b20:	f43f af36 	beq.w	4990 <usbd_work_handler+0xf4>
    4b24:	2a00      	cmp	r2, #0
    4b26:	f43f af33 	beq.w	4990 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4b2a:	2100      	movs	r1, #0
    4b2c:	2006      	movs	r0, #6
    4b2e:	e7d9      	b.n	4ae4 <usbd_work_handler+0x248>
    4b30:	20001378 	.word	0x20001378
    4b34:	200002e8 	.word	0x200002e8
    4b38:	00010080 	.word	0x00010080
    4b3c:	0000f050 	.word	0x0000f050
    4b40:	40027000 	.word	0x40027000
    4b44:	2000137c 	.word	0x2000137c
    4b48:	200013b0 	.word	0x200013b0
    4b4c:	0bad0000 	.word	0x0bad0000
    4b50:	000100a6 	.word	0x000100a6
    4b54:	20001398 	.word	0x20001398
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4b58:	f108 0510 	add.w	r5, r8, #16
    4b5c:	f04f 33ff 	mov.w	r3, #4294967295
    4b60:	f04f 32ff 	mov.w	r2, #4294967295
    4b64:	4628      	mov	r0, r5
    4b66:	f008 fde3 	bl	d730 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    4b6a:	f7ff fe63 	bl	4834 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    4b6e:	4628      	mov	r0, r5
    4b70:	f008 fde0 	bl	d734 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    4b74:	f858 3c28 	ldr.w	r3, [r8, #-40]
    4b78:	2b00      	cmp	r3, #0
    4b7a:	f43f af09 	beq.w	4990 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_RESET, NULL);
    4b7e:	2100      	movs	r1, #0
    4b80:	2001      	movs	r0, #1
    4b82:	e7af      	b.n	4ae4 <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
    4b84:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4b88:	b193      	cbz	r3, 4bb0 <usbd_work_handler+0x314>
		ep_ctx->read_pending = true;
    4b8a:	2501      	movs	r5, #1
    4b8c:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    4b90:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    4b94:	f7ff fc64 	bl	4460 <usbd_evt_alloc>
		if (!ev) {
    4b98:	b990      	cbnz	r0, 4bc0 <usbd_work_handler+0x324>
			LOG_ERR("Failed to alloc evt");
    4b9a:	4b23      	ldr	r3, [pc, #140]	; (4c28 <usbd_work_handler+0x38c>)
    4b9c:	617b      	str	r3, [r7, #20]
    4b9e:	2302      	movs	r3, #2
    4ba0:	4822      	ldr	r0, [pc, #136]	; (4c2c <usbd_work_handler+0x390>)
    4ba2:	613b      	str	r3, [r7, #16]
    4ba4:	f107 0210 	add.w	r2, r7, #16
    4ba8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4bac:	f008 fdbd 	bl	d72a <z_log_msg_static_create.constprop.0>
			if (ctx->status_cb) {
    4bb0:	f858 3c28 	ldr.w	r3, [r8, #-40]
    4bb4:	2b00      	cmp	r3, #0
    4bb6:	f43f aeeb 	beq.w	4990 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SOF, NULL);
    4bba:	2100      	movs	r1, #0
    4bbc:	200a      	movs	r0, #10
    4bbe:	e791      	b.n	4ae4 <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
    4bc0:	4a1b      	ldr	r2, [pc, #108]	; (4c30 <usbd_work_handler+0x394>)
		ev->evt_type = USBD_EVT_EP;
    4bc2:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4bc4:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    4bc6:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    4bc8:	f7ff fc2e 	bl	4428 <usbd_evt_put>
		usbd_work_schedule();
    4bcc:	f7ff fc24 	bl	4418 <usbd_work_schedule>
    4bd0:	e7ee      	b.n	4bb0 <usbd_work_handler+0x314>
				LOG_ERR("USBD event queue full!");
    4bd2:	4b18      	ldr	r3, [pc, #96]	; (4c34 <usbd_work_handler+0x398>)
    4bd4:	617b      	str	r3, [r7, #20]
    4bd6:	2302      	movs	r3, #2
    4bd8:	613b      	str	r3, [r7, #16]
    4bda:	f107 0210 	add.w	r2, r7, #16
    4bde:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4be2:	4812      	ldr	r0, [pc, #72]	; (4c2c <usbd_work_handler+0x390>)
    4be4:	f008 fda1 	bl	d72a <z_log_msg_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    4be8:	f009 fa59 	bl	e09e <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    4bec:	f005 ffaa 	bl	ab44 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4bf0:	f005 facc 	bl	a18c <nrfx_usbd_uninit>
	usbd_evt_flush();
    4bf4:	f7ff fc26 	bl	4444 <usbd_evt_flush>
	ret = eps_ctx_init();
    4bf8:	f7ff fe1c 	bl	4834 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4bfc:	f009 fa48 	bl	e090 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4c00:	480d      	ldr	r0, [pc, #52]	; (4c38 <usbd_work_handler+0x39c>)
    4c02:	f005 fbc7 	bl	a394 <nrfx_usbd_init>
}
    4c06:	e6c3      	b.n	4990 <usbd_work_handler+0xf4>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    4c08:	466d      	mov	r5, sp
    4c0a:	b088      	sub	sp, #32
    4c0c:	466a      	mov	r2, sp
    4c0e:	490b      	ldr	r1, [pc, #44]	; (4c3c <usbd_work_handler+0x3a0>)
    4c10:	4806      	ldr	r0, [pc, #24]	; (4c2c <usbd_work_handler+0x390>)
		switch (ev->evt_type) {
    4c12:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    4c16:	2303      	movs	r3, #3
    4c18:	f842 3f10 	str.w	r3, [r2, #16]!
    4c1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4c20:	f008 fd83 	bl	d72a <z_log_msg_static_create.constprop.0>
    4c24:	46ad      	mov	sp, r5
    4c26:	e6b3      	b.n	4990 <usbd_work_handler+0xf4>
    4c28:	000100cc 	.word	0x000100cc
    4c2c:	0000f050 	.word	0x0000f050
    4c30:	200015e4 	.word	0x200015e4
    4c34:	000100e0 	.word	0x000100e0
    4c38:	000046c5 	.word	0x000046c5
    4c3c:	000100f7 	.word	0x000100f7

00004c40 <usb_dc_attach>:
{
    4c40:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    4c42:	4d16      	ldr	r5, [pc, #88]	; (4c9c <usb_dc_attach+0x5c>)
    4c44:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    4c48:	bb2c      	cbnz	r4, 4c96 <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    4c4a:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4c4e:	f009 fbf2 	bl	e436 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    4c52:	4620      	mov	r0, r4
    4c54:	f000 fbc2 	bl	53dc <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4c58:	4622      	mov	r2, r4
    4c5a:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    4c5c:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4c5e:	2027      	movs	r0, #39	; 0x27
    4c60:	f7fe fdd2 	bl	3808 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    4c64:	f009 fa14 	bl	e090 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    4c68:	f7ff fde4 	bl	4834 <eps_ctx_init>
	if (ret == 0) {
    4c6c:	4604      	mov	r4, r0
    4c6e:	b910      	cbnz	r0, 4c76 <usb_dc_attach+0x36>
		ctx->attached = true;
    4c70:	2301      	movs	r3, #1
    4c72:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    4c76:	4b0a      	ldr	r3, [pc, #40]	; (4ca0 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    4c78:	681b      	ldr	r3, [r3, #0]
    4c7a:	b10b      	cbz	r3, 4c80 <usb_dc_attach+0x40>
		usbd_work_schedule();
    4c7c:	f7ff fbcc 	bl	4418 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    4c80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c84:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    4c88:	07db      	lsls	r3, r3, #31
    4c8a:	d502      	bpl.n	4c92 <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    4c8c:	2000      	movs	r0, #0
    4c8e:	f7ff fc23 	bl	44d8 <usb_dc_power_event_handler>
}
    4c92:	4620      	mov	r0, r4
    4c94:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    4c96:	2400      	movs	r4, #0
    4c98:	e7fb      	b.n	4c92 <usb_dc_attach+0x52>
    4c9a:	bf00      	nop
    4c9c:	20001378 	.word	0x20001378
    4ca0:	20000394 	.word	0x20000394

00004ca4 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    4ca4:	4b07      	ldr	r3, [pc, #28]	; (4cc4 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    4ca6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4caa:	b13a      	cbz	r2, 4cbc <usb_dc_set_address+0x18>
    4cac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    4cb0:	2b00      	cmp	r3, #0
    4cb2:	bf14      	ite	ne
    4cb4:	2000      	movne	r0, #0
    4cb6:	f06f 0012 	mvneq.w	r0, #18
    4cba:	4770      	bx	lr
    4cbc:	f06f 0012 	mvn.w	r0, #18
}
    4cc0:	4770      	bx	lr
    4cc2:	bf00      	nop
    4cc4:	20001378 	.word	0x20001378

00004cc8 <usb_dc_ep_check_cap>:
{
    4cc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4cca:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    4ccc:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    4cce:	791b      	ldrb	r3, [r3, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    4cd0:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    4cd4:	b97b      	cbnz	r3, 4cf6 <usb_dc_ep_check_cap+0x2e>
    4cd6:	b158      	cbz	r0, 4cf0 <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    4cd8:	4b10      	ldr	r3, [pc, #64]	; (4d1c <usb_dc_ep_check_cap+0x54>)
		LOG_ERR("invalid endpoint index/address");
    4cda:	9305      	str	r3, [sp, #20]
    4cdc:	2302      	movs	r3, #2
    4cde:	9304      	str	r3, [sp, #16]
    4ce0:	aa04      	add	r2, sp, #16
    4ce2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4ce6:	480e      	ldr	r0, [pc, #56]	; (4d20 <usb_dc_ep_check_cap+0x58>)
    4ce8:	f008 fd1f 	bl	d72a <z_log_msg_static_create.constprop.0>
		return -1;
    4cec:	f04f 30ff 	mov.w	r0, #4294967295
}
    4cf0:	b007      	add	sp, #28
    4cf2:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    4cf6:	2808      	cmp	r0, #8
    4cf8:	d901      	bls.n	4cfe <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    4cfa:	4b0a      	ldr	r3, [pc, #40]	; (4d24 <usb_dc_ep_check_cap+0x5c>)
    4cfc:	e7ed      	b.n	4cda <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    4cfe:	2b01      	cmp	r3, #1
    4d00:	d109      	bne.n	4d16 <usb_dc_ep_check_cap+0x4e>
    4d02:	0713      	lsls	r3, r2, #28
    4d04:	d407      	bmi.n	4d16 <usb_dc_ep_check_cap+0x4e>
		LOG_WRN("invalid endpoint type");
    4d06:	4b08      	ldr	r3, [pc, #32]	; (4d28 <usb_dc_ep_check_cap+0x60>)
    4d08:	9305      	str	r3, [sp, #20]
    4d0a:	2302      	movs	r3, #2
    4d0c:	9304      	str	r3, [sp, #16]
    4d0e:	aa04      	add	r2, sp, #16
    4d10:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    4d14:	e7e7      	b.n	4ce6 <usb_dc_ep_check_cap+0x1e>
	return 0;
    4d16:	2000      	movs	r0, #0
    4d18:	e7ea      	b.n	4cf0 <usb_dc_ep_check_cap+0x28>
    4d1a:	bf00      	nop
    4d1c:	0001010e 	.word	0x0001010e
    4d20:	0000f050 	.word	0x0000f050
    4d24:	0001012d 	.word	0x0001012d
    4d28:	0001014c 	.word	0x0001014c

00004d2c <usb_dc_ep_configure>:
{
    4d2c:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    4d2e:	4b16      	ldr	r3, [pc, #88]	; (4d88 <usb_dc_ep_configure+0x5c>)
	if (!dev_attached()) {
    4d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    4d34:	b087      	sub	sp, #28
    4d36:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4d38:	b31b      	cbz	r3, 4d82 <usb_dc_ep_configure+0x56>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    4d3a:	7805      	ldrb	r5, [r0, #0]
    4d3c:	4628      	mov	r0, r5
    4d3e:	f7ff fb3b 	bl	43b8 <endpoint_ctx>
	if (!ep_ctx) {
    4d42:	b1b0      	cbz	r0, 4d72 <usb_dc_ep_configure+0x46>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    4d44:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    4d46:	7923      	ldrb	r3, [r4, #4]
    4d48:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    4d4a:	8863      	ldrh	r3, [r4, #2]
    4d4c:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    4d4e:	7820      	ldrb	r0, [r4, #0]
    4d50:	8861      	ldrh	r1, [r4, #2]
    4d52:	f010 0f08 	tst.w	r0, #8
    4d56:	d110      	bne.n	4d7a <usb_dc_ep_configure+0x4e>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    4d58:	1e4b      	subs	r3, r1, #1
    4d5a:	420b      	tst	r3, r1
    4d5c:	d00d      	beq.n	4d7a <usb_dc_ep_configure+0x4e>
			LOG_ERR("EP max packet size must be a power of 2");
    4d5e:	4b0b      	ldr	r3, [pc, #44]	; (4d8c <usb_dc_ep_configure+0x60>)
    4d60:	9305      	str	r3, [sp, #20]
    4d62:	480b      	ldr	r0, [pc, #44]	; (4d90 <usb_dc_ep_configure+0x64>)
    4d64:	2302      	movs	r3, #2
    4d66:	aa04      	add	r2, sp, #16
    4d68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4d6c:	9304      	str	r3, [sp, #16]
    4d6e:	f008 fcdc 	bl	d72a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    4d72:	f06f 0015 	mvn.w	r0, #21
}
    4d76:	b007      	add	sp, #28
    4d78:	bd30      	pop	{r4, r5, pc}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    4d7a:	f009 faa9 	bl	e2d0 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    4d7e:	2000      	movs	r0, #0
    4d80:	e7f9      	b.n	4d76 <usb_dc_ep_configure+0x4a>
		return -ENODEV;
    4d82:	f06f 0012 	mvn.w	r0, #18
    4d86:	e7f6      	b.n	4d76 <usb_dc_ep_configure+0x4a>
    4d88:	20001378 	.word	0x20001378
    4d8c:	00010162 	.word	0x00010162
    4d90:	0000f050 	.word	0x0000f050

00004d94 <usb_dc_ep_set_stall>:
{
    4d94:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    4d96:	4b19      	ldr	r3, [pc, #100]	; (4dfc <usb_dc_ep_set_stall+0x68>)
	if (!dev_attached() || !dev_ready()) {
    4d98:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4d9c:	b087      	sub	sp, #28
    4d9e:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4da0:	b342      	cbz	r2, 4df4 <usb_dc_ep_set_stall+0x60>
    4da2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4da6:	b32b      	cbz	r3, 4df4 <usb_dc_ep_set_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
    4da8:	f7ff fb06 	bl	43b8 <endpoint_ctx>
	if (!ep_ctx) {
    4dac:	4604      	mov	r4, r0
    4dae:	b918      	cbnz	r0, 4db8 <usb_dc_ep_set_stall+0x24>
		return -EINVAL;
    4db0:	f06f 0015 	mvn.w	r0, #21
}
    4db4:	b007      	add	sp, #28
    4db6:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    4db8:	7a83      	ldrb	r3, [r0, #10]
    4dba:	2b01      	cmp	r3, #1
    4dbc:	d00f      	beq.n	4dde <usb_dc_ep_set_stall+0x4a>
    4dbe:	d907      	bls.n	4dd0 <usb_dc_ep_set_stall+0x3c>
    4dc0:	3b02      	subs	r3, #2
    4dc2:	2b01      	cmp	r3, #1
    4dc4:	d907      	bls.n	4dd6 <usb_dc_ep_set_stall+0x42>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4dc6:	6963      	ldr	r3, [r4, #20]
    4dc8:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    4dca:	2000      	movs	r0, #0
    4dcc:	60e0      	str	r0, [r4, #12]
	return 0;
    4dce:	e7f1      	b.n	4db4 <usb_dc_ep_set_stall+0x20>
		nrfx_usbd_setup_stall();
    4dd0:	f005 fd54 	bl	a87c <nrfx_usbd_setup_stall>
		break;
    4dd4:	e7f7      	b.n	4dc6 <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    4dd6:	4628      	mov	r0, r5
    4dd8:	f005 fcc4 	bl	a764 <nrfx_usbd_ep_stall>
		break;
    4ddc:	e7f3      	b.n	4dc6 <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
    4dde:	4b08      	ldr	r3, [pc, #32]	; (4e00 <usb_dc_ep_set_stall+0x6c>)
    4de0:	9305      	str	r3, [sp, #20]
    4de2:	4808      	ldr	r0, [pc, #32]	; (4e04 <usb_dc_ep_set_stall+0x70>)
    4de4:	2302      	movs	r3, #2
    4de6:	aa04      	add	r2, sp, #16
    4de8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4dec:	9304      	str	r3, [sp, #16]
    4dee:	f008 fc9c 	bl	d72a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    4df2:	e7dd      	b.n	4db0 <usb_dc_ep_set_stall+0x1c>
		return -ENODEV;
    4df4:	f06f 0012 	mvn.w	r0, #18
    4df8:	e7dc      	b.n	4db4 <usb_dc_ep_set_stall+0x20>
    4dfa:	bf00      	nop
    4dfc:	20001378 	.word	0x20001378
    4e00:	0001018a 	.word	0x0001018a
    4e04:	0000f050 	.word	0x0000f050

00004e08 <usb_dc_ep_clear_stall>:
{
    4e08:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4e0a:	4b0e      	ldr	r3, [pc, #56]	; (4e44 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    4e0c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4e10:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4e12:	b182      	cbz	r2, 4e36 <usb_dc_ep_clear_stall+0x2e>
    4e14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4e18:	b16b      	cbz	r3, 4e36 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    4e1a:	f7ff facd 	bl	43b8 <endpoint_ctx>
	if (!ep_ctx) {
    4e1e:	b168      	cbz	r0, 4e3c <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    4e20:	f015 0408 	ands.w	r4, r5, #8
    4e24:	d10a      	bne.n	4e3c <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4e26:	4628      	mov	r0, r5
    4e28:	f005 fcbe 	bl	a7a8 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4e2c:	4628      	mov	r0, r5
    4e2e:	f005 ff21 	bl	ac74 <nrfx_usbd_ep_stall_clear>
	return 0;
    4e32:	4620      	mov	r0, r4
}
    4e34:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4e36:	f06f 0012 	mvn.w	r0, #18
    4e3a:	e7fb      	b.n	4e34 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    4e3c:	f06f 0015 	mvn.w	r0, #21
    4e40:	e7f8      	b.n	4e34 <usb_dc_ep_clear_stall+0x2c>
    4e42:	bf00      	nop
    4e44:	20001378 	.word	0x20001378

00004e48 <usb_dc_ep_is_stalled>:
{
    4e48:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4e4a:	4b0c      	ldr	r3, [pc, #48]	; (4e7c <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    4e4c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4e50:	4605      	mov	r5, r0
    4e52:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    4e54:	b162      	cbz	r2, 4e70 <usb_dc_ep_is_stalled+0x28>
    4e56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4e5a:	b14b      	cbz	r3, 4e70 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    4e5c:	f7ff faac 	bl	43b8 <endpoint_ctx>
	if (!ep_ctx) {
    4e60:	b148      	cbz	r0, 4e76 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    4e62:	b144      	cbz	r4, 4e76 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    4e64:	4628      	mov	r0, r5
    4e66:	f005 fc85 	bl	a774 <nrfx_usbd_ep_stall_check>
    4e6a:	7020      	strb	r0, [r4, #0]
	return 0;
    4e6c:	2000      	movs	r0, #0
}
    4e6e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4e70:	f06f 0012 	mvn.w	r0, #18
    4e74:	e7fb      	b.n	4e6e <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    4e76:	f06f 0015 	mvn.w	r0, #21
    4e7a:	e7f8      	b.n	4e6e <usb_dc_ep_is_stalled+0x26>
    4e7c:	20001378 	.word	0x20001378

00004e80 <usb_dc_ep_enable>:
{
    4e80:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    4e82:	4e13      	ldr	r6, [pc, #76]	; (4ed0 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    4e84:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    4e88:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4e8a:	b1c3      	cbz	r3, 4ebe <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    4e8c:	f7ff fa94 	bl	43b8 <endpoint_ctx>
	if (!ep_ctx) {
    4e90:	4605      	mov	r5, r0
    4e92:	b1b8      	cbz	r0, 4ec4 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4e94:	0723      	lsls	r3, r4, #28
    4e96:	d405      	bmi.n	4ea4 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4e98:	4620      	mov	r0, r4
    4e9a:	f005 fc85 	bl	a7a8 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4e9e:	4620      	mov	r0, r4
    4ea0:	f005 fee8 	bl	ac74 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4ea4:	7a2b      	ldrb	r3, [r5, #8]
    4ea6:	b983      	cbnz	r3, 4eca <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    4ea8:	2301      	movs	r3, #1
    4eaa:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    4eac:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    4eb0:	b90b      	cbnz	r3, 4eb6 <usb_dc_ep_enable+0x36>
	return 0;
    4eb2:	2000      	movs	r0, #0
}
    4eb4:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    4eb6:	4620      	mov	r0, r4
    4eb8:	f005 fe88 	bl	abcc <nrfx_usbd_ep_enable>
    4ebc:	e7f9      	b.n	4eb2 <usb_dc_ep_enable+0x32>
		return -ENODEV;
    4ebe:	f06f 0012 	mvn.w	r0, #18
    4ec2:	e7f7      	b.n	4eb4 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    4ec4:	f06f 0015 	mvn.w	r0, #21
    4ec8:	e7f4      	b.n	4eb4 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    4eca:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4ece:	e7f1      	b.n	4eb4 <usb_dc_ep_enable+0x34>
    4ed0:	20001378 	.word	0x20001378

00004ed4 <usb_dc_ep_write>:
{
    4ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    4ed8:	f8df 9124 	ldr.w	r9, [pc, #292]	; 5000 <usb_dc_ep_write+0x12c>
{
    4edc:	b084      	sub	sp, #16
    4ede:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    4ee0:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
    4ee4:	af00      	add	r7, sp, #0
    4ee6:	4680      	mov	r8, r0
    4ee8:	468a      	mov	sl, r1
    4eea:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    4eec:	2b00      	cmp	r3, #0
    4eee:	f000 8083 	beq.w	4ff8 <usb_dc_ep_write+0x124>
    4ef2:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    4ef6:	2b00      	cmp	r3, #0
    4ef8:	d07e      	beq.n	4ff8 <usb_dc_ep_write+0x124>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    4efa:	f010 0f80 	tst.w	r0, #128	; 0x80
    4efe:	d014      	beq.n	4f2a <usb_dc_ep_write+0x56>
	ep_ctx = endpoint_ctx(ep);
    4f00:	f7ff fa5a 	bl	43b8 <endpoint_ctx>
	if (!ep_ctx) {
    4f04:	4604      	mov	r4, r0
    4f06:	b180      	cbz	r0, 4f2a <usb_dc_ep_write+0x56>
	if (!ep_ctx->cfg.en) {
    4f08:	7a03      	ldrb	r3, [r0, #8]
    4f0a:	b9ab      	cbnz	r3, 4f38 <usb_dc_ep_write+0x64>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    4f0c:	466c      	mov	r4, sp
    4f0e:	b088      	sub	sp, #32
    4f10:	466a      	mov	r2, sp
    4f12:	4b3c      	ldr	r3, [pc, #240]	; (5004 <usb_dc_ep_write+0x130>)
    4f14:	483c      	ldr	r0, [pc, #240]	; (5008 <usb_dc_ep_write+0x134>)
    4f16:	e9c2 3805 	strd	r3, r8, [r2, #20]
    4f1a:	2303      	movs	r3, #3
    4f1c:	f842 3f10 	str.w	r3, [r2, #16]!
    4f20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4f24:	f008 fc01 	bl	d72a <z_log_msg_static_create.constprop.0>
    4f28:	46a5      	mov	sp, r4
		return -EINVAL;
    4f2a:	f06f 0415 	mvn.w	r4, #21
}
    4f2e:	4620      	mov	r0, r4
    4f30:	3710      	adds	r7, #16
    4f32:	46bd      	mov	sp, r7
    4f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4f38:	f04f 33ff 	mov.w	r3, #4294967295
    4f3c:	f04f 32ff 	mov.w	r2, #4294967295
    4f40:	f109 0038 	add.w	r0, r9, #56	; 0x38
    4f44:	f008 fbf4 	bl	d730 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    4f48:	7fa3      	ldrb	r3, [r4, #30]
    4f4a:	b133      	cbz	r3, 4f5a <usb_dc_ep_write+0x86>
		k_mutex_unlock(&ctx->drv_lock);
    4f4c:	f109 0038 	add.w	r0, r9, #56	; 0x38
    4f50:	f008 fbf0 	bl	d734 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    4f54:	f06f 040a 	mvn.w	r4, #10
    4f58:	e7e9      	b.n	4f2e <usb_dc_ep_write+0x5a>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4f5a:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    4f5c:	b355      	cbz	r5, 4fb4 <usb_dc_ep_write+0xe0>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d038      	beq.n	4fd4 <usb_dc_ep_write+0x100>
	ep_ctx->write_in_progress = true;
    4f62:	2301      	movs	r3, #1
    4f64:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4f66:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4f6a:	1d39      	adds	r1, r7, #4
    4f6c:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4f6e:	e9c7 a501 	strd	sl, r5, [r7, #4]
    4f72:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4f76:	f005 fa4f 	bl	a418 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    4f7a:	4b24      	ldr	r3, [pc, #144]	; (500c <usb_dc_ep_write+0x138>)
    4f7c:	4298      	cmp	r0, r3
    4f7e:	d037      	beq.n	4ff0 <usb_dc_ep_write+0x11c>
		ep_ctx->write_in_progress = false;
    4f80:	f884 901e 	strb.w	r9, [r4, #30]
		if (ret_bytes) {
    4f84:	b10e      	cbz	r6, 4f8a <usb_dc_ep_write+0xb6>
			*ret_bytes = 0;
    4f86:	f8c6 9000 	str.w	r9, [r6]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    4f8a:	466c      	mov	r4, sp
    4f8c:	b088      	sub	sp, #32
    4f8e:	466a      	mov	r2, sp
    4f90:	4b1f      	ldr	r3, [pc, #124]	; (5010 <usb_dc_ep_write+0x13c>)
    4f92:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4f96:	2303      	movs	r3, #3
    4f98:	f842 3f10 	str.w	r3, [r2, #16]!
    4f9c:	481a      	ldr	r0, [pc, #104]	; (5008 <usb_dc_ep_write+0x134>)
    4f9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4fa2:	f008 fbc2 	bl	d72a <z_log_msg_static_create.constprop.0>
    4fa6:	46a5      	mov	sp, r4
		result = -EIO;
    4fa8:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    4fac:	4819      	ldr	r0, [pc, #100]	; (5014 <usb_dc_ep_write+0x140>)
    4fae:	f008 fbc1 	bl	d734 <k_mutex_unlock.isra.0>
	return result;
    4fb2:	e7bc      	b.n	4f2e <usb_dc_ep_write+0x5a>
	if (!data_len && ep_ctx->trans_zlp) {
    4fb4:	7fe2      	ldrb	r2, [r4, #31]
    4fb6:	b102      	cbz	r2, 4fba <usb_dc_ep_write+0xe6>
		ep_ctx->trans_zlp = false;
    4fb8:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d1d1      	bne.n	4f62 <usb_dc_ep_write+0x8e>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    4fbe:	f005 fc65 	bl	a88c <nrfx_usbd_last_setup_dir_get>
    4fc2:	4580      	cmp	r8, r0
    4fc4:	d0cd      	beq.n	4f62 <usb_dc_ep_write+0x8e>
		nrfx_usbd_setup_clear();
    4fc6:	f005 fc51 	bl	a86c <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    4fca:	4812      	ldr	r0, [pc, #72]	; (5014 <usb_dc_ep_write+0x140>)
    4fcc:	f008 fbb2 	bl	d734 <k_mutex_unlock.isra.0>
		return 0;
    4fd0:	2400      	movs	r4, #0
    4fd2:	e7ac      	b.n	4f2e <usb_dc_ep_write+0x5a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4fd4:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    4fd8:	429d      	cmp	r5, r3
    4fda:	d2f0      	bcs.n	4fbe <usb_dc_ep_write+0xea>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    4fdc:	6862      	ldr	r2, [r4, #4]
    4fde:	fbb5 f3f2 	udiv	r3, r5, r2
    4fe2:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	d1e9      	bne.n	4fbe <usb_dc_ep_write+0xea>
			ep_ctx->trans_zlp = true;
    4fea:	2301      	movs	r3, #1
    4fec:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    4fee:	e7e6      	b.n	4fbe <usb_dc_ep_write+0xea>
		if (ret_bytes) {
    4ff0:	b106      	cbz	r6, 4ff4 <usb_dc_ep_write+0x120>
			*ret_bytes = data_len;
    4ff2:	6035      	str	r5, [r6, #0]
	int result = 0;
    4ff4:	2400      	movs	r4, #0
    4ff6:	e7d9      	b.n	4fac <usb_dc_ep_write+0xd8>
		return -ENODEV;
    4ff8:	f06f 0412 	mvn.w	r4, #18
    4ffc:	e797      	b.n	4f2e <usb_dc_ep_write+0x5a>
    4ffe:	bf00      	nop
    5000:	20001378 	.word	0x20001378
    5004:	000101ac 	.word	0x000101ac
    5008:	0000f050 	.word	0x0000f050
    500c:	0bad0000 	.word	0x0bad0000
    5010:	000101cb 	.word	0x000101cb
    5014:	200013b0 	.word	0x200013b0

00005018 <usb_dc_ep_read_wait>:
{
    5018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    501c:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    501e:	4b2d      	ldr	r3, [pc, #180]	; (50d4 <usb_dc_ep_read_wait+0xbc>)
{
    5020:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
    5022:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    5026:	af00      	add	r7, sp, #0
    5028:	4681      	mov	r9, r0
    502a:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    502c:	2a00      	cmp	r2, #0
    502e:	d04d      	beq.n	50cc <usb_dc_ep_read_wait+0xb4>
    5030:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5034:	2b00      	cmp	r3, #0
    5036:	d049      	beq.n	50cc <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5038:	f010 0f80 	tst.w	r0, #128	; 0x80
    503c:	d119      	bne.n	5072 <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
    503e:	b911      	cbnz	r1, 5046 <usb_dc_ep_read_wait+0x2e>
    5040:	f1b8 0f00 	cmp.w	r8, #0
    5044:	d115      	bne.n	5072 <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
    5046:	4648      	mov	r0, r9
    5048:	f7ff f9b6 	bl	43b8 <endpoint_ctx>
	if (!ep_ctx) {
    504c:	4604      	mov	r4, r0
    504e:	b180      	cbz	r0, 5072 <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
    5050:	7a03      	ldrb	r3, [r0, #8]
    5052:	b98b      	cbnz	r3, 5078 <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5054:	466c      	mov	r4, sp
    5056:	b088      	sub	sp, #32
    5058:	466a      	mov	r2, sp
    505a:	4b1f      	ldr	r3, [pc, #124]	; (50d8 <usb_dc_ep_read_wait+0xc0>)
    505c:	481f      	ldr	r0, [pc, #124]	; (50dc <usb_dc_ep_read_wait+0xc4>)
    505e:	e9c2 3905 	strd	r3, r9, [r2, #20]
    5062:	2303      	movs	r3, #3
    5064:	f842 3f10 	str.w	r3, [r2, #16]!
    5068:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    506c:	f008 fb5d 	bl	d72a <z_log_msg_static_create.constprop.0>
    5070:	46a5      	mov	sp, r4
		return -EINVAL;
    5072:	f06f 0015 	mvn.w	r0, #21
    5076:	e015      	b.n	50a4 <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5078:	f04f 33ff 	mov.w	r3, #4294967295
    507c:	4818      	ldr	r0, [pc, #96]	; (50e0 <usb_dc_ep_read_wait+0xc8>)
    507e:	f04f 32ff 	mov.w	r2, #4294967295
    5082:	f008 fb55 	bl	d730 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    5086:	68e3      	ldr	r3, [r4, #12]
    5088:	4598      	cmp	r8, r3
    508a:	46c1      	mov	r9, r8
    508c:	bf28      	it	cs
    508e:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
    5090:	b95e      	cbnz	r6, 50aa <usb_dc_ep_read_wait+0x92>
    5092:	f1b8 0f00 	cmp.w	r8, #0
    5096:	d108      	bne.n	50aa <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
    5098:	b105      	cbz	r5, 509c <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
    509a:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    509c:	4810      	ldr	r0, [pc, #64]	; (50e0 <usb_dc_ep_read_wait+0xc8>)
    509e:	f008 fb49 	bl	d734 <k_mutex_unlock.isra.0>
		return 0;
    50a2:	2000      	movs	r0, #0
}
    50a4:	46bd      	mov	sp, r7
    50a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    50aa:	69a1      	ldr	r1, [r4, #24]
    50ac:	464a      	mov	r2, r9
    50ae:	4630      	mov	r0, r6
    50b0:	f008 faff 	bl	d6b2 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    50b4:	69a3      	ldr	r3, [r4, #24]
    50b6:	444b      	add	r3, r9
    50b8:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    50ba:	68e3      	ldr	r3, [r4, #12]
    50bc:	eba3 0309 	sub.w	r3, r3, r9
    50c0:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    50c2:	2d00      	cmp	r5, #0
    50c4:	d0ea      	beq.n	509c <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
    50c6:	f8c5 9000 	str.w	r9, [r5]
    50ca:	e7e7      	b.n	509c <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
    50cc:	f06f 0012 	mvn.w	r0, #18
    50d0:	e7e8      	b.n	50a4 <usb_dc_ep_read_wait+0x8c>
    50d2:	bf00      	nop
    50d4:	20001378 	.word	0x20001378
    50d8:	000101ac 	.word	0x000101ac
    50dc:	0000f050 	.word	0x0000f050
    50e0:	200013b0 	.word	0x200013b0

000050e4 <usb_dc_ep_read_continue>:
{
    50e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    50e6:	4d27      	ldr	r5, [pc, #156]	; (5184 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    50e8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    50ec:	af00      	add	r7, sp, #0
    50ee:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
    50f0:	2b00      	cmp	r3, #0
    50f2:	d044      	beq.n	517e <usb_dc_ep_read_continue+0x9a>
    50f4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    50f8:	2b00      	cmp	r3, #0
    50fa:	d040      	beq.n	517e <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    50fc:	0603      	lsls	r3, r0, #24
    50fe:	d414      	bmi.n	512a <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    5100:	f7ff f95a 	bl	43b8 <endpoint_ctx>
	if (!ep_ctx) {
    5104:	4604      	mov	r4, r0
    5106:	b180      	cbz	r0, 512a <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    5108:	7a03      	ldrb	r3, [r0, #8]
    510a:	b993      	cbnz	r3, 5132 <usb_dc_ep_read_continue+0x4e>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    510c:	466c      	mov	r4, sp
    510e:	b088      	sub	sp, #32
    5110:	466a      	mov	r2, sp
    5112:	4b1d      	ldr	r3, [pc, #116]	; (5188 <usb_dc_ep_read_continue+0xa4>)
    5114:	481d      	ldr	r0, [pc, #116]	; (518c <usb_dc_ep_read_continue+0xa8>)
    5116:	e9c2 3605 	strd	r3, r6, [r2, #20]
    511a:	2303      	movs	r3, #3
    511c:	f842 3f10 	str.w	r3, [r2, #16]!
    5120:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5124:	f008 fb01 	bl	d72a <z_log_msg_static_create.constprop.0>
    5128:	46a5      	mov	sp, r4
		return -EINVAL;
    512a:	f06f 0015 	mvn.w	r0, #21
}
    512e:	46bd      	mov	sp, r7
    5130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5132:	f04f 33ff 	mov.w	r3, #4294967295
    5136:	f04f 32ff 	mov.w	r2, #4294967295
    513a:	f105 0038 	add.w	r0, r5, #56	; 0x38
    513e:	f008 faf7 	bl	d730 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    5142:	68e3      	ldr	r3, [r4, #12]
    5144:	b9b3      	cbnz	r3, 5174 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    5146:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    5148:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    514a:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    514c:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    514e:	7f63      	ldrb	r3, [r4, #29]
    5150:	b183      	cbz	r3, 5174 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    5152:	f7ff f985 	bl	4460 <usbd_evt_alloc>
			if (!ev) {
    5156:	b930      	cbnz	r0, 5166 <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    5158:	f105 0038 	add.w	r0, r5, #56	; 0x38
    515c:	f008 faea 	bl	d734 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    5160:	f06f 000b 	mvn.w	r0, #11
    5164:	e7e3      	b.n	512e <usb_dc_ep_read_continue+0x4a>
			ev->evt_type = USBD_EVT_EP;
    5166:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    5168:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    516a:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    516c:	f7ff f95c 	bl	4428 <usbd_evt_put>
			usbd_work_schedule();
    5170:	f7ff f952 	bl	4418 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    5174:	4806      	ldr	r0, [pc, #24]	; (5190 <usb_dc_ep_read_continue+0xac>)
    5176:	f008 fadd 	bl	d734 <k_mutex_unlock.isra.0>
	return 0;
    517a:	2000      	movs	r0, #0
    517c:	e7d7      	b.n	512e <usb_dc_ep_read_continue+0x4a>
		return -ENODEV;
    517e:	f06f 0012 	mvn.w	r0, #18
    5182:	e7d4      	b.n	512e <usb_dc_ep_read_continue+0x4a>
    5184:	20001378 	.word	0x20001378
    5188:	000101ac 	.word	0x000101ac
    518c:	0000f050 	.word	0x0000f050
    5190:	200013b0 	.word	0x200013b0

00005194 <usb_dc_ep_set_callback>:
{
    5194:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    5196:	4b08      	ldr	r3, [pc, #32]	; (51b8 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    5198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    519c:	460c      	mov	r4, r1
	if (!dev_attached()) {
    519e:	b12b      	cbz	r3, 51ac <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    51a0:	f7ff f90a 	bl	43b8 <endpoint_ctx>
	if (!ep_ctx) {
    51a4:	b128      	cbz	r0, 51b2 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    51a6:	6004      	str	r4, [r0, #0]
	return 0;
    51a8:	2000      	movs	r0, #0
}
    51aa:	bd10      	pop	{r4, pc}
		return -ENODEV;
    51ac:	f06f 0012 	mvn.w	r0, #18
    51b0:	e7fb      	b.n	51aa <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    51b2:	f06f 0015 	mvn.w	r0, #21
    51b6:	e7f8      	b.n	51aa <usb_dc_ep_set_callback+0x16>
    51b8:	20001378 	.word	0x20001378

000051bc <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    51bc:	4b01      	ldr	r3, [pc, #4]	; (51c4 <usb_dc_set_status_callback+0x8>)
    51be:	6018      	str	r0, [r3, #0]
}
    51c0:	4770      	bx	lr
    51c2:	bf00      	nop
    51c4:	20001378 	.word	0x20001378

000051c8 <usb_dc_ep_mps>:
{
    51c8:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    51ca:	4b07      	ldr	r3, [pc, #28]	; (51e8 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    51cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    51d0:	b123      	cbz	r3, 51dc <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    51d2:	f7ff f8f1 	bl	43b8 <endpoint_ctx>
	if (!ep_ctx) {
    51d6:	b120      	cbz	r0, 51e2 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    51d8:	6840      	ldr	r0, [r0, #4]
}
    51da:	bd08      	pop	{r3, pc}
		return -ENODEV;
    51dc:	f06f 0012 	mvn.w	r0, #18
    51e0:	e7fb      	b.n	51da <usb_dc_ep_mps+0x12>
		return -EINVAL;
    51e2:	f06f 0015 	mvn.w	r0, #21
    51e6:	e7f8      	b.n	51da <usb_dc_ep_mps+0x12>
    51e8:	20001378 	.word	0x20001378

000051ec <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    51ec:	4b08      	ldr	r3, [pc, #32]	; (5210 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    51ee:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    51f0:	1ac3      	subs	r3, r0, r3
{
    51f2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    51f4:	4907      	ldr	r1, [pc, #28]	; (5214 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    51f6:	109b      	asrs	r3, r3, #2
{
    51f8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    51fa:	4359      	muls	r1, r3
    51fc:	4806      	ldr	r0, [pc, #24]	; (5218 <onoff_stop+0x2c>)
    51fe:	2240      	movs	r2, #64	; 0x40
    5200:	f008 fade 	bl	d7c0 <stop>
	notify(mgr, res);
    5204:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5206:	4601      	mov	r1, r0
	notify(mgr, res);
    5208:	4620      	mov	r0, r4
}
    520a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    520e:	4718      	bx	r3
    5210:	20001c1c 	.word	0x20001c1c
    5214:	b6db6db7 	.word	0xb6db6db7
    5218:	0000ed24 	.word	0x0000ed24

0000521c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    521c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    521e:	4c0c      	ldr	r4, [pc, #48]	; (5250 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5220:	4a0c      	ldr	r2, [pc, #48]	; (5254 <onoff_start+0x38>)
    5222:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    5224:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5226:	9300      	str	r3, [sp, #0]
{
    5228:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    522a:	460b      	mov	r3, r1
    522c:	490a      	ldr	r1, [pc, #40]	; (5258 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    522e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5230:	4361      	muls	r1, r4
{
    5232:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5234:	4809      	ldr	r0, [pc, #36]	; (525c <onoff_start+0x40>)
    5236:	f008 faef 	bl	d818 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    523a:	1e01      	subs	r1, r0, #0
    523c:	da05      	bge.n	524a <onoff_start+0x2e>
		notify(mgr, err);
    523e:	4630      	mov	r0, r6
    5240:	462b      	mov	r3, r5
	}
}
    5242:	b002      	add	sp, #8
    5244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    5248:	4718      	bx	r3
}
    524a:	b002      	add	sp, #8
    524c:	bd70      	pop	{r4, r5, r6, pc}
    524e:	bf00      	nop
    5250:	20001c1c 	.word	0x20001c1c
    5254:	0000d883 	.word	0x0000d883
    5258:	b6db6db7 	.word	0xb6db6db7
    525c:	0000ed24 	.word	0x0000ed24

00005260 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5260:	2200      	movs	r2, #0
{
    5262:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5264:	2101      	movs	r1, #1
{
    5266:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5268:	4610      	mov	r0, r2
    526a:	f7fe facd 	bl	3808 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    526e:	480f      	ldr	r0, [pc, #60]	; (52ac <clk_init+0x4c>)
    5270:	f003 fd66 	bl	8d40 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5274:	4b0e      	ldr	r3, [pc, #56]	; (52b0 <clk_init+0x50>)
    5276:	4298      	cmp	r0, r3
    5278:	d115      	bne.n	52a6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    527a:	f003 fd71 	bl	8d60 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    527e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5280:	490c      	ldr	r1, [pc, #48]	; (52b4 <clk_init+0x54>)
    5282:	4630      	mov	r0, r6
    5284:	f007 fd9b 	bl	cdbe <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5288:	2800      	cmp	r0, #0
    528a:	db0b      	blt.n	52a4 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    528c:	2501      	movs	r5, #1
    528e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    5290:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5292:	4908      	ldr	r1, [pc, #32]	; (52b4 <clk_init+0x54>)
    5294:	f104 001c 	add.w	r0, r4, #28
    5298:	f007 fd91 	bl	cdbe <onoff_manager_init>
		if (err < 0) {
    529c:	2800      	cmp	r0, #0
    529e:	db01      	blt.n	52a4 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    52a0:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    52a2:	2000      	movs	r0, #0
}
    52a4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    52a6:	f06f 0004 	mvn.w	r0, #4
    52aa:	e7fb      	b.n	52a4 <clk_init+0x44>
    52ac:	000052ed 	.word	0x000052ed
    52b0:	0bad0000 	.word	0x0bad0000
    52b4:	0000f188 	.word	0x0000f188

000052b8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    52b8:	b570      	push	{r4, r5, r6, lr}
    52ba:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    52bc:	230c      	movs	r3, #12
    52be:	4809      	ldr	r0, [pc, #36]	; (52e4 <clkstarted_handle.constprop.0+0x2c>)
    52c0:	434b      	muls	r3, r1
    52c2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    52c4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    52c8:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    52ca:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    52cc:	4418      	add	r0, r3
	sub_data->cb = NULL;
    52ce:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    52d0:	f008 fa63 	bl	d79a <set_on_state>
	if (callback) {
    52d4:	b12d      	cbz	r5, 52e2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    52d6:	4632      	mov	r2, r6
    52d8:	462b      	mov	r3, r5
    52da:	4803      	ldr	r0, [pc, #12]	; (52e8 <clkstarted_handle.constprop.0+0x30>)
}
    52dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    52e0:	4718      	bx	r3
}
    52e2:	bd70      	pop	{r4, r5, r6, pc}
    52e4:	20001c1c 	.word	0x20001c1c
    52e8:	0000ed24 	.word	0x0000ed24

000052ec <clock_event_handler>:
	switch (event) {
    52ec:	b110      	cbz	r0, 52f4 <clock_event_handler+0x8>
    52ee:	2801      	cmp	r0, #1
    52f0:	d004      	beq.n	52fc <clock_event_handler+0x10>
    52f2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    52f4:	4b03      	ldr	r3, [pc, #12]	; (5304 <clock_event_handler+0x18>)
    52f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    52f8:	075b      	lsls	r3, r3, #29
    52fa:	d101      	bne.n	5300 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    52fc:	f7ff bfdc 	b.w	52b8 <clkstarted_handle.constprop.0>
}
    5300:	4770      	bx	lr
    5302:	bf00      	nop
    5304:	20001c1c 	.word	0x20001c1c

00005308 <generic_hfclk_start>:
{
    5308:	b508      	push	{r3, lr}
	__asm__ volatile(
    530a:	f04f 0320 	mov.w	r3, #32
    530e:	f3ef 8111 	mrs	r1, BASEPRI
    5312:	f383 8812 	msr	BASEPRI_MAX, r3
    5316:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    531a:	4a12      	ldr	r2, [pc, #72]	; (5364 <generic_hfclk_start+0x5c>)
    531c:	6813      	ldr	r3, [r2, #0]
    531e:	f043 0002 	orr.w	r0, r3, #2
    5322:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5324:	07da      	lsls	r2, r3, #31
    5326:	d408      	bmi.n	533a <generic_hfclk_start+0x32>
	__asm__ volatile(
    5328:	f381 8811 	msr	BASEPRI, r1
    532c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5330:	2001      	movs	r0, #1
}
    5332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5336:	f008 be09 	b.w	df4c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    533a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    533e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5342:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5346:	07d3      	lsls	r3, r2, #31
    5348:	d5ee      	bpl.n	5328 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    534a:	4807      	ldr	r0, [pc, #28]	; (5368 <generic_hfclk_start+0x60>)
    534c:	f008 fa25 	bl	d79a <set_on_state>
    5350:	f381 8811 	msr	BASEPRI, r1
    5354:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    5358:	2000      	movs	r0, #0
}
    535a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    535e:	f7ff bfab 	b.w	52b8 <clkstarted_handle.constprop.0>
    5362:	bf00      	nop
    5364:	20001c6c 	.word	0x20001c6c
    5368:	20001c5c 	.word	0x20001c5c

0000536c <api_blocking_start>:
{
    536c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    536e:	2200      	movs	r2, #0
    5370:	2301      	movs	r3, #1
    5372:	e9cd 2302 	strd	r2, r3, [sp, #8]
    5376:	ab04      	add	r3, sp, #16
    5378:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    537c:	4a09      	ldr	r2, [pc, #36]	; (53a4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    537e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5382:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5384:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5388:	f008 fa74 	bl	d874 <api_start>
	if (err < 0) {
    538c:	2800      	cmp	r0, #0
    538e:	db05      	blt.n	539c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    5390:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5394:	2300      	movs	r3, #0
    5396:	4668      	mov	r0, sp
    5398:	f006 f8a4 	bl	b4e4 <z_impl_k_sem_take>
}
    539c:	b007      	add	sp, #28
    539e:	f85d fb04 	ldr.w	pc, [sp], #4
    53a2:	bf00      	nop
    53a4:	0000d8a1 	.word	0x0000d8a1

000053a8 <generic_hfclk_stop>:
{
    53a8:	b510      	push	{r4, lr}
	__asm__ volatile(
    53aa:	f04f 0320 	mov.w	r3, #32
    53ae:	f3ef 8411 	mrs	r4, BASEPRI
    53b2:	f383 8812 	msr	BASEPRI_MAX, r3
    53b6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    53ba:	4a07      	ldr	r2, [pc, #28]	; (53d8 <generic_hfclk_stop+0x30>)
    53bc:	6813      	ldr	r3, [r2, #0]
    53be:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    53c2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    53c4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    53c6:	d402      	bmi.n	53ce <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    53c8:	2001      	movs	r0, #1
    53ca:	f008 fdfb 	bl	dfc4 <nrfx_clock_stop>
	__asm__ volatile(
    53ce:	f384 8811 	msr	BASEPRI, r4
    53d2:	f3bf 8f6f 	isb	sy
}
    53d6:	bd10      	pop	{r4, pc}
    53d8:	20001c6c 	.word	0x20001c6c

000053dc <z_nrf_clock_control_get_onoff>:
}
    53dc:	4a02      	ldr	r2, [pc, #8]	; (53e8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    53de:	b2c3      	uxtb	r3, r0
}
    53e0:	201c      	movs	r0, #28
    53e2:	fb03 2000 	mla	r0, r3, r0, r2
    53e6:	4770      	bx	lr
    53e8:	20001c1c 	.word	0x20001c1c

000053ec <z_nrf_clock_control_lf_on>:
{
    53ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    53f0:	4938      	ldr	r1, [pc, #224]	; (54d4 <z_nrf_clock_control_lf_on+0xe8>)
    53f2:	f3bf 8f5b 	dmb	ish
    53f6:	4607      	mov	r7, r0
    53f8:	2201      	movs	r2, #1
    53fa:	e851 3f00 	ldrex	r3, [r1]
    53fe:	e841 2000 	strex	r0, r2, [r1]
    5402:	2800      	cmp	r0, #0
    5404:	d1f9      	bne.n	53fa <z_nrf_clock_control_lf_on+0xe>
    5406:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    540a:	b933      	cbnz	r3, 541a <z_nrf_clock_control_lf_on+0x2e>
    540c:	4932      	ldr	r1, [pc, #200]	; (54d8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    540e:	4833      	ldr	r0, [pc, #204]	; (54dc <z_nrf_clock_control_lf_on+0xf0>)
    5410:	604b      	str	r3, [r1, #4]
    5412:	60cb      	str	r3, [r1, #12]
    5414:	608a      	str	r2, [r1, #8]
    5416:	f007 fce5 	bl	cde4 <onoff_request>
	switch (start_mode) {
    541a:	1e7b      	subs	r3, r7, #1
    541c:	2b01      	cmp	r3, #1
    541e:	d82b      	bhi.n	5478 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5420:	2f01      	cmp	r7, #1
    5422:	d107      	bne.n	5434 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5428:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    542c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5430:	2b01      	cmp	r3, #1
    5432:	d021      	beq.n	5478 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5434:	f008 ffe3 	bl	e3fe <k_is_in_isr>
    5438:	4605      	mov	r5, r0
    543a:	b9f8      	cbnz	r0, 547c <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    543c:	4b28      	ldr	r3, [pc, #160]	; (54e0 <z_nrf_clock_control_lf_on+0xf4>)
    543e:	781b      	ldrb	r3, [r3, #0]
    5440:	b1e3      	cbz	r3, 547c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    5442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5446:	2202      	movs	r2, #2
    5448:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    544c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    544e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 54e4 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5452:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    5456:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    545a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    545e:	03d2      	lsls	r2, r2, #15
    5460:	d516      	bpl.n	5490 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5462:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5466:	2b01      	cmp	r3, #1
    5468:	d001      	beq.n	546e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    546a:	2f01      	cmp	r7, #1
    546c:	d110      	bne.n	5490 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    546e:	b35d      	cbz	r5, 54c8 <z_nrf_clock_control_lf_on+0xdc>
    5470:	f386 8811 	msr	BASEPRI, r6
    5474:	f3bf 8f6f 	isb	sy
}
    5478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    547c:	f04f 0320 	mov.w	r3, #32
    5480:	f3ef 8611 	mrs	r6, BASEPRI
    5484:	f383 8812 	msr	BASEPRI_MAX, r3
    5488:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    548c:	2501      	movs	r5, #1
    548e:	e7de      	b.n	544e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5490:	b1ad      	cbz	r5, 54be <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5492:	4630      	mov	r0, r6
    5494:	f7fe f916 	bl	36c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5498:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    549c:	2b00      	cmp	r3, #0
    549e:	d1da      	bne.n	5456 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    54a0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    54a4:	2a00      	cmp	r2, #0
    54a6:	d0d6      	beq.n	5456 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    54a8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    54ac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    54b0:	2301      	movs	r3, #1
    54b2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    54b6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    54ba:	60a3      	str	r3, [r4, #8]
}
    54bc:	e7cb      	b.n	5456 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    54be:	2100      	movs	r1, #0
    54c0:	2021      	movs	r0, #33	; 0x21
    54c2:	f006 fc69 	bl	bd98 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    54c6:	e7e7      	b.n	5498 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    54c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    54cc:	2202      	movs	r2, #2
    54ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    54d2:	e7d1      	b.n	5478 <z_nrf_clock_control_lf_on+0x8c>
    54d4:	20001c18 	.word	0x20001c18
    54d8:	20001c08 	.word	0x20001c08
    54dc:	20001c38 	.word	0x20001c38
    54e0:	20002945 	.word	0x20002945
    54e4:	e000e100 	.word	0xe000e100

000054e8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    54e8:	b508      	push	{r3, lr}
    54ea:	4807      	ldr	r0, [pc, #28]	; (5508 <uart_console_init+0x20>)
    54ec:	f008 ff2b 	bl	e346 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    54f0:	b138      	cbz	r0, 5502 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    54f2:	4806      	ldr	r0, [pc, #24]	; (550c <uart_console_init+0x24>)
    54f4:	f7fe ff0a 	bl	430c <__stdout_hook_install>
	__printk_hook_install(console_out);
    54f8:	4804      	ldr	r0, [pc, #16]	; (550c <uart_console_init+0x24>)
    54fa:	f7fb fbdb 	bl	cb4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    54fe:	2000      	movs	r0, #0
}
    5500:	bd08      	pop	{r3, pc}
		return -ENODEV;
    5502:	f06f 0012 	mvn.w	r0, #18
    5506:	e7fb      	b.n	5500 <uart_console_init+0x18>
    5508:	0000ed6c 	.word	0x0000ed6c
    550c:	00005511 	.word	0x00005511

00005510 <console_out>:
	if ('\n' == c) {
    5510:	280a      	cmp	r0, #10
{
    5512:	b538      	push	{r3, r4, r5, lr}
    5514:	4d07      	ldr	r5, [pc, #28]	; (5534 <console_out+0x24>)
    5516:	4604      	mov	r4, r0
	if ('\n' == c) {
    5518:	d104      	bne.n	5524 <console_out+0x14>
    551a:	68ab      	ldr	r3, [r5, #8]
    551c:	210d      	movs	r1, #13
    551e:	685b      	ldr	r3, [r3, #4]
    5520:	4628      	mov	r0, r5
    5522:	4798      	blx	r3
    5524:	68ab      	ldr	r3, [r5, #8]
    5526:	4803      	ldr	r0, [pc, #12]	; (5534 <console_out+0x24>)
    5528:	685b      	ldr	r3, [r3, #4]
    552a:	b2e1      	uxtb	r1, r4
    552c:	4798      	blx	r3
}
    552e:	4620      	mov	r0, r4
    5530:	bd38      	pop	{r3, r4, r5, pc}
    5532:	bf00      	nop
    5534:	0000ed6c 	.word	0x0000ed6c

00005538 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    5538:	b530      	push	{r4, r5, lr}
	return port->config;
    553a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    553c:	7b05      	ldrb	r5, [r0, #12]
    553e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    5542:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    5546:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5548:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    554c:	d105      	bne.n	555a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    554e:	4620      	mov	r0, r4
    5550:	f003 fe8a 	bl	9268 <nrfx_gpiote_trigger_disable>

		return 0;
    5554:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    5556:	b005      	add	sp, #20
    5558:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    555a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    555c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5560:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    5564:	d114      	bne.n	5590 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    556a:	bf0c      	ite	eq
    556c:	2304      	moveq	r3, #4
    556e:	2305      	movne	r3, #5
    5570:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5574:	2300      	movs	r3, #0
    5576:	4619      	mov	r1, r3
    5578:	aa02      	add	r2, sp, #8
    557a:	4620      	mov	r0, r4
    557c:	f003 fcb2 	bl	8ee4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5580:	4b1f      	ldr	r3, [pc, #124]	; (5600 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    5582:	4298      	cmp	r0, r3
    5584:	d139      	bne.n	55fa <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5586:	2101      	movs	r1, #1
    5588:	4620      	mov	r0, r4
    558a:	f003 fe25 	bl	91d8 <nrfx_gpiote_trigger_enable>
	return 0;
    558e:	e7e1      	b.n	5554 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5590:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    5594:	d026      	beq.n	55e4 <gpio_nrfx_pin_interrupt_configure+0xac>
    5596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    559a:	bf14      	ite	ne
    559c:	2301      	movne	r3, #1
    559e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    55a0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    55a4:	6883      	ldr	r3, [r0, #8]
    55a6:	40cb      	lsrs	r3, r1
    55a8:	07d9      	lsls	r1, r3, #31
    55aa:	d4e3      	bmi.n	5574 <gpio_nrfx_pin_interrupt_configure+0x3c>
    55ac:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    55b0:	d1e0      	bne.n	5574 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    55b2:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    55b4:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    55b6:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    55ba:	4a12      	ldr	r2, [pc, #72]	; (5604 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    55bc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    55c0:	bf18      	it	ne
    55c2:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    55c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    55ca:	07db      	lsls	r3, r3, #31
    55cc:	d4d2      	bmi.n	5574 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    55ce:	f10d 0507 	add.w	r5, sp, #7
    55d2:	4629      	mov	r1, r5
    55d4:	4620      	mov	r0, r4
    55d6:	f003 fdab 	bl	9130 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    55da:	4b0b      	ldr	r3, [pc, #44]	; (5608 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    55dc:	4298      	cmp	r0, r3
    55de:	d003      	beq.n	55e8 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    55e0:	9503      	str	r5, [sp, #12]
    55e2:	e7c7      	b.n	5574 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    55e4:	2303      	movs	r3, #3
    55e6:	e7db      	b.n	55a0 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    55e8:	4628      	mov	r0, r5
    55ea:	f003 fdef 	bl	91cc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    55ee:	4b04      	ldr	r3, [pc, #16]	; (5600 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    55f0:	4298      	cmp	r0, r3
    55f2:	d0f5      	beq.n	55e0 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    55f4:	f06f 000b 	mvn.w	r0, #11
    55f8:	e7ad      	b.n	5556 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    55fa:	f06f 0015 	mvn.w	r0, #21
    55fe:	e7aa      	b.n	5556 <gpio_nrfx_pin_interrupt_configure+0x1e>
    5600:	0bad0000 	.word	0x0bad0000
    5604:	50000300 	.word	0x50000300
    5608:	0bad0004 	.word	0x0bad0004

0000560c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    560c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    560e:	f003 fdcd 	bl	91ac <nrfx_gpiote_is_init>
    5612:	4604      	mov	r4, r0
    5614:	b968      	cbnz	r0, 5632 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    5616:	f003 fda1 	bl	915c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    561a:	4b08      	ldr	r3, [pc, #32]	; (563c <gpio_nrfx_init+0x30>)
    561c:	4298      	cmp	r0, r3
    561e:	d10a      	bne.n	5636 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5620:	4807      	ldr	r0, [pc, #28]	; (5640 <gpio_nrfx_init+0x34>)
    5622:	4621      	mov	r1, r4
    5624:	f003 fd7e 	bl	9124 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5628:	4622      	mov	r2, r4
    562a:	2105      	movs	r1, #5
    562c:	2006      	movs	r0, #6
    562e:	f7fe f8eb 	bl	3808 <z_arm_irq_priority_set>
		return 0;
    5632:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5634:	bd10      	pop	{r4, pc}
		return -EIO;
    5636:	f06f 0004 	mvn.w	r0, #4
    563a:	e7fb      	b.n	5634 <gpio_nrfx_init+0x28>
    563c:	0bad0000 	.word	0x0bad0000
    5640:	00005645 	.word	0x00005645

00005644 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5644:	0942      	lsrs	r2, r0, #5
{
    5646:	b570      	push	{r4, r5, r6, lr}
    5648:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    564a:	d002      	beq.n	5652 <nrfx_gpio_handler+0xe>
    564c:	2a01      	cmp	r2, #1
    564e:	d017      	beq.n	5680 <nrfx_gpio_handler+0x3c>
}
    5650:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5652:	4e0d      	ldr	r6, [pc, #52]	; (5688 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    5654:	6932      	ldr	r2, [r6, #16]
    5656:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5658:	2900      	cmp	r1, #0
    565a:	d0f9      	beq.n	5650 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    565c:	f003 031f 	and.w	r3, r3, #31
    5660:	2501      	movs	r5, #1
    5662:	680c      	ldr	r4, [r1, #0]
    5664:	409d      	lsls	r5, r3
    5666:	2900      	cmp	r1, #0
    5668:	d0f2      	beq.n	5650 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    566a:	688a      	ldr	r2, [r1, #8]
    566c:	402a      	ands	r2, r5
    566e:	d002      	beq.n	5676 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5670:	684b      	ldr	r3, [r1, #4]
    5672:	4630      	mov	r0, r6
    5674:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5676:	b12c      	cbz	r4, 5684 <nrfx_gpio_handler+0x40>
    5678:	6823      	ldr	r3, [r4, #0]
    567a:	4621      	mov	r1, r4
    567c:	461c      	mov	r4, r3
    567e:	e7f2      	b.n	5666 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5680:	4e02      	ldr	r6, [pc, #8]	; (568c <nrfx_gpio_handler+0x48>)
    5682:	e7e7      	b.n	5654 <nrfx_gpio_handler+0x10>
    5684:	4623      	mov	r3, r4
    5686:	e7f8      	b.n	567a <nrfx_gpio_handler+0x36>
    5688:	0000ed54 	.word	0x0000ed54
    568c:	0000ed3c 	.word	0x0000ed3c

00005690 <gpio_nrfx_pin_configure>:
{
    5690:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    5694:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5696:	7b3b      	ldrb	r3, [r7, #12]
    5698:	f001 051f 	and.w	r5, r1, #31
    569c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    56a0:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    56a2:	4628      	mov	r0, r5
    56a4:	f10d 0103 	add.w	r1, sp, #3
{
    56a8:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    56aa:	f003 fd41 	bl	9130 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    56ae:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    56b2:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    56b4:	d10b      	bne.n	56ce <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    56b6:	4628      	mov	r0, r5
    56b8:	f003 fdfe 	bl	92b8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    56bc:	4b3d      	ldr	r3, [pc, #244]	; (57b4 <gpio_nrfx_pin_configure+0x124>)
    56be:	4598      	cmp	r8, r3
    56c0:	d103      	bne.n	56ca <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    56c2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    56c6:	f003 fd7b 	bl	91c0 <nrfx_gpiote_channel_free>
		return 0;
    56ca:	2000      	movs	r0, #0
    56cc:	e00c      	b.n	56e8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    56ce:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    56d0:	4619      	mov	r1, r3
    56d2:	aa02      	add	r2, sp, #8
    56d4:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    56d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    56da:	f003 fc03 	bl	8ee4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    56de:	4b35      	ldr	r3, [pc, #212]	; (57b4 <gpio_nrfx_pin_configure+0x124>)
    56e0:	4298      	cmp	r0, r3
    56e2:	d004      	beq.n	56ee <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    56e4:	f06f 0015 	mvn.w	r0, #21
}
    56e8:	b004      	add	sp, #16
    56ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    56ee:	4580      	cmp	r8, r0
    56f0:	d103      	bne.n	56fa <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    56f2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    56f6:	f003 fd63 	bl	91c0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    56fa:	03a3      	lsls	r3, r4, #14
    56fc:	d54b      	bpl.n	5796 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    56fe:	f240 3306 	movw	r3, #774	; 0x306
    5702:	4023      	ands	r3, r4
    5704:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    5708:	d019      	beq.n	573e <gpio_nrfx_pin_configure+0xae>
    570a:	d80c      	bhi.n	5726 <gpio_nrfx_pin_configure+0x96>
    570c:	2b06      	cmp	r3, #6
    570e:	d017      	beq.n	5740 <gpio_nrfx_pin_configure+0xb0>
    5710:	d804      	bhi.n	571c <gpio_nrfx_pin_configure+0x8c>
    5712:	b1ab      	cbz	r3, 5740 <gpio_nrfx_pin_configure+0xb0>
    5714:	2b02      	cmp	r3, #2
    5716:	d1e5      	bne.n	56e4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    5718:	2304      	movs	r3, #4
    571a:	e011      	b.n	5740 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    571c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5720:	d1e0      	bne.n	56e4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    5722:	2301      	movs	r3, #1
    5724:	e00c      	b.n	5740 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5726:	f240 2202 	movw	r2, #514	; 0x202
    572a:	4293      	cmp	r3, r2
    572c:	d027      	beq.n	577e <gpio_nrfx_pin_configure+0xee>
    572e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5732:	d026      	beq.n	5782 <gpio_nrfx_pin_configure+0xf2>
    5734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5738:	d1d4      	bne.n	56e4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    573a:	2302      	movs	r3, #2
    573c:	e000      	b.n	5740 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    573e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    5740:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5744:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5748:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    574c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    574e:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    5752:	bf54      	ite	pl
    5754:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5758:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    575a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    575c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5760:	d511      	bpl.n	5786 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5762:	687a      	ldr	r2, [r7, #4]
    5764:	2301      	movs	r3, #1
    5766:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    5768:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    576c:	2200      	movs	r2, #0
    576e:	a901      	add	r1, sp, #4
    5770:	4628      	mov	r0, r5
    5772:	f003 fc65 	bl	9040 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5776:	4b0f      	ldr	r3, [pc, #60]	; (57b4 <gpio_nrfx_pin_configure+0x124>)
    5778:	4298      	cmp	r0, r3
    577a:	d0a6      	beq.n	56ca <gpio_nrfx_pin_configure+0x3a>
    577c:	e7b2      	b.n	56e4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    577e:	2305      	movs	r3, #5
    5780:	e7de      	b.n	5740 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5782:	2303      	movs	r3, #3
    5784:	e7dc      	b.n	5740 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5786:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5788:	bf41      	itttt	mi
    578a:	2301      	movmi	r3, #1
    578c:	687a      	ldrmi	r2, [r7, #4]
    578e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    5790:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    5794:	e7ea      	b.n	576c <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    5796:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5798:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    579c:	bf54      	ite	pl
    579e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    57a2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    57a4:	461a      	mov	r2, r3
    57a6:	a901      	add	r1, sp, #4
    57a8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    57aa:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    57ae:	f003 fb99 	bl	8ee4 <nrfx_gpiote_input_configure>
    57b2:	e7e0      	b.n	5776 <gpio_nrfx_pin_configure+0xe6>
    57b4:	0bad0000 	.word	0x0bad0000

000057b8 <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
    57b8:	4801      	ldr	r0, [pc, #4]	; (57c0 <timer_callback+0x8>)
    57ba:	f005 bfed 	b.w	b798 <k_work_submit>
    57be:	bf00      	nop
    57c0:	20000030 	.word	0x20000030

000057c4 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
    57c4:	b508      	push	{r3, lr}
	return (k_uptime_get_32() - saved_time);
    57c6:	f008 f8d9 	bl	d97c <k_uptime_get_32>
    57ca:	4b02      	ldr	r3, [pc, #8]	; (57d4 <RtcGetTimerElapsedTime+0x10>)
    57cc:	681b      	ldr	r3, [r3, #0]
}
    57ce:	1ac0      	subs	r0, r0, r3
    57d0:	bd08      	pop	{r3, pc}
    57d2:	bf00      	nop
    57d4:	20001c88 	.word	0x20001c88

000057d8 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
    57d8:	4801      	ldr	r0, [pc, #4]	; (57e0 <RtcStopAlarm+0x8>)
    57da:	f009 b87d 	b.w	e8d8 <z_impl_k_timer_stop>
    57de:	bf00      	nop
    57e0:	200002b0 	.word	0x200002b0

000057e4 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
    57e4:	b507      	push	{r0, r1, r2, lr}
    57e6:	4601      	mov	r1, r0
			return ((t * to_hz + off) / from_hz);
    57e8:	f240 30e7 	movw	r0, #999	; 0x3e7
    57ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    57f0:	2300      	movs	r3, #0
    57f2:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    57f6:	0c49      	lsrs	r1, r1, #17
    57f8:	f7fa fc82 	bl	100 <__aeabi_uldivmod>
    57fc:	4602      	mov	r2, r0
    57fe:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    5800:	2100      	movs	r1, #0
    5802:	2000      	movs	r0, #0
    5804:	e9cd 0100 	strd	r0, r1, [sp]
    5808:	4802      	ldr	r0, [pc, #8]	; (5814 <RtcSetAlarm+0x30>)
    580a:	f006 fd3d 	bl	c288 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
    580e:	b003      	add	sp, #12
    5810:	f85d fb04 	ldr.w	pc, [sp], #4
    5814:	200002b0 	.word	0x200002b0

00005818 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
    5818:	b508      	push	{r3, lr}
	saved_time = k_uptime_get_32();
    581a:	f008 f8af 	bl	d97c <k_uptime_get_32>
    581e:	4b01      	ldr	r3, [pc, #4]	; (5824 <RtcSetTimerContext+0xc>)
    5820:	6018      	str	r0, [r3, #0]

	return saved_time;
}
    5822:	bd08      	pop	{r3, pc}
    5824:	20001c88 	.word	0x20001c88

00005828 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
    5828:	4b01      	ldr	r3, [pc, #4]	; (5830 <RtcGetTimerContext+0x8>)
    582a:	6818      	ldr	r0, [r3, #0]
    582c:	4770      	bx	lr
    582e:	bf00      	nop
    5830:	20001c88 	.word	0x20001c88

00005834 <sx12xx_ev_rx_done>:
	return true;
}

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
    5834:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
    5838:	4c27      	ldr	r4, [pc, #156]	; (58d8 <sx12xx_ev_rx_done+0xa4>)
{
    583a:	469a      	mov	sl, r3

	/* Receiving in asynchronous mode */
	if (dev_data.async_rx_cb) {
    583c:	e9d4 9301 	ldrd	r9, r3, [r4, #4]
{
    5840:	4607      	mov	r7, r0
    5842:	460d      	mov	r5, r1
    5844:	4616      	mov	r6, r2
	if (dev_data.async_rx_cb) {
    5846:	b17b      	cbz	r3, 5868 <sx12xx_ev_rx_done+0x34>
		/* Start receiving again */
		Radio.Rx(0);
    5848:	4b24      	ldr	r3, [pc, #144]	; (58dc <sx12xx_ev_rx_done+0xa8>)
    584a:	2000      	movs	r0, #0
    584c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    584e:	4798      	blx	r3
		/* Run the callback */
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
    5850:	f8cd a000 	str.w	sl, [sp]
    5854:	f8d4 8008 	ldr.w	r8, [r4, #8]
    5858:	6820      	ldr	r0, [r4, #0]
    585a:	4633      	mov	r3, r6
    585c:	462a      	mov	r2, r5
    585e:	4639      	mov	r1, r7
    5860:	47c0      	blx	r8
	/* Completely release modem */
	dev_data.operation_done = NULL;
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
    5862:	b002      	add	sp, #8
    5864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5868:	f104 0240 	add.w	r2, r4, #64	; 0x40
    586c:	2302      	movs	r3, #2
    586e:	f3bf 8f5b 	dmb	ish
    5872:	e852 1f00 	ldrex	r1, [r2]
    5876:	2901      	cmp	r1, #1
    5878:	d103      	bne.n	5882 <sx12xx_ev_rx_done+0x4e>
    587a:	e842 3000 	strex	r0, r3, [r2]
    587e:	2800      	cmp	r0, #0
    5880:	d1f7      	bne.n	5872 <sx12xx_ev_rx_done+0x3e>
    5882:	f3bf 8f5b 	dmb	ish
    5886:	4690      	mov	r8, r2
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
    5888:	d1eb      	bne.n	5862 <sx12xx_ev_rx_done+0x2e>
	if (size < *dev_data.rx_params.size) {
    588a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    588c:	781a      	ldrb	r2, [r3, #0]
    588e:	42aa      	cmp	r2, r5
		*dev_data.rx_params.size = size;
    5890:	bf88      	it	hi
    5892:	701d      	strbhi	r5, [r3, #0]
	       *dev_data.rx_params.size);
    5894:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	memcpy(dev_data.rx_params.buf, payload,
    5896:	6c60      	ldr	r0, [r4, #68]	; 0x44
    5898:	781a      	ldrb	r2, [r3, #0]
    589a:	4639      	mov	r1, r7
    589c:	f007 ff09 	bl	d6b2 <memcpy>
	if (dev_data.rx_params.rssi) {
    58a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    58a2:	b103      	cbz	r3, 58a6 <sx12xx_ev_rx_done+0x72>
		*dev_data.rx_params.rssi = rssi;
    58a4:	801e      	strh	r6, [r3, #0]
	if (dev_data.rx_params.snr) {
    58a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
    58a8:	b10b      	cbz	r3, 58ae <sx12xx_ev_rx_done+0x7a>
		*dev_data.rx_params.snr = snr;
    58aa:	f883 a000 	strb.w	sl, [r3]
	Radio.Sleep();
    58ae:	4b0b      	ldr	r3, [pc, #44]	; (58dc <sx12xx_ev_rx_done+0xa8>)
    58b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58b2:	4798      	blx	r3
	dev_data.operation_done = NULL;
    58b4:	2100      	movs	r1, #0
    58b6:	6061      	str	r1, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    58b8:	f3bf 8f5b 	dmb	ish
    58bc:	e858 3f00 	ldrex	r3, [r8]
    58c0:	e848 1200 	strex	r2, r1, [r8]
    58c4:	2a00      	cmp	r2, #0
    58c6:	d1f9      	bne.n	58bc <sx12xx_ev_rx_done+0x88>
    58c8:	f3bf 8f5b 	dmb	ish
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    58cc:	4648      	mov	r0, r9
}
    58ce:	b002      	add	sp, #8
    58d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58d4:	f006 bd64 	b.w	c3a0 <z_impl_k_poll_signal_raise>
    58d8:	20001c8c 	.word	0x20001c8c
    58dc:	0000f224 	.word	0x0000f224

000058e0 <modem_release.constprop.0>:
static bool modem_release(struct sx12xx_data *data)
    58e0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    58e2:	4c12      	ldr	r4, [pc, #72]	; (592c <modem_release.constprop.0+0x4c>)
    58e4:	f3bf 8f5b 	dmb	ish
    58e8:	2302      	movs	r3, #2
    58ea:	e854 2f00 	ldrex	r2, [r4]
    58ee:	2a01      	cmp	r2, #1
    58f0:	d103      	bne.n	58fa <modem_release.constprop.0+0x1a>
    58f2:	e844 3100 	strex	r1, r3, [r4]
    58f6:	2900      	cmp	r1, #0
    58f8:	d1f7      	bne.n	58ea <modem_release.constprop.0+0xa>
    58fa:	f3bf 8f5b 	dmb	ish
    58fe:	bf0c      	ite	eq
    5900:	2001      	moveq	r0, #1
    5902:	2000      	movne	r0, #0
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
    5904:	d110      	bne.n	5928 <modem_release.constprop.0+0x48>
	Radio.Sleep();
    5906:	4b0a      	ldr	r3, [pc, #40]	; (5930 <modem_release.constprop.0+0x50>)
    5908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    590a:	4798      	blx	r3
	data->operation_done = NULL;
    590c:	2300      	movs	r3, #0
    590e:	f844 3c3c 	str.w	r3, [r4, #-60]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5912:	f3bf 8f5b 	dmb	ish
    5916:	e854 2f00 	ldrex	r2, [r4]
    591a:	e844 3100 	strex	r1, r3, [r4]
    591e:	2900      	cmp	r1, #0
    5920:	d1f9      	bne.n	5916 <modem_release.constprop.0+0x36>
    5922:	f3bf 8f5b 	dmb	ish
	return true;
    5926:	2001      	movs	r0, #1
}
    5928:	bd10      	pop	{r4, pc}
    592a:	bf00      	nop
    592c:	20001ccc 	.word	0x20001ccc
    5930:	0000f224 	.word	0x0000f224

00005934 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
    5934:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
    5936:	4b06      	ldr	r3, [pc, #24]	; (5950 <sx12xx_ev_tx_done+0x1c>)
    5938:	685c      	ldr	r4, [r3, #4]

	if (modem_release(&dev_data)) {
    593a:	f7ff ffd1 	bl	58e0 <modem_release.constprop.0>
    593e:	b130      	cbz	r0, 594e <sx12xx_ev_tx_done+0x1a>
		/* Raise signal if provided */
		if (sig) {
    5940:	b12c      	cbz	r4, 594e <sx12xx_ev_tx_done+0x1a>
    5942:	2100      	movs	r1, #0
    5944:	4620      	mov	r0, r4
			k_poll_signal_raise(sig, 0);
		}
	}
}
    5946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    594a:	f006 bd29 	b.w	c3a0 <z_impl_k_poll_signal_raise>
    594e:	bd10      	pop	{r4, pc}
    5950:	20001c8c 	.word	0x20001c8c

00005954 <__sx12xx_configure_pin>:
{
    5954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5956:	4604      	mov	r4, r0
    5958:	af00      	add	r7, sp, #0
	if (!device_is_ready(gpio->port)) {
    595a:	6800      	ldr	r0, [r0, #0]
{
    595c:	460d      	mov	r5, r1
    595e:	f008 fcf2 	bl	e346 <z_device_is_ready>
	if (!device_is_ready(gpio->port)) {
    5962:	4603      	mov	r3, r0
    5964:	6820      	ldr	r0, [r4, #0]
    5966:	b9bb      	cbnz	r3, 5998 <__sx12xx_configure_pin+0x44>
		LOG_ERR("GPIO device not ready %s", gpio->port->name);
    5968:	466c      	mov	r4, sp
    596a:	b088      	sub	sp, #32
    596c:	6801      	ldr	r1, [r0, #0]
    596e:	466a      	mov	r2, sp
    5970:	4827      	ldr	r0, [pc, #156]	; (5a10 <__sx12xx_configure_pin+0xbc>)
    5972:	e9c2 0105 	strd	r0, r1, [r2, #20]
    5976:	f44f 7100 	mov.w	r1, #512	; 0x200
    597a:	8391      	strh	r1, [r2, #28]
    597c:	4925      	ldr	r1, [pc, #148]	; (5a14 <__sx12xx_configure_pin+0xc0>)
    597e:	f842 1f10 	str.w	r1, [r2, #16]!
    5982:	4825      	ldr	r0, [pc, #148]	; (5a18 <__sx12xx_configure_pin+0xc4>)
    5984:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    5988:	f7fc f920 	bl	1bcc <z_impl_z_log_msg_static_create>
		return -ENODEV;
    598c:	f06f 0512 	mvn.w	r5, #18
    5990:	46a5      	mov	sp, r4
}
    5992:	4628      	mov	r0, r5
    5994:	46bd      	mov	sp, r7
    5996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
    5998:	88e3      	ldrh	r3, [r4, #6]
				  spec->pin,
    599a:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
    599c:	432b      	orrs	r3, r5
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    599e:	02dd      	lsls	r5, r3, #11
	const struct gpio_driver_api *api =
    59a0:	f8d0 e008 	ldr.w	lr, [r0, #8]
	struct gpio_driver_data *data =
    59a4:	f8d0 c010 	ldr.w	ip, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    59a8:	d506      	bpl.n	59b8 <__sx12xx_configure_pin+0x64>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    59aa:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    59ae:	d003      	beq.n	59b8 <__sx12xx_configure_pin+0x64>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    59b0:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    59b2:	bf48      	it	mi
    59b4:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    59b8:	f8dc 5000 	ldr.w	r5, [ip]
    59bc:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    59be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    59c2:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    59c4:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    59c6:	bf4c      	ite	mi
    59c8:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    59ca:	43b5      	bicpl	r5, r6
    59cc:	f8cc 5000 	str.w	r5, [ip]
	return api->pin_configure(port, pin, flags);
    59d0:	f8de 3000 	ldr.w	r3, [lr]
    59d4:	4798      	blx	r3
	if (err) {
    59d6:	4605      	mov	r5, r0
    59d8:	2800      	cmp	r0, #0
    59da:	d0da      	beq.n	5992 <__sx12xx_configure_pin+0x3e>
		LOG_ERR("Cannot configure gpio %s %d: %d", gpio->port->name,
    59dc:	6823      	ldr	r3, [r4, #0]
    59de:	6819      	ldr	r1, [r3, #0]
    59e0:	7923      	ldrb	r3, [r4, #4]
    59e2:	466c      	mov	r4, sp
    59e4:	b08a      	sub	sp, #40	; 0x28
    59e6:	466a      	mov	r2, sp
    59e8:	480c      	ldr	r0, [pc, #48]	; (5a1c <__sx12xx_configure_pin+0xc8>)
    59ea:	e9c2 3507 	strd	r3, r5, [r2, #28]
    59ee:	f44f 7300 	mov.w	r3, #512	; 0x200
    59f2:	8493      	strh	r3, [r2, #36]	; 0x24
    59f4:	4b0a      	ldr	r3, [pc, #40]	; (5a20 <__sx12xx_configure_pin+0xcc>)
    59f6:	e9c2 0105 	strd	r0, r1, [r2, #20]
    59fa:	f842 3f10 	str.w	r3, [r2, #16]!
    59fe:	4806      	ldr	r0, [pc, #24]	; (5a18 <__sx12xx_configure_pin+0xc4>)
    5a00:	2300      	movs	r3, #0
    5a02:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    5a06:	f7fc f8e1 	bl	1bcc <z_impl_z_log_msg_static_create>
    5a0a:	46a5      	mov	sp, r4
		return err;
    5a0c:	e7c1      	b.n	5992 <__sx12xx_configure_pin+0x3e>
    5a0e:	bf00      	nop
    5a10:	00010236 	.word	0x00010236
    5a14:	01000003 	.word	0x01000003
    5a18:	0000f030 	.word	0x0000f030
    5a1c:	0001024f 	.word	0x0001024f
    5a20:	01000005 	.word	0x01000005

00005a24 <sx12xx_lora_send_async>:
	return ret;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
    5a24:	b570      	push	{r4, r5, r6, lr}
    5a26:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5a28:	490f      	ldr	r1, [pc, #60]	; (5a68 <sx12xx_lora_send_async+0x44>)
    5a2a:	f3bf 8f5b 	dmb	ish
    5a2e:	2001      	movs	r0, #1
    5a30:	e851 4f00 	ldrex	r4, [r1]
    5a34:	2c00      	cmp	r4, #0
    5a36:	d103      	bne.n	5a40 <sx12xx_lora_send_async+0x1c>
    5a38:	e841 0600 	strex	r6, r0, [r1]
    5a3c:	2e00      	cmp	r6, #0
    5a3e:	d1f7      	bne.n	5a30 <sx12xx_lora_send_async+0xc>
    5a40:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
    5a44:	d10c      	bne.n	5a60 <sx12xx_lora_send_async+0x3c>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    5a46:	4e09      	ldr	r6, [pc, #36]	; (5a6c <sx12xx_lora_send_async+0x48>)
	dev_data.operation_done = async;
    5a48:	f841 3c3c 	str.w	r3, [r1, #-60]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    5a4c:	b2d4      	uxtb	r4, r2
    5a4e:	6d73      	ldr	r3, [r6, #84]	; 0x54
    5a50:	4621      	mov	r1, r4
    5a52:	4798      	blx	r3

	Radio.Send(data, data_len);
    5a54:	4628      	mov	r0, r5
    5a56:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5a58:	4621      	mov	r1, r4
    5a5a:	4798      	blx	r3

	return 0;
    5a5c:	2000      	movs	r0, #0
}
    5a5e:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
    5a60:	f06f 000f 	mvn.w	r0, #15
    5a64:	e7fb      	b.n	5a5e <sx12xx_lora_send_async+0x3a>
    5a66:	bf00      	nop
    5a68:	20001ccc 	.word	0x20001ccc
    5a6c:	0000f224 	.word	0x0000f224

00005a70 <sx12xx_lora_send>:
{
    5a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a74:	b095      	sub	sp, #84	; 0x54
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5a76:	2500      	movs	r5, #0
{
    5a78:	af04      	add	r7, sp, #16
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5a7a:	1d3c      	adds	r4, r7, #4
	if (!dev_data.tx_cfg.frequency) {
    5a7c:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 5b70 <sx12xx_lora_send+0x100>
{
    5a80:	4682      	mov	sl, r0
    5a82:	468b      	mov	fp, r1
    5a84:	4690      	mov	r8, r2
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    5a86:	4629      	mov	r1, r5
    5a88:	2210      	movs	r2, #16
    5a8a:	f107 0014 	add.w	r0, r7, #20
    5a8e:	2601      	movs	r6, #1
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5a90:	e9c7 4401 	strd	r4, r4, [r7, #4]
    5a94:	e9c7 5503 	strd	r5, r5, [r7, #12]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    5a98:	f007 fe16 	bl	d6c8 <memset>
    5a9c:	f887 6021 	strb.w	r6, [r7, #33]	; 0x21
	if (!dev_data.tx_cfg.frequency) {
    5aa0:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    5aa4:	627c      	str	r4, [r7, #36]	; 0x24
	if (!dev_data.tx_cfg.frequency) {
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d05e      	beq.n	5b68 <sx12xx_lora_send+0xf8>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
    5aaa:	4623      	mov	r3, r4
    5aac:	4642      	mov	r2, r8
    5aae:	4659      	mov	r1, fp
    5ab0:	4650      	mov	r0, sl
    5ab2:	f7ff ffb7 	bl	5a24 <sx12xx_lora_send_async>
	if (ret < 0) {
    5ab6:	1e04      	subs	r4, r0, #0
    5ab8:	db51      	blt.n	5b5e <sx12xx_lora_send+0xee>
	air_time = Radio.TimeOnAir(MODEM_LORA,
    5aba:	fa5f f088 	uxtb.w	r0, r8
    5abe:	f899 3036 	ldrb.w	r3, [r9, #54]	; 0x36
    5ac2:	f899 2035 	ldrb.w	r2, [r9, #53]	; 0x35
    5ac6:	f899 1034 	ldrb.w	r1, [r9, #52]	; 0x34
    5aca:	4c2a      	ldr	r4, [pc, #168]	; (5b74 <sx12xx_lora_send+0x104>)
    5acc:	9603      	str	r6, [sp, #12]
    5ace:	e9cd 5001 	strd	r5, r0, [sp, #4]
    5ad2:	f8b9 0038 	ldrh.w	r0, [r9, #56]	; 0x38
    5ad6:	9000      	str	r0, [sp, #0]
    5ad8:	6a64      	ldr	r4, [r4, #36]	; 0x24
    5ada:	4630      	mov	r0, r6
    5adc:	47a0      	blx	r4
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
    5ade:	46e9      	mov	r9, sp
    5ae0:	b08a      	sub	sp, #40	; 0x28
	air_time = Radio.TimeOnAir(MODEM_LORA,
    5ae2:	4604      	mov	r4, r0
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
    5ae4:	aa04      	add	r2, sp, #16
    5ae6:	4b24      	ldr	r3, [pc, #144]	; (5b78 <sx12xx_lora_send+0x108>)
    5ae8:	6153      	str	r3, [r2, #20]
    5aea:	4b24      	ldr	r3, [pc, #144]	; (5b7c <sx12xx_lora_send+0x10c>)
    5aec:	6210      	str	r0, [r2, #32]
    5aee:	e9c2 3806 	strd	r3, r8, [r2, #24]
    5af2:	2305      	movs	r3, #5
    5af4:	f842 3f10 	str.w	r3, [r2, #16]!
    5af8:	4821      	ldr	r0, [pc, #132]	; (5b80 <sx12xx_lora_send+0x110>)
    5afa:	462b      	mov	r3, r5
    5afc:	f44f 5124 	mov.w	r1, #10496	; 0x2900
    5b00:	f7fc f864 	bl	1bcc <z_impl_z_log_msg_static_create>
    5b04:	f240 30e7 	movw	r0, #999	; 0x3e7
    5b08:	46cd      	mov	sp, r9
    5b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5b0e:	2300      	movs	r3, #0
    5b10:	eb00 4004 	add.w	r0, r0, r4, lsl #16
    5b14:	f3c4 410e 	ubfx	r1, r4, #16, #15
    5b18:	f7fa faf2 	bl	100 <__aeabi_uldivmod>
    5b1c:	4602      	mov	r2, r0
    5b1e:	460b      	mov	r3, r1
	return z_impl_k_poll(events, num_events, timeout);
    5b20:	4631      	mov	r1, r6
    5b22:	f107 0014 	add.w	r0, r7, #20
    5b26:	f006 fbdf 	bl	c2e8 <z_impl_k_poll>
	if (ret < 0) {
    5b2a:	1e04      	subs	r4, r0, #0
    5b2c:	da17      	bge.n	5b5e <sx12xx_lora_send+0xee>
		LOG_ERR("Packet transmission failed!");
    5b2e:	4b15      	ldr	r3, [pc, #84]	; (5b84 <sx12xx_lora_send+0x114>)
    5b30:	63fb      	str	r3, [r7, #60]	; 0x3c
    5b32:	2302      	movs	r3, #2
    5b34:	63bb      	str	r3, [r7, #56]	; 0x38
    5b36:	4812      	ldr	r0, [pc, #72]	; (5b80 <sx12xx_lora_send+0x110>)
    5b38:	462b      	mov	r3, r5
    5b3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
    5b3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5b42:	f7fc f843 	bl	1bcc <z_impl_z_log_msg_static_create>
		if (!modem_release(&dev_data)) {
    5b46:	f7ff fecb 	bl	58e0 <modem_release.constprop.0>
    5b4a:	b940      	cbnz	r0, 5b5e <sx12xx_lora_send+0xee>
    5b4c:	f04f 32ff 	mov.w	r2, #4294967295
    5b50:	f04f 33ff 	mov.w	r3, #4294967295
    5b54:	4631      	mov	r1, r6
    5b56:	f107 0014 	add.w	r0, r7, #20
    5b5a:	f006 fbc5 	bl	c2e8 <z_impl_k_poll>
}
    5b5e:	4620      	mov	r0, r4
    5b60:	3744      	adds	r7, #68	; 0x44
    5b62:	46bd      	mov	sp, r7
    5b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    5b68:	f06f 0415 	mvn.w	r4, #21
    5b6c:	e7f7      	b.n	5b5e <sx12xx_lora_send+0xee>
    5b6e:	bf00      	nop
    5b70:	20001c8c 	.word	0x20001c8c
    5b74:	0000f224 	.word	0x0000f224
    5b78:	0001026f 	.word	0x0001026f
    5b7c:	000102c4 	.word	0x000102c4
    5b80:	0000f030 	.word	0x0000f030
    5b84:	00010298 	.word	0x00010298

00005b88 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
    5b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b8a:	b093      	sub	sp, #76	; 0x4c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5b8c:	2500      	movs	r5, #0
{
    5b8e:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5b92:	ac03      	add	r4, sp, #12
{
    5b94:	460f      	mov	r7, r1
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    5b96:	2210      	movs	r2, #16
    5b98:	4629      	mov	r1, r5
    5b9a:	a807      	add	r0, sp, #28
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5b9c:	e9cd 4403 	strd	r4, r4, [sp, #12]
    5ba0:	e9cd 5505 	strd	r5, r5, [sp, #20]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    5ba4:	2601      	movs	r6, #1
    5ba6:	f007 fd8f 	bl	d6c8 <memset>
    5baa:	4b25      	ldr	r3, [pc, #148]	; (5c40 <sx12xx_lora_recv+0xb8>)
    5bac:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
    5bb0:	940b      	str	r4, [sp, #44]	; 0x2c
    5bb2:	f3bf 8f5b 	dmb	ish
    5bb6:	e853 2f00 	ldrex	r2, [r3]
    5bba:	42aa      	cmp	r2, r5
    5bbc:	d103      	bne.n	5bc6 <sx12xx_lora_recv+0x3e>
    5bbe:	e843 6100 	strex	r1, r6, [r3]
    5bc2:	2900      	cmp	r1, #0
    5bc4:	d1f7      	bne.n	5bb6 <sx12xx_lora_recv+0x2e>
    5bc6:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
    5bca:	d135      	bne.n	5c38 <sx12xx_lora_recv+0xb0>
	dev_data.async_rx_cb = NULL;
	/* Store operation signal */
	dev_data.operation_done = &done;
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
    5bcc:	f10d 0207 	add.w	r2, sp, #7
	dev_data.operation_done = &done;
    5bd0:	e943 450f 	strd	r4, r5, [r3, #-60]	; 0x3c
	dev_data.rx_params.size = &size;
    5bd4:	609a      	str	r2, [r3, #8]
	dev_data.rx_params.rssi = rssi;
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    5bd6:	4c1b      	ldr	r4, [pc, #108]	; (5c44 <sx12xx_lora_recv+0xbc>)
	dev_data.rx_params.rssi = rssi;
    5bd8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    5bda:	60da      	str	r2, [r3, #12]
	dev_data.rx_params.snr = snr;
    5bdc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    5bde:	611a      	str	r2, [r3, #16]
	dev_data.rx_params.buf = data;
    5be0:	605f      	str	r7, [r3, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    5be2:	21ff      	movs	r1, #255	; 0xff
    5be4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5be6:	4630      	mov	r0, r6
    5be8:	4798      	blx	r3
	Radio.Rx(0);
    5bea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5bec:	4628      	mov	r0, r5
    5bee:	4798      	blx	r3
    5bf0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    5bf4:	4631      	mov	r1, r6
    5bf6:	a807      	add	r0, sp, #28
    5bf8:	f006 fb76 	bl	c2e8 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
    5bfc:	1e04      	subs	r4, r0, #0
    5bfe:	da0a      	bge.n	5c16 <sx12xx_lora_recv+0x8e>
		if (!modem_release(&dev_data)) {
    5c00:	f7ff fe6e 	bl	58e0 <modem_release.constprop.0>
    5c04:	b950      	cbnz	r0, 5c1c <sx12xx_lora_recv+0x94>
    5c06:	f04f 32ff 	mov.w	r2, #4294967295
    5c0a:	f04f 33ff 	mov.w	r3, #4294967295
    5c0e:	4631      	mov	r1, r6
    5c10:	a807      	add	r0, sp, #28
    5c12:	f006 fb69 	bl	c2e8 <z_impl_k_poll>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
    5c16:	f89d 4007 	ldrb.w	r4, [sp, #7]
    5c1a:	e00a      	b.n	5c32 <sx12xx_lora_recv+0xaa>
		LOG_INF("Receive timeout");
    5c1c:	4b0a      	ldr	r3, [pc, #40]	; (5c48 <sx12xx_lora_recv+0xc0>)
    5c1e:	9311      	str	r3, [sp, #68]	; 0x44
    5c20:	2302      	movs	r3, #2
    5c22:	9310      	str	r3, [sp, #64]	; 0x40
    5c24:	4809      	ldr	r0, [pc, #36]	; (5c4c <sx12xx_lora_recv+0xc4>)
    5c26:	462b      	mov	r3, r5
    5c28:	aa10      	add	r2, sp, #64	; 0x40
    5c2a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5c2e:	f7fb ffcd 	bl	1bcc <z_impl_z_log_msg_static_create>
}
    5c32:	4620      	mov	r0, r4
    5c34:	b013      	add	sp, #76	; 0x4c
    5c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
    5c38:	f06f 040f 	mvn.w	r4, #15
    5c3c:	e7f9      	b.n	5c32 <sx12xx_lora_recv+0xaa>
    5c3e:	bf00      	nop
    5c40:	20001ccc 	.word	0x20001ccc
    5c44:	0000f224 	.word	0x0000f224
    5c48:	000102b4 	.word	0x000102b4
    5c4c:	0000f030 	.word	0x0000f030

00005c50 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
    5c50:	b510      	push	{r4, lr}
	/* Cancel ongoing reception */
	if (cb == NULL) {
    5c52:	b929      	cbnz	r1, 5c60 <sx12xx_lora_recv_async+0x10>
		if (!modem_release(&dev_data)) {
    5c54:	f7ff fe44 	bl	58e0 <modem_release.constprop.0>
    5c58:	b9d0      	cbnz	r0, 5c90 <sx12xx_lora_recv_async+0x40>
			/* Not receiving or already being stopped */
			return -EINVAL;
    5c5a:	f06f 0015 	mvn.w	r0, #21
	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
	Radio.Rx(0);

	return 0;
}
    5c5e:	bd10      	pop	{r4, pc}
    5c60:	4b0e      	ldr	r3, [pc, #56]	; (5c9c <sx12xx_lora_recv_async+0x4c>)
    5c62:	f3bf 8f5b 	dmb	ish
    5c66:	2001      	movs	r0, #1
    5c68:	e853 2f00 	ldrex	r2, [r3]
    5c6c:	2a00      	cmp	r2, #0
    5c6e:	d103      	bne.n	5c78 <sx12xx_lora_recv_async+0x28>
    5c70:	e843 0400 	strex	r4, r0, [r3]
    5c74:	2c00      	cmp	r4, #0
    5c76:	d1f7      	bne.n	5c68 <sx12xx_lora_recv_async+0x18>
    5c78:	f3bf 8f5b 	dmb	ish
	if (!modem_acquire(&dev_data)) {
    5c7c:	d10a      	bne.n	5c94 <sx12xx_lora_recv_async+0x44>
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    5c7e:	4c08      	ldr	r4, [pc, #32]	; (5ca0 <sx12xx_lora_recv_async+0x50>)
	dev_data.async_rx_cb = cb;
    5c80:	f843 1c38 	str.w	r1, [r3, #-56]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    5c84:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5c86:	21ff      	movs	r1, #255	; 0xff
    5c88:	4798      	blx	r3
	Radio.Rx(0);
    5c8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5c8c:	2000      	movs	r0, #0
    5c8e:	4798      	blx	r3
		return 0;
    5c90:	2000      	movs	r0, #0
    5c92:	e7e4      	b.n	5c5e <sx12xx_lora_recv_async+0xe>
		return -EBUSY;
    5c94:	f06f 000f 	mvn.w	r0, #15
    5c98:	e7e1      	b.n	5c5e <sx12xx_lora_recv_async+0xe>
    5c9a:	bf00      	nop
    5c9c:	20001ccc 	.word	0x20001ccc
    5ca0:	0000f224 	.word	0x0000f224

00005ca4 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
    5ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ca6:	4f29      	ldr	r7, [pc, #164]	; (5d4c <sx12xx_lora_config+0xa8>)
    5ca8:	f3bf 8f5b 	dmb	ish
    5cac:	b08b      	sub	sp, #44	; 0x2c
    5cae:	460c      	mov	r4, r1
    5cb0:	2501      	movs	r5, #1
    5cb2:	e857 3f00 	ldrex	r3, [r7]
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	d103      	bne.n	5cc2 <sx12xx_lora_config+0x1e>
    5cba:	e847 5200 	strex	r2, r5, [r7]
    5cbe:	2a00      	cmp	r2, #0
    5cc0:	d1f7      	bne.n	5cb2 <sx12xx_lora_config+0xe>
    5cc2:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
    5cc6:	d13d      	bne.n	5d44 <sx12xx_lora_config+0xa0>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
    5cc8:	4e21      	ldr	r6, [pc, #132]	; (5d50 <sx12xx_lora_config+0xac>)
    5cca:	6820      	ldr	r0, [r4, #0]
    5ccc:	68f3      	ldr	r3, [r6, #12]
    5cce:	4798      	blx	r3

	if (config->tx) {
    5cd0:	7ae3      	ldrb	r3, [r4, #11]
    5cd2:	b31b      	cbz	r3, 5d1c <sx12xx_lora_config+0x78>
		/* Store TX config locally for airtime calculations */
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
    5cd4:	2210      	movs	r2, #16
    5cd6:	4621      	mov	r1, r4
    5cd8:	f1a7 0010 	sub.w	r0, r7, #16
    5cdc:	f007 fce9 	bl	d6b2 <memcpy>
		/* Configure radio driver */
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
    5ce0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
    5ce4:	9308      	str	r3, [sp, #32]
    5ce6:	2200      	movs	r2, #0
    5ce8:	7b23      	ldrb	r3, [r4, #12]
    5cea:	9307      	str	r3, [sp, #28]
    5cec:	e9cd 2205 	strd	r2, r2, [sp, #20]
    5cf0:	e9cd 2503 	strd	r2, r5, [sp, #12]
    5cf4:	8923      	ldrh	r3, [r4, #8]
    5cf6:	9302      	str	r3, [sp, #8]
    5cf8:	79a3      	ldrb	r3, [r4, #6]
    5cfa:	9301      	str	r3, [sp, #4]
    5cfc:	7963      	ldrb	r3, [r4, #5]
    5cfe:	9300      	str	r3, [sp, #0]
    5d00:	69f7      	ldr	r7, [r6, #28]
    5d02:	7923      	ldrb	r3, [r4, #4]
    5d04:	f994 100a 	ldrsb.w	r1, [r4, #10]
    5d08:	4628      	mov	r0, r5
    5d0a:	47b8      	blx	r7
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, config->iq_inverted, true);
	}

	Radio.SetPublicNetwork(config->public_network);
    5d0c:	6db3      	ldr	r3, [r6, #88]	; 0x58
    5d0e:	7b60      	ldrb	r0, [r4, #13]
    5d10:	4798      	blx	r3

	modem_release(&dev_data);
    5d12:	f7ff fde5 	bl	58e0 <modem_release.constprop.0>
	return 0;
    5d16:	2000      	movs	r0, #0
}
    5d18:	b00b      	add	sp, #44	; 0x2c
    5d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
    5d1c:	9509      	str	r5, [sp, #36]	; 0x24
    5d1e:	7b22      	ldrb	r2, [r4, #12]
    5d20:	69b7      	ldr	r7, [r6, #24]
    5d22:	e9cd 3207 	strd	r3, r2, [sp, #28]
    5d26:	e9cd 3305 	strd	r3, r3, [sp, #20]
    5d2a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    5d2e:	220a      	movs	r2, #10
    5d30:	9202      	str	r2, [sp, #8]
    5d32:	8922      	ldrh	r2, [r4, #8]
    5d34:	e9cd 3200 	strd	r3, r2, [sp]
    5d38:	4628      	mov	r0, r5
    5d3a:	79a3      	ldrb	r3, [r4, #6]
    5d3c:	7962      	ldrb	r2, [r4, #5]
    5d3e:	7921      	ldrb	r1, [r4, #4]
    5d40:	47b8      	blx	r7
    5d42:	e7e3      	b.n	5d0c <sx12xx_lora_config+0x68>
		return -EBUSY;
    5d44:	f06f 000f 	mvn.w	r0, #15
    5d48:	e7e6      	b.n	5d18 <sx12xx_lora_config+0x74>
    5d4a:	bf00      	nop
    5d4c:	20001ccc 	.word	0x20001ccc
    5d50:	0000f224 	.word	0x0000f224

00005d54 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
    5d54:	b538      	push	{r3, r4, r5, lr}
    5d56:	4608      	mov	r0, r1
    5d58:	4611      	mov	r1, r2
    5d5a:	461a      	mov	r2, r3
    5d5c:	4b0b      	ldr	r3, [pc, #44]	; (5d8c <sx12xx_lora_test_cw+0x38>)
    5d5e:	f3bf 8f5b 	dmb	ish
    5d62:	2401      	movs	r4, #1
    5d64:	e853 5f00 	ldrex	r5, [r3]
    5d68:	2d00      	cmp	r5, #0
    5d6a:	d104      	bne.n	5d76 <sx12xx_lora_test_cw+0x22>
    5d6c:	e843 4c00 	strex	ip, r4, [r3]
    5d70:	f1bc 0f00 	cmp.w	ip, #0
    5d74:	d1f6      	bne.n	5d64 <sx12xx_lora_test_cw+0x10>
    5d76:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
    5d7a:	d104      	bne.n	5d86 <sx12xx_lora_test_cw+0x32>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
    5d7c:	4b04      	ldr	r3, [pc, #16]	; (5d90 <sx12xx_lora_test_cw+0x3c>)
    5d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5d80:	4798      	blx	r3
	return 0;
    5d82:	2000      	movs	r0, #0
}
    5d84:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    5d86:	f06f 000f 	mvn.w	r0, #15
    5d8a:	e7fb      	b.n	5d84 <sx12xx_lora_test_cw+0x30>
    5d8c:	20001ccc 	.word	0x20001ccc
    5d90:	0000f224 	.word	0x0000f224

00005d94 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
    5d94:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5d96:	4b10      	ldr	r3, [pc, #64]	; (5dd8 <sx12xx_init+0x44>)
    5d98:	f3bf 8f5b 	dmb	ish
    5d9c:	2400      	movs	r4, #0
    5d9e:	e853 2f00 	ldrex	r2, [r3]
    5da2:	e843 4100 	strex	r1, r4, [r3]
    5da6:	2900      	cmp	r1, #0
    5da8:	d1f9      	bne.n	5d9e <sx12xx_init+0xa>
    5daa:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
	dev_data.events.TxDone = sx12xx_ev_tx_done;
    5dae:	490b      	ldr	r1, [pc, #44]	; (5ddc <sx12xx_init+0x48>)
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	/* TX timeout event raises at the end of the test CW transmission */
	dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
	Radio.Init(&dev_data.events);
    5db0:	4d0b      	ldr	r5, [pc, #44]	; (5de0 <sx12xx_init+0x4c>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
    5db2:	f843 1c34 	str.w	r1, [r3, #-52]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
    5db6:	490b      	ldr	r1, [pc, #44]	; (5de4 <sx12xx_init+0x50>)
    5db8:	f843 1c2c 	str.w	r1, [r3, #-44]
	dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
    5dbc:	490a      	ldr	r1, [pc, #40]	; (5de8 <sx12xx_init+0x54>)
    5dbe:	f843 1c30 	str.w	r1, [r3, #-48]
	Radio.Init(&dev_data.events);
    5dc2:	682a      	ldr	r2, [r5, #0]
	dev_data.dev = dev;
    5dc4:	f843 0c40 	str.w	r0, [r3, #-64]
	Radio.Init(&dev_data.events);
    5dc8:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
    5dcc:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
    5dce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    5dd0:	4798      	blx	r3

	return 0;
}
    5dd2:	4620      	mov	r0, r4
    5dd4:	bd38      	pop	{r3, r4, r5, pc}
    5dd6:	bf00      	nop
    5dd8:	20001ccc 	.word	0x20001ccc
    5ddc:	00005935 	.word	0x00005935
    5de0:	0000f224 	.word	0x0000f224
    5de4:	00005835 	.word	0x00005835
    5de8:	0000d9e3 	.word	0x0000d9e3

00005dec <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
    5dec:	4b03      	ldr	r3, [pc, #12]	; (5dfc <sx127x_dio_work_handle+0x10>)
    5dee:	1ac0      	subs	r0, r0, r3
    5df0:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
    5df2:	4b03      	ldr	r3, [pc, #12]	; (5e00 <sx127x_dio_work_handle+0x14>)
    5df4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5df8:	2000      	movs	r0, #0
    5dfa:	4718      	bx	r3
    5dfc:	20001cec 	.word	0x20001cec
    5e00:	2000004c 	.word	0x2000004c

00005e04 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
    5e04:	b508      	push	{r3, lr}
	unsigned int i, pin;

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == sx127x_dios[i].port &&
    5e06:	4b05      	ldr	r3, [pc, #20]	; (5e1c <sx127x_irq_callback+0x18>)
    5e08:	4283      	cmp	r3, r0
    5e0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    5e0e:	d104      	bne.n	5e1a <sx127x_irq_callback+0x16>
    5e10:	2a20      	cmp	r2, #32
    5e12:	d102      	bne.n	5e1a <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
			k_work_submit(&dev_data.dio_work[i]);
    5e14:	4802      	ldr	r0, [pc, #8]	; (5e20 <sx127x_irq_callback+0x1c>)
    5e16:	f005 fcbf 	bl	b798 <k_work_submit>
		}
	}
}
    5e1a:	bd08      	pop	{r3, pc}
    5e1c:	0000ed3c 	.word	0x0000ed3c
    5e20:	20001cec 	.word	0x20001cec

00005e24 <SX1276WriteBuffer.part.0>:
int sx127x_write(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
}

void SX127xWriteBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
    5e24:	b580      	push	{r7, lr}
    5e26:	af00      	add	r7, sp, #0
{
	int ret;

	ret = sx127x_write(addr, buffer, size);
	if (ret < 0) {
		LOG_ERR("Unable to write address: 0x%x", addr);
    5e28:	b088      	sub	sp, #32
    5e2a:	466a      	mov	r2, sp
    5e2c:	4b06      	ldr	r3, [pc, #24]	; (5e48 <SX1276WriteBuffer.part.0+0x24>)
    5e2e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5e32:	2303      	movs	r3, #3
    5e34:	f842 3f10 	str.w	r3, [r2, #16]!
    5e38:	4804      	ldr	r0, [pc, #16]	; (5e4c <SX1276WriteBuffer.part.0+0x28>)
    5e3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5e3e:	f007 fdd4 	bl	d9ea <z_log_msg_static_create.constprop.0>
	}
}
    5e42:	46bd      	mov	sp, r7
    5e44:	bd80      	pop	{r7, pc}
    5e46:	bf00      	nop
    5e48:	000102e3 	.word	0x000102e3
    5e4c:	0000f028 	.word	0x0000f028

00005e50 <SX1276ReadBuffer.part.0>:

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
    5e50:	b580      	push	{r7, lr}
    5e52:	af00      	add	r7, sp, #0
{
	int ret;

	ret = sx127x_read(addr, buffer, size);
	if (ret < 0) {
		LOG_ERR("Unable to read address: 0x%x", addr);
    5e54:	b088      	sub	sp, #32
    5e56:	466a      	mov	r2, sp
    5e58:	4b06      	ldr	r3, [pc, #24]	; (5e74 <SX1276ReadBuffer.part.0+0x24>)
    5e5a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5e5e:	2303      	movs	r3, #3
    5e60:	f842 3f10 	str.w	r3, [r2, #16]!
    5e64:	4804      	ldr	r0, [pc, #16]	; (5e78 <SX1276ReadBuffer.part.0+0x28>)
    5e66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5e6a:	f007 fdbe 	bl	d9ea <z_log_msg_static_create.constprop.0>
	}
}
    5e6e:	46bd      	mov	sp, r7
    5e70:	bd80      	pop	{r7, pc}
    5e72:	bf00      	nop
    5e74:	00010301 	.word	0x00010301
    5e78:	0000f028 	.word	0x0000f028

00005e7c <gpio_pin_set_dt.constprop.0.isra.0>:
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
    5e7c:	4b07      	ldr	r3, [pc, #28]	; (5e9c <gpio_pin_set_dt.constprop.0.isra.0+0x20>)
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    5e7e:	691a      	ldr	r2, [r3, #16]
    5e80:	6812      	ldr	r2, [r2, #0]
    5e82:	0612      	lsls	r2, r2, #24
		value = (value != 0) ? 0 : 1;
    5e84:	bf48      	it	mi
    5e86:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
    5e8a:	b120      	cbz	r0, 5e96 <gpio_pin_set_dt.constprop.0.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
    5e8c:	689b      	ldr	r3, [r3, #8]
    5e8e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    5e90:	4802      	ldr	r0, [pc, #8]	; (5e9c <gpio_pin_set_dt.constprop.0.isra.0+0x20>)
    5e92:	2180      	movs	r1, #128	; 0x80
    5e94:	4718      	bx	r3
    5e96:	689b      	ldr	r3, [r3, #8]
    5e98:	691b      	ldr	r3, [r3, #16]
    5e9a:	e7f9      	b.n	5e90 <gpio_pin_set_dt.constprop.0.isra.0+0x14>
    5e9c:	0000ed3c 	.word	0x0000ed3c

00005ea0 <SX1276IoIrqInit>:
{
    5ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ea2:	b087      	sub	sp, #28
		if (!irqHandlers[i]) {
    5ea4:	6803      	ldr	r3, [r0, #0]
{
    5ea6:	af00      	add	r7, sp, #0
		if (!irqHandlers[i]) {
    5ea8:	b1bb      	cbz	r3, 5eda <SX1276IoIrqInit+0x3a>
    5eaa:	4c28      	ldr	r4, [pc, #160]	; (5f4c <SX1276IoIrqInit+0xac>)
    5eac:	4620      	mov	r0, r4
    5eae:	f008 fa4a 	bl	e346 <z_device_is_ready>
		if (!device_is_ready(sx127x_dios[i].port)) {
    5eb2:	b9a8      	cbnz	r0, 5ee0 <SX1276IoIrqInit+0x40>
			LOG_ERR("GPIO port %s not ready",
    5eb4:	6823      	ldr	r3, [r4, #0]
    5eb6:	466c      	mov	r4, sp
    5eb8:	b088      	sub	sp, #32
    5eba:	466a      	mov	r2, sp
    5ebc:	4924      	ldr	r1, [pc, #144]	; (5f50 <SX1276IoIrqInit+0xb0>)
    5ebe:	4825      	ldr	r0, [pc, #148]	; (5f54 <SX1276IoIrqInit+0xb4>)
    5ec0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
    5ec8:	8393      	strh	r3, [r2, #28]
    5eca:	4b23      	ldr	r3, [pc, #140]	; (5f58 <SX1276IoIrqInit+0xb8>)
    5ecc:	f842 3f10 	str.w	r3, [r2, #16]!
    5ed0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    5ed4:	f007 fd89 	bl	d9ea <z_log_msg_static_create.constprop.0>
    5ed8:	46a5      	mov	sp, r4
}
    5eda:	371c      	adds	r7, #28
    5edc:	46bd      	mov	sp, r7
    5ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
    5ee0:	491e      	ldr	r1, [pc, #120]	; (5f5c <SX1276IoIrqInit+0xbc>)
    5ee2:	481f      	ldr	r0, [pc, #124]	; (5f60 <SX1276IoIrqInit+0xc0>)
    5ee4:	f008 fb4d 	bl	e582 <k_work_init>
	struct gpio_driver_data *data =
    5ee8:	6926      	ldr	r6, [r4, #16]
	const struct gpio_driver_api *api =
    5eea:	68a5      	ldr	r5, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5eec:	6833      	ldr	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
    5eee:	4a1d      	ldr	r2, [pc, #116]	; (5f64 <SX1276IoIrqInit+0xc4>)
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5ef0:	f023 0320 	bic.w	r3, r3, #32
    5ef4:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
    5ef6:	682b      	ldr	r3, [r5, #0]
    5ef8:	2105      	movs	r1, #5
    5efa:	4620      	mov	r0, r4
    5efc:	4798      	blx	r3
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    5efe:	491a      	ldr	r1, [pc, #104]	; (5f68 <SX1276IoIrqInit+0xc8>)
    5f00:	4b1a      	ldr	r3, [pc, #104]	; (5f6c <SX1276IoIrqInit+0xcc>)
    5f02:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    5f04:	2320      	movs	r3, #32
    5f06:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    5f08:	69eb      	ldr	r3, [r5, #28]
    5f0a:	b95b      	cbnz	r3, 5f24 <SX1276IoIrqInit+0x84>
			LOG_ERR("Could not set gpio callback.");
    5f0c:	4b18      	ldr	r3, [pc, #96]	; (5f70 <SX1276IoIrqInit+0xd0>)
    5f0e:	617b      	str	r3, [r7, #20]
    5f10:	4810      	ldr	r0, [pc, #64]	; (5f54 <SX1276IoIrqInit+0xb4>)
    5f12:	2302      	movs	r3, #2
    5f14:	f107 0210 	add.w	r2, r7, #16
    5f18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5f1c:	613b      	str	r3, [r7, #16]
    5f1e:	f007 fd64 	bl	d9ea <z_log_msg_static_create.constprop.0>
			return;
    5f22:	e7da      	b.n	5eda <SX1276IoIrqInit+0x3a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    5f24:	2201      	movs	r2, #1
    5f26:	4620      	mov	r0, r4
    5f28:	4798      	blx	r3
		if (gpio_add_callback(sx127x_dios[i].port, &callbacks[i]) < 0) {
    5f2a:	2800      	cmp	r0, #0
    5f2c:	dbee      	blt.n	5f0c <SX1276IoIrqInit+0x6c>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    5f2e:	6833      	ldr	r3, [r6, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5f30:	69ad      	ldr	r5, [r5, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    5f32:	f013 0f20 	tst.w	r3, #32
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5f36:	bf14      	ite	ne
    5f38:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    5f3c:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    5f40:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    5f44:	2105      	movs	r1, #5
    5f46:	4620      	mov	r0, r4
    5f48:	47a8      	blx	r5
	for (i = 0; i < SX127X_MAX_DIO; i++) {
    5f4a:	e7c6      	b.n	5eda <SX1276IoIrqInit+0x3a>
    5f4c:	0000ed3c 	.word	0x0000ed3c
    5f50:	0001031e 	.word	0x0001031e
    5f54:	0000f028 	.word	0x0000f028
    5f58:	01000003 	.word	0x01000003
    5f5c:	00005ded 	.word	0x00005ded
    5f60:	20001cec 	.word	0x20001cec
    5f64:	00010020 	.word	0x00010020
    5f68:	20001ce0 	.word	0x20001ce0
    5f6c:	00005e05 	.word	0x00005e05
    5f70:	00010335 	.word	0x00010335

00005f74 <sx127x_read>:
{
    5f74:	b510      	push	{r4, lr}
    5f76:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
    5f78:	f10d 0307 	add.w	r3, sp, #7
    5f7c:	9306      	str	r3, [sp, #24]
    5f7e:	2301      	movs	r3, #1
    5f80:	e9cd 3107 	strd	r3, r1, [sp, #28]
	return sx127x_transceive(reg_addr, false, data, len);
    5f84:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
    5f86:	2302      	movs	r3, #2
    5f88:	aa06      	add	r2, sp, #24
		const struct spi_buf_set rx = {
    5f8a:	e9cd 3203 	strd	r3, r2, [sp, #12]
    5f8e:	f88d 0007 	strb.w	r0, [sp, #7]
	struct spi_buf_set tx = {
    5f92:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
    5f94:	9305      	str	r3, [sp, #20]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    5f96:	4804      	ldr	r0, [pc, #16]	; (5fa8 <sx127x_read+0x34>)
    5f98:	4904      	ldr	r1, [pc, #16]	; (5fac <sx127x_read+0x38>)
    5f9a:	6883      	ldr	r3, [r0, #8]
    5f9c:	aa02      	add	r2, sp, #8
    5f9e:	681c      	ldr	r4, [r3, #0]
    5fa0:	ab04      	add	r3, sp, #16
    5fa2:	47a0      	blx	r4
}
    5fa4:	b00a      	add	sp, #40	; 0x28
    5fa6:	bd10      	pop	{r4, pc}
    5fa8:	0000ed84 	.word	0x0000ed84
    5fac:	0000f294 	.word	0x0000f294

00005fb0 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
    5fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fb2:	b089      	sub	sp, #36	; 0x24
    5fb4:	4605      	mov	r5, r0
    5fb6:	af00      	add	r7, sp, #0
    5fb8:	4832      	ldr	r0, [pc, #200]	; (6084 <sx127x_lora_init+0xd4>)
    5fba:	f008 f9c4 	bl	e346 <z_device_is_ready>
	if (!device_is_ready(spec->bus)) {
    5fbe:	b368      	cbz	r0, 601c <sx127x_lora_init+0x6c>
	    !device_is_ready(spec->config.cs->gpio.port)) {
    5fc0:	4b31      	ldr	r3, [pc, #196]	; (6088 <sx127x_lora_init+0xd8>)
    5fc2:	6818      	ldr	r0, [r3, #0]
    5fc4:	f008 f9bf 	bl	e346 <z_device_is_ready>
	if (spec->config.cs &&
    5fc8:	b340      	cbz	r0, 601c <sx127x_lora_init+0x6c>
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
    5fca:	4830      	ldr	r0, [pc, #192]	; (608c <sx127x_lora_init+0xdc>)
    5fcc:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
    5fd0:	f7ff fcc0 	bl	5954 <__sx12xx_configure_pin>
	if (ret) {
    5fd4:	4604      	mov	r4, r0
    5fd6:	bb70      	cbnz	r0, 6036 <sx127x_lora_init+0x86>
	return z_impl_k_sleep(timeout);
    5fd8:	2100      	movs	r1, #0
    5fda:	f640 40cd 	movw	r0, #3277	; 0xccd
    5fde:	f005 fedb 	bl	bd98 <z_impl_k_sleep>
		return ret;
	}

	k_sleep(K_MSEC(100));
	gpio_pin_set_dt(&dev_config.reset, 0);
    5fe2:	4620      	mov	r0, r4
    5fe4:	f7ff ff4a 	bl	5e7c <gpio_pin_set_dt.constprop.0.isra.0>
    5fe8:	2100      	movs	r1, #0
    5fea:	f640 40cd 	movw	r0, #3277	; 0xccd
    5fee:	f005 fed3 	bl	bd98 <z_impl_k_sleep>
	k_sleep(K_MSEC(100));

	ret = sx127x_read(REG_VERSION, &regval, 1);
    5ff2:	2201      	movs	r2, #1
    5ff4:	1df9      	adds	r1, r7, #7
    5ff6:	2042      	movs	r0, #66	; 0x42
    5ff8:	f7ff ffbc 	bl	5f74 <sx127x_read>
	if (ret < 0) {
    5ffc:	2800      	cmp	r0, #0
    5ffe:	da1e      	bge.n	603e <sx127x_lora_init+0x8e>
		LOG_ERR("Unable to read version info");
    6000:	4b23      	ldr	r3, [pc, #140]	; (6090 <sx127x_lora_init+0xe0>)
    6002:	61fb      	str	r3, [r7, #28]
    6004:	2302      	movs	r3, #2
    6006:	4823      	ldr	r0, [pc, #140]	; (6094 <sx127x_lora_init+0xe4>)
    6008:	61bb      	str	r3, [r7, #24]
    600a:	f107 0218 	add.w	r2, r7, #24
    600e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6012:	f007 fcea 	bl	d9ea <z_log_msg_static_create.constprop.0>
		return -EIO;
    6016:	f06f 0404 	mvn.w	r4, #4
    601a:	e00c      	b.n	6036 <sx127x_lora_init+0x86>
		LOG_ERR("SPI device not ready");
    601c:	4b1e      	ldr	r3, [pc, #120]	; (6098 <sx127x_lora_init+0xe8>)
    601e:	61fb      	str	r3, [r7, #28]
    6020:	2302      	movs	r3, #2
    6022:	481c      	ldr	r0, [pc, #112]	; (6094 <sx127x_lora_init+0xe4>)
    6024:	61bb      	str	r3, [r7, #24]
    6026:	f107 0218 	add.w	r2, r7, #24
    602a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    602e:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("SPI device not ready");
    6032:	f007 fcda 	bl	d9ea <z_log_msg_static_create.constprop.0>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
    6036:	4620      	mov	r0, r4
    6038:	3724      	adds	r7, #36	; 0x24
    603a:	46bd      	mov	sp, r7
    603c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("SX127x version 0x%02x found", regval);
    603e:	466e      	mov	r6, sp
    6040:	b088      	sub	sp, #32
    6042:	79fb      	ldrb	r3, [r7, #7]
    6044:	466a      	mov	r2, sp
    6046:	4915      	ldr	r1, [pc, #84]	; (609c <sx127x_lora_init+0xec>)
    6048:	4812      	ldr	r0, [pc, #72]	; (6094 <sx127x_lora_init+0xe4>)
    604a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    604e:	2303      	movs	r3, #3
    6050:	f842 3f10 	str.w	r3, [r2, #16]!
    6054:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    6058:	f007 fcc7 	bl	d9ea <z_log_msg_static_create.constprop.0>
	ret = sx12xx_init(dev);
    605c:	4628      	mov	r0, r5
    605e:	46b5      	mov	sp, r6
    6060:	f7ff fe98 	bl	5d94 <sx12xx_init>
	if (ret < 0) {
    6064:	1e05      	subs	r5, r0, #0
    6066:	dae6      	bge.n	6036 <sx127x_lora_init+0x86>
		LOG_ERR("Failed to initialize SX12xx common");
    6068:	4b0d      	ldr	r3, [pc, #52]	; (60a0 <sx127x_lora_init+0xf0>)
    606a:	61fb      	str	r3, [r7, #28]
    606c:	2302      	movs	r3, #2
    606e:	4809      	ldr	r0, [pc, #36]	; (6094 <sx127x_lora_init+0xe4>)
    6070:	61bb      	str	r3, [r7, #24]
    6072:	f107 0218 	add.w	r2, r7, #24
    6076:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    607a:	f007 fcb6 	bl	d9ea <z_log_msg_static_create.constprop.0>
		return ret;
    607e:	462c      	mov	r4, r5
    6080:	e7d9      	b.n	6036 <sx127x_lora_init+0x86>
    6082:	bf00      	nop
    6084:	0000ed84 	.word	0x0000ed84
    6088:	20000040 	.word	0x20000040
    608c:	0000f2a0 	.word	0x0000f2a0
    6090:	00010367 	.word	0x00010367
    6094:	0000f028 	.word	0x0000f028
    6098:	00010352 	.word	0x00010352
    609c:	00010383 	.word	0x00010383
    60a0:	0001039f 	.word	0x0001039f

000060a4 <sx127x_write>:
{
    60a4:	b510      	push	{r4, lr}
    60a6:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
    60a8:	f10d 0307 	add.w	r3, sp, #7
    60ac:	9304      	str	r3, [sp, #16]
    60ae:	2301      	movs	r3, #1
    60b0:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
    60b4:	ab04      	add	r3, sp, #16
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    60b6:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
    60ba:	9302      	str	r3, [sp, #8]
    60bc:	2302      	movs	r3, #2
    60be:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    60c2:	9207      	str	r2, [sp, #28]
	struct spi_buf_set tx = {
    60c4:	9303      	str	r3, [sp, #12]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    60c6:	4804      	ldr	r0, [pc, #16]	; (60d8 <sx127x_write+0x34>)
    60c8:	4904      	ldr	r1, [pc, #16]	; (60dc <sx127x_write+0x38>)
    60ca:	6883      	ldr	r3, [r0, #8]
    60cc:	aa02      	add	r2, sp, #8
    60ce:	681c      	ldr	r4, [r3, #0]
    60d0:	2300      	movs	r3, #0
    60d2:	47a0      	blx	r4
}
    60d4:	b008      	add	sp, #32
    60d6:	bd10      	pop	{r4, pc}
    60d8:	0000ed84 	.word	0x0000ed84
    60dc:	0000f294 	.word	0x0000f294

000060e0 <SX1276SetRfTxPower>:
{
    60e0:	b510      	push	{r4, lr}
    60e2:	b088      	sub	sp, #32
	uint8_t pa_config = 0;
    60e4:	2300      	movs	r3, #0
{
    60e6:	4604      	mov	r4, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    60e8:	2201      	movs	r2, #1
    60ea:	f10d 0107 	add.w	r1, sp, #7
    60ee:	204d      	movs	r0, #77	; 0x4d
	uint8_t pa_config = 0;
    60f0:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t pa_dac = 0;
    60f4:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    60f8:	f7ff ff3c 	bl	5f74 <sx127x_read>
	if (ret < 0) {
    60fc:	2800      	cmp	r0, #0
    60fe:	da0b      	bge.n	6118 <SX1276SetRfTxPower+0x38>
		LOG_ERR("Unable to read PA dac");
    6100:	4b1f      	ldr	r3, [pc, #124]	; (6180 <SX1276SetRfTxPower+0xa0>)
		LOG_ERR("Unable to write PA dac");
    6102:	9307      	str	r3, [sp, #28]
    6104:	481f      	ldr	r0, [pc, #124]	; (6184 <SX1276SetRfTxPower+0xa4>)
    6106:	2302      	movs	r3, #2
    6108:	aa06      	add	r2, sp, #24
    610a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    610e:	9306      	str	r3, [sp, #24]
    6110:	f007 fc6b 	bl	d9ea <z_log_msg_static_create.constprop.0>
}
    6114:	b008      	add	sp, #32
    6116:	bd10      	pop	{r4, pc}
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    6118:	2c14      	cmp	r4, #20
    611a:	4622      	mov	r2, r4
    611c:	bfa8      	it	ge
    611e:	2214      	movge	r2, #20
    6120:	2a02      	cmp	r2, #2
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    6122:	f89d 1007 	ldrb.w	r1, [sp, #7]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
    6126:	f89d 3006 	ldrb.w	r3, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    612a:	bfb8      	it	lt
    612c:	2202      	movlt	r2, #2
    612e:	b2d2      	uxtb	r2, r2
		if (power > 17) {
    6130:	2c11      	cmp	r4, #17
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    6132:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    6136:	bfcc      	ite	gt
    6138:	3a05      	subgt	r2, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    613a:	3a02      	suble	r2, #2
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
    613c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			pa_dac |= SX127X_PADAC_20DBM_ON;
    6140:	bfcc      	ite	gt
    6142:	f041 0107 	orrgt.w	r1, r1, #7
			pa_dac |= SX127X_PADAC_20DBM_OFF;
    6146:	f041 0104 	orrle.w	r1, r1, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    614a:	4313      	orrs	r3, r2
    614c:	b2db      	uxtb	r3, r3
			pa_dac |= SX127X_PADAC_20DBM_OFF;
    614e:	f88d 1007 	strb.w	r1, [sp, #7]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    6152:	2201      	movs	r2, #1
    6154:	f10d 0106 	add.w	r1, sp, #6
    6158:	2009      	movs	r0, #9
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    615a:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    615e:	f7ff ffa1 	bl	60a4 <sx127x_write>
	if (ret < 0) {
    6162:	2800      	cmp	r0, #0
    6164:	da01      	bge.n	616a <SX1276SetRfTxPower+0x8a>
		LOG_ERR("Unable to write PA config");
    6166:	4b08      	ldr	r3, [pc, #32]	; (6188 <SX1276SetRfTxPower+0xa8>)
    6168:	e7cb      	b.n	6102 <SX1276SetRfTxPower+0x22>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
    616a:	2201      	movs	r2, #1
    616c:	f10d 0107 	add.w	r1, sp, #7
    6170:	204d      	movs	r0, #77	; 0x4d
    6172:	f7ff ff97 	bl	60a4 <sx127x_write>
	if (ret < 0) {
    6176:	2800      	cmp	r0, #0
    6178:	dacc      	bge.n	6114 <SX1276SetRfTxPower+0x34>
		LOG_ERR("Unable to write PA dac");
    617a:	4b04      	ldr	r3, [pc, #16]	; (618c <SX1276SetRfTxPower+0xac>)
    617c:	e7c1      	b.n	6102 <SX1276SetRfTxPower+0x22>
    617e:	bf00      	nop
    6180:	000103c2 	.word	0x000103c2
    6184:	0000f028 	.word	0x0000f028
    6188:	000103d8 	.word	0x000103d8
    618c:	000103f2 	.word	0x000103f2

00006190 <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    6190:	4a04      	ldr	r2, [pc, #16]	; (61a4 <TimerInsertNewHeadTimer+0x14>)
    6192:	6813      	ldr	r3, [r2, #0]

    if( cur != NULL )
    6194:	b10b      	cbz	r3, 619a <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
    6196:	2100      	movs	r1, #0
    6198:	7259      	strb	r1, [r3, #9]
    }

    obj->Next = cur;
    619a:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
    619c:	6010      	str	r0, [r2, #0]
    TimerSetTimeout( TimerListHead );
    619e:	f007 bc63 	b.w	da68 <TimerSetTimeout>
    61a2:	bf00      	nop
    61a4:	20001cfc 	.word	0x20001cfc

000061a8 <TimerStart>:
{
    61a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    61aa:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    61ac:	a801      	add	r0, sp, #4
    61ae:	f007 fc08 	bl	d9c2 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
    61b2:	b16c      	cbz	r4, 61d0 <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    61b4:	4d17      	ldr	r5, [pc, #92]	; (6214 <TimerStart+0x6c>)
    61b6:	682a      	ldr	r2, [r5, #0]
    61b8:	4613      	mov	r3, r2

    while( cur != NULL )
    61ba:	b973      	cbnz	r3, 61da <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
    61bc:	6863      	ldr	r3, [r4, #4]
    61be:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
    61c0:	2301      	movs	r3, #1
    61c2:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
    61c4:	b96a      	cbnz	r2, 61e2 <TimerStart+0x3a>
        RtcSetTimerContext( );
    61c6:	f7ff fb27 	bl	5818 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
    61ca:	4620      	mov	r0, r4
    61cc:	f7ff ffe0 	bl	6190 <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
    61d0:	a801      	add	r0, sp, #4
    61d2:	f007 fc00 	bl	d9d6 <BoardCriticalSectionEnd>
}
    61d6:	b003      	add	sp, #12
    61d8:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
    61da:	429c      	cmp	r4, r3
    61dc:	d0f8      	beq.n	61d0 <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
    61de:	695b      	ldr	r3, [r3, #20]
    61e0:	e7eb      	b.n	61ba <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
    61e2:	f7ff faef 	bl	57c4 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
    61e6:	6823      	ldr	r3, [r4, #0]
    61e8:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
    61ea:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
    61ec:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
    61ee:	681a      	ldr	r2, [r3, #0]
    61f0:	4290      	cmp	r0, r2
    61f2:	d3ea      	bcc.n	61ca <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
    61f4:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
    61f6:	6959      	ldr	r1, [r3, #20]
    61f8:	b911      	cbnz	r1, 6200 <TimerStart+0x58>
    cur->Next = obj;
    61fa:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
    61fc:	6161      	str	r1, [r4, #20]
    61fe:	e7e7      	b.n	61d0 <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
    6200:	6811      	ldr	r1, [r2, #0]
    6202:	4288      	cmp	r0, r1
    6204:	d902      	bls.n	620c <TimerStart+0x64>
            next = next->Next;
    6206:	4613      	mov	r3, r2
    6208:	6952      	ldr	r2, [r2, #20]
    620a:	e7f4      	b.n	61f6 <TimerStart+0x4e>
            cur->Next = obj;
    620c:	615c      	str	r4, [r3, #20]
            obj->Next = next;
    620e:	6162      	str	r2, [r4, #20]
            return;
    6210:	e7de      	b.n	61d0 <TimerStart+0x28>
    6212:	bf00      	nop
    6214:	20001cfc 	.word	0x20001cfc

00006218 <TimerIrqHandler>:
{
    6218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
    621a:	f7ff fb05 	bl	5828 <RtcGetTimerContext>
    if( TimerListHead != NULL )
    621e:	4c1c      	ldr	r4, [pc, #112]	; (6290 <TimerIrqHandler+0x78>)
    uint32_t old =  RtcGetTimerContext( );
    6220:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
    6222:	f7ff faf9 	bl	5818 <RtcSetTimerContext>
    if( TimerListHead != NULL )
    6226:	6823      	ldr	r3, [r4, #0]
    6228:	b1a3      	cbz	r3, 6254 <TimerIrqHandler+0x3c>
    uint32_t deltaContext = now - old; // intentional wrap around
    622a:	1b47      	subs	r7, r0, r5
    622c:	461e      	mov	r6, r3
                next->Timestamp -= deltaContext;
    622e:	1a2d      	subs	r5, r5, r0
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
    6230:	6971      	ldr	r1, [r6, #20]
    6232:	b929      	cbnz	r1, 6240 <TimerIrqHandler+0x28>
        TimerListHead = TimerListHead->Next;
    6234:	695a      	ldr	r2, [r3, #20]
    6236:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    6238:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
    623a:	7219      	strb	r1, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    623c:	b942      	cbnz	r2, 6250 <TimerIrqHandler+0x38>
    623e:	e7fe      	b.n	623e <TimerIrqHandler+0x26>
            if( next->Timestamp > deltaContext )
    6240:	680a      	ldr	r2, [r1, #0]
    6242:	42ba      	cmp	r2, r7
                next->Timestamp -= deltaContext;
    6244:	bf8c      	ite	hi
    6246:	1952      	addhi	r2, r2, r5
                next->Timestamp = 0;
    6248:	2200      	movls	r2, #0
    624a:	600a      	str	r2, [r1, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
    624c:	6976      	ldr	r6, [r6, #20]
    624e:	e7ef      	b.n	6230 <TimerIrqHandler+0x18>
        ExecuteCallBack( cur->Callback, cur->Context );
    6250:	6918      	ldr	r0, [r3, #16]
    6252:	4790      	blx	r2
        cur->IsStarted = false;
    6254:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    6256:	6823      	ldr	r3, [r4, #0]
    6258:	b92b      	cbnz	r3, 6266 <TimerIrqHandler+0x4e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    625a:	6820      	ldr	r0, [r4, #0]
    625c:	b980      	cbnz	r0, 6280 <TimerIrqHandler+0x68>
}
    625e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
    6260:	6918      	ldr	r0, [r3, #16]
    6262:	4790      	blx	r2
    6264:	e7f7      	b.n	6256 <TimerIrqHandler+0x3e>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    6266:	681d      	ldr	r5, [r3, #0]
    6268:	f7ff faac 	bl	57c4 <RtcGetTimerElapsedTime>
    626c:	4285      	cmp	r5, r0
    626e:	d2f4      	bcs.n	625a <TimerIrqHandler+0x42>
        cur = TimerListHead;
    6270:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
    6272:	695a      	ldr	r2, [r3, #20]
    6274:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    6276:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
    6278:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    627a:	2a00      	cmp	r2, #0
    627c:	d1f0      	bne.n	6260 <TimerIrqHandler+0x48>
    627e:	e7fe      	b.n	627e <TimerIrqHandler+0x66>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    6280:	7a43      	ldrb	r3, [r0, #9]
    6282:	2b00      	cmp	r3, #0
    6284:	d1eb      	bne.n	625e <TimerIrqHandler+0x46>
}
    6286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerSetTimeout( TimerListHead );
    628a:	f007 bbed 	b.w	da68 <TimerSetTimeout>
    628e:	bf00      	nop
    6290:	20001cfc 	.word	0x20001cfc

00006294 <TimerStop>:
{
    6294:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
    6296:	4d13      	ldr	r5, [pc, #76]	; (62e4 <TimerStop+0x50>)
{
    6298:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    629a:	a801      	add	r0, sp, #4
    629c:	f007 fb91 	bl	d9c2 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
    62a0:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
    62a2:	b16b      	cbz	r3, 62c0 <TimerStop+0x2c>
    62a4:	b164      	cbz	r4, 62c0 <TimerStop+0x2c>
    obj->IsStarted = false;
    62a6:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
    62a8:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
    62aa:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
    62ac:	d111      	bne.n	62d2 <TimerStop+0x3e>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
    62ae:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
    62b0:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
    62b2:	b161      	cbz	r1, 62ce <TimerStop+0x3a>
            TimerListHead->IsNext2Expire = false;
    62b4:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
    62b6:	b144      	cbz	r4, 62ca <TimerStop+0x36>
                TimerSetTimeout( TimerListHead );
    62b8:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
    62ba:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
    62bc:	f007 fbd4 	bl	da68 <TimerSetTimeout>
        CRITICAL_SECTION_END( );
    62c0:	a801      	add	r0, sp, #4
    62c2:	f007 fb88 	bl	d9d6 <BoardCriticalSectionEnd>
}
    62c6:	b003      	add	sp, #12
    62c8:	bd30      	pop	{r4, r5, pc}
                RtcStopAlarm( );
    62ca:	f7ff fa85 	bl	57d8 <RtcStopAlarm>
                TimerListHead = NULL;
    62ce:	602c      	str	r4, [r5, #0]
    62d0:	e7f6      	b.n	62c0 <TimerStop+0x2c>
                cur = cur->Next;
    62d2:	461a      	mov	r2, r3
    62d4:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
    62d6:	2b00      	cmp	r3, #0
    62d8:	d0f2      	beq.n	62c0 <TimerStop+0x2c>
            if( cur == obj )
    62da:	429c      	cmp	r4, r3
    62dc:	d1f9      	bne.n	62d2 <TimerStop+0x3e>
                if( cur->Next != NULL )
    62de:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
    62e0:	6153      	str	r3, [r2, #20]
    62e2:	e7ed      	b.n	62c0 <TimerStop+0x2c>
    62e4:	20001cfc 	.word	0x20001cfc

000062e8 <GetFskBandwidthRegValue>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
             SX1276_PLL_STEP_SCALED );
}

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    62e8:	b510      	push	{r4, lr}
    62ea:	4b09      	ldr	r3, [pc, #36]	; (6310 <GetFskBandwidthRegValue+0x28>)
    62ec:	2200      	movs	r2, #0
    62ee:	4619      	mov	r1, r3
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
    62f0:	681c      	ldr	r4, [r3, #0]
    62f2:	4284      	cmp	r4, r0
    62f4:	d802      	bhi.n	62fc <GetFskBandwidthRegValue+0x14>
    62f6:	689c      	ldr	r4, [r3, #8]
    62f8:	4284      	cmp	r4, r0
    62fa:	d805      	bhi.n	6308 <GetFskBandwidthRegValue+0x20>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    62fc:	3201      	adds	r2, #1
    62fe:	2a15      	cmp	r2, #21
    6300:	f103 0308 	add.w	r3, r3, #8
    6304:	d1f4      	bne.n	62f0 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
    6306:	e7fe      	b.n	6306 <GetFskBandwidthRegValue+0x1e>
            return FskBandwidths[i].RegValue;
    6308:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    630c:	7908      	ldrb	r0, [r1, #4]
}
    630e:	bd10      	pop	{r4, pc}
    6310:	0000f2b4 	.word	0x0000f2b4

00006314 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
    6314:	4b05      	ldr	r3, [pc, #20]	; (632c <SX1276OnDio4Irq+0x18>)
    6316:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    631a:	b92a      	cbnz	r2, 6328 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
    631c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    6320:	b912      	cbnz	r2, 6328 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    6322:	2201      	movs	r2, #1
    6324:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
    6328:	4770      	bx	lr
    632a:	bf00      	nop
    632c:	20001d48 	.word	0x20001d48

00006330 <SX1276GetStatus>:
}
    6330:	4b01      	ldr	r3, [pc, #4]	; (6338 <SX1276GetStatus+0x8>)
    6332:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    6336:	4770      	bx	lr
    6338:	20001d48 	.word	0x20001d48

0000633c <SX1276GetTimeOnAir>:
{
    633c:	b5f0      	push	{r4, r5, r6, r7, lr}
    633e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    6342:	f89d c018 	ldrb.w	ip, [sp, #24]
    6346:	f89d e01c 	ldrb.w	lr, [sp, #28]
    634a:	f89d 5020 	ldrb.w	r5, [sp, #32]
    switch( modem )
    634e:	b140      	cbz	r0, 6362 <SX1276GetTimeOnAir+0x26>
    6350:	2801      	cmp	r0, #1
    6352:	d014      	beq.n	637e <SX1276GetTimeOnAir+0x42>
    6354:	2201      	movs	r2, #1
    6356:	2300      	movs	r3, #0
    return ( numerator + denominator - 1 ) / denominator;
    6358:	1898      	adds	r0, r3, r2
    635a:	3801      	subs	r0, #1
    635c:	fbb0 f0f2 	udiv	r0, r0, r2
}
    6360:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ( ( fixLen == false ) ? 8 : 0 ) +
    6362:	f08c 0c01 	eor.w	ip, ip, #1
    return ( preambleLen << 3 ) +
    6366:	00e3      	lsls	r3, r4, #3
    6368:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) +
    636c:	3318      	adds	r3, #24
               ( 0 ) + // Address filter size
    636e:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
             ( syncWordLength << 3 ) +
    6372:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
    6376:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    637a:	434b      	muls	r3, r1
        break;
    637c:	e7ec      	b.n	6358 <SX1276GetTimeOnAir+0x1c>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
    637e:	1f50      	subs	r0, r2, #5
    6380:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
    6382:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
    6386:	d804      	bhi.n	6392 <SX1276GetTimeOnAir+0x56>
        if( preambleLen < 12 )
    6388:	2c0c      	cmp	r4, #12
    638a:	bf38      	it	cc
    638c:	240c      	movcc	r4, #12
    bool    lowDatareOptimize = false;
    638e:	2700      	movs	r7, #0
    6390:	e006      	b.n	63a0 <SX1276GetTimeOnAir+0x64>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    6392:	b9c1      	cbnz	r1, 63c6 <SX1276GetTimeOnAir+0x8a>
    6394:	f1a2 070b 	sub.w	r7, r2, #11
    6398:	2f01      	cmp	r7, #1
    639a:	bf8c      	ite	hi
    639c:	2700      	movhi	r7, #0
    639e:	2701      	movls	r7, #1
                            ( crcOn ? 16 : 0 ) -
    63a0:	0128      	lsls	r0, r5, #4
                            ( fixLen ? 0 : 20 );
    63a2:	f1bc 0f00 	cmp.w	ip, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
    63a6:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
                            ( fixLen ? 0 : 20 );
    63aa:	bf0c      	ite	eq
    63ac:	2514      	moveq	r5, #20
    63ae:	2500      	movne	r5, #0
                            ( crcOn ? 16 : 0 ) -
    63b0:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    if( datarate <= 6 )
    63b4:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
    63b6:	ea4f 0682 	mov.w	r6, r2, lsl #2
    63ba:	4428      	add	r0, r5
            ceilDenominator = 4 * ( datarate - 2 );
    63bc:	f1a2 0c02 	sub.w	ip, r2, #2
    if( datarate <= 6 )
    63c0:	d808      	bhi.n	63d4 <SX1276GetTimeOnAir+0x98>
            ceilDenominator = 4 * datarate;
    63c2:	4635      	mov	r5, r6
    63c4:	e00b      	b.n	63de <SX1276GetTimeOnAir+0xa2>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    63c6:	2901      	cmp	r1, #1
    63c8:	d1e1      	bne.n	638e <SX1276GetTimeOnAir+0x52>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
    63ca:	f1a2 000c 	sub.w	r0, r2, #12
    63ce:	4247      	negs	r7, r0
    63d0:	4147      	adcs	r7, r0
    63d2:	e7e5      	b.n	63a0 <SX1276GetTimeOnAir+0x64>
        ceilNumerator += 8;
    63d4:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
    63d6:	2f00      	cmp	r7, #0
    63d8:	d0f3      	beq.n	63c2 <SX1276GetTimeOnAir+0x86>
            ceilDenominator = 4 * ( datarate - 2 );
    63da:	ea4f 058c 	mov.w	r5, ip, lsl #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
    63de:	2800      	cmp	r0, #0
    63e0:	bfac      	ite	ge
    63e2:	182e      	addge	r6, r5, r0
    63e4:	1c2e      	addlt	r6, r5, #0
    63e6:	1e70      	subs	r0, r6, #1
    if( datarate <= 6 )
    63e8:	2a06      	cmp	r2, #6
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
    63ea:	fb90 f0f5 	sdiv	r0, r0, r5
    63ee:	fb03 4400 	mla	r4, r3, r0, r4
    int32_t intermediate =
    63f2:	bf8c      	ite	hi
    63f4:	340c      	addhi	r4, #12
        intermediate += 2;
    63f6:	340e      	addls	r4, #14
    switch( bw )
    63f8:	2902      	cmp	r1, #2
    63fa:	d80a      	bhi.n	6412 <SX1276GetTimeOnAir+0xd6>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
    63fc:	00a3      	lsls	r3, r4, #2
    63fe:	3301      	adds	r3, #1
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
    6400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
    6404:	fa03 f30c 	lsl.w	r3, r3, ip
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
    6408:	4353      	muls	r3, r2
    640a:	4a02      	ldr	r2, [pc, #8]	; (6414 <SX1276GetTimeOnAir+0xd8>)
    640c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    6410:	e7a2      	b.n	6358 <SX1276GetTimeOnAir+0x1c>
    return ( numerator + denominator - 1 ) / denominator;
    6412:	deff      	udf	#255	; 0xff
    6414:	0000f2a8 	.word	0x0000f2a8

00006418 <SX1276SetChannel>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    6418:	f643 5309 	movw	r3, #15625	; 0x3d09
{
    641c:	b510      	push	{r4, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    641e:	fbb0 f2f3 	udiv	r2, r0, r3
    6422:	f641 6484 	movw	r4, #7812	; 0x1e84
    6426:	fb03 0112 	mls	r1, r3, r2, r0
    642a:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    642e:	fbb4 f4f3 	udiv	r4, r4, r3
    SX1276.Settings.Channel = freq;
    6432:	4b0a      	ldr	r3, [pc, #40]	; (645c <SX1276SetChannel+0x44>)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
    6434:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276.Settings.Channel = freq;
    6438:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
    643c:	f3c4 4107 	ubfx	r1, r4, #16, #8
    6440:	2006      	movs	r0, #6
    6442:	f007 fb58 	bl	daf6 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
    6446:	f3c4 2107 	ubfx	r1, r4, #8, #8
    644a:	2007      	movs	r0, #7
    644c:	f007 fb53 	bl	daf6 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
    6450:	b2e1      	uxtb	r1, r4
    6452:	2008      	movs	r0, #8
}
    6454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
    6458:	f007 bb4d 	b.w	daf6 <SX1276Write>
    645c:	20001d48 	.word	0x20001d48

00006460 <SX1276OnDio3Irq>:
{
    6460:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
    6462:	4b11      	ldr	r3, [pc, #68]	; (64a8 <SX1276OnDio3Irq+0x48>)
    6464:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
    6468:	2e01      	cmp	r6, #1
    646a:	d11c      	bne.n	64a6 <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
    646c:	2012      	movs	r0, #18
    646e:	f007 fb4d 	bl	db0c <SX1276Read>
    6472:	f010 0401 	ands.w	r4, r0, #1
    6476:	4d0d      	ldr	r5, [pc, #52]	; (64ac <SX1276OnDio3Irq+0x4c>)
    6478:	d00b      	beq.n	6492 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
    647a:	2105      	movs	r1, #5
    647c:	2012      	movs	r0, #18
    647e:	f007 fb3a 	bl	daf6 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    6482:	682b      	ldr	r3, [r5, #0]
    6484:	b17b      	cbz	r3, 64a6 <SX1276OnDio3Irq+0x46>
    6486:	699b      	ldr	r3, [r3, #24]
    6488:	b16b      	cbz	r3, 64a6 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
    648a:	4630      	mov	r0, r6
}
    648c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
    6490:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
    6492:	2104      	movs	r1, #4
    6494:	2012      	movs	r0, #18
    6496:	f007 fb2e 	bl	daf6 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    649a:	682b      	ldr	r3, [r5, #0]
    649c:	b11b      	cbz	r3, 64a6 <SX1276OnDio3Irq+0x46>
    649e:	699b      	ldr	r3, [r3, #24]
    64a0:	b10b      	cbz	r3, 64a6 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
    64a2:	4620      	mov	r0, r4
    64a4:	e7f2      	b.n	648c <SX1276OnDio3Irq+0x2c>
}
    64a6:	bd70      	pop	{r4, r5, r6, pc}
    64a8:	20001d48 	.word	0x20001d48
    64ac:	20001e8c 	.word	0x20001e8c

000064b0 <SX1276OnDio2Irq>:
{
    64b0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    64b2:	4c31      	ldr	r4, [pc, #196]	; (6578 <SX1276OnDio2Irq+0xc8>)
    64b4:	f894 10e0 	ldrb.w	r1, [r4, #224]	; 0xe0
    64b8:	2901      	cmp	r1, #1
    64ba:	d002      	beq.n	64c2 <SX1276OnDio2Irq+0x12>
    64bc:	2902      	cmp	r1, #2
    64be:	d052      	beq.n	6566 <SX1276OnDio2Irq+0xb6>
}
    64c0:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    64c2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    64c6:	b1cb      	cbz	r3, 64fc <SX1276OnDio2Irq+0x4c>
    64c8:	2b01      	cmp	r3, #1
    64ca:	d1f9      	bne.n	64c0 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    64cc:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    64d0:	2b00      	cmp	r3, #0
    64d2:	d0f5      	beq.n	64c0 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    64d4:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    64d6:	2012      	movs	r0, #18
    64d8:	f007 fb0d 	bl	daf6 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
    64dc:	4b27      	ldr	r3, [pc, #156]	; (657c <SX1276OnDio2Irq+0xcc>)
    64de:	681b      	ldr	r3, [r3, #0]
    64e0:	2b00      	cmp	r3, #0
    64e2:	d0ed      	beq.n	64c0 <SX1276OnDio2Irq+0x10>
    64e4:	695c      	ldr	r4, [r3, #20]
    64e6:	2c00      	cmp	r4, #0
    64e8:	d0ea      	beq.n	64c0 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    64ea:	201c      	movs	r0, #28
    64ec:	f007 fb0e 	bl	db0c <SX1276Read>
    64f0:	4623      	mov	r3, r4
    64f2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
    64f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    64fa:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
    64fc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    64fe:	bb6b      	cbnz	r3, 655c <SX1276OnDio2Irq+0xac>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    6500:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
    6504:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    6508:	2b00      	cmp	r3, #0
    650a:	d1d9      	bne.n	64c0 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
    650c:	481c      	ldr	r0, [pc, #112]	; (6580 <SX1276OnDio2Irq+0xd0>)
    650e:	f7ff fec1 	bl	6294 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    6512:	2301      	movs	r3, #1
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    6514:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    6516:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    651a:	f007 faf7 	bl	db0c <SX1276Read>
    651e:	0840      	lsrs	r0, r0, #1
    6520:	4240      	negs	r0, r0
    6522:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    6526:	201b      	movs	r0, #27
    6528:	f007 faf0 	bl	db0c <SX1276Read>
    652c:	4605      	mov	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
    652e:	201c      	movs	r0, #28
    6530:	f007 faec 	bl	db0c <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    6534:	f643 5309 	movw	r3, #15625	; 0x3d09
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    6538:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    653c:	b2c0      	uxtb	r0, r0
    653e:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
    6540:	0a2d      	lsrs	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    6542:	3080      	adds	r0, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    6544:	435d      	muls	r5, r3
    6546:	eb05 2510 	add.w	r5, r5, r0, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    654a:	200c      	movs	r0, #12
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    654c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    6550:	f007 fadc 	bl	db0c <SX1276Read>
    6554:	0940      	lsrs	r0, r0, #5
    6556:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
    655a:	e7b1      	b.n	64c0 <SX1276OnDio2Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
    655c:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
    6560:	2b00      	cmp	r3, #0
    6562:	d0ad      	beq.n	64c0 <SX1276OnDio2Irq+0x10>
    6564:	e7ce      	b.n	6504 <SX1276OnDio2Irq+0x54>
            switch( SX1276.Settings.Modem )
    6566:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    656a:	2b01      	cmp	r3, #1
    656c:	d1a8      	bne.n	64c0 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    656e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    6572:	2b00      	cmp	r3, #0
    6574:	d0a4      	beq.n	64c0 <SX1276OnDio2Irq+0x10>
    6576:	e7ae      	b.n	64d6 <SX1276OnDio2Irq+0x26>
    6578:	20001d48 	.word	0x20001d48
    657c:	20001e8c 	.word	0x20001e8c
    6580:	20001d00 	.word	0x20001d00

00006584 <SX1276OnDio1Irq>:
{
    6584:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    6586:	4c40      	ldr	r4, [pc, #256]	; (6688 <SX1276OnDio1Irq+0x104>)
    6588:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
    658c:	2d01      	cmp	r5, #1
    658e:	d002      	beq.n	6596 <SX1276OnDio1Irq+0x12>
    6590:	2d02      	cmp	r5, #2
    6592:	d059      	beq.n	6648 <SX1276OnDio1Irq+0xc4>
}
    6594:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    6596:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    659a:	b1cb      	cbz	r3, 65d0 <SX1276OnDio1Irq+0x4c>
    659c:	2b01      	cmp	r3, #1
    659e:	d1f9      	bne.n	6594 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
    65a0:	f007 fa56 	bl	da50 <SX1276GetDio1PinState>
    65a4:	2800      	cmp	r0, #0
    65a6:	d0f5      	beq.n	6594 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
    65a8:	4838      	ldr	r0, [pc, #224]	; (668c <SX1276OnDio1Irq+0x108>)
    65aa:	f7ff fe73 	bl	6294 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
    65ae:	2180      	movs	r1, #128	; 0x80
    65b0:	2012      	movs	r0, #18
    65b2:	f007 faa0 	bl	daf6 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    65b6:	2300      	movs	r3, #0
    65b8:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    65bc:	4b34      	ldr	r3, [pc, #208]	; (6690 <SX1276OnDio1Irq+0x10c>)
    65be:	681b      	ldr	r3, [r3, #0]
    65c0:	2b00      	cmp	r3, #0
    65c2:	d0e7      	beq.n	6594 <SX1276OnDio1Irq+0x10>
    65c4:	68db      	ldr	r3, [r3, #12]
    65c6:	2b00      	cmp	r3, #0
    65c8:	d0e4      	beq.n	6594 <SX1276OnDio1Irq+0x10>
}
    65ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
    65ce:	4718      	bx	r3
                if( SX1276GetDio1PinState( ) == 0 )
    65d0:	f007 fa3e 	bl	da50 <SX1276GetDio1PinState>
    65d4:	2800      	cmp	r0, #0
    65d6:	d0dd      	beq.n	6594 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
    65d8:	482e      	ldr	r0, [pc, #184]	; (6694 <SX1276OnDio1Irq+0x110>)
    65da:	f7ff fe5b 	bl	6294 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    65de:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    65e2:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    65e6:	4313      	orrs	r3, r2
    65e8:	b29b      	uxth	r3, r3
    65ea:	b93b      	cbnz	r3, 65fc <SX1276OnDio1Irq+0x78>
                    if( SX1276.Settings.Fsk.FixLen == false )
    65ec:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    65f0:	b9e8      	cbnz	r0, 662e <SX1276OnDio1Irq+0xaa>
    SX1276ReadBuffer( 0, buffer, size );
    65f2:	462a      	mov	r2, r5
    65f4:	f504 718b 	add.w	r1, r4, #278	; 0x116
    65f8:	f007 fa10 	bl	da1c <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
    65fc:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    6600:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
    6604:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
    6608:	4923      	ldr	r1, [pc, #140]	; (6698 <SX1276OnDio1Irq+0x114>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
    660a:	1a12      	subs	r2, r2, r0
    660c:	429a      	cmp	r2, r3
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
    660e:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
    6610:	db13      	blt.n	663a <SX1276OnDio1Irq+0xb6>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
    6612:	1e5a      	subs	r2, r3, #1
    SX1276ReadBuffer( 0, buffer, size );
    6614:	b2d2      	uxtb	r2, r2
    6616:	2000      	movs	r0, #0
    6618:	f007 fa00 	bl	da1c <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
    661c:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    6620:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
    6624:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    6626:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    6628:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
    662c:	e7b2      	b.n	6594 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    662e:	2032      	movs	r0, #50	; 0x32
    6630:	f007 fa6c 	bl	db0c <SX1276Read>
    6634:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    6638:	e7e0      	b.n	65fc <SX1276OnDio1Irq+0x78>
    SX1276ReadBuffer( 0, buffer, size );
    663a:	b2d2      	uxtb	r2, r2
    663c:	2000      	movs	r0, #0
    663e:	f007 f9ed 	bl	da1c <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    6642:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    6646:	e7ef      	b.n	6628 <SX1276OnDio1Irq+0xa4>
            switch( SX1276.Settings.Modem )
    6648:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
    664c:	2d00      	cmp	r5, #0
    664e:	d1a1      	bne.n	6594 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
    6650:	f007 f9fe 	bl	da50 <SX1276GetDio1PinState>
    6654:	2801      	cmp	r0, #1
    6656:	d09d      	beq.n	6594 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
    6658:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    665c:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    6660:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
    6664:	490c      	ldr	r1, [pc, #48]	; (6698 <SX1276OnDio1Irq+0x114>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
    6666:	1a1b      	subs	r3, r3, r0
    6668:	4293      	cmp	r3, r2
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
    666a:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
    666c:	dd07      	ble.n	667e <SX1276OnDio1Irq+0xfa>
    SX1276WriteBuffer( 0, buffer, size );
    666e:	4628      	mov	r0, r5
    6670:	f007 f9e1 	bl	da36 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    6674:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
    6678:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    667c:	e7d3      	b.n	6626 <SX1276OnDio1Irq+0xa2>
    SX1276WriteBuffer( 0, buffer, size );
    667e:	b2da      	uxtb	r2, r3
    6680:	4628      	mov	r0, r5
    6682:	f007 f9d8 	bl	da36 <SX1276WriteBuffer>
    6686:	e7dc      	b.n	6642 <SX1276OnDio1Irq+0xbe>
    6688:	20001d48 	.word	0x20001d48
    668c:	20001d18 	.word	0x20001d18
    6690:	20001e8c 	.word	0x20001e8c
    6694:	20001d00 	.word	0x20001d00
    6698:	20002425 	.word	0x20002425

0000669c <SX1276OnDio0Irq>:
{
    669c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    669e:	4c8f      	ldr	r4, [pc, #572]	; (68dc <SX1276OnDio0Irq+0x240>)
    volatile uint8_t irqFlags = 0;
    66a0:	2300      	movs	r3, #0
    66a2:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
    66a6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    66aa:	2b01      	cmp	r3, #1
    66ac:	d004      	beq.n	66b8 <SX1276OnDio0Irq+0x1c>
    66ae:	2b02      	cmp	r3, #2
    66b0:	f000 80ff 	beq.w	68b2 <SX1276OnDio0Irq+0x216>
}
    66b4:	b002      	add	sp, #8
    66b6:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    66b8:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    66bc:	b33b      	cbz	r3, 670e <SX1276OnDio0Irq+0x72>
    66be:	2b01      	cmp	r3, #1
    66c0:	d1f8      	bne.n	66b4 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
    66c2:	2140      	movs	r1, #64	; 0x40
    66c4:	2012      	movs	r0, #18
    66c6:	f007 fa16 	bl	daf6 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
    66ca:	2012      	movs	r0, #18
    66cc:	f007 fa1e 	bl	db0c <SX1276Read>
    66d0:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
    66d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66d8:	4d81      	ldr	r5, [pc, #516]	; (68e0 <SX1276OnDio0Irq+0x244>)
    66da:	f013 0f20 	tst.w	r3, #32
    66de:	f000 8093 	beq.w	6808 <SX1276OnDio0Irq+0x16c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
    66e2:	2120      	movs	r1, #32
    66e4:	2012      	movs	r0, #18
    66e6:	f007 fa06 	bl	daf6 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
    66ea:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
    66ee:	b90b      	cbnz	r3, 66f4 <SX1276OnDio0Irq+0x58>
                            SX1276.Settings.State = RF_IDLE;
    66f0:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
    66f4:	487b      	ldr	r0, [pc, #492]	; (68e4 <SX1276OnDio0Irq+0x248>)
    66f6:	f7ff fdcd 	bl	6294 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    66fa:	682b      	ldr	r3, [r5, #0]
    66fc:	2b00      	cmp	r3, #0
    66fe:	d0d9      	beq.n	66b4 <SX1276OnDio0Irq+0x18>
    6700:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    6702:	2b00      	cmp	r3, #0
    6704:	d0d6      	beq.n	66b4 <SX1276OnDio0Irq+0x18>
}
    6706:	b002      	add	sp, #8
    6708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
    670c:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
    670e:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    6712:	4d73      	ldr	r5, [pc, #460]	; (68e0 <SX1276OnDio0Irq+0x244>)
    6714:	b393      	cbz	r3, 677c <SX1276OnDio0Irq+0xe0>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
    6716:	203f      	movs	r0, #63	; 0x3f
    6718:	f007 f9f8 	bl	db0c <SX1276Read>
    671c:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
    6720:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6724:	079b      	lsls	r3, r3, #30
    6726:	d429      	bmi.n	677c <SX1276OnDio0Irq+0xe0>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    6728:	210b      	movs	r1, #11
    672a:	203e      	movs	r0, #62	; 0x3e
    672c:	f007 f9e3 	bl	daf6 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    6730:	2110      	movs	r1, #16
    6732:	203f      	movs	r0, #63	; 0x3f
    6734:	f007 f9df 	bl	daf6 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
    6738:	486a      	ldr	r0, [pc, #424]	; (68e4 <SX1276OnDio0Irq+0x248>)
    673a:	f7ff fdab 	bl	6294 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
    673e:	f894 6102 	ldrb.w	r6, [r4, #258]	; 0x102
    6742:	b98e      	cbnz	r6, 6768 <SX1276OnDio0Irq+0xcc>
                            TimerStop( &RxTimeoutSyncWord );
    6744:	4868      	ldr	r0, [pc, #416]	; (68e8 <SX1276OnDio0Irq+0x24c>)
    6746:	f7ff fda5 	bl	6294 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
    674a:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    674e:	682b      	ldr	r3, [r5, #0]
    6750:	b113      	cbz	r3, 6758 <SX1276OnDio0Irq+0xbc>
    6752:	691b      	ldr	r3, [r3, #16]
    6754:	b103      	cbz	r3, 6758 <SX1276OnDio0Irq+0xbc>
                            RadioEvents->RxError( );
    6756:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    6758:	2300      	movs	r3, #0
    675a:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
    675e:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
    6762:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
    6766:	e7a5      	b.n	66b4 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    6768:	200d      	movs	r0, #13
    676a:	f007 f9cf 	bl	db0c <SX1276Read>
    676e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    6772:	b2c9      	uxtb	r1, r1
    6774:	200d      	movs	r0, #13
    6776:	f007 f9be 	bl	daf6 <SX1276Write>
    677a:	e7e8      	b.n	674e <SX1276OnDio0Irq+0xb2>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    677c:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
    6780:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
    6784:	4e59      	ldr	r6, [pc, #356]	; (68ec <SX1276OnDio0Irq+0x250>)
    6786:	ea52 0301 	orrs.w	r3, r2, r1
    678a:	d10a      	bne.n	67a2 <SX1276OnDio0Irq+0x106>
                    if( SX1276.Settings.Fsk.FixLen == false )
    678c:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    6790:	bb50      	cbnz	r0, 67e8 <SX1276OnDio0Irq+0x14c>
    SX1276ReadBuffer( 0, buffer, size );
    6792:	4957      	ldr	r1, [pc, #348]	; (68f0 <SX1276OnDio0Irq+0x254>)
    6794:	2201      	movs	r2, #1
    6796:	f007 f941 	bl	da1c <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    679a:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
    679e:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    67a2:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
    67a4:	b2d2      	uxtb	r2, r2
    67a6:	4431      	add	r1, r6
    67a8:	2000      	movs	r0, #0
    67aa:	f007 f937 	bl	da1c <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    67ae:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
    67b2:	484c      	ldr	r0, [pc, #304]	; (68e4 <SX1276OnDio0Irq+0x248>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    67b4:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
    67b8:	f7ff fd6c 	bl	6294 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
    67bc:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    67c0:	b9c3      	cbnz	r3, 67f4 <SX1276OnDio0Irq+0x158>
                    TimerStop( &RxTimeoutSyncWord );
    67c2:	4849      	ldr	r0, [pc, #292]	; (68e8 <SX1276OnDio0Irq+0x24c>)
                    SX1276.Settings.State = RF_IDLE;
    67c4:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
    67c8:	f7ff fd64 	bl	6294 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    67cc:	682b      	ldr	r3, [r5, #0]
    67ce:	2b00      	cmp	r3, #0
    67d0:	d0c2      	beq.n	6758 <SX1276OnDio0Irq+0xbc>
    67d2:	689d      	ldr	r5, [r3, #8]
    67d4:	2d00      	cmp	r5, #0
    67d6:	d0bf      	beq.n	6758 <SX1276OnDio0Irq+0xbc>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
    67d8:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
    67dc:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
    67e0:	4842      	ldr	r0, [pc, #264]	; (68ec <SX1276OnDio0Irq+0x250>)
    67e2:	2300      	movs	r3, #0
    67e4:	47a8      	blx	r5
    67e6:	e7b7      	b.n	6758 <SX1276OnDio0Irq+0xbc>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    67e8:	2032      	movs	r0, #50	; 0x32
    67ea:	f007 f98f 	bl	db0c <SX1276Read>
    67ee:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    67f2:	e7d2      	b.n	679a <SX1276OnDio0Irq+0xfe>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    67f4:	200d      	movs	r0, #13
    67f6:	f007 f989 	bl	db0c <SX1276Read>
    67fa:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    67fe:	b2c9      	uxtb	r1, r1
    6800:	200d      	movs	r0, #13
    6802:	f007 f978 	bl	daf6 <SX1276Write>
    6806:	e7e1      	b.n	67cc <SX1276OnDio0Irq+0x130>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
    6808:	2019      	movs	r0, #25
    680a:	f007 f97f 	bl	db0c <SX1276Read>
    680e:	b240      	sxtb	r0, r0
    6810:	3002      	adds	r0, #2
    6812:	1080      	asrs	r0, r0, #2
    6814:	f884 013c 	strb.w	r0, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    6818:	201a      	movs	r0, #26
    681a:	f007 f977 	bl	db0c <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
    681e:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
    6822:	4934      	ldr	r1, [pc, #208]	; (68f4 <SX1276OnDio0Irq+0x258>)
    6824:	2a00      	cmp	r2, #0
    6826:	f340 130b 	sbfx	r3, r0, #4, #12
    682a:	da3a      	bge.n	68a2 <SX1276OnDio0Irq+0x206>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    682c:	f8d4 60e4 	ldr.w	r6, [r4, #228]	; 0xe4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
    6830:	b292      	uxth	r2, r2
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    6832:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
    6834:	bf8c      	ite	hi
    6836:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
    6838:	3aa4      	subls	r2, #164	; 0xa4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
    683a:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
    683c:	4410      	add	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    683e:	4403      	add	r3, r0
    6840:	b21b      	sxth	r3, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    6842:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
    6844:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    6848:	f007 f960 	bl	db0c <SX1276Read>
    684c:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
    6850:	2010      	movs	r0, #16
    6852:	f007 f95b 	bl	db0c <SX1276Read>
    6856:	4601      	mov	r1, r0
    6858:	200d      	movs	r0, #13
    685a:	f007 f94c 	bl	daf6 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
    685e:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
    6862:	4922      	ldr	r1, [pc, #136]	; (68ec <SX1276OnDio0Irq+0x250>)
    6864:	2000      	movs	r0, #0
    6866:	f007 f8d9 	bl	da1c <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
    686a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
    686e:	b90b      	cbnz	r3, 6874 <SX1276OnDio0Irq+0x1d8>
                        SX1276.Settings.State = RF_IDLE;
    6870:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
    6874:	481b      	ldr	r0, [pc, #108]	; (68e4 <SX1276OnDio0Irq+0x248>)
    6876:	f7ff fd0d 	bl	6294 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    687a:	682b      	ldr	r3, [r5, #0]
    687c:	2b00      	cmp	r3, #0
    687e:	f43f af19 	beq.w	66b4 <SX1276OnDio0Irq+0x18>
    6882:	689d      	ldr	r5, [r3, #8]
    6884:	2d00      	cmp	r5, #0
    6886:	f43f af15 	beq.w	66b4 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    688a:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
    688e:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
    6892:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    6896:	4815      	ldr	r0, [pc, #84]	; (68ec <SX1276OnDio0Irq+0x250>)
    6898:	46ac      	mov	ip, r5
}
    689a:	b002      	add	sp, #8
    689c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    68a0:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    68a2:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
    68a6:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
    68a8:	b29b      	uxth	r3, r3
    68aa:	bf8c      	ite	hi
    68ac:	389d      	subhi	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    68ae:	38a4      	subls	r0, #164	; 0xa4
    68b0:	e7c5      	b.n	683e <SX1276OnDio0Irq+0x1a2>
            TimerStop( &TxTimeoutTimer );
    68b2:	4811      	ldr	r0, [pc, #68]	; (68f8 <SX1276OnDio0Irq+0x25c>)
    68b4:	f7ff fcee 	bl	6294 <TimerStop>
            switch( SX1276.Settings.Modem )
    68b8:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    68bc:	2b01      	cmp	r3, #1
    68be:	d103      	bne.n	68c8 <SX1276OnDio0Irq+0x22c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
    68c0:	2108      	movs	r1, #8
    68c2:	2012      	movs	r0, #18
    68c4:	f007 f917 	bl	daf6 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    68c8:	2300      	movs	r3, #0
    68ca:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    68ce:	4b04      	ldr	r3, [pc, #16]	; (68e0 <SX1276OnDio0Irq+0x244>)
    68d0:	681b      	ldr	r3, [r3, #0]
    68d2:	2b00      	cmp	r3, #0
    68d4:	f43f aeee 	beq.w	66b4 <SX1276OnDio0Irq+0x18>
    68d8:	681b      	ldr	r3, [r3, #0]
    68da:	e712      	b.n	6702 <SX1276OnDio0Irq+0x66>
    68dc:	20001d48 	.word	0x20001d48
    68e0:	20001e8c 	.word	0x20001e8c
    68e4:	20001d18 	.word	0x20001d18
    68e8:	20001d00 	.word	0x20001d00
    68ec:	20002425 	.word	0x20002425
    68f0:	20001e5e 	.word	0x20001e5e
    68f4:	1f4add40 	.word	0x1f4add40
    68f8:	20001d30 	.word	0x20001d30

000068fc <RxChainCalibration>:
{
    68fc:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
    68fe:	2009      	movs	r0, #9
    6900:	f007 f904 	bl	db0c <SX1276Read>
    6904:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    6906:	2006      	movs	r0, #6
    6908:	f007 f900 	bl	db0c <SX1276Read>
    690c:	4606      	mov	r6, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
    690e:	2007      	movs	r0, #7
    6910:	f007 f8fc 	bl	db0c <SX1276Read>
    6914:	0204      	lsls	r4, r0, #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
    6916:	2008      	movs	r0, #8
    6918:	f007 f8f8 	bl	db0c <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    691c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    6920:	f643 5309 	movw	r3, #15625	; 0x3d09
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    6924:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    6926:	b2c0      	uxtb	r0, r0
    6928:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
    692a:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    692c:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    692e:	3080      	adds	r0, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
    6930:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    6932:	eb04 2410 	add.w	r4, r4, r0, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
    6936:	2009      	movs	r0, #9
    6938:	f007 f8dd 	bl	daf6 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    693c:	203b      	movs	r0, #59	; 0x3b
    693e:	f007 f8e5 	bl	db0c <SX1276Read>
    6942:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    6946:	b2c9      	uxtb	r1, r1
    6948:	203b      	movs	r0, #59	; 0x3b
    694a:	f007 f8d4 	bl	daf6 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    694e:	203b      	movs	r0, #59	; 0x3b
    6950:	f007 f8dc 	bl	db0c <SX1276Read>
    6954:	0682      	lsls	r2, r0, #26
    6956:	d4fa      	bmi.n	694e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
    6958:	480c      	ldr	r0, [pc, #48]	; (698c <RxChainCalibration+0x90>)
    695a:	f7ff fd5d 	bl	6418 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    695e:	203b      	movs	r0, #59	; 0x3b
    6960:	f007 f8d4 	bl	db0c <SX1276Read>
    6964:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    6968:	b2c9      	uxtb	r1, r1
    696a:	203b      	movs	r0, #59	; 0x3b
    696c:	f007 f8c3 	bl	daf6 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    6970:	203b      	movs	r0, #59	; 0x3b
    6972:	f007 f8cb 	bl	db0c <SX1276Read>
    6976:	0683      	lsls	r3, r0, #26
    6978:	d4fa      	bmi.n	6970 <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
    697a:	4629      	mov	r1, r5
    697c:	2009      	movs	r0, #9
    697e:	f007 f8ba 	bl	daf6 <SX1276Write>
    SX1276SetChannel( initialFreq );
    6982:	4620      	mov	r0, r4
}
    6984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
    6988:	f7ff bd46 	b.w	6418 <SX1276SetChannel>
    698c:	33bca100 	.word	0x33bca100

00006990 <SX1276SetSleep>:
{
    6990:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    6992:	480a      	ldr	r0, [pc, #40]	; (69bc <SX1276SetSleep+0x2c>)
    6994:	f7ff fc7e 	bl	6294 <TimerStop>
    TimerStop( &TxTimeoutTimer );
    6998:	4809      	ldr	r0, [pc, #36]	; (69c0 <SX1276SetSleep+0x30>)
    699a:	f7ff fc7b 	bl	6294 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    699e:	4809      	ldr	r0, [pc, #36]	; (69c4 <SX1276SetSleep+0x34>)
    69a0:	f7ff fc78 	bl	6294 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    69a4:	2000      	movs	r0, #0
    69a6:	f007 f8bc 	bl	db22 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
    69aa:	2000      	movs	r0, #0
    69ac:	f007 f823 	bl	d9f6 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
    69b0:	4b05      	ldr	r3, [pc, #20]	; (69c8 <SX1276SetSleep+0x38>)
    69b2:	2200      	movs	r2, #0
    69b4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    69b8:	bd08      	pop	{r3, pc}
    69ba:	bf00      	nop
    69bc:	20001d18 	.word	0x20001d18
    69c0:	20001d30 	.word	0x20001d30
    69c4:	20001d00 	.word	0x20001d00
    69c8:	20001d48 	.word	0x20001d48

000069cc <SX1276SetStby>:
{
    69cc:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    69ce:	4808      	ldr	r0, [pc, #32]	; (69f0 <SX1276SetStby+0x24>)
    69d0:	f7ff fc60 	bl	6294 <TimerStop>
    TimerStop( &TxTimeoutTimer );
    69d4:	4807      	ldr	r0, [pc, #28]	; (69f4 <SX1276SetStby+0x28>)
    69d6:	f7ff fc5d 	bl	6294 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    69da:	4807      	ldr	r0, [pc, #28]	; (69f8 <SX1276SetStby+0x2c>)
    69dc:	f7ff fc5a 	bl	6294 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
    69e0:	2001      	movs	r0, #1
    69e2:	f007 f89e 	bl	db22 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
    69e6:	4b05      	ldr	r3, [pc, #20]	; (69fc <SX1276SetStby+0x30>)
    69e8:	2200      	movs	r2, #0
    69ea:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    69ee:	bd08      	pop	{r3, pc}
    69f0:	20001d18 	.word	0x20001d18
    69f4:	20001d30 	.word	0x20001d30
    69f8:	20001d00 	.word	0x20001d00
    69fc:	20001d48 	.word	0x20001d48

00006a00 <SX1276Send>:
{
    6a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
    6a02:	4c60      	ldr	r4, [pc, #384]	; (6b84 <SX1276Send+0x184>)
{
    6a04:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
    6a08:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
    6a0c:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
    6a0e:	b1db      	cbz	r3, 6a48 <SX1276Send+0x48>
    6a10:	2b01      	cmp	r3, #1
    6a12:	d045      	beq.n	6aa0 <SX1276Send+0xa0>
    6a14:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
    6a16:	485c      	ldr	r0, [pc, #368]	; (6b88 <SX1276Send+0x188>)
    6a18:	f7ff fc3c 	bl	6294 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
    6a1c:	485b      	ldr	r0, [pc, #364]	; (6b8c <SX1276Send+0x18c>)
    6a1e:	4629      	mov	r1, r5
    6a20:	f007 f840 	bl	daa4 <TimerSetValue>
    switch( SX1276.Settings.Modem )
    6a24:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    6a28:	2b00      	cmp	r3, #0
    6a2a:	d076      	beq.n	6b1a <SX1276Send+0x11a>
    6a2c:	2b01      	cmp	r3, #1
    6a2e:	f000 808c 	beq.w	6b4a <SX1276Send+0x14a>
    SX1276.Settings.State = RF_TX_RUNNING;
    6a32:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
    6a34:	4855      	ldr	r0, [pc, #340]	; (6b8c <SX1276Send+0x18c>)
    SX1276.Settings.State = RF_TX_RUNNING;
    6a36:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    6a3a:	f7ff fbb5 	bl	61a8 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    6a3e:	2003      	movs	r0, #3
    6a40:	f007 f86f 	bl	db22 <SX1276SetOpMode>
}
    6a44:	b003      	add	sp, #12
    6a46:	bd30      	pop	{r4, r5, pc}
            if( SX1276.Settings.Fsk.FixLen == false )
    6a48:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
    6a4c:	f89d 1007 	ldrb.w	r1, [sp, #7]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    6a50:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
    6a54:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
    6a58:	b9f0      	cbnz	r0, 6a98 <SX1276Send+0x98>
    SX1276WriteBuffer( 0, buffer, size );
    6a5a:	2201      	movs	r2, #1
    6a5c:	f10d 0107 	add.w	r1, sp, #7
    6a60:	f006 ffe9 	bl	da36 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
    6a64:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6a68:	1e53      	subs	r3, r2, #1
    6a6a:	2b3f      	cmp	r3, #63	; 0x3f
    6a6c:	d904      	bls.n	6a78 <SX1276Send+0x78>
                memcpy1( RxTxBuffer, buffer, size );
    6a6e:	4848      	ldr	r0, [pc, #288]	; (6b90 <SX1276Send+0x190>)
    6a70:	4629      	mov	r1, r5
    6a72:	f006 ffef 	bl	da54 <memcpy1>
    6a76:	2220      	movs	r2, #32
    SX1276WriteBuffer( 0, buffer, size );
    6a78:	4629      	mov	r1, r5
    6a7a:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
    6a7c:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    SX1276WriteBuffer( 0, buffer, size );
    6a80:	f006 ffd9 	bl	da36 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    6a84:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    6a88:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
    6a8c:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    6a90:	4413      	add	r3, r2
    6a92:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
    6a96:	e7be      	b.n	6a16 <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
    6a98:	2032      	movs	r0, #50	; 0x32
    6a9a:	f007 f82c 	bl	daf6 <SX1276Write>
    6a9e:	e7e1      	b.n	6a64 <SX1276Send+0x64>
            if( SX1276.Settings.LoRa.IqInverted == true )
    6aa0:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    6aa4:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    6aa6:	b36b      	cbz	r3, 6b04 <SX1276Send+0x104>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    6aa8:	f007 f830 	bl	db0c <SX1276Read>
    6aac:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    6ab0:	2033      	movs	r0, #51	; 0x33
    6ab2:	f007 f820 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    6ab6:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    6ab8:	203b      	movs	r0, #59	; 0x3b
    6aba:	f007 f81c 	bl	daf6 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
    6abe:	f89d 1007 	ldrb.w	r1, [sp, #7]
    6ac2:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
    6ac6:	2022      	movs	r0, #34	; 0x22
    6ac8:	f007 f815 	bl	daf6 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
    6acc:	2100      	movs	r1, #0
    6ace:	200e      	movs	r0, #14
    6ad0:	f007 f811 	bl	daf6 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    6ad4:	2100      	movs	r1, #0
    6ad6:	200d      	movs	r0, #13
    6ad8:	f007 f80d 	bl	daf6 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
    6adc:	2001      	movs	r0, #1
    6ade:	f007 f815 	bl	db0c <SX1276Read>
    6ae2:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
    6ae6:	d104      	bne.n	6af2 <SX1276Send+0xf2>
                SX1276SetStby( );
    6ae8:	f7ff ff70 	bl	69cc <SX1276SetStby>
                DelayMs( 1 );
    6aec:	2001      	movs	r0, #1
    6aee:	f007 f800 	bl	daf2 <DelayMs>
    SX1276WriteBuffer( 0, buffer, size );
    6af2:	4629      	mov	r1, r5
    6af4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6af8:	2000      	movs	r0, #0
    6afa:	f006 ff9c 	bl	da36 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
    6afe:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
        break;
    6b02:	e788      	b.n	6a16 <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    6b04:	f007 f802 	bl	db0c <SX1276Read>
    6b08:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    6b0c:	f041 0101 	orr.w	r1, r1, #1
    6b10:	2033      	movs	r0, #51	; 0x33
    6b12:	f006 fff0 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    6b16:	211d      	movs	r1, #29
    6b18:	e7ce      	b.n	6ab8 <SX1276Send+0xb8>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    6b1a:	2040      	movs	r0, #64	; 0x40
    6b1c:	f006 fff6 	bl	db0c <SX1276Read>
    6b20:	f000 0103 	and.w	r1, r0, #3
    6b24:	2040      	movs	r0, #64	; 0x40
    6b26:	f006 ffe6 	bl	daf6 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    6b2a:	2041      	movs	r0, #65	; 0x41
    6b2c:	f006 ffee 	bl	db0c <SX1276Read>
    6b30:	f000 013e 	and.w	r1, r0, #62	; 0x3e
    6b34:	2041      	movs	r0, #65	; 0x41
    6b36:	f006 ffde 	bl	daf6 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    6b3a:	2035      	movs	r0, #53	; 0x35
    6b3c:	f006 ffe6 	bl	db0c <SX1276Read>
    6b40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6b44:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
    6b48:	e773      	b.n	6a32 <SX1276Send+0x32>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    6b4a:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    6b4e:	b173      	cbz	r3, 6b6e <SX1276Send+0x16e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    6b50:	21f5      	movs	r1, #245	; 0xf5
    6b52:	2011      	movs	r0, #17
    6b54:	f006 ffcf 	bl	daf6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
    6b58:	2040      	movs	r0, #64	; 0x40
    6b5a:	f006 ffd7 	bl	db0c <SX1276Read>
    6b5e:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    6b62:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    6b66:	2040      	movs	r0, #64	; 0x40
    6b68:	f006 ffc5 	bl	daf6 <SX1276Write>
    6b6c:	e761      	b.n	6a32 <SX1276Send+0x32>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    6b6e:	21f7      	movs	r1, #247	; 0xf7
    6b70:	2011      	movs	r0, #17
    6b72:	f006 ffc0 	bl	daf6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    6b76:	2040      	movs	r0, #64	; 0x40
    6b78:	f006 ffc8 	bl	db0c <SX1276Read>
    6b7c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    6b80:	e7ef      	b.n	6b62 <SX1276Send+0x162>
    6b82:	bf00      	nop
    6b84:	20001d48 	.word	0x20001d48
    6b88:	20001d18 	.word	0x20001d18
    6b8c:	20001d30 	.word	0x20001d30
    6b90:	20002425 	.word	0x20002425

00006b94 <SX1276SetRx>:
{
    6b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
    6b96:	4c83      	ldr	r4, [pc, #524]	; (6da4 <SX1276SetRx+0x210>)
{
    6b98:	4605      	mov	r5, r0
    TimerStop( &TxTimeoutTimer );
    6b9a:	4883      	ldr	r0, [pc, #524]	; (6da8 <SX1276SetRx+0x214>)
    6b9c:	f7ff fb7a 	bl	6294 <TimerStop>
    switch( SX1276.Settings.Modem )
    6ba0:	f894 60e1 	ldrb.w	r6, [r4, #225]	; 0xe1
    6ba4:	b14e      	cbz	r6, 6bba <SX1276SetRx+0x26>
    6ba6:	2e01      	cmp	r6, #1
    6ba8:	d04d      	beq.n	6c46 <SX1276SetRx+0xb2>
    SX1276.Settings.State = RF_RX_RUNNING;
    6baa:	2301      	movs	r3, #1
    6bac:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
    6bb0:	2d00      	cmp	r5, #0
    6bb2:	f000 80f3 	beq.w	6d9c <SX1276SetRx+0x208>
    bool rxContinuous = false;
    6bb6:	2700      	movs	r7, #0
    6bb8:	e029      	b.n	6c0e <SX1276SetRx+0x7a>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    6bba:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
    6bbc:	f894 7102 	ldrb.w	r7, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    6bc0:	f006 ffa4 	bl	db0c <SX1276Read>
    6bc4:	f000 0103 	and.w	r1, r0, #3
    6bc8:	f041 010c 	orr.w	r1, r1, #12
    6bcc:	2040      	movs	r0, #64	; 0x40
    6bce:	f006 ff92 	bl	daf6 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    6bd2:	2041      	movs	r0, #65	; 0x41
    6bd4:	f006 ff9a 	bl	db0c <SX1276Read>
    6bd8:	f060 013e 	orn	r1, r0, #62	; 0x3e
    6bdc:	b2c9      	uxtb	r1, r1
    6bde:	2041      	movs	r0, #65	; 0x41
    6be0:	f006 ff89 	bl	daf6 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    6be4:	2035      	movs	r0, #53	; 0x35
    6be6:	f006 ff91 	bl	db0c <SX1276Read>
    6bea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6bee:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
    6bf2:	211e      	movs	r1, #30
    6bf4:	200d      	movs	r0, #13
    6bf6:	f006 ff7e 	bl	daf6 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    6bfa:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    6bfe:	f8a4 6118 	strh.w	r6, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    6c02:	f8a4 6116 	strh.w	r6, [r4, #278]	; 0x116
    SX1276.Settings.State = RF_RX_RUNNING;
    6c06:	2301      	movs	r3, #1
    6c08:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
    6c0c:	b135      	cbz	r5, 6c1c <SX1276SetRx+0x88>
        TimerSetValue( &RxTimeoutTimer, timeout );
    6c0e:	4867      	ldr	r0, [pc, #412]	; (6dac <SX1276SetRx+0x218>)
    6c10:	4629      	mov	r1, r5
    6c12:	f006 ff47 	bl	daa4 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
    6c16:	4865      	ldr	r0, [pc, #404]	; (6dac <SX1276SetRx+0x218>)
    6c18:	f7ff fac6 	bl	61a8 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
    6c1c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    6c20:	2b00      	cmp	r3, #0
    6c22:	f040 80b5 	bne.w	6d90 <SX1276SetRx+0x1fc>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
    6c26:	2005      	movs	r0, #5
    6c28:	f006 ff7b 	bl	db22 <SX1276SetOpMode>
        if( rxContinuous == false )
    6c2c:	2f00      	cmp	r7, #0
    6c2e:	f040 80b7 	bne.w	6da0 <SX1276SetRx+0x20c>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
    6c32:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    6c36:	485e      	ldr	r0, [pc, #376]	; (6db0 <SX1276SetRx+0x21c>)
    6c38:	f006 ff34 	bl	daa4 <TimerSetValue>
}
    6c3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            TimerStart( &RxTimeoutSyncWord );
    6c40:	485b      	ldr	r0, [pc, #364]	; (6db0 <SX1276SetRx+0x21c>)
    6c42:	f7ff bab1 	b.w	61a8 <TimerStart>
            if( SX1276.Settings.LoRa.IqInverted == true )
    6c46:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    6c4a:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    6c4c:	b33b      	cbz	r3, 6c9e <SX1276SetRx+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    6c4e:	f006 ff5d 	bl	db0c <SX1276Read>
    6c52:	f040 0141 	orr.w	r1, r0, #65	; 0x41
    6c56:	b2c9      	uxtb	r1, r1
    6c58:	2033      	movs	r0, #51	; 0x33
    6c5a:	f006 ff4c 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    6c5e:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    6c60:	203b      	movs	r0, #59	; 0x3b
    6c62:	f006 ff48 	bl	daf6 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    6c66:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    6c6a:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    6c6c:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    6c70:	d87d      	bhi.n	6d6e <SX1276SetRx+0x1da>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    6c72:	f006 ff4b 	bl	db0c <SX1276Read>
    6c76:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    6c7a:	2031      	movs	r0, #49	; 0x31
    6c7c:	f006 ff3b 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
    6c80:	2100      	movs	r1, #0
    6c82:	2030      	movs	r0, #48	; 0x30
    6c84:	f006 ff37 	bl	daf6 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
    6c88:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    6c8c:	2b08      	cmp	r3, #8
    6c8e:	d81c      	bhi.n	6cca <SX1276SetRx+0x136>
    6c90:	e8df f003 	tbb	[pc, r3]
    6c94:	4a403610 	.word	0x4a403610
    6c98:	68685e54 	.word	0x68685e54
    6c9c:	68          	.byte	0x68
    6c9d:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    6c9e:	f006 ff35 	bl	db0c <SX1276Read>
    6ca2:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    6ca6:	f041 0101 	orr.w	r1, r1, #1
    6caa:	2033      	movs	r0, #51	; 0x33
    6cac:	f006 ff23 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    6cb0:	211d      	movs	r1, #29
    6cb2:	e7d5      	b.n	6c60 <SX1276SetRx+0xcc>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
    6cb4:	202f      	movs	r0, #47	; 0x2f
    6cb6:	2148      	movs	r1, #72	; 0x48
    6cb8:	f006 ff1d 	bl	daf6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
    6cbc:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    6cc0:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
    6cc4:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
    6cc6:	f7ff fba7 	bl	6418 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    6cca:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
    6cce:	f894 7132 	ldrb.w	r7, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    6cd2:	2b00      	cmp	r3, #0
    6cd4:	d052      	beq.n	6d7c <SX1276SetRx+0x1e8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    6cd6:	211d      	movs	r1, #29
    6cd8:	2011      	movs	r0, #17
    6cda:	f006 ff0c 	bl	daf6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
    6cde:	2040      	movs	r0, #64	; 0x40
    6ce0:	f006 ff14 	bl	db0c <SX1276Read>
    6ce4:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    6ce8:	2040      	movs	r0, #64	; 0x40
    6cea:	f006 ff04 	bl	daf6 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
    6cee:	2100      	movs	r1, #0
    6cf0:	200f      	movs	r0, #15
    6cf2:	f006 ff00 	bl	daf6 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    6cf6:	2100      	movs	r1, #0
    6cf8:	200d      	movs	r0, #13
    6cfa:	f006 fefc 	bl	daf6 <SX1276Write>
        break;
    6cfe:	e782      	b.n	6c06 <SX1276SetRx+0x72>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    6d00:	202f      	movs	r0, #47	; 0x2f
    6d02:	2144      	movs	r1, #68	; 0x44
    6d04:	f006 fef7 	bl	daf6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
    6d08:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    6d0c:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
    6d10:	3034      	adds	r0, #52	; 0x34
    6d12:	e7d8      	b.n	6cc6 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    6d14:	202f      	movs	r0, #47	; 0x2f
    6d16:	2144      	movs	r1, #68	; 0x44
    6d18:	f006 feed 	bl	daf6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
    6d1c:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    6d20:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
    6d24:	3004      	adds	r0, #4
    6d26:	e7ce      	b.n	6cc6 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    6d28:	202f      	movs	r0, #47	; 0x2f
    6d2a:	2144      	movs	r1, #68	; 0x44
    6d2c:	f006 fee3 	bl	daf6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
    6d30:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    6d34:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
    6d38:	305e      	adds	r0, #94	; 0x5e
    6d3a:	e7c4      	b.n	6cc6 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    6d3c:	202f      	movs	r0, #47	; 0x2f
    6d3e:	2144      	movs	r1, #68	; 0x44
    6d40:	f006 fed9 	bl	daf6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
    6d44:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    6d48:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
    6d4c:	3012      	adds	r0, #18
    6d4e:	e7ba      	b.n	6cc6 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    6d50:	202f      	movs	r0, #47	; 0x2f
    6d52:	2144      	movs	r1, #68	; 0x44
    6d54:	f006 fecf 	bl	daf6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
    6d58:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    6d5c:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
    6d60:	30c6      	adds	r0, #198	; 0xc6
    6d62:	e7b0      	b.n	6cc6 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
    6d64:	2140      	movs	r1, #64	; 0x40
    6d66:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
    6d68:	f006 fec5 	bl	daf6 <SX1276Write>
    6d6c:	e7ad      	b.n	6cca <SX1276SetRx+0x136>
    6d6e:	f006 fecd 	bl	db0c <SX1276Read>
    6d72:	f060 017f 	orn	r1, r0, #127	; 0x7f
    6d76:	b2c9      	uxtb	r1, r1
    6d78:	2031      	movs	r0, #49	; 0x31
    6d7a:	e7f5      	b.n	6d68 <SX1276SetRx+0x1d4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    6d7c:	211f      	movs	r1, #31
    6d7e:	2011      	movs	r0, #17
    6d80:	f006 feb9 	bl	daf6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    6d84:	2040      	movs	r0, #64	; 0x40
    6d86:	f006 fec1 	bl	db0c <SX1276Read>
    6d8a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    6d8e:	e7ab      	b.n	6ce8 <SX1276SetRx+0x154>
        if( rxContinuous == true )
    6d90:	b127      	cbz	r7, 6d9c <SX1276SetRx+0x208>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
    6d92:	2005      	movs	r0, #5
}
    6d94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
    6d98:	f006 bec3 	b.w	db22 <SX1276SetOpMode>
    6d9c:	2006      	movs	r0, #6
    6d9e:	e7f9      	b.n	6d94 <SX1276SetRx+0x200>
}
    6da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6da2:	bf00      	nop
    6da4:	20001d48 	.word	0x20001d48
    6da8:	20001d30 	.word	0x20001d30
    6dac:	20001d18 	.word	0x20001d18
    6db0:	20001d00 	.word	0x20001d00

00006db4 <SX1276ReadRssi>:
{
    6db4:	b508      	push	{r3, lr}
    switch( modem )
    6db6:	b120      	cbz	r0, 6dc2 <SX1276ReadRssi+0xe>
    6db8:	2801      	cmp	r0, #1
    6dba:	d00a      	beq.n	6dd2 <SX1276ReadRssi+0x1e>
    6dbc:	f04f 30ff 	mov.w	r0, #4294967295
}
    6dc0:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    6dc2:	2011      	movs	r0, #17
    6dc4:	f006 fea2 	bl	db0c <SX1276Read>
    6dc8:	f3c0 0047 	ubfx	r0, r0, #1, #8
    6dcc:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    6dce:	b200      	sxth	r0, r0
    6dd0:	e7f6      	b.n	6dc0 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    6dd2:	4b08      	ldr	r3, [pc, #32]	; (6df4 <SX1276ReadRssi+0x40>)
    6dd4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    6dd8:	4b07      	ldr	r3, [pc, #28]	; (6df8 <SX1276ReadRssi+0x44>)
    6dda:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    6ddc:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    6de0:	d903      	bls.n	6dea <SX1276ReadRssi+0x36>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    6de2:	f006 fe93 	bl	db0c <SX1276Read>
    6de6:	389d      	subs	r0, #157	; 0x9d
    6de8:	e7f1      	b.n	6dce <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    6dea:	f006 fe8f 	bl	db0c <SX1276Read>
    6dee:	38a4      	subs	r0, #164	; 0xa4
    6df0:	e7ed      	b.n	6dce <SX1276ReadRssi+0x1a>
    6df2:	bf00      	nop
    6df4:	20001d48 	.word	0x20001d48
    6df8:	1f4add40 	.word	0x1f4add40

00006dfc <SX1276SetModem>:
{
    6dfc:	b510      	push	{r4, lr}
    6dfe:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
    6e00:	2001      	movs	r0, #1
    6e02:	f006 fe83 	bl	db0c <SX1276Read>
    6e06:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
    6e0a:	42a0      	cmp	r0, r4
    6e0c:	4b17      	ldr	r3, [pc, #92]	; (6e6c <SX1276SetModem+0x70>)
    6e0e:	d102      	bne.n	6e16 <SX1276SetModem+0x1a>
    6e10:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
    6e14:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
    6e16:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
    6e18:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    6e1c:	f04f 0000 	mov.w	r0, #0
    switch( SX1276.Settings.Modem )
    6e20:	d013      	beq.n	6e4a <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    6e22:	f006 fe7e 	bl	db22 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
    6e26:	2001      	movs	r0, #1
    6e28:	f006 fe70 	bl	db0c <SX1276Read>
    6e2c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    6e30:	2001      	movs	r0, #1
    6e32:	f006 fe60 	bl	daf6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    6e36:	2100      	movs	r1, #0
    6e38:	2040      	movs	r0, #64	; 0x40
    6e3a:	f006 fe5c 	bl	daf6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
    6e3e:	2130      	movs	r1, #48	; 0x30
}
    6e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    6e44:	2041      	movs	r0, #65	; 0x41
    6e46:	f006 be56 	b.w	daf6 <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    6e4a:	f006 fe6a 	bl	db22 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
    6e4e:	4620      	mov	r0, r4
    6e50:	f006 fe5c 	bl	db0c <SX1276Read>
    6e54:	f060 017f 	orn	r1, r0, #127	; 0x7f
    6e58:	b2c9      	uxtb	r1, r1
    6e5a:	4620      	mov	r0, r4
    6e5c:	f006 fe4b 	bl	daf6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    6e60:	2100      	movs	r1, #0
    6e62:	2040      	movs	r0, #64	; 0x40
    6e64:	f006 fe47 	bl	daf6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    6e68:	2100      	movs	r1, #0
    6e6a:	e7e9      	b.n	6e40 <SX1276SetModem+0x44>
    6e6c:	20001d48 	.word	0x20001d48

00006e70 <SX1276Init>:
{
    6e70:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
    6e72:	4b17      	ldr	r3, [pc, #92]	; (6ed0 <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    6e74:	4917      	ldr	r1, [pc, #92]	; (6ed4 <SX1276Init+0x64>)
    RadioEvents = events;
    6e76:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    6e78:	4817      	ldr	r0, [pc, #92]	; (6ed8 <SX1276Init+0x68>)
    6e7a:	4c18      	ldr	r4, [pc, #96]	; (6edc <SX1276Init+0x6c>)
    6e7c:	f006 fe0a 	bl	da94 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
    6e80:	4914      	ldr	r1, [pc, #80]	; (6ed4 <SX1276Init+0x64>)
    6e82:	4817      	ldr	r0, [pc, #92]	; (6ee0 <SX1276Init+0x70>)
    6e84:	f006 fe06 	bl	da94 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
    6e88:	4912      	ldr	r1, [pc, #72]	; (6ed4 <SX1276Init+0x64>)
    6e8a:	4816      	ldr	r0, [pc, #88]	; (6ee4 <SX1276Init+0x74>)
    6e8c:	f006 fe02 	bl	da94 <TimerInit>
    SX1276Reset( );
    6e90:	f006 fdb3 	bl	d9fa <SX1276Reset>
    RxChainCalibration( );
    6e94:	f7ff fd32 	bl	68fc <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    6e98:	2000      	movs	r0, #0
    6e9a:	f006 fe42 	bl	db22 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
    6e9e:	4812      	ldr	r0, [pc, #72]	; (6ee8 <SX1276Init+0x78>)
    6ea0:	f7fe fffe 	bl	5ea0 <SX1276IoIrqInit>
    6ea4:	2500      	movs	r5, #0
        SX1276SetModem( RadioRegsInit[i].Modem );
    6ea6:	7820      	ldrb	r0, [r4, #0]
    6ea8:	f7ff ffa8 	bl	6dfc <SX1276SetModem>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    6eac:	3501      	adds	r5, #1
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    6eae:	78a1      	ldrb	r1, [r4, #2]
    6eb0:	7860      	ldrb	r0, [r4, #1]
    6eb2:	f006 fe20 	bl	daf6 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    6eb6:	2d10      	cmp	r5, #16
    6eb8:	f104 0403 	add.w	r4, r4, #3
    6ebc:	d1f3      	bne.n	6ea6 <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
    6ebe:	2000      	movs	r0, #0
    6ec0:	f7ff ff9c 	bl	6dfc <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
    6ec4:	4b09      	ldr	r3, [pc, #36]	; (6eec <SX1276Init+0x7c>)
    6ec6:	2200      	movs	r2, #0
    6ec8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    6ecc:	bd38      	pop	{r3, r4, r5, pc}
    6ece:	bf00      	nop
    6ed0:	20001e8c 	.word	0x20001e8c
    6ed4:	000074b5 	.word	0x000074b5
    6ed8:	20001d30 	.word	0x20001d30
    6edc:	00010419 	.word	0x00010419
    6ee0:	20001d18 	.word	0x20001d18
    6ee4:	20001d00 	.word	0x20001d00
    6ee8:	2000004c 	.word	0x2000004c
    6eec:	20001d48 	.word	0x20001d48

00006ef0 <SX1276SetRxConfig>:
{
    6ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ef4:	b087      	sub	sp, #28
    6ef6:	4605      	mov	r5, r0
    6ef8:	9300      	str	r3, [sp, #0]
    6efa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6efc:	9301      	str	r3, [sp, #4]
    6efe:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    6f02:	9302      	str	r3, [sp, #8]
    6f04:	460c      	mov	r4, r1
    6f06:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    6f0a:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
    6f0e:	9303      	str	r3, [sp, #12]
    6f10:	4616      	mov	r6, r2
    6f12:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    6f16:	9204      	str	r2, [sp, #16]
    6f18:	9105      	str	r1, [sp, #20]
    6f1a:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
    6f1e:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
    6f22:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
    6f26:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
    6f2a:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    SX1276SetModem( modem );
    6f2e:	f7ff ff65 	bl	6dfc <SX1276SetModem>
    SX1276SetStby( );
    6f32:	f7ff fd4b 	bl	69cc <SX1276SetStby>
    switch( modem )
    6f36:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    6f3a:	b12d      	cbz	r5, 6f48 <SX1276SetRxConfig+0x58>
    6f3c:	2d01      	cmp	r5, #1
    6f3e:	9905      	ldr	r1, [sp, #20]
    6f40:	d06b      	beq.n	701a <SX1276SetRxConfig+0x12a>
}
    6f42:	b007      	add	sp, #28
    6f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    6f48:	4990      	ldr	r1, [pc, #576]	; (718c <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    6f4a:	9801      	ldr	r0, [sp, #4]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
    6f4c:	f881 3102 	strb.w	r3, [r1, #258]	; 0x102
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
    6f50:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    6f54:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
            SX1276.Settings.Fsk.Datarate = datarate;
    6f58:	f8c1 60f8 	str.w	r6, [r1, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    6f5c:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    6f60:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
            SX1276.Settings.Fsk.FixLen = fixLen;
    6f64:	f881 80fe 	strb.w	r8, [r1, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    6f68:	f881 90ff 	strb.w	r9, [r1, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
    6f6c:	f881 a100 	strb.w	sl, [r1, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    6f70:	f8a1 70fc 	strh.w	r7, [r1, #252]	; 0xfc
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    6f74:	2002      	movs	r0, #2
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
    6f76:	fb03 f30b 	mul.w	r3, r3, fp
    6f7a:	fbb3 f3f6 	udiv	r3, r3, r6
    6f7e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
    6f82:	4b83      	ldr	r3, [pc, #524]	; (7190 <SX1276SetRxConfig+0x2a0>)
    6f84:	fbb3 f6f6 	udiv	r6, r3, r6
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    6f88:	f3c6 2107 	ubfx	r1, r6, #8, #8
    6f8c:	f006 fdb3 	bl	daf6 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
    6f90:	b2f1      	uxtb	r1, r6
    6f92:	2003      	movs	r0, #3
    6f94:	f006 fdaf 	bl	daf6 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
    6f98:	4620      	mov	r0, r4
    6f9a:	f7ff f9a5 	bl	62e8 <GetFskBandwidthRegValue>
    6f9e:	4601      	mov	r1, r0
    6fa0:	2012      	movs	r0, #18
    6fa2:	f006 fda8 	bl	daf6 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
    6fa6:	9801      	ldr	r0, [sp, #4]
    6fa8:	f7ff f99e 	bl	62e8 <GetFskBandwidthRegValue>
    6fac:	4601      	mov	r1, r0
    6fae:	2013      	movs	r0, #19
    6fb0:	f006 fda1 	bl	daf6 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    6fb4:	0a39      	lsrs	r1, r7, #8
    6fb6:	2025      	movs	r0, #37	; 0x25
    6fb8:	f006 fd9d 	bl	daf6 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    6fbc:	b2f9      	uxtb	r1, r7
    6fbe:	2026      	movs	r0, #38	; 0x26
    6fc0:	f006 fd99 	bl	daf6 <SX1276Write>
            if( fixLen == 1 )
    6fc4:	f1b8 0f00 	cmp.w	r8, #0
    6fc8:	d01b      	beq.n	7002 <SX1276SetRxConfig+0x112>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
    6fca:	4649      	mov	r1, r9
    6fcc:	2032      	movs	r0, #50	; 0x32
    6fce:	f006 fd92 	bl	daf6 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    6fd2:	2030      	movs	r0, #48	; 0x30
    6fd4:	f006 fd9a 	bl	db0c <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
    6fd8:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    6fdc:	4305      	orrs	r5, r0
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    6fde:	ea45 110a 	orr.w	r1, r5, sl, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
    6fe2:	b2c9      	uxtb	r1, r1
    6fe4:	2030      	movs	r0, #48	; 0x30
    6fe6:	f006 fd86 	bl	daf6 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    6fea:	2031      	movs	r0, #49	; 0x31
    6fec:	f006 fd8e 	bl	db0c <SX1276Read>
    6ff0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    6ff4:	b2c9      	uxtb	r1, r1
    6ff6:	2031      	movs	r0, #49	; 0x31
}
    6ff8:	b007      	add	sp, #28
    6ffa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    6ffe:	f006 bd7a 	b.w	daf6 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    7002:	21ff      	movs	r1, #255	; 0xff
    7004:	2032      	movs	r0, #50	; 0x32
    7006:	f006 fd76 	bl	daf6 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    700a:	2030      	movs	r0, #48	; 0x30
    700c:	f006 fd7e 	bl	db0c <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    7010:	f06f 057f 	mvn.w	r5, #127	; 0x7f
                           RF_PACKETCONFIG1_CRC_MASK &
    7014:	f000 006f 	and.w	r0, r0, #111	; 0x6f
    7018:	e7e0      	b.n	6fdc <SX1276SetRxConfig+0xec>
            if( bandwidth > 2 )
    701a:	2c02      	cmp	r4, #2
    701c:	d900      	bls.n	7020 <SX1276SetRxConfig+0x130>
                while( 1 );
    701e:	e7fe      	b.n	701e <SX1276SetRxConfig+0x12e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    7020:	4d5a      	ldr	r5, [pc, #360]	; (718c <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.LoRa.Coderate = coderate;
    7022:	9800      	ldr	r0, [sp, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
    7024:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
            else if( datarate < 6 )
    7028:	2e06      	cmp	r6, #6
    702a:	4633      	mov	r3, r6
    702c:	bf38      	it	cc
    702e:	2306      	movcc	r3, #6
            bandwidth += 7;
    7030:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    7032:	2b0c      	cmp	r3, #12
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    7034:	f885 112f 	strb.w	r1, [r5, #303]	; 0x12f
    7038:	bf28      	it	cs
    703a:	230c      	movcs	r3, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    703c:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
    703e:	f885 0129 	strb.w	r0, [r5, #297]	; 0x129
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    7042:	2c07      	cmp	r4, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    7044:	e9c5 4648 	strd	r4, r6, [r5, #288]	; 0x120
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    7048:	f8a5 712a 	strh.w	r7, [r5, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    704c:	f885 812c 	strb.w	r8, [r5, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
    7050:	f885 912d 	strb.w	r9, [r5, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
    7054:	f885 a12e 	strb.w	sl, [r5, #302]	; 0x12e
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    7058:	f885 1130 	strb.w	r1, [r5, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    705c:	f885 2131 	strb.w	r2, [r5, #305]	; 0x131
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    7060:	d178      	bne.n	7154 <SX1276SetRxConfig+0x264>
    7062:	f1a3 020b 	sub.w	r2, r3, #11
    7066:	2a01      	cmp	r2, #1
    7068:	bf8c      	ite	hi
    706a:	2200      	movhi	r2, #0
    706c:	2201      	movls	r2, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    706e:	201d      	movs	r0, #29
    7070:	f885 2128 	strb.w	r2, [r5, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG1,
    7074:	9301      	str	r3, [sp, #4]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    7076:	f006 fd49 	bl	db0c <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    707a:	9b00      	ldr	r3, [sp, #0]
    707c:	ea48 0143 	orr.w	r1, r8, r3, lsl #1
    7080:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
    7084:	b2c9      	uxtb	r1, r1
    7086:	201d      	movs	r0, #29
    7088:	f006 fd35 	bl	daf6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    708c:	201e      	movs	r0, #30
    708e:	f006 fd3d 	bl	db0c <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG2,
    7092:	9b01      	ldr	r3, [sp, #4]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    7094:	f3cb 2101 	ubfx	r1, fp, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
    7098:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
    709c:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
    70a0:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
    70a4:	4301      	orrs	r1, r0
    70a6:	b2c9      	uxtb	r1, r1
    70a8:	201e      	movs	r0, #30
    70aa:	f006 fd24 	bl	daf6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    70ae:	2026      	movs	r0, #38	; 0x26
    70b0:	f006 fd2c 	bl	db0c <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    70b4:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG3,
    70b8:	f020 0108 	bic.w	r1, r0, #8
    70bc:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
    70c0:	b2c9      	uxtb	r1, r1
    70c2:	2026      	movs	r0, #38	; 0x26
    70c4:	f006 fd17 	bl	daf6 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
    70c8:	fa5f f18b 	uxtb.w	r1, fp
    70cc:	201f      	movs	r0, #31
    70ce:	f006 fd12 	bl	daf6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    70d2:	0a39      	lsrs	r1, r7, #8
    70d4:	2020      	movs	r0, #32
    70d6:	f006 fd0e 	bl	daf6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    70da:	b2f9      	uxtb	r1, r7
    70dc:	2021      	movs	r0, #33	; 0x21
    70de:	f006 fd0a 	bl	daf6 <SX1276Write>
            if( fixLen == 1 )
    70e2:	f1b8 0f00 	cmp.w	r8, #0
    70e6:	d003      	beq.n	70f0 <SX1276SetRxConfig+0x200>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
    70e8:	4649      	mov	r1, r9
    70ea:	2022      	movs	r0, #34	; 0x22
    70ec:	f006 fd03 	bl	daf6 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    70f0:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
    70f4:	b16b      	cbz	r3, 7112 <SX1276SetRxConfig+0x222>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    70f6:	2044      	movs	r0, #68	; 0x44
    70f8:	f006 fd08 	bl	db0c <SX1276Read>
    70fc:	f060 017f 	orn	r1, r0, #127	; 0x7f
    7100:	b2c9      	uxtb	r1, r1
    7102:	2044      	movs	r0, #68	; 0x44
    7104:	f006 fcf7 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    7108:	f895 1130 	ldrb.w	r1, [r5, #304]	; 0x130
    710c:	2024      	movs	r0, #36	; 0x24
    710e:	f006 fcf2 	bl	daf6 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    7112:	2c09      	cmp	r4, #9
    7114:	d12b      	bne.n	716e <SX1276SetRxConfig+0x27e>
    7116:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
    711a:	4b1e      	ldr	r3, [pc, #120]	; (7194 <SX1276SetRxConfig+0x2a4>)
    711c:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    711e:	f04f 0102 	mov.w	r1, #2
    7122:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    7126:	d91e      	bls.n	7166 <SX1276SetRxConfig+0x276>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    7128:	f006 fce5 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
    712c:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    712e:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    7130:	f006 fce1 	bl	daf6 <SX1276Write>
            if( datarate == 6 )
    7134:	2e06      	cmp	r6, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    7136:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    713a:	d81b      	bhi.n	7174 <SX1276SetRxConfig+0x284>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    713c:	f006 fce6 	bl	db0c <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    7140:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    7144:	f041 0105 	orr.w	r1, r1, #5
    7148:	2031      	movs	r0, #49	; 0x31
    714a:	f006 fcd4 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    714e:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    7150:	2037      	movs	r0, #55	; 0x37
    7152:	e751      	b.n	6ff8 <SX1276SetRxConfig+0x108>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    7154:	2c08      	cmp	r4, #8
    7156:	d104      	bne.n	7162 <SX1276SetRxConfig+0x272>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    7158:	2e0b      	cmp	r6, #11
    715a:	bf94      	ite	ls
    715c:	2200      	movls	r2, #0
    715e:	2201      	movhi	r2, #1
    7160:	e785      	b.n	706e <SX1276SetRxConfig+0x17e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    7162:	2200      	movs	r2, #0
    7164:	e783      	b.n	706e <SX1276SetRxConfig+0x17e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    7166:	f006 fcc6 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    716a:	217f      	movs	r1, #127	; 0x7f
    716c:	e7df      	b.n	712e <SX1276SetRxConfig+0x23e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    716e:	2103      	movs	r1, #3
    7170:	2036      	movs	r0, #54	; 0x36
    7172:	e7dd      	b.n	7130 <SX1276SetRxConfig+0x240>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    7174:	f006 fcca 	bl	db0c <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    7178:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    717c:	f041 0103 	orr.w	r1, r1, #3
    7180:	2031      	movs	r0, #49	; 0x31
    7182:	f006 fcb8 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    7186:	210a      	movs	r1, #10
    7188:	e7e2      	b.n	7150 <SX1276SetRxConfig+0x260>
    718a:	bf00      	nop
    718c:	20001d48 	.word	0x20001d48
    7190:	01e84800 	.word	0x01e84800
    7194:	1f4add40 	.word	0x1f4add40

00007198 <SX1276SetTxConfig>:
{
    7198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    719c:	b087      	sub	sp, #28
    719e:	461e      	mov	r6, r3
    71a0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
    71a4:	9305      	str	r3, [sp, #20]
    71a6:	468a      	mov	sl, r1
    71a8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    71ac:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
    71b0:	9302      	str	r3, [sp, #8]
    71b2:	4617      	mov	r7, r2
    71b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    71b6:	9104      	str	r1, [sp, #16]
    71b8:	9203      	str	r2, [sp, #12]
    71ba:	9001      	str	r0, [sp, #4]
    71bc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    71c0:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    71c4:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
    71c8:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
    71cc:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
    71d0:	f7ff fe14 	bl	6dfc <SX1276SetModem>
    SX1276SetStby( );
    71d4:	f7ff fbfa 	bl	69cc <SX1276SetStby>
    SX1276SetRfTxPower( power );
    71d8:	4650      	mov	r0, sl
    71da:	f7fe ff81 	bl	60e0 <SX1276SetRfTxPower>
    switch( modem )
    71de:	9b01      	ldr	r3, [sp, #4]
    71e0:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
    71e4:	b12b      	cbz	r3, 71f2 <SX1276SetTxConfig+0x5a>
    71e6:	2b01      	cmp	r3, #1
    71e8:	9b05      	ldr	r3, [sp, #20]
    71ea:	d05b      	beq.n	72a4 <SX1276SetTxConfig+0x10c>
}
    71ec:	b007      	add	sp, #28
    71ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
    71f2:	4b76      	ldr	r3, [pc, #472]	; (73cc <SX1276SetTxConfig+0x234>)
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    71f4:	e9c3 763b 	strd	r7, r6, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.FixLen = fixLen;
    71f8:	f883 50fe 	strb.w	r5, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
    71fc:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    7200:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
    7204:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            SX1276.Settings.Fsk.Power = power;
    7208:	f883 a0e8 	strb.w	sl, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Datarate = datarate;
    720c:	f8c3 80f8 	str.w	r8, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    7210:	f8a3 90fc 	strh.w	r9, [r3, #252]	; 0xfc
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    7214:	f643 5309 	movw	r3, #15625	; 0x3d09
    7218:	f641 6684 	movw	r6, #7812	; 0x1e84
    721c:	fbb7 f2f3 	udiv	r2, r7, r3
    7220:	fb03 7712 	mls	r7, r3, r2, r7
    7224:	eb06 2607 	add.w	r6, r6, r7, lsl #8
    7228:	fbb6 f6f3 	udiv	r6, r6, r3
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
    722c:	eb06 2602 	add.w	r6, r6, r2, lsl #8
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
    7230:	f3c6 2107 	ubfx	r1, r6, #8, #8
    7234:	2004      	movs	r0, #4
    7236:	f006 fc5e 	bl	daf6 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
    723a:	b2f1      	uxtb	r1, r6
    723c:	2005      	movs	r0, #5
    723e:	f006 fc5a 	bl	daf6 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
    7242:	4e63      	ldr	r6, [pc, #396]	; (73d0 <SX1276SetTxConfig+0x238>)
    7244:	fbb6 f6f8 	udiv	r6, r6, r8
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    7248:	2002      	movs	r0, #2
    724a:	f3c6 2107 	ubfx	r1, r6, #8, #8
    724e:	f006 fc52 	bl	daf6 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
    7252:	b2f1      	uxtb	r1, r6
    7254:	2003      	movs	r0, #3
    7256:	f006 fc4e 	bl	daf6 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    725a:	ea4f 2119 	mov.w	r1, r9, lsr #8
    725e:	2025      	movs	r0, #37	; 0x25
    7260:	f006 fc49 	bl	daf6 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
    7264:	fa5f f189 	uxtb.w	r1, r9
    7268:	2026      	movs	r0, #38	; 0x26
    726a:	f006 fc44 	bl	daf6 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    726e:	2030      	movs	r0, #48	; 0x30
    7270:	f006 fc4c 	bl	db0c <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    7274:	f085 0501 	eor.w	r5, r5, #1
                           ( crcOn << 4 ) );
    7278:	0124      	lsls	r4, r4, #4
            SX1276Write( REG_PACKETCONFIG1,
    727a:	f000 006f 	and.w	r0, r0, #111	; 0x6f
    727e:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
    7282:	4304      	orrs	r4, r0
    7284:	b2e1      	uxtb	r1, r4
    7286:	2030      	movs	r0, #48	; 0x30
    7288:	f006 fc35 	bl	daf6 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    728c:	2031      	movs	r0, #49	; 0x31
    728e:	f006 fc3d 	bl	db0c <SX1276Read>
    7292:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    7296:	b2c9      	uxtb	r1, r1
    7298:	2031      	movs	r0, #49	; 0x31
}
    729a:	b007      	add	sp, #28
    729c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    72a0:	f006 bc29 	b.w	daf6 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
    72a4:	4f49      	ldr	r7, [pc, #292]	; (73cc <SX1276SetTxConfig+0x234>)
            if( bandwidth > 2 )
    72a6:	2e02      	cmp	r6, #2
            SX1276.Settings.LoRa.Power = power;
    72a8:	f887 a11c 	strb.w	sl, [r7, #284]	; 0x11c
            if( bandwidth > 2 )
    72ac:	d900      	bls.n	72b0 <SX1276SetTxConfig+0x118>
                while( 1 );
    72ae:	e7fe      	b.n	72ae <SX1276SetTxConfig+0x116>
            else if( datarate < 6 )
    72b0:	f1b8 0f06 	cmp.w	r8, #6
    72b4:	46c2      	mov	sl, r8
    72b6:	bf38      	it	cc
    72b8:	f04f 0a06 	movcc.w	sl, #6
            bandwidth += 7;
    72bc:	3607      	adds	r6, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    72be:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    72c2:	9802      	ldr	r0, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
    72c4:	f887 b129 	strb.w	fp, [r7, #297]	; 0x129
    72c8:	bf28      	it	cs
    72ca:	f04f 0a0c 	movcs.w	sl, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    72ce:	2e07      	cmp	r6, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    72d0:	e9c7 6848 	strd	r6, r8, [r7, #288]	; 0x120
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    72d4:	f8a7 912a 	strh.w	r9, [r7, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    72d8:	f887 512c 	strb.w	r5, [r7, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    72dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    72e0:	f887 0130 	strb.w	r0, [r7, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
    72e4:	f887 412e 	strb.w	r4, [r7, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    72e8:	f887 1131 	strb.w	r1, [r7, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
    72ec:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    72f0:	d156      	bne.n	73a0 <SX1276SetTxConfig+0x208>
    72f2:	f1aa 020b 	sub.w	r2, sl, #11
    72f6:	2a01      	cmp	r2, #1
    72f8:	bf8c      	ite	hi
    72fa:	2200      	movhi	r2, #0
    72fc:	2201      	movls	r2, #1
    72fe:	f887 2128 	strb.w	r2, [r7, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    7302:	b16b      	cbz	r3, 7320 <SX1276SetTxConfig+0x188>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    7304:	2044      	movs	r0, #68	; 0x44
    7306:	f006 fc01 	bl	db0c <SX1276Read>
    730a:	f060 017f 	orn	r1, r0, #127	; 0x7f
    730e:	b2c9      	uxtb	r1, r1
    7310:	2044      	movs	r0, #68	; 0x44
    7312:	f006 fbf0 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    7316:	f897 1130 	ldrb.w	r1, [r7, #304]	; 0x130
    731a:	2024      	movs	r0, #36	; 0x24
    731c:	f006 fbeb 	bl	daf6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    7320:	201d      	movs	r0, #29
    7322:	f006 fbf3 	bl	db0c <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    7326:	ea45 014b 	orr.w	r1, r5, fp, lsl #1
    732a:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
    732e:	b2c9      	uxtb	r1, r1
    7330:	201d      	movs	r0, #29
    7332:	f006 fbe0 	bl	daf6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    7336:	201e      	movs	r0, #30
    7338:	f006 fbe8 	bl	db0c <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
    733c:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
    733e:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
    7342:	ea44 140a 	orr.w	r4, r4, sl, lsl #4
    7346:	4304      	orrs	r4, r0
    7348:	b2e1      	uxtb	r1, r4
    734a:	201e      	movs	r0, #30
    734c:	f006 fbd3 	bl	daf6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    7350:	2026      	movs	r0, #38	; 0x26
    7352:	f006 fbdb 	bl	db0c <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    7356:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG3,
    735a:	f020 0108 	bic.w	r1, r0, #8
    735e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
    7362:	b2c9      	uxtb	r1, r1
    7364:	2026      	movs	r0, #38	; 0x26
    7366:	f006 fbc6 	bl	daf6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    736a:	ea4f 2119 	mov.w	r1, r9, lsr #8
    736e:	2020      	movs	r0, #32
    7370:	f006 fbc1 	bl	daf6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
    7374:	2021      	movs	r0, #33	; 0x21
    7376:	fa5f f189 	uxtb.w	r1, r9
    737a:	f006 fbbc 	bl	daf6 <SX1276Write>
            if( datarate == 6 )
    737e:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    7382:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    7386:	d815      	bhi.n	73b4 <SX1276SetTxConfig+0x21c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    7388:	f006 fbc0 	bl	db0c <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    738c:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    7390:	f041 0105 	orr.w	r1, r1, #5
    7394:	2031      	movs	r0, #49	; 0x31
    7396:	f006 fbae 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    739a:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    739c:	2037      	movs	r0, #55	; 0x37
    739e:	e77c      	b.n	729a <SX1276SetTxConfig+0x102>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    73a0:	2e08      	cmp	r6, #8
    73a2:	d105      	bne.n	73b0 <SX1276SetTxConfig+0x218>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    73a4:	f1b8 0f0b 	cmp.w	r8, #11
    73a8:	bf94      	ite	ls
    73aa:	2200      	movls	r2, #0
    73ac:	2201      	movhi	r2, #1
    73ae:	e7a6      	b.n	72fe <SX1276SetTxConfig+0x166>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    73b0:	2200      	movs	r2, #0
    73b2:	e7a4      	b.n	72fe <SX1276SetTxConfig+0x166>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    73b4:	f006 fbaa 	bl	db0c <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    73b8:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    73bc:	f041 0103 	orr.w	r1, r1, #3
    73c0:	2031      	movs	r0, #49	; 0x31
    73c2:	f006 fb98 	bl	daf6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    73c6:	210a      	movs	r1, #10
    73c8:	e7e8      	b.n	739c <SX1276SetTxConfig+0x204>
    73ca:	bf00      	nop
    73cc:	20001d48 	.word	0x20001d48
    73d0:	01e84800 	.word	0x01e84800

000073d4 <SX1276SetTxContinuousWave>:
{
    73d4:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
    73d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
    73da:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
    73dc:	fb03 f402 	mul.w	r4, r3, r2
{
    73e0:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
    73e2:	f7ff f819 	bl	6418 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
    73e6:	2300      	movs	r3, #0
    73e8:	2205      	movs	r2, #5
    73ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
    73ee:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
    73f2:	e9cd 3306 	strd	r3, r3, [sp, #24]
    73f6:	e9cd 3304 	strd	r3, r3, [sp, #16]
    73fa:	9303      	str	r3, [sp, #12]
    73fc:	4618      	mov	r0, r3
    73fe:	4629      	mov	r1, r5
    7400:	9200      	str	r2, [sp, #0]
    7402:	9408      	str	r4, [sp, #32]
    7404:	461a      	mov	r2, r3
    7406:	f7ff fec7 	bl	7198 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
    740a:	2031      	movs	r0, #49	; 0x31
    740c:	f006 fb7e 	bl	db0c <SX1276Read>
    7410:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
    7414:	2031      	movs	r0, #49	; 0x31
    7416:	f006 fb6e 	bl	daf6 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    741a:	4d0d      	ldr	r5, [pc, #52]	; (7450 <SX1276SetTxContinuousWave+0x7c>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
    741c:	21f0      	movs	r1, #240	; 0xf0
    741e:	2040      	movs	r0, #64	; 0x40
    7420:	f006 fb69 	bl	daf6 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
    7424:	21a0      	movs	r1, #160	; 0xa0
    7426:	2041      	movs	r0, #65	; 0x41
    7428:	f006 fb65 	bl	daf6 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    742c:	4621      	mov	r1, r4
    742e:	4628      	mov	r0, r5
    7430:	f006 fb38 	bl	daa4 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
    7434:	4b07      	ldr	r3, [pc, #28]	; (7454 <SX1276SetTxContinuousWave+0x80>)
    7436:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
    7438:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
    743a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    743e:	f7fe feb3 	bl	61a8 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    7442:	2003      	movs	r0, #3
}
    7444:	b00b      	add	sp, #44	; 0x2c
    7446:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    744a:	f006 bb6a 	b.w	db22 <SX1276SetOpMode>
    744e:	bf00      	nop
    7450:	20001d30 	.word	0x20001d30
    7454:	20001d48 	.word	0x20001d48

00007458 <SX1276SetMaxPayloadLength>:
{
    7458:	b538      	push	{r3, r4, r5, lr}
    745a:	4605      	mov	r5, r0
    745c:	460c      	mov	r4, r1
    SX1276SetModem( modem );
    745e:	f7ff fccd 	bl	6dfc <SX1276SetModem>
    switch( modem )
    7462:	b115      	cbz	r5, 746a <SX1276SetMaxPayloadLength+0x12>
    7464:	2d01      	cmp	r5, #1
    7466:	d00b      	beq.n	7480 <SX1276SetMaxPayloadLength+0x28>
}
    7468:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
    746a:	4b07      	ldr	r3, [pc, #28]	; (7488 <SX1276SetMaxPayloadLength+0x30>)
    746c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    7470:	2b00      	cmp	r3, #0
    7472:	d1f9      	bne.n	7468 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
    7474:	4621      	mov	r1, r4
    7476:	2032      	movs	r0, #50	; 0x32
}
    7478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
    747c:	f006 bb3b 	b.w	daf6 <SX1276Write>
    7480:	4621      	mov	r1, r4
    7482:	2023      	movs	r0, #35	; 0x23
    7484:	e7f8      	b.n	7478 <SX1276SetMaxPayloadLength+0x20>
    7486:	bf00      	nop
    7488:	20001d48 	.word	0x20001d48

0000748c <SX1276SetPublicNetwork>:
{
    748c:	b510      	push	{r4, lr}
    748e:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
    7490:	2001      	movs	r0, #1
    7492:	f7ff fcb3 	bl	6dfc <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
    7496:	4b06      	ldr	r3, [pc, #24]	; (74b0 <SX1276SetPublicNetwork+0x24>)
    7498:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
    749c:	b12c      	cbz	r4, 74aa <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
    749e:	2134      	movs	r1, #52	; 0x34
}
    74a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    74a4:	2039      	movs	r0, #57	; 0x39
    74a6:	f006 bb26 	b.w	daf6 <SX1276Write>
    74aa:	2112      	movs	r1, #18
    74ac:	e7f8      	b.n	74a0 <SX1276SetPublicNetwork+0x14>
    74ae:	bf00      	nop
    74b0:	20001d48 	.word	0x20001d48

000074b4 <SX1276OnTimeoutIrq>:
{
    74b4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    74b6:	4c2d      	ldr	r4, [pc, #180]	; (756c <SX1276OnTimeoutIrq+0xb8>)
    74b8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    74bc:	2b01      	cmp	r3, #1
    74be:	d002      	beq.n	74c6 <SX1276OnTimeoutIrq+0x12>
    74c0:	2b02      	cmp	r3, #2
    74c2:	d02d      	beq.n	7520 <SX1276OnTimeoutIrq+0x6c>
}
    74c4:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
    74c6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    74ca:	b9cb      	cbnz	r3, 7500 <SX1276OnTimeoutIrq+0x4c>
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    74cc:	210b      	movs	r1, #11
    74ce:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    74d0:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    74d4:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    74d8:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    74dc:	f006 fb0b 	bl	daf6 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    74e0:	2110      	movs	r1, #16
    74e2:	203f      	movs	r0, #63	; 0x3f
    74e4:	f006 fb07 	bl	daf6 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
    74e8:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    74ec:	b193      	cbz	r3, 7514 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    74ee:	200d      	movs	r0, #13
    74f0:	f006 fb0c 	bl	db0c <SX1276Read>
    74f4:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    74f8:	b2c9      	uxtb	r1, r1
    74fa:	200d      	movs	r0, #13
    74fc:	f006 fafb 	bl	daf6 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    7500:	4b1b      	ldr	r3, [pc, #108]	; (7570 <SX1276OnTimeoutIrq+0xbc>)
    7502:	681b      	ldr	r3, [r3, #0]
    7504:	2b00      	cmp	r3, #0
    7506:	d0dd      	beq.n	74c4 <SX1276OnTimeoutIrq+0x10>
    7508:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    750a:	2b00      	cmp	r3, #0
    750c:	d0da      	beq.n	74c4 <SX1276OnTimeoutIrq+0x10>
}
    750e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
    7512:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
    7514:	4817      	ldr	r0, [pc, #92]	; (7574 <SX1276OnTimeoutIrq+0xc0>)
                SX1276.Settings.State = RF_IDLE;
    7516:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
    751a:	f7fe febb 	bl	6294 <TimerStop>
    751e:	e7ef      	b.n	7500 <SX1276OnTimeoutIrq+0x4c>
        SX1276Reset( );
    7520:	f006 fa6b 	bl	d9fa <SX1276Reset>
        RxChainCalibration( );
    7524:	f7ff f9ea 	bl	68fc <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    7528:	2000      	movs	r0, #0
    752a:	f006 fafa 	bl	db22 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    752e:	4d12      	ldr	r5, [pc, #72]	; (7578 <SX1276OnTimeoutIrq+0xc4>)
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    7530:	2600      	movs	r6, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
    7532:	7828      	ldrb	r0, [r5, #0]
    7534:	f7ff fc62 	bl	6dfc <SX1276SetModem>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    7538:	3601      	adds	r6, #1
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    753a:	78a9      	ldrb	r1, [r5, #2]
    753c:	7868      	ldrb	r0, [r5, #1]
    753e:	f006 fada 	bl	daf6 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    7542:	2e10      	cmp	r6, #16
    7544:	f105 0503 	add.w	r5, r5, #3
    7548:	d1f3      	bne.n	7532 <SX1276OnTimeoutIrq+0x7e>
        SX1276SetModem( MODEM_FSK );
    754a:	2000      	movs	r0, #0
    754c:	f7ff fc56 	bl	6dfc <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
    7550:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
    7554:	f7ff ff9a 	bl	748c <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
    7558:	2300      	movs	r3, #0
    755a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    755e:	4b04      	ldr	r3, [pc, #16]	; (7570 <SX1276OnTimeoutIrq+0xbc>)
    7560:	681b      	ldr	r3, [r3, #0]
    7562:	2b00      	cmp	r3, #0
    7564:	d0ae      	beq.n	74c4 <SX1276OnTimeoutIrq+0x10>
    7566:	685b      	ldr	r3, [r3, #4]
    7568:	e7cf      	b.n	750a <SX1276OnTimeoutIrq+0x56>
    756a:	bf00      	nop
    756c:	20001d48 	.word	0x20001d48
    7570:	20001e8c 	.word	0x20001e8c
    7574:	20001d00 	.word	0x20001d00
    7578:	00010419 	.word	0x00010419

0000757c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    7580:	4e5a      	ldr	r6, [pc, #360]	; (76ec <pinctrl_configure_pins+0x170>)
    7582:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7586:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7588:	4281      	cmp	r1, r0
    758a:	d102      	bne.n	7592 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    758c:	2000      	movs	r0, #0
}
    758e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7592:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    7594:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7598:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    759c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    759e:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    75a2:	bf08      	it	eq
    75a4:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    75a8:	2c22      	cmp	r4, #34	; 0x22
    75aa:	f200 809b 	bhi.w	76e4 <pinctrl_configure_pins+0x168>
    75ae:	e8df f004 	tbb	[pc, r4]
    75b2:	2412      	.short	0x2412
    75b4:	402c4429 	.word	0x402c4429
    75b8:	99999944 	.word	0x99999944
    75bc:	99704799 	.word	0x99704799
    75c0:	99999999 	.word	0x99999999
    75c4:	99999999 	.word	0x99999999
    75c8:	817e7b73 	.word	0x817e7b73
    75cc:	84999999 	.word	0x84999999
    75d0:	93908d8a 	.word	0x93908d8a
    75d4:	96          	.byte	0x96
    75d5:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    75d6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    75da:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    75de:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    75e2:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    75e6:	bf14      	ite	ne
    75e8:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    75ec:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    75ee:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    75f2:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    75f6:	2401      	movs	r4, #1
    75f8:	e002      	b.n	7600 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    75fa:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    75fe:	2400      	movs	r4, #0
    7600:	46a6      	mov	lr, r4
    7602:	e024      	b.n	764e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    7604:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    7608:	e7e7      	b.n	75da <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    760a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    760e:	2400      	movs	r4, #0
    return pin_number >> 5;
    7610:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    7614:	f1be 0f01 	cmp.w	lr, #1
    7618:	bf14      	ite	ne
    761a:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    761e:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    7620:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7624:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    7628:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    762c:	f04f 0e01 	mov.w	lr, #1
    7630:	e00d      	b.n	764e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    7632:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    7636:	2401      	movs	r4, #1
    7638:	e7ea      	b.n	7610 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    763a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    763e:	e7de      	b.n	75fe <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    7640:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    7644:	2d00      	cmp	r5, #0
    7646:	d1da      	bne.n	75fe <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7648:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    764a:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    764c:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    764e:	f850 cb04 	ldr.w	ip, [r0], #4
    7652:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7656:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    765a:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    765e:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    7662:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    7666:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    766a:	bf1c      	itt	ne
    766c:	2401      	movne	r4, #1
    766e:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7672:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    7676:	2b01      	cmp	r3, #1
    7678:	bf0c      	ite	eq
    767a:	4633      	moveq	r3, r6
    767c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7680:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    7684:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7688:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    768c:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7690:	e77a      	b.n	7588 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    7692:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    7696:	e7d5      	b.n	7644 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    7698:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    769c:	6804      	ldr	r4, [r0, #0]
    769e:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    76a2:	2c00      	cmp	r4, #0
    76a4:	d0c7      	beq.n	7636 <pinctrl_configure_pins+0xba>
    76a6:	e798      	b.n	75da <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    76a8:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    76ac:	e7f6      	b.n	769c <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    76ae:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    76b2:	e7f3      	b.n	769c <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    76b4:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    76b8:	e7f0      	b.n	769c <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    76ba:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    76be:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    76c0:	f04f 0e00 	mov.w	lr, #0
    76c4:	e7c3      	b.n	764e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    76c6:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    76ca:	e786      	b.n	75da <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    76cc:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    76d0:	e7f5      	b.n	76be <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    76d2:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    76d6:	e7f2      	b.n	76be <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    76d8:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    76dc:	e7ef      	b.n	76be <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    76de:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    76e2:	e7ec      	b.n	76be <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
    76e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    76e8:	e751      	b.n	758e <pinctrl_configure_pins+0x12>
    76ea:	bf00      	nop
    76ec:	50000300 	.word	0x50000300

000076f0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    76f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    76f2:	794b      	ldrb	r3, [r1, #5]
    76f4:	2b01      	cmp	r3, #1
    76f6:	d026      	beq.n	7746 <uarte_nrfx_configure+0x56>
    76f8:	2b03      	cmp	r3, #3
    76fa:	d121      	bne.n	7740 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    76fc:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    76fe:	798b      	ldrb	r3, [r1, #6]
    7700:	2b03      	cmp	r3, #3
    7702:	d11d      	bne.n	7740 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    7704:	79ce      	ldrb	r6, [r1, #7]
    7706:	b10e      	cbz	r6, 770c <uarte_nrfx_configure+0x1c>
    7708:	2e01      	cmp	r6, #1
    770a:	d119      	bne.n	7740 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    770c:	790a      	ldrb	r2, [r1, #4]
    770e:	b112      	cbz	r2, 7716 <uarte_nrfx_configure+0x26>
    7710:	2a02      	cmp	r2, #2
    7712:	d115      	bne.n	7740 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    7714:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    7716:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    7718:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    771a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    771e:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    7720:	d067      	beq.n	77f2 <uarte_nrfx_configure+0x102>
    7722:	d82d      	bhi.n	7780 <uarte_nrfx_configure+0x90>
    7724:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    7728:	d066      	beq.n	77f8 <uarte_nrfx_configure+0x108>
    772a:	d816      	bhi.n	775a <uarte_nrfx_configure+0x6a>
    772c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    7730:	d064      	beq.n	77fc <uarte_nrfx_configure+0x10c>
    7732:	d80a      	bhi.n	774a <uarte_nrfx_configure+0x5a>
    7734:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    7738:	d063      	beq.n	7802 <uarte_nrfx_configure+0x112>
    773a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    773e:	d063      	beq.n	7808 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    7740:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7744:	e054      	b.n	77f0 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    7746:	2500      	movs	r5, #0
    7748:	e7d9      	b.n	76fe <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    774a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    774e:	d05e      	beq.n	780e <uarte_nrfx_configure+0x11e>
    7750:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    7754:	d1f4      	bne.n	7740 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    7756:	4b38      	ldr	r3, [pc, #224]	; (7838 <uarte_nrfx_configure+0x148>)
    7758:	e03c      	b.n	77d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    775a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    775e:	d059      	beq.n	7814 <uarte_nrfx_configure+0x124>
    7760:	d807      	bhi.n	7772 <uarte_nrfx_configure+0x82>
    7762:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    7766:	d057      	beq.n	7818 <uarte_nrfx_configure+0x128>
    7768:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    776c:	d1e8      	bne.n	7740 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    776e:	4b33      	ldr	r3, [pc, #204]	; (783c <uarte_nrfx_configure+0x14c>)
    7770:	e030      	b.n	77d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7772:	f647 2412 	movw	r4, #31250	; 0x7a12
    7776:	42a3      	cmp	r3, r4
    7778:	d1e2      	bne.n	7740 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    777a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    777e:	e029      	b.n	77d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7780:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    7784:	d04a      	beq.n	781c <uarte_nrfx_configure+0x12c>
    7786:	d813      	bhi.n	77b0 <uarte_nrfx_configure+0xc0>
    7788:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    778c:	d049      	beq.n	7822 <uarte_nrfx_configure+0x132>
    778e:	d809      	bhi.n	77a4 <uarte_nrfx_configure+0xb4>
    7790:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    7794:	42a3      	cmp	r3, r4
    7796:	d046      	beq.n	7826 <uarte_nrfx_configure+0x136>
    7798:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    779c:	d1d0      	bne.n	7740 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    779e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    77a2:	e017      	b.n	77d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    77a4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    77a8:	d1ca      	bne.n	7740 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    77aa:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    77ae:	e011      	b.n	77d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    77b0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    77b4:	d03a      	beq.n	782c <uarte_nrfx_configure+0x13c>
    77b6:	d808      	bhi.n	77ca <uarte_nrfx_configure+0xda>
    77b8:	4c21      	ldr	r4, [pc, #132]	; (7840 <uarte_nrfx_configure+0x150>)
    77ba:	42a3      	cmp	r3, r4
    77bc:	d039      	beq.n	7832 <uarte_nrfx_configure+0x142>
    77be:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    77c2:	d1bd      	bne.n	7740 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    77c4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    77c8:	e004      	b.n	77d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    77ca:	4c1e      	ldr	r4, [pc, #120]	; (7844 <uarte_nrfx_configure+0x154>)
    77cc:	42a3      	cmp	r3, r4
    77ce:	d1b7      	bne.n	7740 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    77d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    77d4:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    77d6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    77da:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    77dc:	4335      	orrs	r5, r6
    77de:	681b      	ldr	r3, [r3, #0]
    77e0:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    77e2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    77e6:	c903      	ldmia	r1, {r0, r1}
    77e8:	1d23      	adds	r3, r4, #4
    77ea:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    77ee:	2000      	movs	r0, #0
}
    77f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    77f2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    77f6:	e7ed      	b.n	77d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    77f8:	4b13      	ldr	r3, [pc, #76]	; (7848 <uarte_nrfx_configure+0x158>)
    77fa:	e7eb      	b.n	77d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    77fc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    7800:	e7e8      	b.n	77d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    7802:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    7806:	e7e5      	b.n	77d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7808:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    780c:	e7e2      	b.n	77d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    780e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    7812:	e7df      	b.n	77d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    7814:	4b0d      	ldr	r3, [pc, #52]	; (784c <uarte_nrfx_configure+0x15c>)
    7816:	e7dd      	b.n	77d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    7818:	4b0d      	ldr	r3, [pc, #52]	; (7850 <uarte_nrfx_configure+0x160>)
    781a:	e7db      	b.n	77d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    781c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    7820:	e7d8      	b.n	77d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    7822:	4b0c      	ldr	r3, [pc, #48]	; (7854 <uarte_nrfx_configure+0x164>)
    7824:	e7d6      	b.n	77d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    7826:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    782a:	e7d3      	b.n	77d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    782c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    7830:	e7d0      	b.n	77d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    7832:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7836:	e7cd      	b.n	77d4 <uarte_nrfx_configure+0xe4>
    7838:	0013b000 	.word	0x0013b000
    783c:	004ea000 	.word	0x004ea000
    7840:	0003d090 	.word	0x0003d090
    7844:	000f4240 	.word	0x000f4240
    7848:	00275000 	.word	0x00275000
    784c:	0075c000 	.word	0x0075c000
    7850:	003af000 	.word	0x003af000
    7854:	013a9000 	.word	0x013a9000

00007858 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    7858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    785c:	2200      	movs	r2, #0
    785e:	b087      	sub	sp, #28
    7860:	4680      	mov	r8, r0
    7862:	2101      	movs	r1, #1
    7864:	2002      	movs	r0, #2
    7866:	f7fb ffcf 	bl	3808 <z_arm_irq_priority_set>
    786a:	2002      	movs	r0, #2
    786c:	f7fb ff9c 	bl	37a8 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    7870:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    7874:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    7878:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    787a:	2100      	movs	r1, #0
    787c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    7880:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    7884:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    7888:	466a      	mov	r2, sp
    788a:	4648      	mov	r0, r9
    788c:	f006 f9ba 	bl	dc04 <pinctrl_lookup_state>
	if (ret < 0) {
    7890:	1e05      	subs	r5, r0, #0
    7892:	db25      	blt.n	78e0 <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    7894:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    7896:	f8d9 2000 	ldr.w	r2, [r9]
    789a:	7919      	ldrb	r1, [r3, #4]
    789c:	6818      	ldr	r0, [r3, #0]
    789e:	f7ff fe6d 	bl	757c <pinctrl_configure_pins>
	if (err < 0) {
    78a2:	1e05      	subs	r5, r0, #0
    78a4:	db1c      	blt.n	78e0 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    78a6:	1d31      	adds	r1, r6, #4
    78a8:	4640      	mov	r0, r8
    78aa:	f7ff ff21 	bl	76f0 <uarte_nrfx_configure>
	if (err) {
    78ae:	4605      	mov	r5, r0
    78b0:	b9b0      	cbnz	r0, 78e0 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    78b2:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    78b4:	0799      	lsls	r1, r3, #30
    78b6:	d52b      	bpl.n	7910 <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    78b8:	f106 0018 	add.w	r0, r6, #24
    78bc:	f001 fe9e 	bl	95fc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    78c0:	4b27      	ldr	r3, [pc, #156]	; (7960 <uarte_0_init+0x108>)
    78c2:	4298      	cmp	r0, r3
    78c4:	d010      	beq.n	78e8 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
    78c6:	4b27      	ldr	r3, [pc, #156]	; (7964 <uarte_0_init+0x10c>)
    78c8:	9305      	str	r3, [sp, #20]
    78ca:	2302      	movs	r3, #2
    78cc:	9304      	str	r3, [sp, #16]
    78ce:	4826      	ldr	r0, [pc, #152]	; (7968 <uarte_0_init+0x110>)
    78d0:	462b      	mov	r3, r5
    78d2:	aa04      	add	r2, sp, #16
    78d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    78d8:	f06f 0504 	mvn.w	r5, #4
    78dc:	f7fa f976 	bl	1bcc <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
    78e0:	4628      	mov	r0, r5
    78e2:	b007      	add	sp, #28
    78e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    78e8:	7e33      	ldrb	r3, [r6, #24]
    78ea:	00db      	lsls	r3, r3, #3
    78ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    78f0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    78f4:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    78f8:	f504 7190 	add.w	r1, r4, #288	; 0x120
    78fc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    7900:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    7904:	7e32      	ldrb	r2, [r6, #24]
    7906:	2301      	movs	r3, #1
    7908:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    790a:	4a18      	ldr	r2, [pc, #96]	; (796c <uarte_0_init+0x114>)
    790c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7910:	2308      	movs	r3, #8
    7912:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    7916:	7a3b      	ldrb	r3, [r7, #8]
    7918:	b953      	cbnz	r3, 7930 <uarte_0_init+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    791a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    791e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7922:	6973      	ldr	r3, [r6, #20]
    7924:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    7928:	2301      	movs	r3, #1
    792a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    792e:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    7930:	687b      	ldr	r3, [r7, #4]
    7932:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    7934:	bf5c      	itt	pl
    7936:	f44f 7380 	movpl.w	r3, #256	; 0x100
    793a:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    793e:	687b      	ldr	r3, [r7, #4]
    7940:	06db      	lsls	r3, r3, #27
    7942:	bf44      	itt	mi
    7944:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    7948:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    794c:	6933      	ldr	r3, [r6, #16]
    794e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    7952:	2300      	movs	r3, #0
    7954:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7958:	2301      	movs	r3, #1
    795a:	60a3      	str	r3, [r4, #8]
    795c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    795e:	e7bf      	b.n	78e0 <uarte_0_init+0x88>
    7960:	0bad0000 	.word	0x0bad0000
    7964:	00010449 	.word	0x00010449
    7968:	0000f038 	.word	0x0000f038
    796c:	4001f000 	.word	0x4001f000

00007970 <uarte_nrfx_poll_out>:
{
    7970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7972:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    7974:	6907      	ldr	r7, [r0, #16]
{
    7976:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7978:	f006 fd41 	bl	e3fe <k_is_in_isr>
    797c:	b9b0      	cbnz	r0, 79ac <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    797e:	4b2e      	ldr	r3, [pc, #184]	; (7a38 <uarte_nrfx_poll_out+0xc8>)
    7980:	781b      	ldrb	r3, [r3, #0]
    7982:	b19b      	cbz	r3, 79ac <uarte_nrfx_poll_out+0x3c>
{
    7984:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    7986:	6860      	ldr	r0, [r4, #4]
    7988:	f006 f972 	bl	dc70 <is_tx_ready.isra.0>
    798c:	bb00      	cbnz	r0, 79d0 <uarte_nrfx_poll_out+0x60>
    798e:	2001      	movs	r0, #1
    7990:	f006 fada 	bl	df48 <nrfx_busy_wait>
    7994:	3e01      	subs	r6, #1
    7996:	d1f6      	bne.n	7986 <uarte_nrfx_poll_out+0x16>
    7998:	2100      	movs	r1, #0
    799a:	2021      	movs	r0, #33	; 0x21
    799c:	f004 f9fc 	bl	bd98 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    79a0:	e7f0      	b.n	7984 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    79a2:	f386 8811 	msr	BASEPRI, r6
    79a6:	f3bf 8f6f 	isb	sy
}
    79aa:	e7f5      	b.n	7998 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    79ac:	f04f 0320 	mov.w	r3, #32
    79b0:	f3ef 8611 	mrs	r6, BASEPRI
    79b4:	f383 8812 	msr	BASEPRI_MAX, r3
    79b8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    79bc:	6860      	ldr	r0, [r4, #4]
    79be:	4631      	mov	r1, r6
    79c0:	f006 f956 	bl	dc70 <is_tx_ready.isra.0>
    79c4:	b990      	cbnz	r0, 79ec <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    79c6:	f386 8811 	msr	BASEPRI, r6
    79ca:	f3bf 8f6f 	isb	sy
}
    79ce:	e7ed      	b.n	79ac <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    79d0:	f04f 0320 	mov.w	r3, #32
    79d4:	f3ef 8611 	mrs	r6, BASEPRI
    79d8:	f383 8812 	msr	BASEPRI_MAX, r3
    79dc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    79e0:	6860      	ldr	r0, [r4, #4]
    79e2:	4631      	mov	r1, r6
    79e4:	f006 f944 	bl	dc70 <is_tx_ready.isra.0>
    79e8:	2800      	cmp	r0, #0
    79ea:	d0da      	beq.n	79a2 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    79ec:	693b      	ldr	r3, [r7, #16]
    79ee:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    79f0:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    79f2:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    79f4:	6813      	ldr	r3, [r2, #0]
    79f6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    79fa:	2001      	movs	r0, #1
    79fc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a00:	2000      	movs	r0, #0
    7a02:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    7a06:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    7a0a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7a0e:	6852      	ldr	r2, [r2, #4]
    7a10:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    7a14:	06d2      	lsls	r2, r2, #27
    7a16:	d508      	bpl.n	7a2a <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    7a18:	6862      	ldr	r2, [r4, #4]
    7a1a:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7a1c:	2008      	movs	r0, #8
    7a1e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    7a22:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    7a26:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7a2a:	2201      	movs	r2, #1
    7a2c:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    7a2e:	f381 8811 	msr	BASEPRI, r1
    7a32:	f3bf 8f6f 	isb	sy
}
    7a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a38:	20002945 	.word	0x20002945

00007a3c <spi_nrfx_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int spi_nrfx_init(const struct device *dev)
{
    7a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7a40:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
    7a42:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    7a44:	6905      	ldr	r5, [r0, #16]
	int err;

	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    7a46:	6a26      	ldr	r6, [r4, #32]
{
    7a48:	af00      	add	r7, sp, #0
	ret = pinctrl_lookup_state(config, id, &state);
    7a4a:	1d3a      	adds	r2, r7, #4
    7a4c:	2100      	movs	r1, #0
    7a4e:	4630      	mov	r0, r6
    7a50:	f006 f8d8 	bl	dc04 <pinctrl_lookup_state>
	if (ret < 0) {
    7a54:	2800      	cmp	r0, #0
    7a56:	db32      	blt.n	7abe <spi_nrfx_init+0x82>
	return pinctrl_apply_state_direct(config, state);
    7a58:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    7a5a:	6832      	ldr	r2, [r6, #0]
    7a5c:	7919      	ldrb	r1, [r3, #4]
    7a5e:	6818      	ldr	r0, [r3, #0]
    7a60:	f7ff fd8c 	bl	757c <pinctrl_configure_pins>
	if (err < 0) {
    7a64:	2800      	cmp	r0, #0
    7a66:	db2a      	blt.n	7abe <spi_nrfx_init+0x82>
		return err;
	}

	dev_config->irq_connect();
    7a68:	69e3      	ldr	r3, [r4, #28]
    7a6a:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    7a6c:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7a6e:	2601      	movs	r6, #1
    7a70:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    7a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7a78:	429c      	cmp	r4, r3
    7a7a:	d304      	bcc.n	7a86 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    7a7c:	4628      	mov	r0, r5
    7a7e:	f006 f991 	bl	dda4 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    7a82:	2000      	movs	r0, #0

	return 0;
    7a84:	e01b      	b.n	7abe <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
    7a86:	6820      	ldr	r0, [r4, #0]
    7a88:	f006 fc5d 	bl	e346 <z_device_is_ready>
    7a8c:	b9d8      	cbnz	r0, 7ac6 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    7a8e:	6823      	ldr	r3, [r4, #0]
    7a90:	6819      	ldr	r1, [r3, #0]
    7a92:	7923      	ldrb	r3, [r4, #4]
    7a94:	466c      	mov	r4, sp
    7a96:	b08a      	sub	sp, #40	; 0x28
    7a98:	466a      	mov	r2, sp
    7a9a:	481c      	ldr	r0, [pc, #112]	; (7b0c <spi_nrfx_init+0xd0>)
    7a9c:	61d3      	str	r3, [r2, #28]
    7a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
    7aa2:	8413      	strh	r3, [r2, #32]
    7aa4:	4b1a      	ldr	r3, [pc, #104]	; (7b10 <spi_nrfx_init+0xd4>)
    7aa6:	e9c2 0105 	strd	r0, r1, [r2, #20]
    7aaa:	481a      	ldr	r0, [pc, #104]	; (7b14 <spi_nrfx_init+0xd8>)
    7aac:	f842 3f10 	str.w	r3, [r2, #16]!
    7ab0:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    7ab4:	f006 f93d 	bl	dd32 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
    7ab8:	f06f 0012 	mvn.w	r0, #18
    7abc:	46a5      	mov	sp, r4
}
    7abe:	370c      	adds	r7, #12
    7ac0:	46bd      	mov	sp, r7
    7ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
    7ac6:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    7ac8:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    7aca:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    7acc:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    7ad0:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7ad4:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    7ad8:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    7ada:	bf54      	ite	pl
    7adc:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    7ae0:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    7ae4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7ae8:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7aec:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7aee:	bf4c      	ite	mi
    7af0:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7af4:	ea2c 0308 	bicpl.w	r3, ip, r8
    7af8:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    7afc:	f8d9 3000 	ldr.w	r3, [r9]
    7b00:	4798      	blx	r3
		if (ret < 0) {
    7b02:	2800      	cmp	r0, #0
    7b04:	dbdb      	blt.n	7abe <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    7b06:	3408      	adds	r4, #8
    7b08:	e7b2      	b.n	7a70 <spi_nrfx_init+0x34>
    7b0a:	bf00      	nop
    7b0c:	00010486 	.word	0x00010486
    7b10:	01000004 	.word	0x01000004
    7b14:	0000f018 	.word	0x0000f018

00007b18 <transfer_next_chunk>:
{
    7b18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7b1a:	4605      	mov	r5, r0
	const struct spi_nrfx_config *dev_config = dev->config;
    7b1c:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    7b1e:	692a      	ldr	r2, [r5, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    7b20:	6d93      	ldr	r3, [r2, #88]	; 0x58
		return ctx->rx_len;
    7b22:	6e11      	ldr	r1, [r2, #96]	; 0x60
	if (!ctx->tx_len) {
    7b24:	b9e3      	cbnz	r3, 7b60 <transfer_next_chunk+0x48>
	if (chunk_len > 0) {
    7b26:	b1a9      	cbz	r1, 7b54 <transfer_next_chunk+0x3c>
		xfer.p_tx_buffer = ctx->tx_buf;
    7b28:	6d54      	ldr	r4, [r2, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
    7b2a:	6691      	str	r1, [r2, #104]	; 0x68
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7b2c:	461e      	mov	r6, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    7b2e:	460b      	mov	r3, r1
		xfer.p_rx_buffer = ctx->rx_buf;
    7b30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    7b32:	9202      	str	r2, [sp, #8]
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7b34:	e9cd 4600 	strd	r4, r6, [sp]
	return !!(ctx->rx_buf && ctx->rx_len);
    7b38:	b1ea      	cbz	r2, 7b76 <transfer_next_chunk+0x5e>
    7b3a:	2900      	cmp	r1, #0
    7b3c:	bf18      	it	ne
    7b3e:	4619      	movne	r1, r3
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    7b40:	9103      	str	r1, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    7b42:	2200      	movs	r2, #0
    7b44:	4669      	mov	r1, sp
    7b46:	f001 fe53 	bl	97f0 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    7b4a:	4b0d      	ldr	r3, [pc, #52]	; (7b80 <transfer_next_chunk+0x68>)
    7b4c:	4298      	cmp	r0, r3
    7b4e:	d014      	beq.n	7b7a <transfer_next_chunk+0x62>
		error = -EIO;
    7b50:	f06f 0104 	mvn.w	r1, #4
	finish_transaction(dev, error);
    7b54:	6928      	ldr	r0, [r5, #16]
}
    7b56:	b004      	add	sp, #16
    7b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	finish_transaction(dev, error);
    7b5c:	f006 b944 	b.w	dde8 <finish_transaction.isra.0>
	} else if (!ctx->rx_len) {
    7b60:	6d54      	ldr	r4, [r2, #84]	; 0x54
    7b62:	b111      	cbz	r1, 7b6a <transfer_next_chunk+0x52>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    7b64:	428b      	cmp	r3, r1
    7b66:	bf28      	it	cs
    7b68:	460b      	movcs	r3, r1
		return ctx->tx_len;
    7b6a:	2c00      	cmp	r4, #0
		dev_data->chunk_len = chunk_len;
    7b6c:	6693      	str	r3, [r2, #104]	; 0x68
    7b6e:	bf14      	ite	ne
    7b70:	461e      	movne	r6, r3
    7b72:	2600      	moveq	r6, #0
    7b74:	e7dc      	b.n	7b30 <transfer_next_chunk+0x18>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    7b76:	4611      	mov	r1, r2
    7b78:	e7e2      	b.n	7b40 <transfer_next_chunk+0x28>
}
    7b7a:	b004      	add	sp, #16
    7b7c:	bd70      	pop	{r4, r5, r6, pc}
    7b7e:	bf00      	nop
    7b80:	0bad0000 	.word	0x0bad0000

00007b84 <event_handler>:
{
    7b84:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    7b86:	7803      	ldrb	r3, [r0, #0]
{
    7b88:	b086      	sub	sp, #24
    7b8a:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d15e      	bne.n	7c4e <event_handler+0xca>
		if (dev_data->chunk_len == 0) {
    7b90:	6e8a      	ldr	r2, [r1, #104]	; 0x68
    7b92:	b942      	cbnz	r2, 7ba6 <event_handler+0x22>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    7b94:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    7b96:	6918      	ldr	r0, [r3, #16]
    7b98:	f06f 0173 	mvn.w	r1, #115	; 0x73
}
    7b9c:	b006      	add	sp, #24
    7b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    7ba2:	f006 b921 	b.w	dde8 <finish_transaction.isra.0>
	if (!ctx->tx_len) {
    7ba6:	6d8b      	ldr	r3, [r1, #88]	; 0x58
    7ba8:	b15b      	cbz	r3, 7bc2 <event_handler+0x3e>
	if (len > ctx->tx_len) {
    7baa:	429a      	cmp	r2, r3
    7bac:	d91e      	bls.n	7bec <event_handler+0x68>
		LOG_ERR("Update exceeds current buffer");
    7bae:	4b29      	ldr	r3, [pc, #164]	; (7c54 <event_handler+0xd0>)
    7bb0:	9305      	str	r3, [sp, #20]
    7bb2:	4829      	ldr	r0, [pc, #164]	; (7c58 <event_handler+0xd4>)
    7bb4:	2302      	movs	r3, #2
    7bb6:	aa04      	add	r2, sp, #16
    7bb8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7bbc:	9304      	str	r3, [sp, #16]
    7bbe:	f006 f8b8 	bl	dd32 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
    7bc2:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    7bc4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    7bc6:	b15b      	cbz	r3, 7be0 <event_handler+0x5c>
	if (len > ctx->rx_len) {
    7bc8:	429a      	cmp	r2, r3
    7bca:	d927      	bls.n	7c1c <event_handler+0x98>
		LOG_ERR("Update exceeds current buffer");
    7bcc:	4b21      	ldr	r3, [pc, #132]	; (7c54 <event_handler+0xd0>)
    7bce:	9305      	str	r3, [sp, #20]
    7bd0:	4821      	ldr	r0, [pc, #132]	; (7c58 <event_handler+0xd4>)
    7bd2:	2302      	movs	r3, #2
    7bd4:	aa04      	add	r2, sp, #16
    7bd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7bda:	9304      	str	r3, [sp, #16]
    7bdc:	f006 f8a9 	bl	dd32 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    7be0:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
    7be2:	b006      	add	sp, #24
    7be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    7be8:	f7ff bf96 	b.w	7b18 <transfer_next_chunk>
	ctx->tx_len -= len;
    7bec:	1a9b      	subs	r3, r3, r2
    7bee:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
    7bf0:	b973      	cbnz	r3, 7c10 <event_handler+0x8c>
		++ctx->current_tx;
    7bf2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    7bf4:	3308      	adds	r3, #8
    7bf6:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
    7bf8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    7bfa:	3b01      	subs	r3, #1
    7bfc:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
    7bfe:	f101 0258 	add.w	r2, r1, #88	; 0x58
    7c02:	f104 0044 	add.w	r0, r4, #68	; 0x44
    7c06:	3148      	adds	r1, #72	; 0x48
    7c08:	f006 f880 	bl	dd0c <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    7c0c:	6560      	str	r0, [r4, #84]	; 0x54
    7c0e:	e7d8      	b.n	7bc2 <event_handler+0x3e>
	} else if (ctx->tx_buf) {
    7c10:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    7c12:	2b00      	cmp	r3, #0
    7c14:	d0d5      	beq.n	7bc2 <event_handler+0x3e>
		ctx->tx_buf += dfs * len;
    7c16:	4413      	add	r3, r2
    7c18:	654b      	str	r3, [r1, #84]	; 0x54
    7c1a:	e7d2      	b.n	7bc2 <event_handler+0x3e>
	ctx->rx_len -= len;
    7c1c:	1a9b      	subs	r3, r3, r2
    7c1e:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
    7c20:	b97b      	cbnz	r3, 7c42 <event_handler+0xbe>
		++ctx->current_rx;
    7c22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7c24:	3308      	adds	r3, #8
    7c26:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
    7c28:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7c2a:	3b01      	subs	r3, #1
    7c2c:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
    7c2e:	f104 0260 	add.w	r2, r4, #96	; 0x60
    7c32:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7c36:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    7c3a:	f006 f867 	bl	dd0c <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    7c3e:	65e0      	str	r0, [r4, #92]	; 0x5c
    7c40:	e7ce      	b.n	7be0 <event_handler+0x5c>
	} else if (ctx->rx_buf) {
    7c42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7c44:	2b00      	cmp	r3, #0
    7c46:	d0cb      	beq.n	7be0 <event_handler+0x5c>
		ctx->rx_buf += dfs * len;
    7c48:	4413      	add	r3, r2
    7c4a:	65e3      	str	r3, [r4, #92]	; 0x5c
    7c4c:	e7c8      	b.n	7be0 <event_handler+0x5c>
}
    7c4e:	b006      	add	sp, #24
    7c50:	bd10      	pop	{r4, pc}
    7c52:	bf00      	nop
    7c54:	000104aa 	.word	0x000104aa
    7c58:	0000f018 	.word	0x0000f018

00007c5c <spi_nrfx_transceive>:
{
    7c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c60:	b08b      	sub	sp, #44	; 0x2c
    7c62:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
    7c64:	6904      	ldr	r4, [r0, #16]
{
    7c66:	60fb      	str	r3, [r7, #12]
	const struct spi_nrfx_config *dev_config = dev->config;
    7c68:	6843      	ldr	r3, [r0, #4]
    7c6a:	603b      	str	r3, [r7, #0]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    7c6c:	888b      	ldrh	r3, [r1, #4]
    7c6e:	049b      	lsls	r3, r3, #18
{
    7c70:	4606      	mov	r6, r0
    7c72:	4688      	mov	r8, r1
    7c74:	4691      	mov	r9, r2
    7c76:	d437      	bmi.n	7ce8 <spi_nrfx_transceive+0x8c>
	return z_impl_k_sem_take(sem, timeout);
    7c78:	f04f 32ff 	mov.w	r2, #4294967295
    7c7c:	f04f 33ff 	mov.w	r3, #4294967295
    7c80:	f104 0010 	add.w	r0, r4, #16
    7c84:	f003 fc2e 	bl	b4e4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    7c88:	f8c4 8004 	str.w	r8, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    7c8c:	f8d6 a010 	ldr.w	sl, [r6, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    7c90:	6873      	ldr	r3, [r6, #4]
    7c92:	60bb      	str	r3, [r7, #8]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    7c94:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
    7c98:	607b      	str	r3, [r7, #4]
    7c9a:	b123      	cbz	r3, 7ca6 <spi_nrfx_transceive+0x4a>
    7c9c:	f8da 3000 	ldr.w	r3, [sl]
    7ca0:	4598      	cmp	r8, r3
    7ca2:	f000 80cb 	beq.w	7e3c <spi_nrfx_transceive+0x1e0>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    7ca6:	f8b8 c004 	ldrh.w	ip, [r8, #4]
    7caa:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    7cae:	d022      	beq.n	7cf6 <spi_nrfx_transceive+0x9a>
		LOG_ERR("Half-duplex not supported");
    7cb0:	4bae      	ldr	r3, [pc, #696]	; (7f6c <spi_nrfx_transceive+0x310>)
    7cb2:	627b      	str	r3, [r7, #36]	; 0x24
    7cb4:	2302      	movs	r3, #2
    7cb6:	48ae      	ldr	r0, [pc, #696]	; (7f70 <spi_nrfx_transceive+0x314>)
    7cb8:	623b      	str	r3, [r7, #32]
    7cba:	f107 0220 	add.w	r2, r7, #32
    7cbe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    7cc2:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    7cc6:	f006 f834 	bl	dd32 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    7cca:	6823      	ldr	r3, [r4, #0]
    7ccc:	889b      	ldrh	r3, [r3, #4]
    7cce:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    7cd2:	d104      	bne.n	7cde <spi_nrfx_transceive+0x82>
		ctx->owner = NULL;
    7cd4:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    7cd6:	f104 0010 	add.w	r0, r4, #16
    7cda:	f003 fbdd 	bl	b498 <z_impl_k_sem_give>
}
    7cde:	4628      	mov	r0, r5
    7ce0:	372c      	adds	r7, #44	; 0x2c
    7ce2:	46bd      	mov	sp, r7
    7ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    7ce8:	69a3      	ldr	r3, [r4, #24]
    7cea:	2b00      	cmp	r3, #0
    7cec:	d1c4      	bne.n	7c78 <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    7cee:	6863      	ldr	r3, [r4, #4]
    7cf0:	4299      	cmp	r1, r3
    7cf2:	d1c1      	bne.n	7c78 <spi_nrfx_transceive+0x1c>
    7cf4:	e7ca      	b.n	7c8c <spi_nrfx_transceive+0x30>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    7cf6:	f01c 0f01 	tst.w	ip, #1
    7cfa:	d015      	beq.n	7d28 <spi_nrfx_transceive+0xcc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    7cfc:	466d      	mov	r5, sp
    7cfe:	b088      	sub	sp, #32
    7d00:	6833      	ldr	r3, [r6, #0]
    7d02:	466a      	mov	r2, sp
    7d04:	499b      	ldr	r1, [pc, #620]	; (7f74 <spi_nrfx_transceive+0x318>)
    7d06:	489a      	ldr	r0, [pc, #616]	; (7f70 <spi_nrfx_transceive+0x314>)
    7d08:	e9c2 1305 	strd	r1, r3, [r2, #20]
    7d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
    7d10:	8393      	strh	r3, [r2, #28]
    7d12:	4b99      	ldr	r3, [pc, #612]	; (7f78 <spi_nrfx_transceive+0x31c>)
    7d14:	f842 3f10 	str.w	r3, [r2, #16]!
    7d18:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    7d1c:	f006 f809 	bl	dd32 <z_log_msg_static_create.constprop.0>
    7d20:	46ad      	mov	sp, r5
		return -EINVAL;
    7d22:	f06f 0515 	mvn.w	r5, #21
    7d26:	e7d0      	b.n	7cca <spi_nrfx_transceive+0x6e>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    7d28:	f01c 0f08 	tst.w	ip, #8
    7d2c:	d00b      	beq.n	7d46 <spi_nrfx_transceive+0xea>
		LOG_ERR("Loopback mode is not supported");
    7d2e:	4b93      	ldr	r3, [pc, #588]	; (7f7c <spi_nrfx_transceive+0x320>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    7d30:	627b      	str	r3, [r7, #36]	; 0x24
    7d32:	2302      	movs	r3, #2
    7d34:	488e      	ldr	r0, [pc, #568]	; (7f70 <spi_nrfx_transceive+0x314>)
    7d36:	623b      	str	r3, [r7, #32]
    7d38:	f107 0220 	add.w	r2, r7, #32
    7d3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7d40:	f005 fff7 	bl	dd32 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
    7d44:	e7ed      	b.n	7d22 <spi_nrfx_transceive+0xc6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    7d46:	f3cc 1345 	ubfx	r3, ip, #5, #6
    7d4a:	2b08      	cmp	r3, #8
    7d4c:	d001      	beq.n	7d52 <spi_nrfx_transceive+0xf6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    7d4e:	4b8c      	ldr	r3, [pc, #560]	; (7f80 <spi_nrfx_transceive+0x324>)
    7d50:	e7ee      	b.n	7d30 <spi_nrfx_transceive+0xd4>
	if (spi_cfg->frequency < 125000) {
    7d52:	f8d8 5000 	ldr.w	r5, [r8]
    7d56:	4b8b      	ldr	r3, [pc, #556]	; (7f84 <spi_nrfx_transceive+0x328>)
    7d58:	429d      	cmp	r5, r3
    7d5a:	d801      	bhi.n	7d60 <spi_nrfx_transceive+0x104>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    7d5c:	4b8a      	ldr	r3, [pc, #552]	; (7f88 <spi_nrfx_transceive+0x32c>)
    7d5e:	e7e7      	b.n	7d30 <spi_nrfx_transceive+0xd4>
	config = dev_config->def_config;
    7d60:	68bb      	ldr	r3, [r7, #8]
    7d62:	f103 0b08 	add.w	fp, r3, #8
    7d66:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    7d6a:	f107 0e10 	add.w	lr, r7, #16
    7d6e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7d72:	f8db 3000 	ldr.w	r3, [fp]
    7d76:	f8ce 3000 	str.w	r3, [lr]
	if (frequency < 250000) {
    7d7a:	4b84      	ldr	r3, [pc, #528]	; (7f8c <spi_nrfx_transceive+0x330>)
    7d7c:	429d      	cmp	r5, r3
    7d7e:	d945      	bls.n	7e0c <spi_nrfx_transceive+0x1b0>
	} else if (frequency < 500000) {
    7d80:	4b83      	ldr	r3, [pc, #524]	; (7f90 <spi_nrfx_transceive+0x334>)
    7d82:	429d      	cmp	r5, r3
    7d84:	d945      	bls.n	7e12 <spi_nrfx_transceive+0x1b6>
	} else if (frequency < 1000000) {
    7d86:	4b83      	ldr	r3, [pc, #524]	; (7f94 <spi_nrfx_transceive+0x338>)
    7d88:	429d      	cmp	r5, r3
    7d8a:	d945      	bls.n	7e18 <spi_nrfx_transceive+0x1bc>
	} else if (frequency < 2000000) {
    7d8c:	4b82      	ldr	r3, [pc, #520]	; (7f98 <spi_nrfx_transceive+0x33c>)
    7d8e:	429d      	cmp	r5, r3
    7d90:	d945      	bls.n	7e1e <spi_nrfx_transceive+0x1c2>
	} else if (frequency < 4000000) {
    7d92:	4b82      	ldr	r3, [pc, #520]	; (7f9c <spi_nrfx_transceive+0x340>)
    7d94:	429d      	cmp	r5, r3
    7d96:	d945      	bls.n	7e24 <spi_nrfx_transceive+0x1c8>
		return NRF_SPI_FREQ_4M;
    7d98:	4b81      	ldr	r3, [pc, #516]	; (7fa0 <spi_nrfx_transceive+0x344>)
    7d9a:	429d      	cmp	r5, r3
    7d9c:	bf2c      	ite	cs
    7d9e:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    7da2:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    7da6:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    7daa:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    7dac:	f00c 0304 	and.w	r3, ip, #4
    7db0:	d03b      	beq.n	7e2a <spi_nrfx_transceive+0x1ce>
			return NRF_SPI_MODE_2;
    7db2:	2b00      	cmp	r3, #0
    7db4:	bf14      	ite	ne
    7db6:	2303      	movne	r3, #3
    7db8:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    7dba:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
    7dbc:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
    7dbe:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    7dc2:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
    7dc6:	b12b      	cbz	r3, 7dd4 <spi_nrfx_transceive+0x178>
		nrfx_spi_uninit(&dev_config->spi);
    7dc8:	68b8      	ldr	r0, [r7, #8]
    7dca:	f001 fcd9 	bl	9780 <nrfx_spi_uninit>
		dev_data->initialized = false;
    7dce:	2300      	movs	r3, #0
    7dd0:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spi_init(&dev_config->spi, &config,
    7dd4:	4653      	mov	r3, sl
    7dd6:	4a73      	ldr	r2, [pc, #460]	; (7fa4 <spi_nrfx_transceive+0x348>)
    7dd8:	68b8      	ldr	r0, [r7, #8]
    7dda:	f107 0110 	add.w	r1, r7, #16
    7dde:	f001 fc21 	bl	9624 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    7de2:	4b71      	ldr	r3, [pc, #452]	; (7fa8 <spi_nrfx_transceive+0x34c>)
    7de4:	4298      	cmp	r0, r3
    7de6:	d024      	beq.n	7e32 <spi_nrfx_transceive+0x1d6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    7de8:	466d      	mov	r5, sp
    7dea:	b088      	sub	sp, #32
    7dec:	466a      	mov	r2, sp
    7dee:	4b6f      	ldr	r3, [pc, #444]	; (7fac <spi_nrfx_transceive+0x350>)
    7df0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    7df4:	2303      	movs	r3, #3
    7df6:	f842 3f10 	str.w	r3, [r2, #16]!
    7dfa:	485d      	ldr	r0, [pc, #372]	; (7f70 <spi_nrfx_transceive+0x314>)
    7dfc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7e00:	f005 ff97 	bl	dd32 <z_log_msg_static_create.constprop.0>
    7e04:	46ad      	mov	sp, r5
		return -EIO;
    7e06:	f06f 0504 	mvn.w	r5, #4
    7e0a:	e75e      	b.n	7cca <spi_nrfx_transceive+0x6e>
		return NRF_SPI_FREQ_125K;
    7e0c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    7e10:	e7c9      	b.n	7da6 <spi_nrfx_transceive+0x14a>
		return NRF_SPI_FREQ_250K;
    7e12:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    7e16:	e7c6      	b.n	7da6 <spi_nrfx_transceive+0x14a>
		return NRF_SPI_FREQ_500K;
    7e18:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    7e1c:	e7c3      	b.n	7da6 <spi_nrfx_transceive+0x14a>
		return NRF_SPI_FREQ_1M;
    7e1e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    7e22:	e7c0      	b.n	7da6 <spi_nrfx_transceive+0x14a>
		return NRF_SPI_FREQ_2M;
    7e24:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    7e28:	e7bd      	b.n	7da6 <spi_nrfx_transceive+0x14a>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    7e2a:	3b00      	subs	r3, #0
    7e2c:	bf18      	it	ne
    7e2e:	2301      	movne	r3, #1
    7e30:	e7c3      	b.n	7dba <spi_nrfx_transceive+0x15e>
	dev_data->initialized = true;
    7e32:	2301      	movs	r3, #1
    7e34:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	ctx->config = spi_cfg;
    7e38:	f8ca 8000 	str.w	r8, [sl]
		dev_data->busy = true;
    7e3c:	2301      	movs	r3, #1
    7e3e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    7e42:	f1b9 0f00 	cmp.w	r9, #0
    7e46:	d16d      	bne.n	7f24 <spi_nrfx_transceive+0x2c8>
    7e48:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    7e4c:	2300      	movs	r3, #0
    7e4e:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    7e50:	f104 0258 	add.w	r2, r4, #88	; 0x58
    7e54:	f104 0148 	add.w	r1, r4, #72	; 0x48
    7e58:	f104 0044 	add.w	r0, r4, #68	; 0x44
    7e5c:	f005 ff56 	bl	dd0c <spi_context_get_next_buf.constprop.0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    7e60:	68fb      	ldr	r3, [r7, #12]
	ctx->tx_buf = (const uint8_t *)
    7e62:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    7e64:	2b00      	cmp	r3, #0
    7e66:	d165      	bne.n	7f34 <spi_nrfx_transceive+0x2d8>
    7e68:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    7e6a:	2300      	movs	r3, #0
    7e6c:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    7e6e:	f104 0260 	add.w	r2, r4, #96	; 0x60
    7e72:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7e76:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    7e7a:	f005 ff47 	bl	dd0c <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    7e7e:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    7e80:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    7e82:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
    7e84:	2101      	movs	r1, #1
    7e86:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    7e88:	6425      	str	r5, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
    7e8a:	f005 ff69 	bl	dd60 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    7e8e:	4630      	mov	r0, r6
    7e90:	f7ff fe42 	bl	7b18 <transfer_next_chunk>
static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;

	for (n = 0; n < ctx->tx_count; ++n) {
    7e94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	size_t total_len = 0;
    7e96:	462a      	mov	r2, r5
	for (n = 0; n < ctx->tx_count; ++n) {
    7e98:	462b      	mov	r3, r5
    7e9a:	4283      	cmp	r3, r0
    7e9c:	d152      	bne.n	7f44 <spi_nrfx_transceive+0x2e8>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    7e9e:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
    7ea0:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7ea2:	4619      	mov	r1, r3
    7ea4:	42a9      	cmp	r1, r5
    7ea6:	d154      	bne.n	7f52 <spi_nrfx_transceive+0x2f6>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    7ea8:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    7eaa:	46a0      	mov	r8, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    7eac:	bf38      	it	cc
    7eae:	4613      	movcc	r3, r2
    7eb0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    7eb4:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    7eb8:	f858 3b28 	ldr.w	r3, [r8], #40
    7ebc:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    7ec0:	681b      	ldr	r3, [r3, #0]
    7ec2:	fbb5 f5f3 	udiv	r5, r5, r3
    7ec6:	f240 30e7 	movw	r0, #999	; 0x3e7
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    7eca:	35c8      	adds	r5, #200	; 0xc8
    7ecc:	2100      	movs	r1, #0
    7ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7ed2:	2300      	movs	r3, #0
    7ed4:	fbe5 010c 	umlal	r0, r1, r5, ip
    7ed8:	f7f8 f912 	bl	100 <__aeabi_uldivmod>
    7edc:	4602      	mov	r2, r0
    7ede:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    7ee0:	4640      	mov	r0, r8
    7ee2:	f003 faff 	bl	b4e4 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    7ee6:	2800      	cmp	r0, #0
    7ee8:	d03a      	beq.n	7f60 <spi_nrfx_transceive+0x304>
			LOG_ERR("Timeout waiting for transfer complete");
    7eea:	4b31      	ldr	r3, [pc, #196]	; (7fb0 <spi_nrfx_transceive+0x354>)
    7eec:	627b      	str	r3, [r7, #36]	; 0x24
    7eee:	2302      	movs	r3, #2
    7ef0:	481f      	ldr	r0, [pc, #124]	; (7f70 <spi_nrfx_transceive+0x314>)
    7ef2:	623b      	str	r3, [r7, #32]
    7ef4:	f107 0220 	add.w	r2, r7, #32
    7ef8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7efc:	f005 ff19 	bl	dd32 <z_log_msg_static_create.constprop.0>
			dev_data->chunk_len = 0;
    7f00:	2500      	movs	r5, #0
			nrfx_spi_uninit(&dev_config->spi);
    7f02:	6838      	ldr	r0, [r7, #0]
			dev_data->chunk_len = 0;
    7f04:	66a5      	str	r5, [r4, #104]	; 0x68
			nrfx_spi_uninit(&dev_config->spi);
    7f06:	f001 fc3b 	bl	9780 <nrfx_spi_uninit>
			dev_data->initialized = false;
    7f0a:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
			finish_transaction(dev, -ETIMEDOUT);
    7f0e:	6930      	ldr	r0, [r6, #16]
    7f10:	f06f 0173 	mvn.w	r1, #115	; 0x73
    7f14:	f005 ff68 	bl	dde8 <finish_transaction.isra.0>
	z_impl_k_sem_reset(sem);
    7f18:	4640      	mov	r0, r8
    7f1a:	f003 fb0b 	bl	b534 <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    7f1e:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    7f22:	e6d2      	b.n	7cca <spi_nrfx_transceive+0x6e>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    7f24:	f8d9 3000 	ldr.w	r3, [r9]
    7f28:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    7f2a:	2b00      	cmp	r3, #0
    7f2c:	d08e      	beq.n	7e4c <spi_nrfx_transceive+0x1f0>
    7f2e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7f32:	e78c      	b.n	7e4e <spi_nrfx_transceive+0x1f2>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    7f34:	68fb      	ldr	r3, [r7, #12]
    7f36:	681b      	ldr	r3, [r3, #0]
    7f38:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    7f3a:	2b00      	cmp	r3, #0
    7f3c:	d095      	beq.n	7e6a <spi_nrfx_transceive+0x20e>
    7f3e:	68fb      	ldr	r3, [r7, #12]
    7f40:	685b      	ldr	r3, [r3, #4]
    7f42:	e793      	b.n	7e6c <spi_nrfx_transceive+0x210>
		total_len += ctx->current_tx[n].len;
    7f44:	6c61      	ldr	r1, [r4, #68]	; 0x44
    7f46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    7f4a:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    7f4c:	6849      	ldr	r1, [r1, #4]
    7f4e:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    7f50:	e7a3      	b.n	7e9a <spi_nrfx_transceive+0x23e>
		total_len += ctx->current_rx[n].len;
    7f52:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    7f54:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    7f58:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    7f5a:	6840      	ldr	r0, [r0, #4]
    7f5c:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    7f5e:	e7a1      	b.n	7ea4 <spi_nrfx_transceive+0x248>
		status = ctx->sync_status;
    7f60:	6c25      	ldr	r5, [r4, #64]	; 0x40
		if (error == -ETIMEDOUT) {
    7f62:	f115 0f74 	cmn.w	r5, #116	; 0x74
    7f66:	f47f aeb0 	bne.w	7cca <spi_nrfx_transceive+0x6e>
    7f6a:	e7c9      	b.n	7f00 <spi_nrfx_transceive+0x2a4>
    7f6c:	000104c8 	.word	0x000104c8
    7f70:	0000f018 	.word	0x0000f018
    7f74:	000104e2 	.word	0x000104e2
    7f78:	01000003 	.word	0x01000003
    7f7c:	00010504 	.word	0x00010504
    7f80:	00010523 	.word	0x00010523
    7f84:	0001e847 	.word	0x0001e847
    7f88:	00010552 	.word	0x00010552
    7f8c:	0003d08f 	.word	0x0003d08f
    7f90:	0007a11f 	.word	0x0007a11f
    7f94:	000f423f 	.word	0x000f423f
    7f98:	001e847f 	.word	0x001e847f
    7f9c:	003d08ff 	.word	0x003d08ff
    7fa0:	007a1200 	.word	0x007a1200
    7fa4:	00007b85 	.word	0x00007b85
    7fa8:	0bad0000 	.word	0x0bad0000
    7fac:	00010583 	.word	0x00010583
    7fb0:	000105aa 	.word	0x000105aa

00007fb4 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
    7fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7fb8:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
    7fba:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    7fbc:	6905      	ldr	r5, [r0, #16]
	int err;

	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    7fbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
{
    7fc0:	af00      	add	r7, sp, #0
	ret = pinctrl_lookup_state(config, id, &state);
    7fc2:	1d3a      	adds	r2, r7, #4
    7fc4:	2100      	movs	r1, #0
    7fc6:	4630      	mov	r0, r6
    7fc8:	f005 fe1c 	bl	dc04 <pinctrl_lookup_state>
	if (ret < 0) {
    7fcc:	2800      	cmp	r0, #0
    7fce:	db32      	blt.n	8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
	return pinctrl_apply_state_direct(config, state);
    7fd0:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    7fd2:	6832      	ldr	r2, [r6, #0]
    7fd4:	7919      	ldrb	r1, [r3, #4]
    7fd6:	6818      	ldr	r0, [r3, #0]
    7fd8:	f7ff fad0 	bl	757c <pinctrl_configure_pins>
	if (err < 0) {
    7fdc:	2800      	cmp	r0, #0
    7fde:	db2a      	blt.n	8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
		return err;
	}

	dev_config->irq_connect();
    7fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7fe2:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    7fe4:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7fe6:	2601      	movs	r6, #1
    7fe8:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    7fec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7ff0:	429c      	cmp	r4, r3
    7ff2:	d304      	bcc.n	7ffe <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    7ff4:	4628      	mov	r0, r5
    7ff6:	f005 ff58 	bl	deaa <spi_context_unlock_unconditionally>
	return 0;
    7ffa:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
    7ffc:	e01b      	b.n	8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
		if (!device_is_ready(cs_gpio->port)) {
    7ffe:	6820      	ldr	r0, [r4, #0]
    8000:	f006 f9a1 	bl	e346 <z_device_is_ready>
    8004:	b9d8      	cbnz	r0, 803e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    8006:	6823      	ldr	r3, [r4, #0]
    8008:	6819      	ldr	r1, [r3, #0]
    800a:	7923      	ldrb	r3, [r4, #4]
    800c:	466c      	mov	r4, sp
    800e:	b08a      	sub	sp, #40	; 0x28
    8010:	466a      	mov	r2, sp
    8012:	481c      	ldr	r0, [pc, #112]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    8014:	61d3      	str	r3, [r2, #28]
    8016:	f44f 7300 	mov.w	r3, #512	; 0x200
    801a:	8413      	strh	r3, [r2, #32]
    801c:	4b1a      	ldr	r3, [pc, #104]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    801e:	e9c2 0105 	strd	r0, r1, [r2, #20]
    8022:	481a      	ldr	r0, [pc, #104]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    8024:	f842 3f10 	str.w	r3, [r2, #16]!
    8028:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    802c:	f005 ff04 	bl	de38 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
    8030:	f06f 0012 	mvn.w	r0, #18
    8034:	46a5      	mov	sp, r4
#endif
}
    8036:	370c      	adds	r7, #12
    8038:	46bd      	mov	sp, r7
    803a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
    803e:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    8040:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    8042:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    8044:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    8048:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    804c:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    8050:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    8052:	bf54      	ite	pl
    8054:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    8058:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    805c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8060:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    8064:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8066:	bf4c      	ite	mi
    8068:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    806c:	ea2c 0308 	bicpl.w	r3, ip, r8
    8070:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    8074:	f8d9 3000 	ldr.w	r3, [r9]
    8078:	4798      	blx	r3
		if (ret < 0) {
    807a:	2800      	cmp	r0, #0
    807c:	dbdb      	blt.n	8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    807e:	3408      	adds	r4, #8
    8080:	e7b2      	b.n	7fe8 <spi_nrfx_init+0x34>
    8082:	bf00      	nop
    8084:	00010486 	.word	0x00010486
    8088:	01000004 	.word	0x01000004
    808c:	0000f020 	.word	0x0000f020

00008090 <transfer_next_chunk>:
{
    8090:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    8092:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    8094:	6847      	ldr	r7, [r0, #4]
	if (!ctx->tx_len) {
    8096:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
    8098:	6e23      	ldr	r3, [r4, #96]	; 0x60
{
    809a:	b085      	sub	sp, #20
    809c:	4606      	mov	r6, r0
	if (!ctx->tx_len) {
    809e:	b93d      	cbnz	r5, 80b0 <transfer_next_chunk+0x20>
	if (chunk_len > 0) {
    80a0:	bb6b      	cbnz	r3, 80fe <transfer_next_chunk+0x6e>
	int error = 0;
    80a2:	4619      	mov	r1, r3
	finish_transaction(dev, error);
    80a4:	6930      	ldr	r0, [r6, #16]
}
    80a6:	b005      	add	sp, #20
    80a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	finish_transaction(dev, error);
    80ac:	f005 bf1f 	b.w	deee <finish_transaction.isra.0>
		const uint8_t *tx_buf = ctx->tx_buf;
    80b0:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
    80b2:	bb03      	cbnz	r3, 80f6 <transfer_next_chunk+0x66>
	return !!(ctx->tx_buf && ctx->tx_len);
    80b4:	bb31      	cbnz	r1, 8104 <transfer_next_chunk+0x74>
		if (chunk_len > dev_config->max_chunk_len) {
    80b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    80b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
		xfer.p_tx_buffer = tx_buf;
    80ba:	9100      	str	r1, [sp, #0]
    80bc:	42aa      	cmp	r2, r5
    80be:	bf28      	it	cs
    80c0:	462a      	movcs	r2, r5
		dev_data->chunk_len = chunk_len;
    80c2:	66a2      	str	r2, [r4, #104]	; 0x68
    80c4:	b11b      	cbz	r3, 80ce <transfer_next_chunk+0x3e>
    80c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    80c8:	2b00      	cmp	r3, #0
    80ca:	bf18      	it	ne
    80cc:	4613      	movne	r3, r2
    80ce:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    80d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    80d2:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    80d4:	b11b      	cbz	r3, 80de <transfer_next_chunk+0x4e>
    80d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    80d8:	2b00      	cmp	r3, #0
    80da:	bf18      	it	ne
    80dc:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    80de:	2200      	movs	r2, #0
    80e0:	4669      	mov	r1, sp
    80e2:	4638      	mov	r0, r7
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    80e4:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    80e6:	f001 fd8d 	bl	9c04 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    80ea:	4b0e      	ldr	r3, [pc, #56]	; (8124 <transfer_next_chunk+0x94>)
    80ec:	4298      	cmp	r0, r3
    80ee:	d017      	beq.n	8120 <transfer_next_chunk+0x90>
			error = -EIO;
    80f0:	f06f 0104 	mvn.w	r1, #4
    80f4:	e7d6      	b.n	80a4 <transfer_next_chunk+0x14>
	return MIN(ctx->tx_len, ctx->rx_len);
    80f6:	429d      	cmp	r5, r3
    80f8:	bf28      	it	cs
    80fa:	461d      	movcs	r5, r3
    80fc:	e7da      	b.n	80b4 <transfer_next_chunk+0x24>
		const uint8_t *tx_buf = ctx->tx_buf;
    80fe:	6d61      	ldr	r1, [r4, #84]	; 0x54
    8100:	461d      	mov	r5, r3
    8102:	e7d8      	b.n	80b6 <transfer_next_chunk+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    8104:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    8108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    810c:	d0d3      	beq.n	80b6 <transfer_next_chunk+0x26>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    810e:	2d08      	cmp	r5, #8
    8110:	bf28      	it	cs
    8112:	2508      	movcs	r5, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    8114:	6f20      	ldr	r0, [r4, #112]	; 0x70
    8116:	462a      	mov	r2, r5
    8118:	f005 facb 	bl	d6b2 <memcpy>
			tx_buf = dev_data->buffer;
    811c:	6f21      	ldr	r1, [r4, #112]	; 0x70
    811e:	e7ca      	b.n	80b6 <transfer_next_chunk+0x26>
}
    8120:	b005      	add	sp, #20
    8122:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8124:	0bad0000 	.word	0x0bad0000

00008128 <event_handler>:
{
    8128:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    812a:	7803      	ldrb	r3, [r0, #0]
{
    812c:	b086      	sub	sp, #24
    812e:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    8130:	2b00      	cmp	r3, #0
    8132:	d15e      	bne.n	81f2 <event_handler+0xca>
		if (dev_data->chunk_len == 0) {
    8134:	6e8a      	ldr	r2, [r1, #104]	; 0x68
    8136:	b942      	cbnz	r2, 814a <event_handler+0x22>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    8138:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    813a:	6918      	ldr	r0, [r3, #16]
    813c:	f06f 0173 	mvn.w	r1, #115	; 0x73
}
    8140:	b006      	add	sp, #24
    8142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    8146:	f005 bed2 	b.w	deee <finish_transaction.isra.0>
	if (!ctx->tx_len) {
    814a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
    814c:	b15b      	cbz	r3, 8166 <event_handler+0x3e>
	if (len > ctx->tx_len) {
    814e:	429a      	cmp	r2, r3
    8150:	d91e      	bls.n	8190 <event_handler+0x68>
		LOG_ERR("Update exceeds current buffer");
    8152:	4b29      	ldr	r3, [pc, #164]	; (81f8 <event_handler+0xd0>)
    8154:	9305      	str	r3, [sp, #20]
    8156:	4829      	ldr	r0, [pc, #164]	; (81fc <event_handler+0xd4>)
    8158:	2302      	movs	r3, #2
    815a:	aa04      	add	r2, sp, #16
    815c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8160:	9304      	str	r3, [sp, #16]
    8162:	f005 fe69 	bl	de38 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
    8166:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    8168:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    816a:	b15b      	cbz	r3, 8184 <event_handler+0x5c>
	if (len > ctx->rx_len) {
    816c:	429a      	cmp	r2, r3
    816e:	d927      	bls.n	81c0 <event_handler+0x98>
		LOG_ERR("Update exceeds current buffer");
    8170:	4b21      	ldr	r3, [pc, #132]	; (81f8 <event_handler+0xd0>)
    8172:	9305      	str	r3, [sp, #20]
    8174:	4821      	ldr	r0, [pc, #132]	; (81fc <event_handler+0xd4>)
    8176:	2302      	movs	r3, #2
    8178:	aa04      	add	r2, sp, #16
    817a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    817e:	9304      	str	r3, [sp, #16]
    8180:	f005 fe5a 	bl	de38 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    8184:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
    8186:	b006      	add	sp, #24
    8188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    818c:	f7ff bf80 	b.w	8090 <transfer_next_chunk>
	ctx->tx_len -= len;
    8190:	1a9b      	subs	r3, r3, r2
    8192:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
    8194:	b973      	cbnz	r3, 81b4 <event_handler+0x8c>
		++ctx->current_tx;
    8196:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    8198:	3308      	adds	r3, #8
    819a:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
    819c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    819e:	3b01      	subs	r3, #1
    81a0:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
    81a2:	f101 0258 	add.w	r2, r1, #88	; 0x58
    81a6:	f104 0044 	add.w	r0, r4, #68	; 0x44
    81aa:	3148      	adds	r1, #72	; 0x48
    81ac:	f005 fe31 	bl	de12 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    81b0:	6560      	str	r0, [r4, #84]	; 0x54
    81b2:	e7d8      	b.n	8166 <event_handler+0x3e>
	} else if (ctx->tx_buf) {
    81b4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    81b6:	2b00      	cmp	r3, #0
    81b8:	d0d5      	beq.n	8166 <event_handler+0x3e>
		ctx->tx_buf += dfs * len;
    81ba:	4413      	add	r3, r2
    81bc:	654b      	str	r3, [r1, #84]	; 0x54
    81be:	e7d2      	b.n	8166 <event_handler+0x3e>
	ctx->rx_len -= len;
    81c0:	1a9b      	subs	r3, r3, r2
    81c2:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
    81c4:	b97b      	cbnz	r3, 81e6 <event_handler+0xbe>
		++ctx->current_rx;
    81c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    81c8:	3308      	adds	r3, #8
    81ca:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
    81cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    81ce:	3b01      	subs	r3, #1
    81d0:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
    81d2:	f104 0260 	add.w	r2, r4, #96	; 0x60
    81d6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    81da:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    81de:	f005 fe18 	bl	de12 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    81e2:	65e0      	str	r0, [r4, #92]	; 0x5c
    81e4:	e7ce      	b.n	8184 <event_handler+0x5c>
	} else if (ctx->rx_buf) {
    81e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    81e8:	2b00      	cmp	r3, #0
    81ea:	d0cb      	beq.n	8184 <event_handler+0x5c>
		ctx->rx_buf += dfs * len;
    81ec:	4413      	add	r3, r2
    81ee:	65e3      	str	r3, [r4, #92]	; 0x5c
    81f0:	e7c8      	b.n	8184 <event_handler+0x5c>
}
    81f2:	b006      	add	sp, #24
    81f4:	bd10      	pop	{r4, pc}
    81f6:	bf00      	nop
    81f8:	000104aa 	.word	0x000104aa
    81fc:	0000f020 	.word	0x0000f020

00008200 <spi_nrfx_transceive>:
{
    8200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8204:	b08d      	sub	sp, #52	; 0x34
    8206:	af00      	add	r7, sp, #0
    8208:	469a      	mov	sl, r3
	const struct spi_nrfx_config *dev_config = dev->config;
    820a:	6843      	ldr	r3, [r0, #4]
    820c:	60bb      	str	r3, [r7, #8]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    820e:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    8210:	6904      	ldr	r4, [r0, #16]
{
    8212:	613a      	str	r2, [r7, #16]
    8214:	049b      	lsls	r3, r3, #18
    8216:	4606      	mov	r6, r0
    8218:	4688      	mov	r8, r1
    821a:	d439      	bmi.n	8290 <spi_nrfx_transceive+0x90>
	return z_impl_k_sem_take(sem, timeout);
    821c:	f04f 32ff 	mov.w	r2, #4294967295
    8220:	f04f 33ff 	mov.w	r3, #4294967295
    8224:	f104 0010 	add.w	r0, r4, #16
    8228:	f003 f95c 	bl	b4e4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    822c:	f8c4 8004 	str.w	r8, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    8230:	6873      	ldr	r3, [r6, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    8232:	f8d6 9010 	ldr.w	r9, [r6, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    8236:	617b      	str	r3, [r7, #20]
	uint32_t max_freq = dev_config->max_freq;
    8238:	689b      	ldr	r3, [r3, #8]
    823a:	607b      	str	r3, [r7, #4]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    823c:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
    8240:	60fb      	str	r3, [r7, #12]
    8242:	b123      	cbz	r3, 824e <spi_nrfx_transceive+0x4e>
    8244:	f8d9 3000 	ldr.w	r3, [r9]
    8248:	4598      	cmp	r8, r3
    824a:	f000 80dd 	beq.w	8408 <spi_nrfx_transceive+0x208>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    824e:	f8b8 c004 	ldrh.w	ip, [r8, #4]
    8252:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    8256:	d022      	beq.n	829e <spi_nrfx_transceive+0x9e>
		LOG_ERR("Half-duplex not supported");
    8258:	4bb4      	ldr	r3, [pc, #720]	; (852c <spi_nrfx_transceive+0x32c>)
    825a:	62fb      	str	r3, [r7, #44]	; 0x2c
    825c:	2302      	movs	r3, #2
    825e:	48b4      	ldr	r0, [pc, #720]	; (8530 <spi_nrfx_transceive+0x330>)
    8260:	62bb      	str	r3, [r7, #40]	; 0x28
    8262:	f107 0228 	add.w	r2, r7, #40	; 0x28
    8266:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    826a:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    826e:	f005 fde3 	bl	de38 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    8272:	6823      	ldr	r3, [r4, #0]
    8274:	889b      	ldrh	r3, [r3, #4]
    8276:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    827a:	d104      	bne.n	8286 <spi_nrfx_transceive+0x86>
		ctx->owner = NULL;
    827c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    827e:	f104 0010 	add.w	r0, r4, #16
    8282:	f003 f909 	bl	b498 <z_impl_k_sem_give>
}
    8286:	4628      	mov	r0, r5
    8288:	3734      	adds	r7, #52	; 0x34
    828a:	46bd      	mov	sp, r7
    828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    8290:	69a3      	ldr	r3, [r4, #24]
    8292:	2b00      	cmp	r3, #0
    8294:	d1c2      	bne.n	821c <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    8296:	6863      	ldr	r3, [r4, #4]
    8298:	4299      	cmp	r1, r3
    829a:	d1bf      	bne.n	821c <spi_nrfx_transceive+0x1c>
    829c:	e7c8      	b.n	8230 <spi_nrfx_transceive+0x30>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    829e:	f01c 0f01 	tst.w	ip, #1
    82a2:	d015      	beq.n	82d0 <spi_nrfx_transceive+0xd0>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    82a4:	466d      	mov	r5, sp
    82a6:	b088      	sub	sp, #32
    82a8:	6833      	ldr	r3, [r6, #0]
    82aa:	466a      	mov	r2, sp
    82ac:	49a1      	ldr	r1, [pc, #644]	; (8534 <spi_nrfx_transceive+0x334>)
    82ae:	48a0      	ldr	r0, [pc, #640]	; (8530 <spi_nrfx_transceive+0x330>)
    82b0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    82b4:	f44f 7300 	mov.w	r3, #512	; 0x200
    82b8:	8393      	strh	r3, [r2, #28]
    82ba:	4b9f      	ldr	r3, [pc, #636]	; (8538 <spi_nrfx_transceive+0x338>)
    82bc:	f842 3f10 	str.w	r3, [r2, #16]!
    82c0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    82c4:	f005 fdb8 	bl	de38 <z_log_msg_static_create.constprop.0>
    82c8:	46ad      	mov	sp, r5
		return -EINVAL;
    82ca:	f06f 0515 	mvn.w	r5, #21
    82ce:	e7d0      	b.n	8272 <spi_nrfx_transceive+0x72>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    82d0:	f01c 0f08 	tst.w	ip, #8
    82d4:	d00b      	beq.n	82ee <spi_nrfx_transceive+0xee>
		LOG_ERR("Loopback mode is not supported");
    82d6:	4b99      	ldr	r3, [pc, #612]	; (853c <spi_nrfx_transceive+0x33c>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    82d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    82da:	2302      	movs	r3, #2
    82dc:	4894      	ldr	r0, [pc, #592]	; (8530 <spi_nrfx_transceive+0x330>)
    82de:	62bb      	str	r3, [r7, #40]	; 0x28
    82e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
    82e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    82e8:	f005 fda6 	bl	de38 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
    82ec:	e7ed      	b.n	82ca <spi_nrfx_transceive+0xca>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    82ee:	f3cc 1345 	ubfx	r3, ip, #5, #6
    82f2:	2b08      	cmp	r3, #8
    82f4:	d001      	beq.n	82fa <spi_nrfx_transceive+0xfa>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    82f6:	4b92      	ldr	r3, [pc, #584]	; (8540 <spi_nrfx_transceive+0x340>)
    82f8:	e7ee      	b.n	82d8 <spi_nrfx_transceive+0xd8>
	if (spi_cfg->frequency < 125000) {
    82fa:	f8d8 5000 	ldr.w	r5, [r8]
    82fe:	4b91      	ldr	r3, [pc, #580]	; (8544 <spi_nrfx_transceive+0x344>)
    8300:	429d      	cmp	r5, r3
    8302:	d801      	bhi.n	8308 <spi_nrfx_transceive+0x108>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    8304:	4b90      	ldr	r3, [pc, #576]	; (8548 <spi_nrfx_transceive+0x348>)
    8306:	e7e7      	b.n	82d8 <spi_nrfx_transceive+0xd8>
	config = dev_config->def_config;
    8308:	697b      	ldr	r3, [r7, #20]
    830a:	f103 0b0c 	add.w	fp, r3, #12
    830e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    8312:	f107 0e18 	add.w	lr, r7, #24
    8316:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    831a:	687b      	ldr	r3, [r7, #4]
    831c:	42ab      	cmp	r3, r5
    831e:	bf28      	it	cs
    8320:	462b      	movcs	r3, r5
    8322:	461d      	mov	r5, r3
	config = dev_config->def_config;
    8324:	e89b 0003 	ldmia.w	fp, {r0, r1}
	if (frequency < 250000) {
    8328:	4b88      	ldr	r3, [pc, #544]	; (854c <spi_nrfx_transceive+0x34c>)
    832a:	429d      	cmp	r5, r3
	config = dev_config->def_config;
    832c:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (frequency < 250000) {
    8330:	d94c      	bls.n	83cc <spi_nrfx_transceive+0x1cc>
	} else if (frequency < 500000) {
    8332:	4b87      	ldr	r3, [pc, #540]	; (8550 <spi_nrfx_transceive+0x350>)
    8334:	429d      	cmp	r5, r3
    8336:	d94c      	bls.n	83d2 <spi_nrfx_transceive+0x1d2>
	} else if (frequency < 1000000) {
    8338:	4b86      	ldr	r3, [pc, #536]	; (8554 <spi_nrfx_transceive+0x354>)
    833a:	429d      	cmp	r5, r3
    833c:	d94c      	bls.n	83d8 <spi_nrfx_transceive+0x1d8>
	} else if (frequency < 2000000) {
    833e:	4b86      	ldr	r3, [pc, #536]	; (8558 <spi_nrfx_transceive+0x358>)
    8340:	429d      	cmp	r5, r3
    8342:	d94c      	bls.n	83de <spi_nrfx_transceive+0x1de>
	} else if (frequency < 4000000) {
    8344:	4b85      	ldr	r3, [pc, #532]	; (855c <spi_nrfx_transceive+0x35c>)
    8346:	429d      	cmp	r5, r3
    8348:	d94c      	bls.n	83e4 <spi_nrfx_transceive+0x1e4>
	} else if (frequency < 8000000) {
    834a:	4b85      	ldr	r3, [pc, #532]	; (8560 <spi_nrfx_transceive+0x360>)
    834c:	429d      	cmp	r5, r3
    834e:	d34c      	bcc.n	83ea <spi_nrfx_transceive+0x1ea>
	} else if (frequency < 16000000) {
    8350:	4b84      	ldr	r3, [pc, #528]	; (8564 <spi_nrfx_transceive+0x364>)
    8352:	429d      	cmp	r5, r3
    8354:	d34c      	bcc.n	83f0 <spi_nrfx_transceive+0x1f0>
		return NRF_SPIM_FREQ_16M;
    8356:	4b84      	ldr	r3, [pc, #528]	; (8568 <spi_nrfx_transceive+0x368>)
    8358:	429d      	cmp	r5, r3
    835a:	bf2c      	ite	cs
    835c:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
    8360:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    8364:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    8368:	623d      	str	r5, [r7, #32]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    836a:	f00c 0304 	and.w	r3, ip, #4
    836e:	d042      	beq.n	83f6 <spi_nrfx_transceive+0x1f6>
			return NRF_SPIM_MODE_2;
    8370:	2b00      	cmp	r3, #0
    8372:	bf14      	ite	ne
    8374:	2303      	movne	r3, #3
    8376:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    8378:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if (dev_data->initialized) {
    837c:	68fb      	ldr	r3, [r7, #12]
	if (operation & SPI_TRANSFER_LSB) {
    837e:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    8382:	f887 c025 	strb.w	ip, [r7, #37]	; 0x25
	if (dev_data->initialized) {
    8386:	b12b      	cbz	r3, 8394 <spi_nrfx_transceive+0x194>
		nrfx_spim_uninit(&dev_config->spim);
    8388:	6978      	ldr	r0, [r7, #20]
    838a:	f001 fbdd 	bl	9b48 <nrfx_spim_uninit>
		dev_data->initialized = false;
    838e:	2300      	movs	r3, #0
    8390:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
    8394:	464b      	mov	r3, r9
    8396:	4a75      	ldr	r2, [pc, #468]	; (856c <spi_nrfx_transceive+0x36c>)
    8398:	6978      	ldr	r0, [r7, #20]
    839a:	f107 0118 	add.w	r1, r7, #24
    839e:	f001 fad3 	bl	9948 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    83a2:	4b73      	ldr	r3, [pc, #460]	; (8570 <spi_nrfx_transceive+0x370>)
    83a4:	4298      	cmp	r0, r3
    83a6:	d02a      	beq.n	83fe <spi_nrfx_transceive+0x1fe>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    83a8:	466d      	mov	r5, sp
    83aa:	b088      	sub	sp, #32
    83ac:	466a      	mov	r2, sp
    83ae:	4b71      	ldr	r3, [pc, #452]	; (8574 <spi_nrfx_transceive+0x374>)
    83b0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    83b4:	2303      	movs	r3, #3
    83b6:	f842 3f10 	str.w	r3, [r2, #16]!
    83ba:	485d      	ldr	r0, [pc, #372]	; (8530 <spi_nrfx_transceive+0x330>)
    83bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    83c0:	f005 fd3a 	bl	de38 <z_log_msg_static_create.constprop.0>
    83c4:	46ad      	mov	sp, r5
		return -EIO;
    83c6:	f06f 0504 	mvn.w	r5, #4
    83ca:	e752      	b.n	8272 <spi_nrfx_transceive+0x72>
		return NRF_SPIM_FREQ_125K;
    83cc:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    83d0:	e7c8      	b.n	8364 <spi_nrfx_transceive+0x164>
		return NRF_SPIM_FREQ_250K;
    83d2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    83d6:	e7c5      	b.n	8364 <spi_nrfx_transceive+0x164>
		return NRF_SPIM_FREQ_500K;
    83d8:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    83dc:	e7c2      	b.n	8364 <spi_nrfx_transceive+0x164>
		return NRF_SPIM_FREQ_1M;
    83de:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    83e2:	e7bf      	b.n	8364 <spi_nrfx_transceive+0x164>
		return NRF_SPIM_FREQ_2M;
    83e4:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    83e8:	e7bc      	b.n	8364 <spi_nrfx_transceive+0x164>
		return NRF_SPIM_FREQ_4M;
    83ea:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    83ee:	e7b9      	b.n	8364 <spi_nrfx_transceive+0x164>
		return NRF_SPIM_FREQ_8M;
    83f0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    83f4:	e7b6      	b.n	8364 <spi_nrfx_transceive+0x164>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    83f6:	3b00      	subs	r3, #0
    83f8:	bf18      	it	ne
    83fa:	2301      	movne	r3, #1
    83fc:	e7bc      	b.n	8378 <spi_nrfx_transceive+0x178>
	dev_data->initialized = true;
    83fe:	2301      	movs	r3, #1
    8400:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	ctx->config = spi_cfg;
    8404:	f8c9 8000 	str.w	r8, [r9]
		dev_data->busy = true;
    8408:	2301      	movs	r3, #1
    840a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    840e:	693b      	ldr	r3, [r7, #16]
    8410:	2b00      	cmp	r3, #0
    8412:	d16d      	bne.n	84f0 <spi_nrfx_transceive+0x2f0>
    8414:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    8416:	2300      	movs	r3, #0
    8418:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    841a:	f104 0258 	add.w	r2, r4, #88	; 0x58
    841e:	f104 0148 	add.w	r1, r4, #72	; 0x48
    8422:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8426:	f005 fcf4 	bl	de12 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    842a:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    842c:	f1ba 0f00 	cmp.w	sl, #0
    8430:	d166      	bne.n	8500 <spi_nrfx_transceive+0x300>
    8432:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    8436:	2300      	movs	r3, #0
    8438:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    843a:	f104 0260 	add.w	r2, r4, #96	; 0x60
    843e:	f104 0150 	add.w	r1, r4, #80	; 0x50
    8442:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    8446:	f005 fce4 	bl	de12 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    844a:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    844c:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    844e:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
    8450:	2101      	movs	r1, #1
    8452:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    8454:	6425      	str	r5, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
    8456:	f005 fd06 	bl	de66 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    845a:	4630      	mov	r0, r6
    845c:	f7ff fe18 	bl	8090 <transfer_next_chunk>
	for (n = 0; n < ctx->tx_count; ++n) {
    8460:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	size_t total_len = 0;
    8462:	462a      	mov	r2, r5
	for (n = 0; n < ctx->tx_count; ++n) {
    8464:	462b      	mov	r3, r5
    8466:	4283      	cmp	r3, r0
    8468:	d152      	bne.n	8510 <spi_nrfx_transceive+0x310>
	size_t total_len = 0;
    846a:	2300      	movs	r3, #0
	for (n = 0; n < ctx->rx_count; ++n) {
    846c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    846e:	4619      	mov	r1, r3
    8470:	42a9      	cmp	r1, r5
    8472:	d154      	bne.n	851e <spi_nrfx_transceive+0x31e>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    8474:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    8476:	46a0      	mov	r8, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    8478:	bf38      	it	cc
    847a:	4613      	movcc	r3, r2
    847c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    8480:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    8484:	f858 3b28 	ldr.w	r3, [r8], #40
    8488:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    848c:	681b      	ldr	r3, [r3, #0]
    848e:	fbb5 f5f3 	udiv	r5, r5, r3
    8492:	f240 30e7 	movw	r0, #999	; 0x3e7
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    8496:	35c8      	adds	r5, #200	; 0xc8
    8498:	2100      	movs	r1, #0
    849a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    849e:	2300      	movs	r3, #0
    84a0:	fbe5 010c 	umlal	r0, r1, r5, ip
    84a4:	f7f7 fe2c 	bl	100 <__aeabi_uldivmod>
    84a8:	4602      	mov	r2, r0
    84aa:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    84ac:	4640      	mov	r0, r8
    84ae:	f003 f819 	bl	b4e4 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    84b2:	2800      	cmp	r0, #0
    84b4:	d062      	beq.n	857c <spi_nrfx_transceive+0x37c>
			LOG_ERR("Timeout waiting for transfer complete");
    84b6:	4b30      	ldr	r3, [pc, #192]	; (8578 <spi_nrfx_transceive+0x378>)
    84b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    84ba:	2302      	movs	r3, #2
    84bc:	481c      	ldr	r0, [pc, #112]	; (8530 <spi_nrfx_transceive+0x330>)
    84be:	62bb      	str	r3, [r7, #40]	; 0x28
    84c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
    84c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    84c8:	f005 fcb6 	bl	de38 <z_log_msg_static_create.constprop.0>
			dev_data->chunk_len = 0;
    84cc:	2500      	movs	r5, #0
			nrfx_spim_uninit(&dev_config->spim);
    84ce:	68b8      	ldr	r0, [r7, #8]
			dev_data->chunk_len = 0;
    84d0:	66a5      	str	r5, [r4, #104]	; 0x68
			nrfx_spim_uninit(&dev_config->spim);
    84d2:	f001 fb39 	bl	9b48 <nrfx_spim_uninit>
			dev_data->initialized = false;
    84d6:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
			finish_transaction(dev, -ETIMEDOUT);
    84da:	6930      	ldr	r0, [r6, #16]
    84dc:	f06f 0173 	mvn.w	r1, #115	; 0x73
    84e0:	f005 fd05 	bl	deee <finish_transaction.isra.0>
	z_impl_k_sem_reset(sem);
    84e4:	4640      	mov	r0, r8
    84e6:	f003 f825 	bl	b534 <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    84ea:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    84ee:	e6c0      	b.n	8272 <spi_nrfx_transceive+0x72>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    84f0:	693b      	ldr	r3, [r7, #16]
    84f2:	681b      	ldr	r3, [r3, #0]
    84f4:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    84f6:	2b00      	cmp	r3, #0
    84f8:	d08d      	beq.n	8416 <spi_nrfx_transceive+0x216>
    84fa:	693b      	ldr	r3, [r7, #16]
    84fc:	685b      	ldr	r3, [r3, #4]
    84fe:	e78b      	b.n	8418 <spi_nrfx_transceive+0x218>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    8500:	f8da 3000 	ldr.w	r3, [sl]
    8504:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    8506:	2b00      	cmp	r3, #0
    8508:	d095      	beq.n	8436 <spi_nrfx_transceive+0x236>
    850a:	f8da 3004 	ldr.w	r3, [sl, #4]
    850e:	e793      	b.n	8438 <spi_nrfx_transceive+0x238>
		total_len += ctx->current_tx[n].len;
    8510:	6c61      	ldr	r1, [r4, #68]	; 0x44
    8512:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    8516:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    8518:	6849      	ldr	r1, [r1, #4]
    851a:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    851c:	e7a3      	b.n	8466 <spi_nrfx_transceive+0x266>
		total_len += ctx->current_rx[n].len;
    851e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    8520:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    8524:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    8526:	6840      	ldr	r0, [r0, #4]
    8528:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    852a:	e7a1      	b.n	8470 <spi_nrfx_transceive+0x270>
    852c:	000104c8 	.word	0x000104c8
    8530:	0000f020 	.word	0x0000f020
    8534:	000104e2 	.word	0x000104e2
    8538:	01000003 	.word	0x01000003
    853c:	00010504 	.word	0x00010504
    8540:	00010523 	.word	0x00010523
    8544:	0001e847 	.word	0x0001e847
    8548:	00010552 	.word	0x00010552
    854c:	0003d08f 	.word	0x0003d08f
    8550:	0007a11f 	.word	0x0007a11f
    8554:	000f423f 	.word	0x000f423f
    8558:	001e847f 	.word	0x001e847f
    855c:	003d08ff 	.word	0x003d08ff
    8560:	007a1200 	.word	0x007a1200
    8564:	00f42400 	.word	0x00f42400
    8568:	01e84800 	.word	0x01e84800
    856c:	00008129 	.word	0x00008129
    8570:	0bad0000 	.word	0x0bad0000
    8574:	00010583 	.word	0x00010583
    8578:	000105aa 	.word	0x000105aa
		status = ctx->sync_status;
    857c:	6c25      	ldr	r5, [r4, #64]	; 0x40
		if (error == -ETIMEDOUT) {
    857e:	f115 0f74 	cmn.w	r5, #116	; 0x74
    8582:	f47f ae76 	bne.w	8272 <spi_nrfx_transceive+0x72>
    8586:	e7a1      	b.n	84cc <spi_nrfx_transceive+0x2cc>

00008588 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    8588:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    858a:	2301      	movs	r3, #1
    858c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    858e:	4a0e      	ldr	r2, [pc, #56]	; (85c8 <compare_int_lock+0x40>)
    8590:	f3bf 8f5b 	dmb	ish
    8594:	43dc      	mvns	r4, r3
    8596:	e852 1f00 	ldrex	r1, [r2]
    859a:	ea01 0504 	and.w	r5, r1, r4
    859e:	e842 5600 	strex	r6, r5, [r2]
    85a2:	2e00      	cmp	r6, #0
    85a4:	d1f7      	bne.n	8596 <compare_int_lock+0xe>
    85a6:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    85aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    85ae:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    85b0:	4806      	ldr	r0, [pc, #24]	; (85cc <compare_int_lock+0x44>)
    85b2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    85b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    85ba:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    85be:	420b      	tst	r3, r1
}
    85c0:	bf14      	ite	ne
    85c2:	2001      	movne	r0, #1
    85c4:	2000      	moveq	r0, #0
    85c6:	bd70      	pop	{r4, r5, r6, pc}
    85c8:	20001e94 	.word	0x20001e94
    85cc:	40011000 	.word	0x40011000

000085d0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    85d0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    85d2:	490e      	ldr	r1, [pc, #56]	; (860c <sys_clock_timeout_handler+0x3c>)
    85d4:	e9d1 3400 	ldrd	r3, r4, [r1]
    85d8:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    85da:	18c3      	adds	r3, r0, r3
    85dc:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    85e0:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    85e4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    85e8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    85ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    85f0:	d209      	bcs.n	8606 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    85f2:	4b07      	ldr	r3, [pc, #28]	; (8610 <sys_clock_timeout_handler+0x40>)
    85f4:	681b      	ldr	r3, [r3, #0]
    85f6:	0a1a      	lsrs	r2, r3, #8
    85f8:	061b      	lsls	r3, r3, #24
    85fa:	199c      	adds	r4, r3, r6
    85fc:	4b05      	ldr	r3, [pc, #20]	; (8614 <sys_clock_timeout_handler+0x44>)
    85fe:	f142 0500 	adc.w	r5, r2, #0
    8602:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    8606:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    8608:	f003 bd48 	b.w	c09c <sys_clock_announce>
    860c:	20000a28 	.word	0x20000a28
    8610:	20001e98 	.word	0x20001e98
    8614:	20000a30 	.word	0x20000a30

00008618 <compare_int_unlock>:
	if (key) {
    8618:	b311      	cbz	r1, 8660 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    861a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    861e:	2301      	movs	r3, #1
    8620:	4a10      	ldr	r2, [pc, #64]	; (8664 <compare_int_unlock+0x4c>)
    8622:	4083      	lsls	r3, r0
    8624:	e852 cf00 	ldrex	ip, [r2]
    8628:	ea4c 0c03 	orr.w	ip, ip, r3
    862c:	e842 c100 	strex	r1, ip, [r2]
    8630:	2900      	cmp	r1, #0
    8632:	d1f7      	bne.n	8624 <compare_int_unlock+0xc>
    8634:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    8638:	4a0b      	ldr	r2, [pc, #44]	; (8668 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    863a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    863e:	4083      	lsls	r3, r0
    8640:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8644:	4b09      	ldr	r3, [pc, #36]	; (866c <compare_int_unlock+0x54>)
    8646:	f3bf 8f5b 	dmb	ish
    864a:	681b      	ldr	r3, [r3, #0]
    864c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    8650:	40c3      	lsrs	r3, r0
    8652:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8654:	bf42      	ittt	mi
    8656:	4b06      	ldrmi	r3, [pc, #24]	; (8670 <compare_int_unlock+0x58>)
    8658:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    865c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    8660:	4770      	bx	lr
    8662:	bf00      	nop
    8664:	20001e94 	.word	0x20001e94
    8668:	40011000 	.word	0x40011000
    866c:	20001e90 	.word	0x20001e90
    8670:	e000e100 	.word	0xe000e100

00008674 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    8674:	4b0d      	ldr	r3, [pc, #52]	; (86ac <z_nrf_rtc_timer_read+0x38>)
    8676:	6818      	ldr	r0, [r3, #0]
    8678:	0a01      	lsrs	r1, r0, #8
    867a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    867c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    8680:	4b0b      	ldr	r3, [pc, #44]	; (86b0 <z_nrf_rtc_timer_read+0x3c>)
    8682:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    8686:	1818      	adds	r0, r3, r0
    8688:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    868c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    8690:	d20a      	bcs.n	86a8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    8692:	4b08      	ldr	r3, [pc, #32]	; (86b4 <z_nrf_rtc_timer_read+0x40>)
    8694:	e9d3 2300 	ldrd	r2, r3, [r3]
    8698:	4290      	cmp	r0, r2
    869a:	eb71 0303 	sbcs.w	r3, r1, r3
    869e:	d203      	bcs.n	86a8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    86a0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    86a4:	f141 0100 	adc.w	r1, r1, #0
}
    86a8:	4770      	bx	lr
    86aa:	bf00      	nop
    86ac:	20001e98 	.word	0x20001e98
    86b0:	40011000 	.word	0x40011000
    86b4:	20000a30 	.word	0x20000a30

000086b8 <compare_set>:
{
    86b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86bc:	4616      	mov	r6, r2
    86be:	461f      	mov	r7, r3
    86c0:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    86c2:	f7ff ff61 	bl	8588 <compare_int_lock>
    86c6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    86c8:	f7ff ffd4 	bl	8674 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    86cc:	42b0      	cmp	r0, r6
    86ce:	eb71 0307 	sbcs.w	r3, r1, r7
    86d2:	d251      	bcs.n	8778 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    86d4:	4b3a      	ldr	r3, [pc, #232]	; (87c0 <compare_set+0x108>)
    86d6:	1a30      	subs	r0, r6, r0
    86d8:	eb67 0101 	sbc.w	r1, r7, r1
    86dc:	4298      	cmp	r0, r3
    86de:	f171 0100 	sbcs.w	r1, r1, #0
    86e2:	d26a      	bcs.n	87ba <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    86e4:	4b37      	ldr	r3, [pc, #220]	; (87c4 <compare_set+0x10c>)
    86e6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    86ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    86ee:	429f      	cmp	r7, r3
    86f0:	bf08      	it	eq
    86f2:	4296      	cmpeq	r6, r2
    86f4:	d04e      	beq.n	8794 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    86f6:	4934      	ldr	r1, [pc, #208]	; (87c8 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    86f8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    86fc:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8700:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    8704:	00ad      	lsls	r5, r5, #2
    8706:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    870a:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    870c:	b2ad      	uxth	r5, r5
    870e:	f005 fbff 	bl	df10 <event_clear>
	return absolute_time & COUNTER_MAX;
    8712:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    8716:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    871a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    871e:	4a2b      	ldr	r2, [pc, #172]	; (87cc <compare_set+0x114>)
    8720:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8722:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    8726:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    8728:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    872c:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    872e:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    8732:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    8736:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    873a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    873e:	f06f 0002 	mvn.w	r0, #2
    8742:	eba0 0008 	sub.w	r0, r0, r8
    8746:	4460      	add	r0, ip
    8748:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    874c:	4290      	cmp	r0, r2
    874e:	d921      	bls.n	8794 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8750:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    8752:	b160      	cbz	r0, 876e <compare_set+0xb6>
     return p_reg->COUNTER;
    8754:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    8758:	eba8 000b 	sub.w	r0, r8, fp
    875c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    8760:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8764:	d916      	bls.n	8794 <compare_set+0xdc>
					event_clear(chan);
    8766:	4620      	mov	r0, r4
    8768:	f005 fbd2 	bl	df10 <event_clear>
    876c:	4a17      	ldr	r2, [pc, #92]	; (87cc <compare_set+0x114>)
			cc_val = now + cc_inc;
    876e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    8772:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    8776:	e7d9      	b.n	872c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    8778:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    877a:	4a15      	ldr	r2, [pc, #84]	; (87d0 <compare_set+0x118>)
    877c:	f3bf 8f5b 	dmb	ish
    8780:	40a3      	lsls	r3, r4
    8782:	e852 0f00 	ldrex	r0, [r2]
    8786:	4318      	orrs	r0, r3
    8788:	e842 0100 	strex	r1, r0, [r2]
    878c:	2900      	cmp	r1, #0
    878e:	d1f8      	bne.n	8782 <compare_set+0xca>
    8790:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    8794:	490b      	ldr	r1, [pc, #44]	; (87c4 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    8796:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    8798:	0123      	lsls	r3, r4, #4
    879a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    879e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    87a2:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    87a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    87a6:	6053      	str	r3, [r2, #4]
	return ret;
    87a8:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    87aa:	4620      	mov	r0, r4
    87ac:	9900      	ldr	r1, [sp, #0]
    87ae:	f7ff ff33 	bl	8618 <compare_int_unlock>
}
    87b2:	4628      	mov	r0, r5
    87b4:	b003      	add	sp, #12
    87b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    87ba:	f06f 0515 	mvn.w	r5, #21
    87be:	e7f4      	b.n	87aa <compare_set+0xf2>
    87c0:	00800001 	.word	0x00800001
    87c4:	20000a18 	.word	0x20000a18
    87c8:	40011000 	.word	0x40011000
    87cc:	007ffffd 	.word	0x007ffffd
    87d0:	20001e90 	.word	0x20001e90

000087d4 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    87d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    87d6:	4c1b      	ldr	r4, [pc, #108]	; (8844 <sys_clock_driver_init+0x70>)
    87d8:	4b1b      	ldr	r3, [pc, #108]	; (8848 <sys_clock_driver_init+0x74>)
    87da:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    87de:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    87e2:	4b1a      	ldr	r3, [pc, #104]	; (884c <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    87e4:	2500      	movs	r5, #0
    87e6:	f04f 30ff 	mov.w	r0, #4294967295
    87ea:	f04f 31ff 	mov.w	r1, #4294967295
    87ee:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    87f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    87f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    87fa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    87fe:	4b14      	ldr	r3, [pc, #80]	; (8850 <sys_clock_driver_init+0x7c>)
    8800:	2602      	movs	r6, #2
    8802:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    8806:	2101      	movs	r1, #1
    8808:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    880c:	2011      	movs	r0, #17
    880e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    8812:	462a      	mov	r2, r5
    8814:	f7fa fff8 	bl	3808 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    8818:	2011      	movs	r0, #17
    881a:	f7fa ffc5 	bl	37a8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    881e:	4a0d      	ldr	r2, [pc, #52]	; (8854 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    8820:	2301      	movs	r3, #1
    8822:	60a3      	str	r3, [r4, #8]
    8824:	6023      	str	r3, [r4, #0]
    8826:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    8828:	4b0b      	ldr	r3, [pc, #44]	; (8858 <sys_clock_driver_init+0x84>)
    882a:	4a0c      	ldr	r2, [pc, #48]	; (885c <sys_clock_driver_init+0x88>)
    882c:	9300      	str	r3, [sp, #0]
    882e:	9501      	str	r5, [sp, #4]
    8830:	2300      	movs	r3, #0
    8832:	4628      	mov	r0, r5
    8834:	f7ff ff40 	bl	86b8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    8838:	4630      	mov	r0, r6
    883a:	f7fc fdd7 	bl	53ec <z_nrf_clock_control_lf_on>

	return 0;
}
    883e:	4628      	mov	r0, r5
    8840:	b002      	add	sp, #8
    8842:	bd70      	pop	{r4, r5, r6, pc}
    8844:	40011000 	.word	0x40011000
    8848:	000f0003 	.word	0x000f0003
    884c:	20000a18 	.word	0x20000a18
    8850:	e000e100 	.word	0xe000e100
    8854:	20001e94 	.word	0x20001e94
    8858:	000085d1 	.word	0x000085d1
    885c:	007fffff 	.word	0x007fffff

00008860 <rtc_nrf_isr>:
{
    8860:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    8864:	4c2f      	ldr	r4, [pc, #188]	; (8924 <rtc_nrf_isr+0xc4>)
    8866:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    886a:	0799      	lsls	r1, r3, #30
    886c:	d50b      	bpl.n	8886 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    886e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    8872:	b143      	cbz	r3, 8886 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    8874:	4a2c      	ldr	r2, [pc, #176]	; (8928 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8876:	2300      	movs	r3, #0
    8878:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    887c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    8880:	6813      	ldr	r3, [r2, #0]
    8882:	3301      	adds	r3, #1
    8884:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    8886:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    888a:	03da      	lsls	r2, r3, #15
    888c:	d52a      	bpl.n	88e4 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    888e:	f3bf 8f5b 	dmb	ish
    8892:	4b26      	ldr	r3, [pc, #152]	; (892c <rtc_nrf_isr+0xcc>)
    8894:	e853 2f00 	ldrex	r2, [r3]
    8898:	f022 0101 	bic.w	r1, r2, #1
    889c:	e843 1000 	strex	r0, r1, [r3]
    88a0:	2800      	cmp	r0, #0
    88a2:	d1f7      	bne.n	8894 <rtc_nrf_isr+0x34>
    88a4:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    88a8:	07d3      	lsls	r3, r2, #31
    88aa:	d402      	bmi.n	88b2 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    88b0:	b1c3      	cbz	r3, 88e4 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    88b2:	2500      	movs	r5, #0
    88b4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    88b8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    88bc:	f7ff feda 	bl	8674 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    88c0:	f04f 0320 	mov.w	r3, #32
    88c4:	f3ef 8211 	mrs	r2, BASEPRI
    88c8:	f383 8812 	msr	BASEPRI_MAX, r3
    88cc:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    88d0:	4b17      	ldr	r3, [pc, #92]	; (8930 <rtc_nrf_isr+0xd0>)
    88d2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    88d6:	42b0      	cmp	r0, r6
    88d8:	41b9      	sbcs	r1, r7
    88da:	d206      	bcs.n	88ea <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    88dc:	f382 8811 	msr	BASEPRI, r2
    88e0:	f3bf 8f6f 	isb	sy
}
    88e4:	b003      	add	sp, #12
    88e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    88ea:	f04f 38ff 	mov.w	r8, #4294967295
    88ee:	f04f 39ff 	mov.w	r9, #4294967295
    88f2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    88f6:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    88fa:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    88fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8900:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8904:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    8908:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    890c:	f382 8811 	msr	BASEPRI, r2
    8910:	f3bf 8f6f 	isb	sy
		if (handler) {
    8914:	2900      	cmp	r1, #0
    8916:	d0e5      	beq.n	88e4 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    8918:	9000      	str	r0, [sp, #0]
    891a:	4632      	mov	r2, r6
    891c:	463b      	mov	r3, r7
    891e:	4628      	mov	r0, r5
    8920:	4788      	blx	r1
    8922:	e7df      	b.n	88e4 <rtc_nrf_isr+0x84>
    8924:	40011000 	.word	0x40011000
    8928:	20001e98 	.word	0x20001e98
    892c:	20001e90 	.word	0x20001e90
    8930:	20000a18 	.word	0x20000a18

00008934 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    8934:	1c43      	adds	r3, r0, #1
{
    8936:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    8938:	d022      	beq.n	8980 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    893a:	2801      	cmp	r0, #1
    893c:	dd22      	ble.n	8984 <sys_clock_set_timeout+0x50>
    893e:	4a12      	ldr	r2, [pc, #72]	; (8988 <sys_clock_set_timeout+0x54>)
    8940:	4b12      	ldr	r3, [pc, #72]	; (898c <sys_clock_set_timeout+0x58>)
    8942:	4290      	cmp	r0, r2
    8944:	bfd4      	ite	le
    8946:	4604      	movle	r4, r0
    8948:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    894a:	f7ff fe93 	bl	8674 <z_nrf_rtc_timer_read>
    894e:	4b10      	ldr	r3, [pc, #64]	; (8990 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    8950:	490e      	ldr	r1, [pc, #56]	; (898c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    8952:	e9d3 2300 	ldrd	r2, r3, [r3]
    8956:	1a80      	subs	r0, r0, r2
		cyc = 0;
    8958:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    895c:	bf28      	it	cs
    895e:	2400      	movcs	r4, #0
	cyc += unannounced;
    8960:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    8962:	428c      	cmp	r4, r1
    8964:	bf28      	it	cs
    8966:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    8968:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    896a:	490a      	ldr	r1, [pc, #40]	; (8994 <sys_clock_set_timeout+0x60>)
    896c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    896e:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    8972:	9001      	str	r0, [sp, #4]
    8974:	f143 0300 	adc.w	r3, r3, #0
    8978:	f7ff fe9e 	bl	86b8 <compare_set>
}
    897c:	b002      	add	sp, #8
    897e:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    8980:	4c02      	ldr	r4, [pc, #8]	; (898c <sys_clock_set_timeout+0x58>)
    8982:	e7e2      	b.n	894a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    8984:	2401      	movs	r4, #1
    8986:	e7e0      	b.n	894a <sys_clock_set_timeout+0x16>
    8988:	007ffffe 	.word	0x007ffffe
    898c:	007fffff 	.word	0x007fffff
    8990:	20000a28 	.word	0x20000a28
    8994:	000085d1 	.word	0x000085d1

00008998 <sys_clock_elapsed>:
{
    8998:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    899a:	f7ff fe6b 	bl	8674 <z_nrf_rtc_timer_read>
    899e:	4b02      	ldr	r3, [pc, #8]	; (89a8 <sys_clock_elapsed+0x10>)
    89a0:	681b      	ldr	r3, [r3, #0]
}
    89a2:	1ac0      	subs	r0, r0, r3
    89a4:	bd08      	pop	{r3, pc}
    89a6:	bf00      	nop
    89a8:	20000a28 	.word	0x20000a28

000089ac <sys_clock_disable>:
{
    89ac:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    89ae:	4c08      	ldr	r4, [pc, #32]	; (89d0 <sys_clock_disable+0x24>)
    89b0:	2301      	movs	r3, #1
    89b2:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    89b4:	2011      	movs	r0, #17
    89b6:	f7fa ff05 	bl	37c4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    89ba:	4b06      	ldr	r3, [pc, #24]	; (89d4 <sys_clock_disable+0x28>)
    89bc:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    89c0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    89c4:	4b04      	ldr	r3, [pc, #16]	; (89d8 <sys_clock_disable+0x2c>)
    89c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    89ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    89ce:	bd10      	pop	{r4, pc}
    89d0:	40011000 	.word	0x40011000
    89d4:	000f0003 	.word	0x000f0003
    89d8:	e000e100 	.word	0xe000e100

000089dc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    89dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    89de:	f7f9 f815 	bl	1a0c <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    89e2:	4b07      	ldr	r3, [pc, #28]	; (8a00 <k_sys_fatal_error_handler+0x24>)
    89e4:	9305      	str	r3, [sp, #20]
    89e6:	2302      	movs	r3, #2
    89e8:	9304      	str	r3, [sp, #16]
    89ea:	4806      	ldr	r0, [pc, #24]	; (8a04 <k_sys_fatal_error_handler+0x28>)
    89ec:	2300      	movs	r3, #0
    89ee:	aa04      	add	r2, sp, #16
    89f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    89f4:	f7f9 f8ea 	bl	1bcc <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    89f8:	2000      	movs	r0, #0
    89fa:	f7fb fcbd 	bl	4378 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    89fe:	bf00      	nop
    8a00:	00010605 	.word	0x00010605
    8a04:	0000efc8 	.word	0x0000efc8

00008a08 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8a08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8a0c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    8a10:	2a08      	cmp	r2, #8
    8a12:	d106      	bne.n	8a22 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8a14:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    8a18:	2b05      	cmp	r3, #5
    8a1a:	d802      	bhi.n	8a22 <nrf52_errata_103+0x1a>
    8a1c:	4a02      	ldr	r2, [pc, #8]	; (8a28 <nrf52_errata_103+0x20>)
    8a1e:	5cd0      	ldrb	r0, [r2, r3]
    8a20:	4770      	bx	lr
                        return false;
    8a22:	2000      	movs	r0, #0
}
    8a24:	4770      	bx	lr
    8a26:	bf00      	nop
    8a28:	00010628 	.word	0x00010628

00008a2c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8a2c:	4a02      	ldr	r2, [pc, #8]	; (8a38 <nvmc_wait+0xc>)
    8a2e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    8a32:	2b00      	cmp	r3, #0
    8a34:	d0fb      	beq.n	8a2e <nvmc_wait+0x2>
}
    8a36:	4770      	bx	lr
    8a38:	4001e000 	.word	0x4001e000

00008a3c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    8a3c:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8a3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8a42:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    8a46:	2a08      	cmp	r2, #8
    8a48:	d14e      	bne.n	8ae8 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    8a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8a4e:	2100      	movs	r1, #0
    8a50:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    8a54:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    8a58:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    8a5c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    8a60:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    8a64:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    8a68:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    8a6c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    8a70:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    8a74:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8a78:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    8a7c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8a80:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    8a84:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8a88:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    8a8c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8a90:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    8a94:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8a98:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    8a9c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8aa0:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    8aa4:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8aa8:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    8aac:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8ab0:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    8ab4:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8ab8:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    8abc:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8ac0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    8ac4:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8ac8:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    8acc:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    8ad0:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    8ad4:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8ad8:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    8adc:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    8ae0:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    8ae4:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    8ae8:	f7ff ff8e 	bl	8a08 <nrf52_errata_103>
    8aec:	b118      	cbz	r0, 8af6 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    8aee:	4b3a      	ldr	r3, [pc, #232]	; (8bd8 <SystemInit+0x19c>)
    8af0:	4a3a      	ldr	r2, [pc, #232]	; (8bdc <SystemInit+0x1a0>)
    8af2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    8af6:	f7ff ff87 	bl	8a08 <nrf52_errata_103>
    8afa:	b118      	cbz	r0, 8b04 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    8afc:	4b38      	ldr	r3, [pc, #224]	; (8be0 <SystemInit+0x1a4>)
    8afe:	22fb      	movs	r2, #251	; 0xfb
    8b00:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    8b04:	f7ff ff80 	bl	8a08 <nrf52_errata_103>
    8b08:	b170      	cbz	r0, 8b28 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    8b0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8b0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8b12:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    8b16:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8b1a:	f022 020f 	bic.w	r2, r2, #15
    8b1e:	f003 030f 	and.w	r3, r3, #15
    8b22:	4313      	orrs	r3, r2
    8b24:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    8b28:	f7ff ff6e 	bl	8a08 <nrf52_errata_103>
    8b2c:	b120      	cbz	r0, 8b38 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    8b2e:	4b2d      	ldr	r3, [pc, #180]	; (8be4 <SystemInit+0x1a8>)
    8b30:	f44f 7200 	mov.w	r2, #512	; 0x200
    8b34:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8b38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8b3c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    8b40:	2b08      	cmp	r3, #8
    8b42:	d11a      	bne.n	8b7a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    8b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b48:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    8b4c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    8b4e:	bf44      	itt	mi
    8b50:	f06f 0201 	mvnmi.w	r2, #1
    8b54:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8b58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8b5c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    8b60:	2b05      	cmp	r3, #5
    8b62:	d802      	bhi.n	8b6a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    8b64:	4a20      	ldr	r2, [pc, #128]	; (8be8 <SystemInit+0x1ac>)
    8b66:	5cd3      	ldrb	r3, [r2, r3]
    8b68:	b13b      	cbz	r3, 8b7a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    8b6a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8b6e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    8b72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b76:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8b7a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8b7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    8b82:	2a00      	cmp	r2, #0
    8b84:	db03      	blt.n	8b8e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    8b86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	da22      	bge.n	8bd4 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8b8e:	4917      	ldr	r1, [pc, #92]	; (8bec <SystemInit+0x1b0>)
    8b90:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8b92:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8b96:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8b9a:	2412      	movs	r4, #18
    nvmc_wait();
    8b9c:	f7ff ff46 	bl	8a2c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8ba0:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    8ba4:	f7ff ff42 	bl	8a2c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    8ba8:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    8bac:	f7ff ff3e 	bl	8a2c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8bb0:	2300      	movs	r3, #0
    8bb2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    8bb6:	f7ff ff39 	bl	8a2c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    8bba:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8bbe:	490c      	ldr	r1, [pc, #48]	; (8bf0 <SystemInit+0x1b4>)
    8bc0:	4b0c      	ldr	r3, [pc, #48]	; (8bf4 <SystemInit+0x1b8>)
    8bc2:	68ca      	ldr	r2, [r1, #12]
    8bc4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8bc8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8bca:	60cb      	str	r3, [r1, #12]
    8bcc:	f3bf 8f4f 	dsb	sy
    __NOP();
    8bd0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8bd2:	e7fd      	b.n	8bd0 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    8bd4:	bd10      	pop	{r4, pc}
    8bd6:	bf00      	nop
    8bd8:	40005000 	.word	0x40005000
    8bdc:	00038148 	.word	0x00038148
    8be0:	4000f000 	.word	0x4000f000
    8be4:	40029000 	.word	0x40029000
    8be8:	00010622 	.word	0x00010622
    8bec:	4001e000 	.word	0x4001e000
    8bf0:	e000ed00 	.word	0xe000ed00
    8bf4:	05fa0004 	.word	0x05fa0004

00008bf8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    8bf8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    8bfa:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    8bfc:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8bfe:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    8c02:	fab2 f382 	clz	r3, r2
    8c06:	f1c3 031f 	rsb	r3, r3, #31
    8c0a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    8c0c:	fa05 f403 	lsl.w	r4, r5, r3
    8c10:	ea22 0404 	bic.w	r4, r2, r4
    8c14:	e850 6f00 	ldrex	r6, [r0]
    8c18:	4296      	cmp	r6, r2
    8c1a:	d104      	bne.n	8c26 <nrfx_flag32_alloc+0x2e>
    8c1c:	e840 4c00 	strex	ip, r4, [r0]
    8c20:	f1bc 0f00 	cmp.w	ip, #0
    8c24:	d1f6      	bne.n	8c14 <nrfx_flag32_alloc+0x1c>
    8c26:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8c2a:	d1e7      	bne.n	8bfc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    8c2c:	4801      	ldr	r0, [pc, #4]	; (8c34 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    8c2e:	700b      	strb	r3, [r1, #0]
}
    8c30:	bd70      	pop	{r4, r5, r6, pc}
    8c32:	bf00      	nop
    8c34:	0bad0000 	.word	0x0bad0000

00008c38 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    8c38:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    8c3a:	6803      	ldr	r3, [r0, #0]
    8c3c:	40cb      	lsrs	r3, r1
    8c3e:	07db      	lsls	r3, r3, #31
    8c40:	d414      	bmi.n	8c6c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    8c42:	2301      	movs	r3, #1
    8c44:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    8c46:	6802      	ldr	r2, [r0, #0]
    8c48:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    8c4c:	ea43 0102 	orr.w	r1, r3, r2
    8c50:	e850 4f00 	ldrex	r4, [r0]
    8c54:	4294      	cmp	r4, r2
    8c56:	d104      	bne.n	8c62 <nrfx_flag32_free+0x2a>
    8c58:	e840 1c00 	strex	ip, r1, [r0]
    8c5c:	f1bc 0f00 	cmp.w	ip, #0
    8c60:	d1f6      	bne.n	8c50 <nrfx_flag32_free+0x18>
    8c62:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8c66:	d1ee      	bne.n	8c46 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    8c68:	4801      	ldr	r0, [pc, #4]	; (8c70 <nrfx_flag32_free+0x38>)
}
    8c6a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8c6c:	4801      	ldr	r0, [pc, #4]	; (8c74 <nrfx_flag32_free+0x3c>)
    8c6e:	e7fc      	b.n	8c6a <nrfx_flag32_free+0x32>
    8c70:	0bad0000 	.word	0x0bad0000
    8c74:	0bad0004 	.word	0x0bad0004

00008c78 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    8c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    8c7a:	4604      	mov	r4, r0
    8c7c:	b118      	cbz	r0, 8c86 <clock_stop+0xe>
    8c7e:	2801      	cmp	r0, #1
    8c80:	d022      	beq.n	8cc8 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    8c82:	b003      	add	sp, #12
    8c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    8c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c8a:	2202      	movs	r2, #2
    8c8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8c90:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    8c94:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8c98:	2201      	movs	r2, #1
    8c9a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8c9c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    8c9e:	2301      	movs	r3, #1
    8ca0:	f88d 3007 	strb.w	r3, [sp, #7]
    8ca4:	f242 7510 	movw	r5, #10000	; 0x2710
    8ca8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    8cac:	b1cc      	cbz	r4, 8ce2 <clock_stop+0x6a>
    8cae:	2c01      	cmp	r4, #1
    8cb0:	d1e7      	bne.n	8c82 <clock_stop+0xa>
            if (p_clk_src != NULL)
    8cb2:	b3c7      	cbz	r7, 8d26 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8cb4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8cb8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8cbc:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8cbe:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8cc2:	03da      	lsls	r2, r3, #15
    8cc4:	d521      	bpl.n	8d0a <clock_stop+0x92>
    8cc6:	e016      	b.n	8cf6 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    8cc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ccc:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    8cce:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8cd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8cd6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8cda:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8cdc:	f10d 0707 	add.w	r7, sp, #7
    8ce0:	e7dd      	b.n	8c9e <clock_stop+0x26>
            if (p_clk_src != NULL)
    8ce2:	b1b7      	cbz	r7, 8d12 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8ce4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8ce8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8cec:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8cee:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    8cf2:	03d8      	lsls	r0, r3, #15
    8cf4:	d5c5      	bpl.n	8c82 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8cf6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8cfa:	2801      	cmp	r0, #1
    8cfc:	d103      	bne.n	8d06 <clock_stop+0x8e>
    8cfe:	f005 f923 	bl	df48 <nrfx_busy_wait>
    8d02:	3d01      	subs	r5, #1
    8d04:	d1d2      	bne.n	8cac <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    8d06:	2c01      	cmp	r4, #1
    8d08:	d1bb      	bne.n	8c82 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    8d0a:	4b0c      	ldr	r3, [pc, #48]	; (8d3c <clock_stop+0xc4>)
    8d0c:	2200      	movs	r2, #0
    8d0e:	715a      	strb	r2, [r3, #5]
    8d10:	e7b7      	b.n	8c82 <clock_stop+0xa>
    8d12:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    8d16:	03d9      	lsls	r1, r3, #15
    8d18:	d5b3      	bpl.n	8c82 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8d1a:	2001      	movs	r0, #1
    8d1c:	f005 f914 	bl	df48 <nrfx_busy_wait>
    8d20:	3d01      	subs	r5, #1
    8d22:	d1f6      	bne.n	8d12 <clock_stop+0x9a>
    8d24:	e7ad      	b.n	8c82 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8d26:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8d2a:	03db      	lsls	r3, r3, #15
    8d2c:	d5ed      	bpl.n	8d0a <clock_stop+0x92>
    8d2e:	2001      	movs	r0, #1
    8d30:	f005 f90a 	bl	df48 <nrfx_busy_wait>
    8d34:	3d01      	subs	r5, #1
    8d36:	d1f6      	bne.n	8d26 <clock_stop+0xae>
    8d38:	e7e7      	b.n	8d0a <clock_stop+0x92>
    8d3a:	bf00      	nop
    8d3c:	20001e9c 	.word	0x20001e9c

00008d40 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    8d40:	4b04      	ldr	r3, [pc, #16]	; (8d54 <nrfx_clock_init+0x14>)
    8d42:	791a      	ldrb	r2, [r3, #4]
    8d44:	b922      	cbnz	r2, 8d50 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    8d46:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    8d48:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    8d4a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    8d4c:	4802      	ldr	r0, [pc, #8]	; (8d58 <nrfx_clock_init+0x18>)
    8d4e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    8d50:	4802      	ldr	r0, [pc, #8]	; (8d5c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8d52:	4770      	bx	lr
    8d54:	20001e9c 	.word	0x20001e9c
    8d58:	0bad0000 	.word	0x0bad0000
    8d5c:	0bad000c 	.word	0x0bad000c

00008d60 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    8d60:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8d62:	2000      	movs	r0, #0
    8d64:	f7fa fd42 	bl	37ec <arch_irq_is_enabled>
    8d68:	b908      	cbnz	r0, 8d6e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8d6a:	f7fa fd1d 	bl	37a8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8d6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d72:	2200      	movs	r2, #0
    8d74:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    8d78:	4b01      	ldr	r3, [pc, #4]	; (8d80 <nrfx_clock_enable+0x20>)
    8d7a:	2201      	movs	r2, #1
    8d7c:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8d7e:	bd08      	pop	{r3, pc}
    8d80:	2000252f 	.word	0x2000252f

00008d84 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    8d84:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d8a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    8d8e:	b16a      	cbz	r2, 8dac <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8d90:	2200      	movs	r2, #0
    8d92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8d96:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    8d9a:	2201      	movs	r2, #1
    8d9c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    8da0:	4b11      	ldr	r3, [pc, #68]	; (8de8 <nrfx_clock_irq_handler+0x64>)
    8da2:	7958      	ldrb	r0, [r3, #5]
    8da4:	b910      	cbnz	r0, 8dac <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    8da6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    8da8:	681b      	ldr	r3, [r3, #0]
    8daa:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8db0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    8db4:	b172      	cbz	r2, 8dd4 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8db6:	2200      	movs	r2, #0
    8db8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8dbc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8dc0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8dc4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    8dc8:	0792      	lsls	r2, r2, #30
    8dca:	d104      	bne.n	8dd6 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8dcc:	2201      	movs	r2, #1
    8dce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8dd2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    8dd4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    8dd6:	2202      	movs	r2, #2
    8dd8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    8ddc:	4b02      	ldr	r3, [pc, #8]	; (8de8 <nrfx_clock_irq_handler+0x64>)
}
    8dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    8de2:	681b      	ldr	r3, [r3, #0]
    8de4:	2001      	movs	r0, #1
    8de6:	4718      	bx	r3
    8de8:	20001e9c 	.word	0x20001e9c

00008dec <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    8dec:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    8dee:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    8df2:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    8df4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    8df6:	6002      	str	r2, [r0, #0]
}
    8df8:	4802      	ldr	r0, [pc, #8]	; (8e04 <nrf_gpio_pin_port_decode+0x18>)
    8dfa:	bf18      	it	ne
    8dfc:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    8e00:	4770      	bx	lr
    8e02:	bf00      	nop
    8e04:	50000300 	.word	0x50000300

00008e08 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    8e08:	4b03      	ldr	r3, [pc, #12]	; (8e18 <pin_in_use_by_te+0x10>)
    8e0a:	3008      	adds	r0, #8
    8e0c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8e10:	f3c0 1040 	ubfx	r0, r0, #5, #1
    8e14:	4770      	bx	lr
    8e16:	bf00      	nop
    8e18:	20000164 	.word	0x20000164

00008e1c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    8e1c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8e1e:	f100 0308 	add.w	r3, r0, #8
    8e22:	4c0c      	ldr	r4, [pc, #48]	; (8e54 <call_handler+0x38>)
    8e24:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    8e28:	05da      	lsls	r2, r3, #23
{
    8e2a:	4605      	mov	r5, r0
    8e2c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8e2e:	d507      	bpl.n	8e40 <call_handler+0x24>
    8e30:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    8e34:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    8e38:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    8e3c:	6852      	ldr	r2, [r2, #4]
    8e3e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    8e40:	68a3      	ldr	r3, [r4, #8]
    8e42:	b12b      	cbz	r3, 8e50 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    8e44:	68e2      	ldr	r2, [r4, #12]
    8e46:	4631      	mov	r1, r6
    8e48:	4628      	mov	r0, r5
    }
}
    8e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    8e4e:	4718      	bx	r3
}
    8e50:	bd70      	pop	{r4, r5, r6, pc}
    8e52:	bf00      	nop
    8e54:	20000164 	.word	0x20000164

00008e58 <release_handler>:
{
    8e58:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8e5a:	4a12      	ldr	r2, [pc, #72]	; (8ea4 <release_handler+0x4c>)
    8e5c:	3008      	adds	r0, #8
    8e5e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    8e62:	05d9      	lsls	r1, r3, #23
    8e64:	d51b      	bpl.n	8e9e <release_handler+0x46>
    8e66:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    8e6a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    8e6e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8e72:	f102 040e 	add.w	r4, r2, #14
    8e76:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    8e78:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    8e7c:	f413 7f80 	tst.w	r3, #256	; 0x100
    8e80:	d003      	beq.n	8e8a <release_handler+0x32>
    8e82:	f3c3 2343 	ubfx	r3, r3, #9, #4
    8e86:	4299      	cmp	r1, r3
    8e88:	d009      	beq.n	8e9e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8e8a:	3001      	adds	r0, #1
    8e8c:	2830      	cmp	r0, #48	; 0x30
    8e8e:	d1f3      	bne.n	8e78 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    8e90:	2300      	movs	r3, #0
    8e92:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    8e96:	4804      	ldr	r0, [pc, #16]	; (8ea8 <release_handler+0x50>)
}
    8e98:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    8e9a:	f7ff becd 	b.w	8c38 <nrfx_flag32_free>
}
    8e9e:	bc10      	pop	{r4}
    8ea0:	4770      	bx	lr
    8ea2:	bf00      	nop
    8ea4:	20000164 	.word	0x20000164
    8ea8:	200001d8 	.word	0x200001d8

00008eac <pin_handler_trigger_uninit>:
{
    8eac:	b538      	push	{r3, r4, r5, lr}
    8eae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    8eb0:	f7ff ffaa 	bl	8e08 <pin_in_use_by_te>
    8eb4:	4c09      	ldr	r4, [pc, #36]	; (8edc <pin_handler_trigger_uninit+0x30>)
    8eb6:	f102 0508 	add.w	r5, r2, #8
    8eba:	b140      	cbz	r0, 8ece <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8ebc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    8ec0:	4907      	ldr	r1, [pc, #28]	; (8ee0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    8ec2:	0b5b      	lsrs	r3, r3, #13
    8ec4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    8ec8:	2000      	movs	r0, #0
    8eca:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    8ece:	4610      	mov	r0, r2
    8ed0:	f7ff ffc2 	bl	8e58 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    8ed4:	2300      	movs	r3, #0
    8ed6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    8eda:	bd38      	pop	{r3, r4, r5, pc}
    8edc:	20000164 	.word	0x20000164
    8ee0:	40006000 	.word	0x40006000

00008ee4 <nrfx_gpiote_input_configure>:
{
    8ee4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8ee8:	4604      	mov	r4, r0
    8eea:	4616      	mov	r6, r2
    8eec:	461d      	mov	r5, r3
    if (p_input_config)
    8eee:	b301      	cbz	r1, 8f32 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8ef0:	4f4e      	ldr	r7, [pc, #312]	; (902c <nrfx_gpiote_input_configure+0x148>)
    8ef2:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    8ef6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    8efa:	079b      	lsls	r3, r3, #30
    8efc:	d502      	bpl.n	8f04 <nrfx_gpiote_input_configure+0x20>
    8efe:	f7ff ff83 	bl	8e08 <pin_in_use_by_te>
    8f02:	bb10      	cbnz	r0, 8f4a <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    8f04:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    8f06:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    8f0a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    8f0e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    8f12:	f10d 020f 	add.w	r2, sp, #15
    8f16:	460b      	mov	r3, r1
    8f18:	4620      	mov	r0, r4
    8f1a:	f10d 010e 	add.w	r1, sp, #14
    8f1e:	f005 f853 	bl	dfc8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    8f22:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    8f26:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    8f2a:	f043 0301 	orr.w	r3, r3, #1
    8f2e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    8f32:	b346      	cbz	r6, 8f86 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8f34:	4b3d      	ldr	r3, [pc, #244]	; (902c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    8f36:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    8f3a:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8f3c:	f104 0708 	add.w	r7, r4, #8
    8f40:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    8f44:	0788      	lsls	r0, r1, #30
    8f46:	d502      	bpl.n	8f4e <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    8f48:	b1aa      	cbz	r2, 8f76 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    8f4a:	4839      	ldr	r0, [pc, #228]	; (9030 <nrfx_gpiote_input_configure+0x14c>)
    8f4c:	e01d      	b.n	8f8a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    8f4e:	f021 0120 	bic.w	r1, r1, #32
    8f52:	04c9      	lsls	r1, r1, #19
    8f54:	0cc9      	lsrs	r1, r1, #19
    8f56:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    8f5a:	b162      	cbz	r2, 8f76 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    8f5c:	f1bc 0f03 	cmp.w	ip, #3
    8f60:	d8f3      	bhi.n	8f4a <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    8f62:	6872      	ldr	r2, [r6, #4]
    8f64:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    8f66:	f1bc 0f00 	cmp.w	ip, #0
    8f6a:	d111      	bne.n	8f90 <nrfx_gpiote_input_configure+0xac>
    8f6c:	4a31      	ldr	r2, [pc, #196]	; (9034 <nrfx_gpiote_input_configure+0x150>)
    8f6e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    8f72:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    8f76:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    8f7a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    8f7e:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    8f82:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    8f86:	bb45      	cbnz	r5, 8fda <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    8f88:	482b      	ldr	r0, [pc, #172]	; (9038 <nrfx_gpiote_input_configure+0x154>)
}
    8f8a:	b004      	add	sp, #16
    8f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8f90:	00b2      	lsls	r2, r6, #2
    8f92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8f96:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8f9a:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    8f9e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8fa2:	f020 0003 	bic.w	r0, r0, #3
    8fa6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8faa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8fae:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    8fb2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    8fb6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8fba:	0220      	lsls	r0, r4, #8
    8fbc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    8fc0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    8fc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    8fc8:	ea40 000e 	orr.w	r0, r0, lr
    8fcc:	f041 0120 	orr.w	r1, r1, #32
    8fd0:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    8fd4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    8fd8:	e7cd      	b.n	8f76 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    8fda:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    8fde:	4620      	mov	r0, r4
    8fe0:	f7ff ff3a 	bl	8e58 <release_handler>
    if (!handler)
    8fe4:	2e00      	cmp	r6, #0
    8fe6:	d0cf      	beq.n	8f88 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8fe8:	4d10      	ldr	r5, [pc, #64]	; (902c <nrfx_gpiote_input_configure+0x148>)
    8fea:	e9d5 2300 	ldrd	r2, r3, [r5]
    8fee:	4296      	cmp	r6, r2
    8ff0:	d101      	bne.n	8ff6 <nrfx_gpiote_input_configure+0x112>
    8ff2:	429f      	cmp	r7, r3
    8ff4:	d018      	beq.n	9028 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    8ff6:	4811      	ldr	r0, [pc, #68]	; (903c <nrfx_gpiote_input_configure+0x158>)
    8ff8:	f10d 010f 	add.w	r1, sp, #15
    8ffc:	f7ff fdfc 	bl	8bf8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    9000:	4b0d      	ldr	r3, [pc, #52]	; (9038 <nrfx_gpiote_input_configure+0x154>)
    9002:	4298      	cmp	r0, r3
    9004:	d1c1      	bne.n	8f8a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    9006:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    900a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    900e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    9012:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    9014:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    9016:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    901a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    901e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9022:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    9026:	e7af      	b.n	8f88 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9028:	2200      	movs	r2, #0
    902a:	e7ee      	b.n	900a <nrfx_gpiote_input_configure+0x126>
    902c:	20000164 	.word	0x20000164
    9030:	0bad0004 	.word	0x0bad0004
    9034:	40006000 	.word	0x40006000
    9038:	0bad0000 	.word	0x0bad0000
    903c:	200001d8 	.word	0x200001d8

00009040 <nrfx_gpiote_output_configure>:
{
    9040:	b5f0      	push	{r4, r5, r6, r7, lr}
    9042:	4604      	mov	r4, r0
    9044:	b085      	sub	sp, #20
    9046:	4615      	mov	r5, r2
    if (p_config)
    9048:	b319      	cbz	r1, 9092 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    904a:	4e33      	ldr	r6, [pc, #204]	; (9118 <nrfx_gpiote_output_configure+0xd8>)
    904c:	f100 0708 	add.w	r7, r0, #8
    9050:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    9054:	0793      	lsls	r3, r2, #30
    9056:	d403      	bmi.n	9060 <nrfx_gpiote_output_configure+0x20>
    9058:	f7ff fed6 	bl	8e08 <pin_in_use_by_te>
    905c:	2800      	cmp	r0, #0
    905e:	d158      	bne.n	9112 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    9060:	f012 0f1c 	tst.w	r2, #28
    9064:	d002      	beq.n	906c <nrfx_gpiote_output_configure+0x2c>
    9066:	784b      	ldrb	r3, [r1, #1]
    9068:	2b01      	cmp	r3, #1
    906a:	d052      	beq.n	9112 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    906c:	2301      	movs	r3, #1
    906e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    9072:	2300      	movs	r3, #0
    9074:	e9cd 1300 	strd	r1, r3, [sp]
    9078:	1c4a      	adds	r2, r1, #1
    907a:	1c8b      	adds	r3, r1, #2
    907c:	4620      	mov	r0, r4
    907e:	f10d 010f 	add.w	r1, sp, #15
    9082:	f004 ffa1 	bl	dfc8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    9086:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    908a:	f043 0303 	orr.w	r3, r3, #3
    908e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    9092:	b915      	cbnz	r5, 909a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    9094:	4821      	ldr	r0, [pc, #132]	; (911c <nrfx_gpiote_output_configure+0xdc>)
}
    9096:	b005      	add	sp, #20
    9098:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    909a:	4e1f      	ldr	r6, [pc, #124]	; (9118 <nrfx_gpiote_output_configure+0xd8>)
    909c:	f104 0708 	add.w	r7, r4, #8
    90a0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    90a4:	0783      	lsls	r3, r0, #30
    90a6:	d534      	bpl.n	9112 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    90a8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    90ac:	4661      	mov	r1, ip
    90ae:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    90b0:	f020 0020 	bic.w	r0, r0, #32
    90b4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    90b8:	04c0      	lsls	r0, r0, #19
    90ba:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    90be:	0cc0      	lsrs	r0, r0, #19
    90c0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    90c4:	2300      	movs	r3, #0
    90c6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    90ca:	786a      	ldrb	r2, [r5, #1]
    90cc:	2a00      	cmp	r2, #0
    90ce:	d0e1      	beq.n	9094 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    90d0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    90d4:	78ad      	ldrb	r5, [r5, #2]
    90d6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    90da:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    90de:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    90e2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    90e6:	0223      	lsls	r3, r4, #8
    90e8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    90ec:	0412      	lsls	r2, r2, #16
    90ee:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    90f2:	ea43 030e 	orr.w	r3, r3, lr
    90f6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    90f8:	052a      	lsls	r2, r5, #20
    90fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    90fe:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9102:	4313      	orrs	r3, r2
    9104:	f040 0020 	orr.w	r0, r0, #32
    9108:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    910c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    9110:	e7c0      	b.n	9094 <nrfx_gpiote_output_configure+0x54>
{
    9112:	4803      	ldr	r0, [pc, #12]	; (9120 <nrfx_gpiote_output_configure+0xe0>)
    9114:	e7bf      	b.n	9096 <nrfx_gpiote_output_configure+0x56>
    9116:	bf00      	nop
    9118:	20000164 	.word	0x20000164
    911c:	0bad0000 	.word	0x0bad0000
    9120:	0bad0004 	.word	0x0bad0004

00009124 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    9124:	4b01      	ldr	r3, [pc, #4]	; (912c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    9126:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    912a:	4770      	bx	lr
    912c:	20000164 	.word	0x20000164

00009130 <nrfx_gpiote_channel_get>:
{
    9130:	b508      	push	{r3, lr}
    9132:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    9134:	f7ff fe68 	bl	8e08 <pin_in_use_by_te>
    9138:	b138      	cbz	r0, 914a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    913a:	4b05      	ldr	r3, [pc, #20]	; (9150 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    913c:	4805      	ldr	r0, [pc, #20]	; (9154 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    913e:	3208      	adds	r2, #8
    9140:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    9144:	0b5b      	lsrs	r3, r3, #13
    9146:	700b      	strb	r3, [r1, #0]
}
    9148:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    914a:	4803      	ldr	r0, [pc, #12]	; (9158 <nrfx_gpiote_channel_get+0x28>)
    914c:	e7fc      	b.n	9148 <nrfx_gpiote_channel_get+0x18>
    914e:	bf00      	nop
    9150:	20000164 	.word	0x20000164
    9154:	0bad0000 	.word	0x0bad0000
    9158:	0bad0004 	.word	0x0bad0004

0000915c <nrfx_gpiote_init>:
{
    915c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    915e:	4c0f      	ldr	r4, [pc, #60]	; (919c <nrfx_gpiote_init+0x40>)
    9160:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    9164:	b9bd      	cbnz	r5, 9196 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    9166:	2260      	movs	r2, #96	; 0x60
    9168:	4629      	mov	r1, r5
    916a:	f104 0010 	add.w	r0, r4, #16
    916e:	f004 faab 	bl	d6c8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    9172:	2006      	movs	r0, #6
    9174:	f7fa fb18 	bl	37a8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9178:	4b09      	ldr	r3, [pc, #36]	; (91a0 <nrfx_gpiote_init+0x44>)
    return err_code;
    917a:	480a      	ldr	r0, [pc, #40]	; (91a4 <nrfx_gpiote_init+0x48>)
    917c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    9180:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    9184:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9188:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    918c:	2301      	movs	r3, #1
    918e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    9192:	6763      	str	r3, [r4, #116]	; 0x74
}
    9194:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    9196:	4804      	ldr	r0, [pc, #16]	; (91a8 <nrfx_gpiote_init+0x4c>)
    9198:	e7fc      	b.n	9194 <nrfx_gpiote_init+0x38>
    919a:	bf00      	nop
    919c:	20000164 	.word	0x20000164
    91a0:	40006000 	.word	0x40006000
    91a4:	0bad0000 	.word	0x0bad0000
    91a8:	0bad0005 	.word	0x0bad0005

000091ac <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    91ac:	4b03      	ldr	r3, [pc, #12]	; (91bc <nrfx_gpiote_is_init+0x10>)
    91ae:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    91b2:	3800      	subs	r0, #0
    91b4:	bf18      	it	ne
    91b6:	2001      	movne	r0, #1
    91b8:	4770      	bx	lr
    91ba:	bf00      	nop
    91bc:	20000164 	.word	0x20000164

000091c0 <nrfx_gpiote_channel_free>:
{
    91c0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    91c2:	4801      	ldr	r0, [pc, #4]	; (91c8 <nrfx_gpiote_channel_free+0x8>)
    91c4:	f7ff bd38 	b.w	8c38 <nrfx_flag32_free>
    91c8:	200001d4 	.word	0x200001d4

000091cc <nrfx_gpiote_channel_alloc>:
{
    91cc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    91ce:	4801      	ldr	r0, [pc, #4]	; (91d4 <nrfx_gpiote_channel_alloc+0x8>)
    91d0:	f7ff bd12 	b.w	8bf8 <nrfx_flag32_alloc>
    91d4:	200001d4 	.word	0x200001d4

000091d8 <nrfx_gpiote_trigger_enable>:
{
    91d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    91da:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    91dc:	f7ff fe14 	bl	8e08 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    91e0:	f104 0208 	add.w	r2, r4, #8
    91e4:	4b1e      	ldr	r3, [pc, #120]	; (9260 <nrfx_gpiote_trigger_enable+0x88>)
    91e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    91ea:	b1e8      	cbz	r0, 9228 <nrfx_gpiote_trigger_enable+0x50>
    91ec:	f013 0502 	ands.w	r5, r3, #2
    91f0:	d11a      	bne.n	9228 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    91f2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    91f4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    91f6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    91fa:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    91fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    9202:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9206:	6005      	str	r5, [r0, #0]
    9208:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    920a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    920e:	f040 0001 	orr.w	r0, r0, #1
    9212:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    9216:	b129      	cbz	r1, 9224 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    9218:	2201      	movs	r2, #1
    921a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    921e:	4a11      	ldr	r2, [pc, #68]	; (9264 <nrfx_gpiote_trigger_enable+0x8c>)
    9220:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    9224:	b003      	add	sp, #12
    9226:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9228:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    922c:	2b04      	cmp	r3, #4
    922e:	d012      	beq.n	9256 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    9230:	2b05      	cmp	r3, #5
    9232:	d012      	beq.n	925a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9234:	a801      	add	r0, sp, #4
    9236:	9401      	str	r4, [sp, #4]
    9238:	f7ff fdd8 	bl	8dec <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    923c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    923e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9242:	40d9      	lsrs	r1, r3
    9244:	f001 0101 	and.w	r1, r1, #1
    9248:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    924a:	4620      	mov	r0, r4
}
    924c:	b003      	add	sp, #12
    924e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    9252:	f004 bf02 	b.w	e05a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    9256:	2103      	movs	r1, #3
    9258:	e7f7      	b.n	924a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    925a:	2102      	movs	r1, #2
    925c:	e7f5      	b.n	924a <nrfx_gpiote_trigger_enable+0x72>
    925e:	bf00      	nop
    9260:	20000164 	.word	0x20000164
    9264:	40006000 	.word	0x40006000

00009268 <nrfx_gpiote_trigger_disable>:
{
    9268:	b508      	push	{r3, lr}
    926a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    926c:	f7ff fdcc 	bl	8e08 <pin_in_use_by_te>
    9270:	b1c0      	cbz	r0, 92a4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9272:	f102 0108 	add.w	r1, r2, #8
    9276:	4b0e      	ldr	r3, [pc, #56]	; (92b0 <nrfx_gpiote_trigger_disable+0x48>)
    9278:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    927c:	0799      	lsls	r1, r3, #30
    927e:	d411      	bmi.n	92a4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9280:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    9282:	2201      	movs	r2, #1
    9284:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    9286:	009b      	lsls	r3, r3, #2
    9288:	490a      	ldr	r1, [pc, #40]	; (92b4 <nrfx_gpiote_trigger_disable+0x4c>)
    928a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    928e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    9292:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    9296:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    929a:	f022 0203 	bic.w	r2, r2, #3
    929e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    92a2:	bd08      	pop	{r3, pc}
    92a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    92a8:	2100      	movs	r1, #0
    92aa:	4610      	mov	r0, r2
    92ac:	f004 bed5 	b.w	e05a <nrf_gpio_cfg_sense_set>
    92b0:	20000164 	.word	0x20000164
    92b4:	40006000 	.word	0x40006000

000092b8 <nrfx_gpiote_pin_uninit>:
{
    92b8:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    92ba:	4b0e      	ldr	r3, [pc, #56]	; (92f4 <nrfx_gpiote_pin_uninit+0x3c>)
    92bc:	f100 0208 	add.w	r2, r0, #8
{
    92c0:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    92c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    92c6:	07db      	lsls	r3, r3, #31
    92c8:	d511      	bpl.n	92ee <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    92ca:	f7ff ffcd 	bl	9268 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    92ce:	4620      	mov	r0, r4
    92d0:	f7ff fdec 	bl	8eac <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    92d4:	a801      	add	r0, sp, #4
    92d6:	9401      	str	r4, [sp, #4]
    92d8:	f7ff fd88 	bl	8dec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    92dc:	9b01      	ldr	r3, [sp, #4]
    92de:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    92e2:	2202      	movs	r2, #2
    92e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    92e8:	4803      	ldr	r0, [pc, #12]	; (92f8 <nrfx_gpiote_pin_uninit+0x40>)
}
    92ea:	b002      	add	sp, #8
    92ec:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    92ee:	4803      	ldr	r0, [pc, #12]	; (92fc <nrfx_gpiote_pin_uninit+0x44>)
    92f0:	e7fb      	b.n	92ea <nrfx_gpiote_pin_uninit+0x32>
    92f2:	bf00      	nop
    92f4:	20000164 	.word	0x20000164
    92f8:	0bad0000 	.word	0x0bad0000
    92fc:	0bad0004 	.word	0x0bad0004

00009300 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    9300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9304:	4b68      	ldr	r3, [pc, #416]	; (94a8 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    9306:	4869      	ldr	r0, [pc, #420]	; (94ac <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9308:	4969      	ldr	r1, [pc, #420]	; (94b0 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    930a:	2600      	movs	r6, #0
{
    930c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    930e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9310:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9312:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    9314:	b135      	cbz	r5, 9324 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    9316:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    931a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    931c:	bf1e      	ittt	ne
    931e:	601c      	strne	r4, [r3, #0]
    9320:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    9322:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9324:	3304      	adds	r3, #4
    9326:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    9328:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    932c:	d1f1      	bne.n	9312 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    932e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 94ac <nrfx_gpiote_irq_handler+0x1ac>
    9332:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    9336:	2b00      	cmp	r3, #0
    9338:	f000 8099 	beq.w	946e <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    933c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9340:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    9344:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    9346:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    934a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    934e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    9350:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    9354:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    9358:	f10d 0a10 	add.w	sl, sp, #16
    935c:	ea4f 1348 	mov.w	r3, r8, lsl #5
    9360:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    9362:	f04f 0b01 	mov.w	fp, #1
    9366:	e049      	b.n	93fc <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    9368:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    936a:	4a52      	ldr	r2, [pc, #328]	; (94b4 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    936c:	fa94 f4a4 	rbit	r4, r4
    9370:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    9374:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    9376:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9378:	f104 0308 	add.w	r3, r4, #8
    937c:	9403      	str	r4, [sp, #12]
    937e:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    9382:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    9386:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    938a:	fa0b f202 	lsl.w	r2, fp, r2
    938e:	ea23 0302 	bic.w	r3, r3, r2
    9392:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9396:	a803      	add	r0, sp, #12
    9398:	f7ff fd28 	bl	8dec <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    939c:	9b03      	ldr	r3, [sp, #12]
    939e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    93a2:	08b9      	lsrs	r1, r7, #2
    93a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    93a8:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    93ac:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    93ae:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    93b0:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    93b4:	d52c      	bpl.n	9410 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    93b6:	4620      	mov	r0, r4
    93b8:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    93ba:	b2dd      	uxtb	r5, r3
    93bc:	f7ff fd2e 	bl	8e1c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    93c0:	a803      	add	r0, sp, #12
    93c2:	9403      	str	r4, [sp, #12]
    93c4:	f7ff fd12 	bl	8dec <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    93c8:	9b03      	ldr	r3, [sp, #12]
    93ca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    93ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    93d2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    93d6:	429d      	cmp	r5, r3
    93d8:	d107      	bne.n	93ea <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    93da:	2100      	movs	r1, #0
    93dc:	4620      	mov	r0, r4
    93de:	f004 fe3c 	bl	e05a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    93e2:	4629      	mov	r1, r5
    93e4:	4620      	mov	r0, r4
    93e6:	f004 fe38 	bl	e05a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    93ea:	a803      	add	r0, sp, #12
    93ec:	9403      	str	r4, [sp, #12]
    93ee:	f7ff fcfd 	bl	8dec <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    93f2:	9b03      	ldr	r3, [sp, #12]
    93f4:	fa0b f303 	lsl.w	r3, fp, r3
    93f8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    93fc:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    9400:	2c00      	cmp	r4, #0
    9402:	d1b1      	bne.n	9368 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    9404:	f1b8 0f00 	cmp.w	r8, #0
    9408:	d11d      	bne.n	9446 <nrfx_gpiote_irq_handler+0x146>
    940a:	f04f 0801 	mov.w	r8, #1
    940e:	e7a5      	b.n	935c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9410:	2b02      	cmp	r3, #2
    9412:	d10c      	bne.n	942e <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    9414:	2103      	movs	r1, #3
    9416:	4620      	mov	r0, r4
    9418:	f004 fe1f 	bl	e05a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    941c:	f005 0305 	and.w	r3, r5, #5
    9420:	2b01      	cmp	r3, #1
    9422:	d1e2      	bne.n	93ea <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    9424:	4639      	mov	r1, r7
    9426:	4620      	mov	r0, r4
    9428:	f7ff fcf8 	bl	8e1c <call_handler>
    942c:	e7dd      	b.n	93ea <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    942e:	2102      	movs	r1, #2
    9430:	4620      	mov	r0, r4
    9432:	9301      	str	r3, [sp, #4]
    9434:	f004 fe11 	bl	e05a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    9438:	2d03      	cmp	r5, #3
    943a:	d0f3      	beq.n	9424 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    943c:	9b01      	ldr	r3, [sp, #4]
    943e:	2b03      	cmp	r3, #3
    9440:	d1d3      	bne.n	93ea <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    9442:	2d02      	cmp	r5, #2
    9444:	e7ed      	b.n	9422 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    9446:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    944a:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    944e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    9452:	4919      	ldr	r1, [pc, #100]	; (94b8 <nrfx_gpiote_irq_handler+0x1b8>)
    9454:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    9458:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    945a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    945e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    9462:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    9464:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    9466:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    946a:	f47f af73 	bne.w	9354 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    946e:	2401      	movs	r4, #1
    while (mask)
    9470:	b916      	cbnz	r6, 9478 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    9472:	b007      	add	sp, #28
    9474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    9478:	fa96 f3a6 	rbit	r3, r6
    947c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    9480:	fa04 f203 	lsl.w	r2, r4, r3
    9484:	009b      	lsls	r3, r3, #2
    9486:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    948a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    948e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    9492:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    9496:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    949a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    949e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    94a2:	f7ff fcbb 	bl	8e1c <call_handler>
    94a6:	e7e3      	b.n	9470 <nrfx_gpiote_irq_handler+0x170>
    94a8:	40006100 	.word	0x40006100
    94ac:	40006000 	.word	0x40006000
    94b0:	40006120 	.word	0x40006120
    94b4:	20000164 	.word	0x20000164
    94b8:	50000300 	.word	0x50000300

000094bc <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    94bc:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    94be:	4c18      	ldr	r4, [pc, #96]	; (9520 <nrfx_power_init+0x64>)
    94c0:	7823      	ldrb	r3, [r4, #0]
    94c2:	bb53      	cbnz	r3, 951a <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    94c4:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    94c6:	f3c2 0340 	ubfx	r3, r2, #1, #1
    94ca:	0792      	lsls	r2, r2, #30
    94cc:	d512      	bpl.n	94f4 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    94ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    94d2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    94d6:	2a08      	cmp	r2, #8
    94d8:	d10b      	bne.n	94f2 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    94da:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    94de:	2b05      	cmp	r3, #5
    94e0:	d807      	bhi.n	94f2 <nrfx_power_init+0x36>
    94e2:	4a10      	ldr	r2, [pc, #64]	; (9524 <nrfx_power_init+0x68>)
    94e4:	5cd3      	ldrb	r3, [r2, r3]
    94e6:	b123      	cbz	r3, 94f2 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    94e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    94ec:	2201      	movs	r2, #1
    94ee:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    94f2:	2301      	movs	r3, #1
    94f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    94f8:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    94fc:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    94fe:	f003 0301 	and.w	r3, r3, #1
    9502:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    9506:	2000      	movs	r0, #0
    9508:	f7fa f970 	bl	37ec <arch_irq_is_enabled>
    950c:	b908      	cbnz	r0, 9512 <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    950e:	f7fa f94b 	bl	37a8 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    9512:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    9514:	4804      	ldr	r0, [pc, #16]	; (9528 <nrfx_power_init+0x6c>)
    m_initialized = true;
    9516:	7023      	strb	r3, [r4, #0]
}
    9518:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    951a:	4804      	ldr	r0, [pc, #16]	; (952c <nrfx_power_init+0x70>)
    951c:	e7fc      	b.n	9518 <nrfx_power_init+0x5c>
    951e:	bf00      	nop
    9520:	20002530 	.word	0x20002530
    9524:	00010645 	.word	0x00010645
    9528:	0bad0000 	.word	0x0bad0000
    952c:	0bad000c 	.word	0x0bad000c

00009530 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    9530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9534:	f44f 7260 	mov.w	r2, #896	; 0x380
    9538:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    953c:	4b01      	ldr	r3, [pc, #4]	; (9544 <nrfx_power_usbevt_uninit+0x14>)
    953e:	2200      	movs	r2, #0
    9540:	601a      	str	r2, [r3, #0]
}
    9542:	4770      	bx	lr
    9544:	20001ea4 	.word	0x20001ea4

00009548 <nrfx_power_usbevt_init>:
{
    9548:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    954a:	f7ff fff1 	bl	9530 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    954e:	6803      	ldr	r3, [r0, #0]
    9550:	b10b      	cbz	r3, 9556 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    9552:	4a01      	ldr	r2, [pc, #4]	; (9558 <nrfx_power_usbevt_init+0x10>)
    9554:	6013      	str	r3, [r2, #0]
}
    9556:	bd08      	pop	{r3, pc}
    9558:	20001ea4 	.word	0x20001ea4

0000955c <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    955c:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    955e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9562:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    9566:	0762      	lsls	r2, r4, #29
    9568:	d507      	bpl.n	957a <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    956a:	f44f 7084 	mov.w	r0, #264	; 0x108
    956e:	f004 fd83 	bl	e078 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    9572:	b110      	cbz	r0, 957a <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    9574:	4b1e      	ldr	r3, [pc, #120]	; (95f0 <nrfx_power_irq_handler+0x94>)
    9576:	681b      	ldr	r3, [r3, #0]
    9578:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    957a:	06a3      	lsls	r3, r4, #26
    957c:	d508      	bpl.n	9590 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    957e:	f44f 708a 	mov.w	r0, #276	; 0x114
    9582:	f004 fd79 	bl	e078 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    9586:	b118      	cbz	r0, 9590 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    9588:	4b1a      	ldr	r3, [pc, #104]	; (95f4 <nrfx_power_irq_handler+0x98>)
    958a:	2000      	movs	r0, #0
    958c:	681b      	ldr	r3, [r3, #0]
    958e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    9590:	0660      	lsls	r0, r4, #25
    9592:	d508      	bpl.n	95a6 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    9594:	f44f 708c 	mov.w	r0, #280	; 0x118
    9598:	f004 fd6e 	bl	e078 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    959c:	b118      	cbz	r0, 95a6 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    959e:	4b15      	ldr	r3, [pc, #84]	; (95f4 <nrfx_power_irq_handler+0x98>)
    95a0:	2001      	movs	r0, #1
    95a2:	681b      	ldr	r3, [r3, #0]
    95a4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    95a6:	0621      	lsls	r1, r4, #24
    95a8:	d508      	bpl.n	95bc <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    95aa:	f44f 708e 	mov.w	r0, #284	; 0x11c
    95ae:	f004 fd63 	bl	e078 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    95b2:	b118      	cbz	r0, 95bc <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    95b4:	4b10      	ldr	r3, [pc, #64]	; (95f8 <nrfx_power_irq_handler+0x9c>)
    95b6:	2000      	movs	r0, #0
    95b8:	681b      	ldr	r3, [r3, #0]
    95ba:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    95bc:	05e2      	lsls	r2, r4, #23
    95be:	d508      	bpl.n	95d2 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    95c0:	f44f 7090 	mov.w	r0, #288	; 0x120
    95c4:	f004 fd58 	bl	e078 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    95c8:	b118      	cbz	r0, 95d2 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    95ca:	4b0b      	ldr	r3, [pc, #44]	; (95f8 <nrfx_power_irq_handler+0x9c>)
    95cc:	2001      	movs	r0, #1
    95ce:	681b      	ldr	r3, [r3, #0]
    95d0:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    95d2:	05a3      	lsls	r3, r4, #22
    95d4:	d50a      	bpl.n	95ec <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    95d6:	f44f 7092 	mov.w	r0, #292	; 0x124
    95da:	f004 fd4d 	bl	e078 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    95de:	b128      	cbz	r0, 95ec <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    95e0:	4b05      	ldr	r3, [pc, #20]	; (95f8 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    95e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    95e6:	681b      	ldr	r3, [r3, #0]
    95e8:	2002      	movs	r0, #2
    95ea:	4718      	bx	r3
}
    95ec:	bd10      	pop	{r4, pc}
    95ee:	bf00      	nop
    95f0:	20001eac 	.word	0x20001eac
    95f4:	20001ea8 	.word	0x20001ea8
    95f8:	20001ea4 	.word	0x20001ea4

000095fc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    95fc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    95fe:	4801      	ldr	r0, [pc, #4]	; (9604 <nrfx_ppi_channel_alloc+0x8>)
    9600:	f7ff bafa 	b.w	8bf8 <nrfx_flag32_alloc>
    9604:	200001e0 	.word	0x200001e0

00009608 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    9608:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    960a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    960e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    9610:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    9612:	6002      	str	r2, [r0, #0]
}
    9614:	4802      	ldr	r0, [pc, #8]	; (9620 <nrf_gpio_pin_port_decode+0x18>)
    9616:	bf18      	it	ne
    9618:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    961c:	4770      	bx	lr
    961e:	bf00      	nop
    9620:	50000300 	.word	0x50000300

00009624 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    9624:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    9628:	7907      	ldrb	r7, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    962a:	4c52      	ldr	r4, [pc, #328]	; (9774 <nrfx_spi_init+0x150>)
    962c:	f04f 0c28 	mov.w	ip, #40	; 0x28
    9630:	fb0c fc07 	mul.w	ip, ip, r7
{
    9634:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9636:	eb04 000c 	add.w	r0, r4, ip
    963a:	7f05      	ldrb	r5, [r0, #28]
    963c:	2d00      	cmp	r5, #0
    963e:	f040 8096 	bne.w	976e <nrfx_spi_init+0x14a>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    9642:	6835      	ldr	r5, [r6, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    9644:	f844 200c 	str.w	r2, [r4, ip]
    p_cb->p_context = p_context;
    9648:	6043      	str	r3, [r0, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    964a:	7bcb      	ldrb	r3, [r1, #15]
    964c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    9650:	78cb      	ldrb	r3, [r1, #3]
    9652:	7783      	strb	r3, [r0, #30]
    p_cb->orc = p_config->orc;
    9654:	794b      	ldrb	r3, [r1, #5]
    9656:	77c3      	strb	r3, [r0, #31]
    if (!p_config->skip_gpio_cfg)
    9658:	7bcb      	ldrb	r3, [r1, #15]
    965a:	2b00      	cmp	r3, #0
    965c:	d140      	bne.n	96e0 <nrfx_spi_init+0xbc>
    if (value == 0)
    965e:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
    9660:	7808      	ldrb	r0, [r1, #0]
    9662:	2b01      	cmp	r3, #1
    9664:	d87a      	bhi.n	975c <nrfx_spi_init+0x138>
        nrf_gpio_pin_clear(pin_number);
    9666:	f004 fd43 	bl	e0f0 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    966a:	780b      	ldrb	r3, [r1, #0]
    966c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    966e:	a801      	add	r0, sp, #4
    9670:	f7ff ffca 	bl	9608 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9674:	9b01      	ldr	r3, [sp, #4]
    9676:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    967a:	2201      	movs	r2, #1
    967c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    9680:	7848      	ldrb	r0, [r1, #1]
    9682:	28ff      	cmp	r0, #255	; 0xff
    9684:	d00c      	beq.n	96a0 <nrfx_spi_init+0x7c>
        nrf_gpio_pin_clear(pin_number);
    9686:	f004 fd33 	bl	e0f0 <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
    968a:	784b      	ldrb	r3, [r1, #1]
    968c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    968e:	a801      	add	r0, sp, #4
    9690:	f7ff ffba 	bl	9608 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9694:	9b01      	ldr	r3, [sp, #4]
    9696:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    969a:	2203      	movs	r2, #3
    969c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    96a0:	788b      	ldrb	r3, [r1, #2]
    96a2:	2bff      	cmp	r3, #255	; 0xff
    96a4:	d00c      	beq.n	96c0 <nrfx_spi_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    96a6:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
    96a8:	f891 800e 	ldrb.w	r8, [r1, #14]
    96ac:	9301      	str	r3, [sp, #4]
    96ae:	f7ff ffab 	bl	9608 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    96b2:	9b01      	ldr	r3, [sp, #4]
    96b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    96b8:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    96bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    96c0:	78c8      	ldrb	r0, [r1, #3]
    96c2:	28ff      	cmp	r0, #255	; 0xff
    96c4:	d00c      	beq.n	96e0 <nrfx_spi_init+0xbc>
        nrf_gpio_pin_set(pin_number);
    96c6:	f004 fd06 	bl	e0d6 <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
    96ca:	78cb      	ldrb	r3, [r1, #3]
    96cc:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    96ce:	a801      	add	r0, sp, #4
    96d0:	f7ff ff9a 	bl	9608 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    96d4:	9b01      	ldr	r3, [sp, #4]
    96d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    96da:	2203      	movs	r2, #3
    96dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    96e0:	7c0b      	ldrb	r3, [r1, #16]
    96e2:	b993      	cbnz	r3, 970a <nrfx_spi_init+0xe6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    96e4:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    96e6:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    96e8:	2bff      	cmp	r3, #255	; 0xff
    96ea:	bf18      	it	ne
    96ec:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    96ee:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
    96f0:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
    96f4:	bf08      	it	eq
    96f6:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
    96fa:	2bff      	cmp	r3, #255	; 0xff
    96fc:	bf08      	it	eq
    96fe:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
    9702:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
    9706:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    970a:	688b      	ldr	r3, [r1, #8]
    970c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    9710:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    9712:	7b0a      	ldrb	r2, [r1, #12]
    9714:	3b00      	subs	r3, #0
    9716:	bf18      	it	ne
    9718:	2301      	movne	r3, #1
    switch (spi_mode)
    971a:	2a02      	cmp	r2, #2
    971c:	d021      	beq.n	9762 <nrfx_spi_init+0x13e>
    971e:	2a03      	cmp	r2, #3
    9720:	d022      	beq.n	9768 <nrfx_spi_init+0x144>
    9722:	2a01      	cmp	r2, #1
    9724:	d101      	bne.n	972a <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    9726:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    972a:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    972e:	2301      	movs	r3, #1
    9730:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    9734:	2328      	movs	r3, #40	; 0x28
    9736:	437b      	muls	r3, r7
    9738:	58e3      	ldr	r3, [r4, r3]
    973a:	b123      	cbz	r3, 9746 <nrfx_spi_init+0x122>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    973c:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    973e:	f340 3007 	sbfx	r0, r0, #12, #8
    9742:	f7fa f831 	bl	37a8 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    9746:	2328      	movs	r3, #40	; 0x28
    9748:	fb03 4407 	mla	r4, r3, r7, r4
    974c:	2300      	movs	r3, #0
    974e:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    9750:	4809      	ldr	r0, [pc, #36]	; (9778 <nrfx_spi_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    9752:	2301      	movs	r3, #1
    9754:	7723      	strb	r3, [r4, #28]
}
    9756:	b002      	add	sp, #8
    9758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
    975c:	f004 fcbb 	bl	e0d6 <nrf_gpio_pin_set>
    9760:	e783      	b.n	966a <nrfx_spi_init+0x46>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    9762:	f043 0304 	orr.w	r3, r3, #4
        break;
    9766:	e7e0      	b.n	972a <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    9768:	f043 0306 	orr.w	r3, r3, #6
        break;
    976c:	e7dd      	b.n	972a <nrfx_spi_init+0x106>
        return err_code;
    976e:	4803      	ldr	r0, [pc, #12]	; (977c <nrfx_spi_init+0x158>)
    9770:	e7f1      	b.n	9756 <nrfx_spi_init+0x132>
    9772:	bf00      	nop
    9774:	20001eb0 	.word	0x20001eb0
    9778:	0bad0000 	.word	0x0bad0000
    977c:	0bad0005 	.word	0x0bad0005

00009780 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    9780:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    9782:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
    9784:	4c19      	ldr	r4, [pc, #100]	; (97ec <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    9786:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    9788:	2328      	movs	r3, #40	; 0x28
    978a:	4373      	muls	r3, r6
    978c:	58e3      	ldr	r3, [r4, r3]
    978e:	b133      	cbz	r3, 979e <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    9790:	f345 3007 	sbfx	r0, r5, #12, #8
    9794:	f7fa f816 	bl	37c4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    9798:	2304      	movs	r3, #4
    979a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    979e:	2300      	movs	r3, #0
    97a0:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
    97a4:	2328      	movs	r3, #40	; 0x28
    97a6:	fb03 4306 	mla	r3, r3, r6, r4
    97aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    97ae:	b9bb      	cbnz	r3, 97e0 <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
    97b0:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
    97b4:	f004 fc81 	bl	e0ba <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
    97b8:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    97bc:	1c42      	adds	r2, r0, #1
    97be:	d001      	beq.n	97c4 <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
    97c0:	f004 fc7b 	bl	e0ba <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
    97c4:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    97c8:	1c43      	adds	r3, r0, #1
    97ca:	d001      	beq.n	97d0 <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
    97cc:	f004 fc75 	bl	e0ba <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    97d0:	2328      	movs	r3, #40	; 0x28
    97d2:	fb03 4306 	mla	r3, r3, r6, r4
    97d6:	7f98      	ldrb	r0, [r3, #30]
    97d8:	28ff      	cmp	r0, #255	; 0xff
    97da:	d001      	beq.n	97e0 <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
    97dc:	f004 fc6d 	bl	e0ba <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    97e0:	2328      	movs	r3, #40	; 0x28
    97e2:	fb03 4406 	mla	r4, r3, r6, r4
    97e6:	2300      	movs	r3, #0
    97e8:	7723      	strb	r3, [r4, #28]
}
    97ea:	bd70      	pop	{r4, r5, r6, pc}
    97ec:	20001eb0 	.word	0x20001eb0

000097f0 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    97f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    97f4:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    97f6:	4c39      	ldr	r4, [pc, #228]	; (98dc <nrfx_spi_xfer+0xec>)
    97f8:	2328      	movs	r3, #40	; 0x28
    97fa:	437b      	muls	r3, r7
{
    97fc:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
    97fe:	18e2      	adds	r2, r4, r3
{
    9800:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
    9802:	7f51      	ldrb	r1, [r2, #29]
{
    9804:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
    9806:	2900      	cmp	r1, #0
    9808:	d166      	bne.n	98d8 <nrfx_spi_xfer+0xe8>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    980a:	58e3      	ldr	r3, [r4, r3]
    980c:	b10b      	cbz	r3, 9812 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
    980e:	2301      	movs	r3, #1
    9810:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    9812:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    9816:	2528      	movs	r5, #40	; 0x28
    9818:	fb05 4507 	mla	r5, r5, r7, r4
    981c:	f105 0c0c 	add.w	ip, r5, #12
    9820:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    9824:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
    9826:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    9828:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
    982a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    982e:	d001      	beq.n	9834 <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
    9830:	f004 fc5e 	bl	e0f0 <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    9834:	2328      	movs	r3, #40	; 0x28
    9836:	f1b8 0f00 	cmp.w	r8, #0
    983a:	d006      	beq.n	984a <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
    983c:	fb03 4307 	mla	r3, r3, r7, r4
    9840:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    9842:	4827      	ldr	r0, [pc, #156]	; (98e0 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
    9844:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    984a:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
    984e:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
    9852:	2204      	movs	r2, #4
    9854:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
    9858:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    985c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
    9860:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    nrf_spi_txd_set(p_spi,
    9864:	6872      	ldr	r2, [r6, #4]
    9866:	b19a      	cbz	r2, 9890 <nrfx_spi_xfer+0xa0>
    9868:	6833      	ldr	r3, [r6, #0]
    986a:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    986c:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    9870:	6873      	ldr	r3, [r6, #4]
    9872:	2b01      	cmp	r3, #1
    9874:	d90e      	bls.n	9894 <nrfx_spi_xfer+0xa4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    9876:	6833      	ldr	r3, [r6, #0]
    9878:	785b      	ldrb	r3, [r3, #1]
    987a:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
    987e:	2328      	movs	r3, #40	; 0x28
    9880:	437b      	muls	r3, r7
    9882:	58e6      	ldr	r6, [r4, r3]
    9884:	b176      	cbz	r6, 98a4 <nrfx_spi_xfer+0xb4>
    p_reg->INTENSET = mask;
    9886:	2304      	movs	r3, #4
    9888:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    988c:	4815      	ldr	r0, [pc, #84]	; (98e4 <nrfx_spi_xfer+0xf4>)
    988e:	e7da      	b.n	9846 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
    9890:	7fdb      	ldrb	r3, [r3, #31]
    9892:	e7eb      	b.n	986c <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
    9894:	68f3      	ldr	r3, [r6, #12]
    9896:	2b01      	cmp	r3, #1
    9898:	d9f1      	bls.n	987e <nrfx_spi_xfer+0x8e>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    989a:	2328      	movs	r3, #40	; 0x28
    989c:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
    98a0:	7fdb      	ldrb	r3, [r3, #31]
    98a2:	e7ea      	b.n	987a <nrfx_spi_xfer+0x8a>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    98a4:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    98a8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    98ac:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    98b0:	2b00      	cmp	r3, #0
    98b2:	d0fb      	beq.n	98ac <nrfx_spi_xfer+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    98b4:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    98b8:	4628      	mov	r0, r5
    98ba:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    98be:	f004 fc24 	bl	e10a <transfer_byte>
    98c2:	2800      	cmp	r0, #0
    98c4:	d1f2      	bne.n	98ac <nrfx_spi_xfer+0xbc>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    98c6:	2328      	movs	r3, #40	; 0x28
    98c8:	fb03 4407 	mla	r4, r3, r7, r4
    98cc:	7fa0      	ldrb	r0, [r4, #30]
    98ce:	28ff      	cmp	r0, #255	; 0xff
    98d0:	d0dc      	beq.n	988c <nrfx_spi_xfer+0x9c>
        nrf_gpio_pin_set(pin_number);
    98d2:	f004 fc00 	bl	e0d6 <nrf_gpio_pin_set>
    98d6:	e7d9      	b.n	988c <nrfx_spi_xfer+0x9c>
        return err_code;
    98d8:	4803      	ldr	r0, [pc, #12]	; (98e8 <nrfx_spi_xfer+0xf8>)
    98da:	e7b4      	b.n	9846 <nrfx_spi_xfer+0x56>
    98dc:	20001eb0 	.word	0x20001eb0
    98e0:	0bad0003 	.word	0x0bad0003
    98e4:	0bad0000 	.word	0x0bad0000
    98e8:	0bad000b 	.word	0x0bad000b

000098ec <nrfx_spi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    98ec:	b510      	push	{r4, lr}
    98ee:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    98f2:	2300      	movs	r3, #0
    98f4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
    98f8:	490a      	ldr	r1, [pc, #40]	; (9924 <nrfx_spi_1_irq_handler+0x38>)
    98fa:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    98fe:	f004 fc04 	bl	e10a <transfer_byte>
    9902:	b968      	cbnz	r0, 9920 <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    9904:	7f88      	ldrb	r0, [r1, #30]
    9906:	28ff      	cmp	r0, #255	; 0xff
    9908:	d001      	beq.n	990e <nrfx_spi_1_irq_handler+0x22>
    990a:	f004 fbe4 	bl	e0d6 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
    990e:	2300      	movs	r3, #0
    9910:	774b      	strb	r3, [r1, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    9912:	720b      	strb	r3, [r1, #8]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
    9914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    9918:	e9d1 3100 	ldrd	r3, r1, [r1]
    991c:	4802      	ldr	r0, [pc, #8]	; (9928 <nrfx_spi_1_irq_handler+0x3c>)
    991e:	4718      	bx	r3
}
    9920:	bd10      	pop	{r4, pc}
    9922:	bf00      	nop
    9924:	20001eb0 	.word	0x20001eb0
    9928:	20001eb8 	.word	0x20001eb8

0000992c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    992c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    992e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    9932:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    9934:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    9936:	6002      	str	r2, [r0, #0]
}
    9938:	4802      	ldr	r0, [pc, #8]	; (9944 <nrf_gpio_pin_port_decode+0x18>)
    993a:	bf18      	it	ne
    993c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    9940:	4770      	bx	lr
    9942:	bf00      	nop
    9944:	50000300 	.word	0x50000300

00009948 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    9948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    994c:	4c7a      	ldr	r4, [pc, #488]	; (9b38 <nrfx_spim_init+0x1f0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    994e:	7905      	ldrb	r5, [r0, #4]
{
    9950:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9952:	eb04 1045 	add.w	r0, r4, r5, lsl #5
    9956:	7f00      	ldrb	r0, [r0, #28]
    9958:	2800      	cmp	r0, #0
    995a:	f040 80e9 	bne.w	9b30 <nrfx_spim_init+0x1e8>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
    995e:	2d00      	cmp	r5, #0
    9960:	f040 80e8 	bne.w	9b34 <nrfx_spim_init+0x1ec>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    9964:	6837      	ldr	r7, [r6, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    9966:	e9c4 2300 	strd	r2, r3, [r4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    996a:	7cca      	ldrb	r2, [r1, #19]
    996c:	7fa3      	ldrb	r3, [r4, #30]
    996e:	f362 0300 	bfi	r3, r2, #0, #1
    9972:	77a3      	strb	r3, [r4, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    9974:	790a      	ldrb	r2, [r1, #4]
    9976:	b2db      	uxtb	r3, r3
    9978:	f362 0341 	bfi	r3, r2, #1, #1
    997c:	77a3      	strb	r3, [r4, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
    997e:	7c4a      	ldrb	r2, [r1, #17]
    9980:	b2db      	uxtb	r3, r3
    9982:	f362 0382 	bfi	r3, r2, #2, #1
    9986:	77a3      	strb	r3, [r4, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
    9988:	78cb      	ldrb	r3, [r1, #3]
    998a:	77e3      	strb	r3, [r4, #31]
    if (!p_config->skip_gpio_cfg)
    998c:	7ccb      	ldrb	r3, [r1, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    998e:	f8d6 8000 	ldr.w	r8, [r6]
    if (!p_config->skip_gpio_cfg)
    9992:	2b00      	cmp	r3, #0
    9994:	d15e      	bne.n	9a54 <nrfx_spim_init+0x10c>
                    : NRF_GPIO_PIN_S0S1;
    9996:	688b      	ldr	r3, [r1, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
    9998:	7808      	ldrb	r0, [r1, #0]
                    : NRF_GPIO_PIN_S0S1;
    999a:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
    999e:	7b0b      	ldrb	r3, [r1, #12]
    99a0:	bf08      	it	eq
    99a2:	2503      	moveq	r5, #3
    99a4:	2b01      	cmp	r3, #1
    99a6:	f200 80ad 	bhi.w	9b04 <nrfx_spim_init+0x1bc>
        nrf_gpio_pin_clear(pin_number);
    99aa:	f004 fbee 	bl	e18a <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    99ae:	780b      	ldrb	r3, [r1, #0]
    99b0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    99b2:	a801      	add	r0, sp, #4
    99b4:	f7ff ffba 	bl	992c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    99b8:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    99ba:	022d      	lsls	r5, r5, #8
    reg->PIN_CNF[pin_number] = cnf;
    99bc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    99c0:	f045 0201 	orr.w	r2, r5, #1
    reg->PIN_CNF[pin_number] = cnf;
    99c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    99c8:	7848      	ldrb	r0, [r1, #1]
    99ca:	28ff      	cmp	r0, #255	; 0xff
    99cc:	d00d      	beq.n	99ea <nrfx_spim_init+0xa2>
        nrf_gpio_pin_clear(pin_number);
    99ce:	f004 fbdc 	bl	e18a <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
    99d2:	784b      	ldrb	r3, [r1, #1]
    99d4:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    99d6:	a801      	add	r0, sp, #4
    99d8:	f7ff ffa8 	bl	992c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    99dc:	9b01      	ldr	r3, [sp, #4]
    99de:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    99e2:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    99e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    99ea:	788b      	ldrb	r3, [r1, #2]
    99ec:	2bff      	cmp	r3, #255	; 0xff
    99ee:	d00c      	beq.n	9a0a <nrfx_spim_init+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    99f0:	a801      	add	r0, sp, #4
                         p_config->miso_pull,
    99f2:	f891 900e 	ldrb.w	r9, [r1, #14]
            nrf_gpio_cfg(p_config->miso_pin,
    99f6:	9301      	str	r3, [sp, #4]
    99f8:	f7ff ff98 	bl	992c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    99fc:	9b01      	ldr	r3, [sp, #4]
    99fe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9a02:	ea45 0289 	orr.w	r2, r5, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    9a06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    9a0a:	78c8      	ldrb	r0, [r1, #3]
    9a0c:	28ff      	cmp	r0, #255	; 0xff
    9a0e:	d010      	beq.n	9a32 <nrfx_spim_init+0xea>
    if (value == 0)
    9a10:	790b      	ldrb	r3, [r1, #4]
    9a12:	2b00      	cmp	r3, #0
    9a14:	d079      	beq.n	9b0a <nrfx_spim_init+0x1c2>
        nrf_gpio_pin_clear(pin_number);
    9a16:	f004 fbb8 	bl	e18a <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
    9a1a:	78cb      	ldrb	r3, [r1, #3]
    9a1c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9a1e:	a801      	add	r0, sp, #4
    9a20:	f7ff ff84 	bl	992c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9a24:	9b01      	ldr	r3, [sp, #4]
    9a26:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9a2a:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    9a2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    9a32:	7bc8      	ldrb	r0, [r1, #15]
    9a34:	28ff      	cmp	r0, #255	; 0xff
    9a36:	d00d      	beq.n	9a54 <nrfx_spim_init+0x10c>
        nrf_gpio_pin_set(pin_number);
    9a38:	f004 fb9a 	bl	e170 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
    9a3c:	7bcb      	ldrb	r3, [r1, #15]
    9a3e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9a40:	a801      	add	r0, sp, #4
    9a42:	f7ff ff73 	bl	992c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9a46:	9b01      	ldr	r3, [sp, #4]
    9a48:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9a4c:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    9a50:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    9a54:	7d0b      	ldrb	r3, [r1, #20]
    9a56:	bb5b      	cbnz	r3, 9ab0 <nrfx_spim_init+0x168>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    9a58:	784b      	ldrb	r3, [r1, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    9a5a:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    9a5c:	2bff      	cmp	r3, #255	; 0xff
    9a5e:	bf18      	it	ne
    9a60:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    9a62:	788b      	ldrb	r3, [r1, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    9a64:	f8c8 0508 	str.w	r0, [r8, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    9a68:	bf08      	it	eq
    9a6a:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    9a6e:	2bff      	cmp	r3, #255	; 0xff
    9a70:	bf08      	it	eq
    9a72:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
    9a76:	f8c8 250c 	str.w	r2, [r8, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    9a7a:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    9a7e:	7933      	ldrb	r3, [r6, #4]
    9a80:	b9b3      	cbnz	r3, 9ab0 <nrfx_spim_init+0x168>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
    9a82:	78cb      	ldrb	r3, [r1, #3]
    9a84:	2bff      	cmp	r3, #255	; 0xff
    9a86:	d043      	beq.n	9b10 <nrfx_spim_init+0x1c8>
    9a88:	7c4a      	ldrb	r2, [r1, #17]
    9a8a:	2a00      	cmp	r2, #0
    9a8c:	d040      	beq.n	9b10 <nrfx_spim_init+0x1c8>
                                    (p_config->ss_active_high == true
    9a8e:	7908      	ldrb	r0, [r1, #4]
                nrf_spim_csn_configure(p_spim,
    9a90:	7c8a      	ldrb	r2, [r1, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
    9a92:	f8c8 3514 	str.w	r3, [r8, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    9a96:	f8c8 0568 	str.w	r0, [r8, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    9a9a:	f8c8 2564 	str.w	r2, [r8, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    9a9e:	7933      	ldrb	r3, [r6, #4]
    9aa0:	b933      	cbnz	r3, 9ab0 <nrfx_spim_init+0x168>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    9aa2:	7bcb      	ldrb	r3, [r1, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
    9aa4:	2bff      	cmp	r3, #255	; 0xff
    9aa6:	bf08      	it	eq
    9aa8:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
    9aac:	f8c8 356c 	str.w	r3, [r8, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
    9ab0:	7c0b      	ldrb	r3, [r1, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
    9ab2:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    9ab6:	688b      	ldr	r3, [r1, #8]
    9ab8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    9abc:	7b4b      	ldrb	r3, [r1, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    9abe:	7b0a      	ldrb	r2, [r1, #12]
    9ac0:	3b00      	subs	r3, #0
    9ac2:	bf18      	it	ne
    9ac4:	2301      	movne	r3, #1
    switch (spi_mode)
    9ac6:	2a02      	cmp	r2, #2
    9ac8:	d02c      	beq.n	9b24 <nrfx_spim_init+0x1dc>
    9aca:	2a03      	cmp	r2, #3
    9acc:	d02d      	beq.n	9b2a <nrfx_spim_init+0x1e2>
    9ace:	2a01      	cmp	r2, #1
    9ad0:	d101      	bne.n	9ad6 <nrfx_spim_init+0x18e>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    9ad2:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    9ad6:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    9ada:	798b      	ldrb	r3, [r1, #6]
    9adc:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    9ae0:	2307      	movs	r3, #7
    9ae2:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    9ae6:	6823      	ldr	r3, [r4, #0]
    9ae8:	b123      	cbz	r3, 9af4 <nrfx_spim_init+0x1ac>
    9aea:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    9aec:	f340 3007 	sbfx	r0, r0, #12, #8
    9af0:	f7f9 fe5a 	bl	37a8 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    9af4:	2300      	movs	r3, #0
    9af6:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    9af8:	4810      	ldr	r0, [pc, #64]	; (9b3c <nrfx_spim_init+0x1f4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    9afa:	2301      	movs	r3, #1
    9afc:	7723      	strb	r3, [r4, #28]
}
    9afe:	b003      	add	sp, #12
    9b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(pin_number);
    9b04:	f004 fb34 	bl	e170 <nrf_gpio_pin_set>
    9b08:	e751      	b.n	99ae <nrfx_spim_init+0x66>
    9b0a:	f004 fb31 	bl	e170 <nrf_gpio_pin_set>
    9b0e:	e784      	b.n	9a1a <nrfx_spim_init+0xd2>
    p_reg->PSEL.CSN = pin;
    9b10:	f04f 33ff 	mov.w	r3, #4294967295
    9b14:	f8c8 3514 	str.w	r3, [r8, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    9b18:	2300      	movs	r3, #0
    9b1a:	f8c8 3568 	str.w	r3, [r8, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    9b1e:	f8c8 3564 	str.w	r3, [r8, #1380]	; 0x564
}
    9b22:	e7bc      	b.n	9a9e <nrfx_spim_init+0x156>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    9b24:	f043 0304 	orr.w	r3, r3, #4
        break;
    9b28:	e7d5      	b.n	9ad6 <nrfx_spim_init+0x18e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    9b2a:	f043 0306 	orr.w	r3, r3, #6
        break;
    9b2e:	e7d2      	b.n	9ad6 <nrfx_spim_init+0x18e>
        return err_code;
    9b30:	4803      	ldr	r0, [pc, #12]	; (9b40 <nrfx_spim_init+0x1f8>)
    9b32:	e7e4      	b.n	9afe <nrfx_spim_init+0x1b6>
        return err_code;
    9b34:	4803      	ldr	r0, [pc, #12]	; (9b44 <nrfx_spim_init+0x1fc>)
    9b36:	e7e2      	b.n	9afe <nrfx_spim_init+0x1b6>
    9b38:	20001edc 	.word	0x20001edc
    9b3c:	0bad0000 	.word	0x0bad0000
    9b40:	0bad0005 	.word	0x0bad0005
    9b44:	0bad0003 	.word	0x0bad0003

00009b48 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    9b48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    9b4c:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    9b4e:	4d2a      	ldr	r5, [pc, #168]	; (9bf8 <nrfx_spim_uninit+0xb0>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    9b50:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    9b52:	015e      	lsls	r6, r3, #5
    9b54:	eb05 1843 	add.w	r8, r5, r3, lsl #5
    9b58:	59ab      	ldr	r3, [r5, r6]
{
    9b5a:	4607      	mov	r7, r0
    if (p_cb->handler)
    9b5c:	b1cb      	cbz	r3, 9b92 <nrfx_spim_uninit+0x4a>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    9b5e:	f344 3007 	sbfx	r0, r4, #12, #8
    9b62:	f7f9 fe2f 	bl	37c4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    9b66:	4b25      	ldr	r3, [pc, #148]	; (9bfc <nrfx_spim_uninit+0xb4>)
    9b68:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    9b6c:	f898 301d 	ldrb.w	r3, [r8, #29]
    9b70:	b17b      	cbz	r3, 9b92 <nrfx_spim_uninit+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9b72:	2301      	movs	r3, #1
    9b74:	6163      	str	r3, [r4, #20]
    9b76:	f04f 0864 	mov.w	r8, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9b7a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    9b7e:	b92b      	cbnz	r3, 9b8c <nrfx_spim_uninit+0x44>
    9b80:	2001      	movs	r0, #1
    9b82:	f004 f9e1 	bl	df48 <nrfx_busy_wait>
    9b86:	f1b8 0801 	subs.w	r8, r8, #1
    9b8a:	d1f6      	bne.n	9b7a <nrfx_spim_uninit+0x32>
    p_cb->transfer_in_progress = false;
    9b8c:	19ab      	adds	r3, r5, r6
    9b8e:	2200      	movs	r2, #0
    9b90:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    9b92:	2300      	movs	r3, #0
    9b94:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    9b98:	19ab      	adds	r3, r5, r6
    9b9a:	7f9b      	ldrb	r3, [r3, #30]
    9b9c:	07db      	lsls	r3, r3, #31
    9b9e:	d41f      	bmi.n	9be0 <nrfx_spim_uninit+0x98>
    return p_reg->PSEL.SCK;
    9ba0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    9ba4:	f004 fafe 	bl	e1a4 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    9ba8:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    9bac:	f004 fafa 	bl	e1a4 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    9bb0:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    9bb4:	f004 faf6 	bl	e1a4 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    9bb8:	793b      	ldrb	r3, [r7, #4]
    9bba:	b91b      	cbnz	r3, 9bc4 <nrfx_spim_uninit+0x7c>
    return p_reg->PSELDCX;
    9bbc:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
    9bc0:	f004 faf0 	bl	e1a4 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    9bc4:	19ab      	adds	r3, r5, r6
    9bc6:	7fdb      	ldrb	r3, [r3, #31]
    9bc8:	2bff      	cmp	r3, #255	; 0xff
    9bca:	d009      	beq.n	9be0 <nrfx_spim_uninit+0x98>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9bcc:	a801      	add	r0, sp, #4
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
    9bce:	9301      	str	r3, [sp, #4]
    9bd0:	f7ff feac 	bl	992c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9bd4:	9b01      	ldr	r3, [sp, #4]
    9bd6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9bda:	2202      	movs	r2, #2
    9bdc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_195)
    if (p_spim == NRF_SPIM3)
    9be0:	4b07      	ldr	r3, [pc, #28]	; (9c00 <nrfx_spim_uninit+0xb8>)
    9be2:	429c      	cmp	r4, r3
    {
        *(volatile uint32_t *)0x4002F004 = 1;
    9be4:	bf08      	it	eq
    9be6:	2301      	moveq	r3, #1

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    9be8:	4435      	add	r5, r6
        *(volatile uint32_t *)0x4002F004 = 1;
    9bea:	bf08      	it	eq
    9bec:	6063      	streq	r3, [r4, #4]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    9bee:	2300      	movs	r3, #0
    9bf0:	772b      	strb	r3, [r5, #28]
}
    9bf2:	b002      	add	sp, #8
    9bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bf8:	20001edc 	.word	0x20001edc
    9bfc:	00080152 	.word	0x00080152
    9c00:	4002f000 	.word	0x4002f000

00009c04 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    9c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    9c08:	4f54      	ldr	r7, [pc, #336]	; (9d5c <nrfx_spim_xfer+0x158>)
    9c0a:	7903      	ldrb	r3, [r0, #4]
    9c0c:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    9c10:	4615      	mov	r5, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    9c12:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    9c16:	4681      	mov	r9, r0
    9c18:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
    9c1a:	015e      	lsls	r6, r3, #5
    9c1c:	2a00      	cmp	r2, #0
    9c1e:	f040 809b 	bne.w	9d58 <nrfx_spim_xfer+0x154>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    9c22:	59ba      	ldr	r2, [r7, r6]
    9c24:	b12a      	cbz	r2, 9c32 <nrfx_spim_xfer+0x2e>
    9c26:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    9c2a:	bf04      	itt	eq
    9c2c:	2201      	moveq	r2, #1
    9c2e:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    9c32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9c36:	eb07 0c06 	add.w	ip, r7, r6
    9c3a:	f10c 0c0c 	add.w	ip, ip, #12
    9c3e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    9c42:	2101      	movs	r1, #1
    9c44:	4640      	mov	r0, r8
    9c46:	f004 fabd 	bl	e1c4 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    9c4a:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    9c4c:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    9c50:	b121      	cbz	r1, 9c5c <nrfx_spim_xfer+0x58>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    9c52:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
    9c56:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    9c5a:	d106      	bne.n	9c6a <nrfx_spim_xfer+0x66>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    9c5c:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    9c5e:	b152      	cbz	r2, 9c76 <nrfx_spim_xfer+0x72>
    9c60:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    9c64:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    9c68:	d005      	beq.n	9c76 <nrfx_spim_xfer+0x72>
        p_cb->transfer_in_progress = false;
    9c6a:	443e      	add	r6, r7
    9c6c:	2300      	movs	r3, #0
        return err_code;
    9c6e:	483c      	ldr	r0, [pc, #240]	; (9d60 <nrfx_spim_xfer+0x15c>)
        p_cb->transfer_in_progress = false;
    9c70:	7773      	strb	r3, [r6, #29]
}
    9c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    9c76:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9c78:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9c7c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9c80:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    9c84:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    9c88:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (p_spim == NRF_SPIM3)
    9c8c:	4a35      	ldr	r2, [pc, #212]	; (9d64 <nrfx_spim_xfer+0x160>)
    9c8e:	4293      	cmp	r3, r2
    9c90:	d125      	bne.n	9cde <nrfx_spim_xfer+0xda>
    m_anomaly_198_preserved_value = *((volatile uint32_t *)0x40000E00);
    9c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
        anomaly_198_enable(p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    9c96:	e9d4 0100 	ldrd	r0, r1, [r4]
    m_anomaly_198_preserved_value = *((volatile uint32_t *)0x40000E00);
    9c9a:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	; 0xe00
    9c9e:	4a32      	ldr	r2, [pc, #200]	; (9d68 <nrfx_spim_xfer+0x164>)
    9ca0:	6014      	str	r4, [r2, #0]
    if (buf_len == 0)
    9ca2:	b1e1      	cbz	r1, 9cde <nrfx_spim_xfer+0xda>
    if (block_addr >= 0x20010000)
    9ca4:	4c31      	ldr	r4, [pc, #196]	; (9d6c <nrfx_spim_xfer+0x168>)
    uint32_t block_addr      = ((uint32_t)p_buffer) & ~0x1FFF;
    9ca6:	f420 52ff 	bic.w	r2, r0, #8160	; 0x1fe0
    9caa:	f022 021f 	bic.w	r2, r2, #31
    if (block_addr >= 0x20010000)
    9cae:	42a2      	cmp	r2, r4
    9cb0:	d83b      	bhi.n	9d2a <nrfx_spim_xfer+0x126>
    uint32_t buffer_end_addr = ((uint32_t)p_buffer) + buf_len;
    9cb2:	180c      	adds	r4, r1, r0
        } while ((block_addr < buffer_end_addr) && (block_addr < 0x20012000));
    9cb4:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 9d70 <nrfx_spim_xfer+0x16c>
    uint32_t block_flag      = (1UL << ((block_addr >> 13) & 0xFFFF));
    9cb8:	f3c2 304f 	ubfx	r0, r2, #13, #16
    9cbc:	2101      	movs	r1, #1
    9cbe:	4081      	lsls	r1, r0
    uint32_t occupied_blocks = 0;
    9cc0:	2000      	movs	r0, #0
            block_addr  += 0x2000;
    9cc2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
        } while ((block_addr < buffer_end_addr) && (block_addr < 0x20012000));
    9cc6:	4294      	cmp	r4, r2
            occupied_blocks |= block_flag;
    9cc8:	ea40 0001 	orr.w	r0, r0, r1
            block_flag <<= 1;
    9ccc:	ea4f 0141 	mov.w	r1, r1, lsl #1
        } while ((block_addr < buffer_end_addr) && (block_addr < 0x20012000));
    9cd0:	d901      	bls.n	9cd6 <nrfx_spim_xfer+0xd2>
    9cd2:	4562      	cmp	r2, ip
    9cd4:	d3f5      	bcc.n	9cc2 <nrfx_spim_xfer+0xbe>
    *((volatile uint32_t *)0x40000E00) = occupied_blocks;
    9cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9cda:	f8c2 0e00 	str.w	r0, [r2, #3584]	; 0xe00
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9cde:	2200      	movs	r2, #0
    9ce0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    9ce4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    9ce8:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    9cec:	bf18      	it	ne
    9cee:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    9cf0:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    9cf4:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    9cf8:	bf18      	it	ne
    9cfa:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    9cfc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    9d00:	072a      	lsls	r2, r5, #28
    9d02:	d515      	bpl.n	9d30 <nrfx_spim_xfer+0x12c>
    if (!p_cb->handler)
    9d04:	59ba      	ldr	r2, [r7, r6]
    9d06:	b9e2      	cbnz	r2, 9d42 <nrfx_spim_xfer+0x13e>
        if (p_spim == NRF_SPIM3)
    9d08:	4a16      	ldr	r2, [pc, #88]	; (9d64 <nrfx_spim_xfer+0x160>)
    9d0a:	4293      	cmp	r3, r2
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
    9d0c:	bf02      	ittt	eq
    9d0e:	4b16      	ldreq	r3, [pc, #88]	; (9d68 <nrfx_spim_xfer+0x164>)
    9d10:	681a      	ldreq	r2, [r3, #0]
    9d12:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
        set_ss_pin_state(p_cb, false);
    9d16:	f04f 0100 	mov.w	r1, #0
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
    9d1a:	bf08      	it	eq
    9d1c:	f8c3 2e00 	streq.w	r2, [r3, #3584]	; 0xe00
        set_ss_pin_state(p_cb, false);
    9d20:	4640      	mov	r0, r8
    9d22:	f004 fa4f 	bl	e1c4 <set_ss_pin_state>
    return err_code;
    9d26:	4813      	ldr	r0, [pc, #76]	; (9d74 <nrfx_spim_xfer+0x170>)
    9d28:	e7a3      	b.n	9c72 <nrfx_spim_xfer+0x6e>
        occupied_blocks = (1UL << 8);
    9d2a:	f44f 7080 	mov.w	r0, #256	; 0x100
    9d2e:	e7d2      	b.n	9cd6 <nrfx_spim_xfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9d30:	2201      	movs	r2, #1
    9d32:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
    9d34:	59ba      	ldr	r2, [r7, r6]
    9d36:	b922      	cbnz	r2, 9d42 <nrfx_spim_xfer+0x13e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9d38:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    9d3c:	2a00      	cmp	r2, #0
    9d3e:	d0fb      	beq.n	9d38 <nrfx_spim_xfer+0x134>
    9d40:	e7e2      	b.n	9d08 <nrfx_spim_xfer+0x104>
    if (!enable)
    9d42:	f015 0f04 	tst.w	r5, #4
    9d46:	f04f 0240 	mov.w	r2, #64	; 0x40
    9d4a:	d002      	beq.n	9d52 <nrfx_spim_xfer+0x14e>
    p_reg->INTENCLR = mask;
    9d4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9d50:	e7e9      	b.n	9d26 <nrfx_spim_xfer+0x122>
    p_reg->INTENSET = mask;
    9d52:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9d56:	e7e6      	b.n	9d26 <nrfx_spim_xfer+0x122>
        return err_code;
    9d58:	4807      	ldr	r0, [pc, #28]	; (9d78 <nrfx_spim_xfer+0x174>)
    9d5a:	e78a      	b.n	9c72 <nrfx_spim_xfer+0x6e>
    9d5c:	20001edc 	.word	0x20001edc
    9d60:	0bad000a 	.word	0x0bad000a
    9d64:	4002f000 	.word	0x4002f000
    9d68:	20001ed8 	.word	0x20001ed8
    9d6c:	2000ffff 	.word	0x2000ffff
    9d70:	20012000 	.word	0x20012000
    9d74:	0bad0000 	.word	0x0bad0000
    9d78:	0bad000b 	.word	0x0bad000b

00009d7c <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    9d7c:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9d7e:	4b0f      	ldr	r3, [pc, #60]	; (9dbc <nrfx_spim_3_irq_handler+0x40>)
    9d80:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    9d84:	b1c2      	cbz	r2, 9db8 <nrfx_spim_3_irq_handler+0x3c>
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
    9d86:	4a0e      	ldr	r2, [pc, #56]	; (9dc0 <nrfx_spim_3_irq_handler+0x44>)
    set_ss_pin_state(p_cb, false);
    9d88:	4c0e      	ldr	r4, [pc, #56]	; (9dc4 <nrfx_spim_3_irq_handler+0x48>)
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
    9d8a:	6811      	ldr	r1, [r2, #0]
    9d8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9d90:	2500      	movs	r5, #0
    9d92:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
    set_ss_pin_state(p_cb, false);
    9d96:	4620      	mov	r0, r4
    9d98:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    9d9c:	4629      	mov	r1, r5
    9d9e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    9da2:	f004 fa0f 	bl	e1c4 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
    9da6:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    9da8:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    9daa:	e9d4 3100 	ldrd	r3, r1, [r4]
    9dae:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
    9db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    9db6:	4718      	bx	r3
}
    9db8:	bd70      	pop	{r4, r5, r6, pc}
    9dba:	bf00      	nop
    9dbc:	4002f000 	.word	0x4002f000
    9dc0:	20001ed8 	.word	0x20001ed8
    9dc4:	20001edc 	.word	0x20001edc

00009dc8 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9dc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9dcc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    9dd0:	2a08      	cmp	r2, #8
    9dd2:	d106      	bne.n	9de2 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9dd4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    9dd8:	2b05      	cmp	r3, #5
    9dda:	d804      	bhi.n	9de6 <nrf52_errata_187+0x1e>
    9ddc:	4a03      	ldr	r2, [pc, #12]	; (9dec <nrf52_errata_187+0x24>)
    9dde:	5cd0      	ldrb	r0, [r2, r3]
    9de0:	4770      	bx	lr
                        return false;
    9de2:	2000      	movs	r0, #0
    9de4:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9de6:	2001      	movs	r0, #1
}
    9de8:	4770      	bx	lr
    9dea:	bf00      	nop
    9dec:	00010667 	.word	0x00010667

00009df0 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9df0:	4b05      	ldr	r3, [pc, #20]	; (9e08 <ep_state_access+0x18>)
    9df2:	f010 0f80 	tst.w	r0, #128	; 0x80
    9df6:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    9dfa:	bf08      	it	eq
    9dfc:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    9dfe:	f000 000f 	and.w	r0, r0, #15
}
    9e02:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    9e06:	4770      	bx	lr
    9e08:	200020a4 	.word	0x200020a4

00009e0c <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    9e0c:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    9e0e:	4a07      	ldr	r2, [pc, #28]	; (9e2c <ev_usbreset_handler+0x20>)
    9e10:	2300      	movs	r3, #0
    9e12:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    9e14:	4a06      	ldr	r2, [pc, #24]	; (9e30 <ev_usbreset_handler+0x24>)
    9e16:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    9e18:	2301      	movs	r3, #1
    9e1a:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    9e1c:	4b05      	ldr	r3, [pc, #20]	; (9e34 <ev_usbreset_handler+0x28>)
    9e1e:	a801      	add	r0, sp, #4
    9e20:	681b      	ldr	r3, [r3, #0]
    9e22:	4798      	blx	r3
}
    9e24:	b003      	add	sp, #12
    9e26:	f85d fb04 	ldr.w	pc, [sp], #4
    9e2a:	bf00      	nop
    9e2c:	20002533 	.word	0x20002533
    9e30:	20002532 	.word	0x20002532
    9e34:	2000213c 	.word	0x2000213c

00009e38 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    9e38:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    9e3a:	4b19      	ldr	r3, [pc, #100]	; (9ea0 <ev_usbevent_handler+0x68>)
    9e3c:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    9e40:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    9e44:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    9e46:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    9e4a:	d508      	bpl.n	9e5e <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    9e4c:	4b15      	ldr	r3, [pc, #84]	; (9ea4 <ev_usbevent_handler+0x6c>)
    9e4e:	2201      	movs	r2, #1
    9e50:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    9e52:	2302      	movs	r3, #2
    9e54:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    9e56:	4b14      	ldr	r3, [pc, #80]	; (9ea8 <ev_usbevent_handler+0x70>)
    9e58:	a801      	add	r0, sp, #4
    9e5a:	681b      	ldr	r3, [r3, #0]
    9e5c:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9e5e:	05a2      	lsls	r2, r4, #22
    9e60:	d508      	bpl.n	9e74 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    9e62:	4b10      	ldr	r3, [pc, #64]	; (9ea4 <ev_usbevent_handler+0x6c>)
    9e64:	2200      	movs	r2, #0
    9e66:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    9e68:	2303      	movs	r3, #3
    9e6a:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    9e6c:	4b0e      	ldr	r3, [pc, #56]	; (9ea8 <ev_usbevent_handler+0x70>)
    9e6e:	a801      	add	r0, sp, #4
    9e70:	681b      	ldr	r3, [r3, #0]
    9e72:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    9e74:	0563      	lsls	r3, r4, #21
    9e76:	d510      	bpl.n	9e9a <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    9e78:	4b0a      	ldr	r3, [pc, #40]	; (9ea4 <ev_usbevent_handler+0x6c>)
    9e7a:	781a      	ldrb	r2, [r3, #0]
    9e7c:	b16a      	cbz	r2, 9e9a <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    9e7e:	2200      	movs	r2, #0
    9e80:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    9e82:	4b07      	ldr	r3, [pc, #28]	; (9ea0 <ev_usbevent_handler+0x68>)
    9e84:	2201      	movs	r2, #1
    9e86:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9e8a:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    9e8e:	2304      	movs	r3, #4
    9e90:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    9e92:	4b05      	ldr	r3, [pc, #20]	; (9ea8 <ev_usbevent_handler+0x70>)
    9e94:	a801      	add	r0, sp, #4
    9e96:	681b      	ldr	r3, [r3, #0]
    9e98:	4798      	blx	r3
        }
    }
}
    9e9a:	b002      	add	sp, #8
    9e9c:	bd10      	pop	{r4, pc}
    9e9e:	bf00      	nop
    9ea0:	40027000 	.word	0x40027000
    9ea4:	20002533 	.word	0x20002533
    9ea8:	2000213c 	.word	0x2000213c

00009eac <usbd_errata_187_211_begin>:
	__asm__ volatile(
    9eac:	f04f 0320 	mov.w	r3, #32
    9eb0:	f3ef 8011 	mrs	r0, BASEPRI
    9eb4:	f383 8812 	msr	BASEPRI_MAX, r3
    9eb8:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9ebc:	4b0a      	ldr	r3, [pc, #40]	; (9ee8 <usbd_errata_187_211_begin+0x3c>)
    9ebe:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    9ec2:	2203      	movs	r2, #3
    9ec4:	b961      	cbnz	r1, 9ee0 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9ec6:	f249 3175 	movw	r1, #37749	; 0x9375
    9eca:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    9ece:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9ed2:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    9ed6:	f380 8811 	msr	BASEPRI, r0
    9eda:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9ede:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    9ee0:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    9ee4:	e7f7      	b.n	9ed6 <usbd_errata_187_211_begin+0x2a>
    9ee6:	bf00      	nop
    9ee8:	4006e000 	.word	0x4006e000

00009eec <usbd_errata_187_211_end>:
	__asm__ volatile(
    9eec:	f04f 0320 	mov.w	r3, #32
    9ef0:	f3ef 8011 	mrs	r0, BASEPRI
    9ef4:	f383 8812 	msr	BASEPRI_MAX, r3
    9ef8:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9efc:	4b0a      	ldr	r3, [pc, #40]	; (9f28 <usbd_errata_187_211_end+0x3c>)
    9efe:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    9f02:	b961      	cbnz	r1, 9f1e <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9f04:	f249 3275 	movw	r2, #37749	; 0x9375
    9f08:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    9f0c:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9f10:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    9f14:	f380 8811 	msr	BASEPRI, r0
    9f18:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9f1c:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    9f1e:	2200      	movs	r2, #0
    9f20:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    9f24:	e7f6      	b.n	9f14 <usbd_errata_187_211_end+0x28>
    9f26:	bf00      	nop
    9f28:	4006e000 	.word	0x4006e000

00009f2c <nrfx_usbd_feeder_flash>:
{
    9f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f2e:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    9f30:	4f0b      	ldr	r7, [pc, #44]	; (9f60 <nrfx_usbd_feeder_flash+0x34>)
    9f32:	429a      	cmp	r2, r3
    9f34:	bf28      	it	cs
    9f36:	461a      	movcs	r2, r3
{
    9f38:	460c      	mov	r4, r1
    9f3a:	4615      	mov	r5, r2
    9f3c:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    9f3e:	6809      	ldr	r1, [r1, #0]
    9f40:	4638      	mov	r0, r7
    9f42:	f003 fbb6 	bl	d6b2 <memcpy>
    p_next->size = tx_size;
    9f46:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    9f4a:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    9f4c:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    9f4e:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    9f50:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    9f52:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    9f54:	6023      	str	r3, [r4, #0]
}
    9f56:	3800      	subs	r0, #0
    9f58:	bf18      	it	ne
    9f5a:	2001      	movne	r0, #1
    9f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f5e:	bf00      	nop
    9f60:	20001efc 	.word	0x20001efc

00009f64 <nrfx_usbd_feeder_flash_zlp>:
{
    9f64:	b570      	push	{r4, r5, r6, lr}
    9f66:	684b      	ldr	r3, [r1, #4]
    9f68:	429a      	cmp	r2, r3
    9f6a:	bf28      	it	cs
    9f6c:	461a      	movcs	r2, r3
    9f6e:	4606      	mov	r6, r0
    9f70:	460d      	mov	r5, r1
    9f72:	4614      	mov	r4, r2
    if (tx_size != 0)
    9f74:	b182      	cbz	r2, 9f98 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    9f76:	6809      	ldr	r1, [r1, #0]
    9f78:	4808      	ldr	r0, [pc, #32]	; (9f9c <nrfx_usbd_feeder_flash_zlp+0x38>)
    9f7a:	f003 fb9a 	bl	d6b2 <memcpy>
        p_next->p_data.tx = p_buffer;
    9f7e:	4b07      	ldr	r3, [pc, #28]	; (9f9c <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    9f80:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    9f84:	686b      	ldr	r3, [r5, #4]
    9f86:	1b1b      	subs	r3, r3, r4
    9f88:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    9f8a:	682b      	ldr	r3, [r5, #0]
    9f8c:	4423      	add	r3, r4
}
    9f8e:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    9f90:	602b      	str	r3, [r5, #0]
}
    9f92:	bf18      	it	ne
    9f94:	2001      	movne	r0, #1
    9f96:	bd70      	pop	{r4, r5, r6, pc}
    9f98:	4613      	mov	r3, r2
    9f9a:	e7f1      	b.n	9f80 <nrfx_usbd_feeder_flash_zlp+0x1c>
    9f9c:	20001efc 	.word	0x20001efc

00009fa0 <ev_sof_handler>:
{
    9fa0:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    9fa2:	2300      	movs	r3, #0
    9fa4:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    9fa8:	4b0b      	ldr	r3, [pc, #44]	; (9fd8 <ev_sof_handler+0x38>)
    9faa:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    9fae:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    9fb2:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    9fb6:	4a09      	ldr	r2, [pc, #36]	; (9fdc <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    9fb8:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    9fba:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    9fbc:	bf14      	ite	ne
    9fbe:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    9fc2:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    9fc6:	430b      	orrs	r3, r1
    9fc8:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    9fca:	4b05      	ldr	r3, [pc, #20]	; (9fe0 <ev_sof_handler+0x40>)
    9fcc:	a801      	add	r0, sp, #4
    9fce:	681b      	ldr	r3, [r3, #0]
    9fd0:	4798      	blx	r3
}
    9fd2:	b003      	add	sp, #12
    9fd4:	f85d fb04 	ldr.w	pc, [sp], #4
    9fd8:	40027000 	.word	0x40027000
    9fdc:	20002138 	.word	0x20002138
    9fe0:	2000213c 	.word	0x2000213c

00009fe4 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9fe4:	4b06      	ldr	r3, [pc, #24]	; (a000 <atomic_and.constprop.0.isra.0+0x1c>)
    9fe6:	f3bf 8f5b 	dmb	ish
    9fea:	e853 1f00 	ldrex	r1, [r3]
    9fee:	4001      	ands	r1, r0
    9ff0:	e843 1200 	strex	r2, r1, [r3]
    9ff4:	2a00      	cmp	r2, #0
    9ff6:	d1f8      	bne.n	9fea <atomic_and.constprop.0.isra.0+0x6>
    9ff8:	f3bf 8f5b 	dmb	ish
}
    9ffc:	4770      	bx	lr
    9ffe:	bf00      	nop
    a000:	20002134 	.word	0x20002134

0000a004 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a004:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    a008:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    a00c:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a00e:	bf02      	ittt	eq
    a010:	4b03      	ldreq	r3, [pc, #12]	; (a020 <usbd_dma_pending_clear+0x1c>)
    a012:	2200      	moveq	r2, #0
    a014:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    a018:	4b02      	ldr	r3, [pc, #8]	; (a024 <usbd_dma_pending_clear+0x20>)
    a01a:	2200      	movs	r2, #0
    a01c:	701a      	strb	r2, [r3, #0]
}
    a01e:	4770      	bx	lr
    a020:	40027000 	.word	0x40027000
    a024:	20002531 	.word	0x20002531

0000a028 <nrf_usbd_ep0in_dma_handler>:
{
    a028:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    a02a:	f7ff ffeb 	bl	a004 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a02e:	4b08      	ldr	r3, [pc, #32]	; (a050 <nrf_usbd_ep0in_dma_handler+0x28>)
    a030:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    a034:	2a03      	cmp	r2, #3
    a036:	d105      	bne.n	a044 <nrf_usbd_ep0in_dma_handler+0x1c>
}
    a038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a03c:	f06f 0001 	mvn.w	r0, #1
    a040:	f7ff bfd0 	b.w	9fe4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    a044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a048:	2b00      	cmp	r3, #0
    a04a:	d0f5      	beq.n	a038 <nrf_usbd_ep0in_dma_handler+0x10>
}
    a04c:	bd08      	pop	{r3, pc}
    a04e:	bf00      	nop
    a050:	20002014 	.word	0x20002014

0000a054 <usbd_ep_data_handler>:
{
    a054:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    a056:	2201      	movs	r2, #1
    a058:	fa02 f501 	lsl.w	r5, r2, r1
    a05c:	491c      	ldr	r1, [pc, #112]	; (a0d0 <usbd_ep_data_handler+0x7c>)
    a05e:	4e1d      	ldr	r6, [pc, #116]	; (a0d4 <usbd_ep_data_handler+0x80>)
    a060:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    a062:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    a066:	ea43 0305 	orr.w	r3, r3, r5
{
    a06a:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    a06c:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    a06e:	d024      	beq.n	a0ba <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    a070:	f000 020f 	and.w	r2, r0, #15
    a074:	4b18      	ldr	r3, [pc, #96]	; (a0d8 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a076:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a07a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a07e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a082:	681a      	ldr	r2, [r3, #0]
    if (ret)
    a084:	b132      	cbz	r2, a094 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a086:	2200      	movs	r2, #0
    a088:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    a08a:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    a08c:	681b      	ldr	r3, [r3, #0]
    a08e:	d011      	beq.n	a0b4 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    a090:	f004 f8ef 	bl	e272 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    a094:	6833      	ldr	r3, [r6, #0]
    a096:	402b      	ands	r3, r5
    a098:	d10a      	bne.n	a0b0 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a09a:	2206      	movs	r2, #6
    a09c:	f88d 2004 	strb.w	r2, [sp, #4]
    a0a0:	f88d 4006 	strb.w	r4, [sp, #6]
    a0a4:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    a0a8:	4b0c      	ldr	r3, [pc, #48]	; (a0dc <usbd_ep_data_handler+0x88>)
    a0aa:	a801      	add	r0, sp, #4
    a0ac:	681b      	ldr	r3, [r3, #0]
    a0ae:	4798      	blx	r3
}
    a0b0:	b002      	add	sp, #8
    a0b2:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    a0b4:	f7ff ffb8 	bl	a028 <nrf_usbd_ep0in_dma_handler>
    a0b8:	e7ec      	b.n	a094 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    a0ba:	6833      	ldr	r3, [r6, #0]
    a0bc:	421d      	tst	r5, r3
    a0be:	d1f7      	bne.n	a0b0 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    a0c0:	2306      	movs	r3, #6
    a0c2:	f88d 3004 	strb.w	r3, [sp, #4]
    a0c6:	f88d 0006 	strb.w	r0, [sp, #6]
    a0ca:	f88d 2007 	strb.w	r2, [sp, #7]
    a0ce:	e7eb      	b.n	a0a8 <usbd_ep_data_handler+0x54>
    a0d0:	20002138 	.word	0x20002138
    a0d4:	20002134 	.word	0x20002134
    a0d8:	0000f596 	.word	0x0000f596
    a0dc:	2000213c 	.word	0x2000213c

0000a0e0 <ev_setup_data_handler>:
{
    a0e0:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    a0e2:	4b05      	ldr	r3, [pc, #20]	; (a0f8 <ev_setup_data_handler+0x18>)
    a0e4:	781a      	ldrb	r2, [r3, #0]
    a0e6:	4610      	mov	r0, r2
    a0e8:	f004 f8ba 	bl	e260 <ep2bit>
}
    a0ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    a0f0:	4601      	mov	r1, r0
    a0f2:	4610      	mov	r0, r2
    a0f4:	f7ff bfae 	b.w	a054 <usbd_ep_data_handler>
    a0f8:	20002532 	.word	0x20002532

0000a0fc <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    a0fc:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    a0fe:	f7ff ff81 	bl	a004 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a102:	4b0c      	ldr	r3, [pc, #48]	; (a134 <ev_dma_epout8_handler+0x38>)
    a104:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    a108:	2a03      	cmp	r2, #3
    a10a:	d010      	beq.n	a12e <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    a10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    a110:	b96b      	cbnz	r3, a12e <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a112:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    a116:	f7ff ff65 	bl	9fe4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a11a:	2306      	movs	r3, #6
    a11c:	f88d 3004 	strb.w	r3, [sp, #4]
    a120:	2308      	movs	r3, #8
    a122:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    a126:	4b04      	ldr	r3, [pc, #16]	; (a138 <ev_dma_epout8_handler+0x3c>)
    a128:	a801      	add	r0, sp, #4
    a12a:	681b      	ldr	r3, [r3, #0]
    a12c:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    a12e:	b003      	add	sp, #12
    a130:	f85d fb04 	ldr.w	pc, [sp], #4
    a134:	20002014 	.word	0x20002014
    a138:	2000213c 	.word	0x2000213c

0000a13c <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    a13c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    a13e:	f7ff ff61 	bl	a004 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a142:	4b10      	ldr	r3, [pc, #64]	; (a184 <ev_dma_epin8_handler+0x48>)
    a144:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    a148:	2a03      	cmp	r2, #3
    a14a:	d106      	bne.n	a15a <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a14c:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    a150:	b003      	add	sp, #12
    a152:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a156:	f7ff bf45 	b.w	9fe4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    a15a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    a15e:	b96b      	cbnz	r3, a17c <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a160:	f46f 7080 	mvn.w	r0, #256	; 0x100
    a164:	f7ff ff3e 	bl	9fe4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a168:	2306      	movs	r3, #6
    a16a:	f88d 3004 	strb.w	r3, [sp, #4]
    a16e:	2388      	movs	r3, #136	; 0x88
    a170:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    a174:	4b04      	ldr	r3, [pc, #16]	; (a188 <ev_dma_epin8_handler+0x4c>)
    a176:	a801      	add	r0, sp, #4
    a178:	681b      	ldr	r3, [r3, #0]
    a17a:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    a17c:	b003      	add	sp, #12
    a17e:	f85d fb04 	ldr.w	pc, [sp], #4
    a182:	bf00      	nop
    a184:	20002014 	.word	0x20002014
    a188:	2000213c 	.word	0x2000213c

0000a18c <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    a18c:	4a02      	ldr	r2, [pc, #8]	; (a198 <nrfx_usbd_uninit+0xc>)
    a18e:	2300      	movs	r3, #0
    a190:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    a192:	4a02      	ldr	r2, [pc, #8]	; (a19c <nrfx_usbd_uninit+0x10>)
    a194:	7013      	strb	r3, [r2, #0]
    return;
}
    a196:	4770      	bx	lr
    a198:	2000213c 	.word	0x2000213c
    a19c:	20002534 	.word	0x20002534

0000a1a0 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    a1a0:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    a1a2:	4b4c      	ldr	r3, [pc, #304]	; (a2d4 <nrfx_usbd_enable+0x134>)
    a1a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a1a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    a1ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    a1b0:	f7ff fe0a 	bl	9dc8 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    a1b4:	b108      	cbz	r0, a1ba <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    a1b6:	f7ff fe79 	bl	9eac <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a1ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    a1be:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    a1c2:	2b08      	cmp	r3, #8
    a1c4:	d119      	bne.n	a1fa <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    a1c6:	f04f 0320 	mov.w	r3, #32
    a1ca:	f3ef 8011 	mrs	r0, BASEPRI
    a1ce:	f383 8812 	msr	BASEPRI_MAX, r3
    a1d2:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a1d6:	4b40      	ldr	r3, [pc, #256]	; (a2d8 <nrfx_usbd_enable+0x138>)
    a1d8:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    a1dc:	22c0      	movs	r2, #192	; 0xc0
    a1de:	2900      	cmp	r1, #0
    a1e0:	d170      	bne.n	a2c4 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a1e2:	f249 3175 	movw	r1, #37749	; 0x9375
    a1e6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    a1ea:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a1ee:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    a1f2:	f380 8811 	msr	BASEPRI, r0
    a1f6:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    a1fa:	4b36      	ldr	r3, [pc, #216]	; (a2d4 <nrfx_usbd_enable+0x134>)
    a1fc:	2201      	movs	r2, #1
    a1fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    a202:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    a206:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    a20a:	0512      	lsls	r2, r2, #20
    a20c:	d5fb      	bpl.n	a206 <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
    a20e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a212:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    a216:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a21a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    a21e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    a222:	2b08      	cmp	r3, #8
    a224:	d118      	bne.n	a258 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
    a226:	f04f 0320 	mov.w	r3, #32
    a22a:	f3ef 8011 	mrs	r0, BASEPRI
    a22e:	f383 8812 	msr	BASEPRI_MAX, r3
    a232:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a236:	4b28      	ldr	r3, [pc, #160]	; (a2d8 <nrfx_usbd_enable+0x138>)
    a238:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    a23c:	2900      	cmp	r1, #0
    a23e:	d144      	bne.n	a2ca <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a240:	f249 3275 	movw	r2, #37749	; 0x9375
    a244:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    a248:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a24c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    a250:	f380 8811 	msr	BASEPRI, r0
    a254:	f3bf 8f6f 	isb	sy
    a258:	f7ff fdb6 	bl	9dc8 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    a25c:	b130      	cbz	r0, a26c <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
    a25e:	f7ff fe45 	bl	9eec <usbd_errata_187_211_end>
    a262:	f7ff fdb1 	bl	9dc8 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    a266:	b108      	cbz	r0, a26c <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
    a268:	f7ff fe20 	bl	9eac <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a26c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    a270:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    a274:	2b08      	cmp	r3, #8
    a276:	4b17      	ldr	r3, [pc, #92]	; (a2d4 <nrfx_usbd_enable+0x134>)
    a278:	d10a      	bne.n	a290 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    a27a:	f240 72e3 	movw	r2, #2019	; 0x7e3
    a27e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    a282:	2240      	movs	r2, #64	; 0x40
    a284:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    a288:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    a28c:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    a290:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    a292:	2280      	movs	r2, #128	; 0x80
    a294:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    a298:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    a29c:	4b0f      	ldr	r3, [pc, #60]	; (a2dc <nrfx_usbd_enable+0x13c>)
    a29e:	f240 12ff 	movw	r2, #511	; 0x1ff
    a2a2:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    a2a4:	4b0e      	ldr	r3, [pc, #56]	; (a2e0 <nrfx_usbd_enable+0x140>)
    a2a6:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    a2a8:	f7ff feac 	bl	a004 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    a2ac:	4b0d      	ldr	r3, [pc, #52]	; (a2e4 <nrfx_usbd_enable+0x144>)
    a2ae:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    a2b0:	4b0d      	ldr	r3, [pc, #52]	; (a2e8 <nrfx_usbd_enable+0x148>)
    a2b2:	2202      	movs	r2, #2
    a2b4:	701a      	strb	r2, [r3, #0]
    a2b6:	f7ff fd87 	bl	9dc8 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    a2ba:	b150      	cbz	r0, a2d2 <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    a2bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    a2c0:	f7ff be14 	b.w	9eec <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    a2c4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    a2c8:	e793      	b.n	a1f2 <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    a2ca:	2200      	movs	r2, #0
    a2cc:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    a2d0:	e7be      	b.n	a250 <nrfx_usbd_enable+0xb0>
}
    a2d2:	bd08      	pop	{r3, pc}
    a2d4:	40027000 	.word	0x40027000
    a2d8:	4006e000 	.word	0x4006e000
    a2dc:	20002138 	.word	0x20002138
    a2e0:	20002134 	.word	0x20002134
    a2e4:	20002532 	.word	0x20002532
    a2e8:	20002534 	.word	0x20002534

0000a2ec <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    a2ec:	4b0a      	ldr	r3, [pc, #40]	; (a318 <nrfx_usbd_start+0x2c>)
    a2ee:	2200      	movs	r2, #0
{
    a2f0:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    a2f2:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    a2f4:	4a09      	ldr	r2, [pc, #36]	; (a31c <nrfx_usbd_start+0x30>)
    a2f6:	4b0a      	ldr	r3, [pc, #40]	; (a320 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    a2f8:	4c0a      	ldr	r4, [pc, #40]	; (a324 <nrfx_usbd_start+0x38>)
    a2fa:	2800      	cmp	r0, #0
    a2fc:	bf08      	it	eq
    a2fe:	4613      	moveq	r3, r2
    a300:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    a304:	2027      	movs	r0, #39	; 0x27
    a306:	f7f9 fa4f 	bl	37a8 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    a30a:	2301      	movs	r3, #1
    a30c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    a310:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    a314:	bd10      	pop	{r4, pc}
    a316:	bf00      	nop
    a318:	20002533 	.word	0x20002533
    a31c:	01c01407 	.word	0x01c01407
    a320:	01e01407 	.word	0x01e01407
    a324:	40027000 	.word	0x40027000

0000a328 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    a328:	4b03      	ldr	r3, [pc, #12]	; (a338 <nrfx_usbd_is_enabled+0x10>)
    a32a:	7818      	ldrb	r0, [r3, #0]
}
    a32c:	2801      	cmp	r0, #1
    a32e:	bf94      	ite	ls
    a330:	2000      	movls	r0, #0
    a332:	2001      	movhi	r0, #1
    a334:	4770      	bx	lr
    a336:	bf00      	nop
    a338:	20002534 	.word	0x20002534

0000a33c <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    a33c:	b510      	push	{r4, lr}
	__asm__ volatile(
    a33e:	f04f 0320 	mov.w	r3, #32
    a342:	f3ef 8111 	mrs	r1, BASEPRI
    a346:	f383 8812 	msr	BASEPRI_MAX, r3
    a34a:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    a34e:	4b0f      	ldr	r3, [pc, #60]	; (a38c <nrfx_usbd_suspend+0x50>)
    a350:	781b      	ldrb	r3, [r3, #0]
    a352:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a356:	b193      	cbz	r3, a37e <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    a358:	4b0d      	ldr	r3, [pc, #52]	; (a390 <nrfx_usbd_suspend+0x54>)
    a35a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    a35e:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    a362:	d10c      	bne.n	a37e <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    a364:	2401      	movs	r4, #1
    a366:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    a36a:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    a36e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    a372:	05a4      	lsls	r4, r4, #22
    a374:	d504      	bpl.n	a380 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    a376:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    a37a:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    a37e:	2000      	movs	r0, #0
	__asm__ volatile(
    a380:	f381 8811 	msr	BASEPRI, r1
    a384:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    a388:	bd10      	pop	{r4, pc}
    a38a:	bf00      	nop
    a38c:	20002533 	.word	0x20002533
    a390:	40027000 	.word	0x40027000

0000a394 <nrfx_usbd_init>:
{
    a394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    a396:	4b1c      	ldr	r3, [pc, #112]	; (a408 <nrfx_usbd_init+0x74>)
    a398:	781c      	ldrb	r4, [r3, #0]
    a39a:	bb94      	cbnz	r4, a402 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    a39c:	4a1b      	ldr	r2, [pc, #108]	; (a40c <nrfx_usbd_init+0x78>)
    a39e:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    a3a0:	2201      	movs	r2, #1
    a3a2:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a3a4:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    a3a8:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    a3aa:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a3ae:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    a3b2:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a3b4:	bf14      	ite	ne
    a3b6:	4639      	movne	r1, r7
    a3b8:	2140      	moveq	r1, #64	; 0x40
    a3ba:	4628      	mov	r0, r5
    a3bc:	f003 ff88 	bl	e2d0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    a3c0:	4628      	mov	r0, r5
    a3c2:	f7ff fd15 	bl	9df0 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    a3c6:	3401      	adds	r4, #1
    a3c8:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    a3ca:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    a3cc:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    a3ce:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    a3d0:	d1eb      	bne.n	a3aa <nrfx_usbd_init+0x16>
    a3d2:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a3d4:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    a3d8:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a3da:	f014 0f08 	tst.w	r4, #8
    a3de:	b2e6      	uxtb	r6, r4
    a3e0:	bf14      	ite	ne
    a3e2:	4639      	movne	r1, r7
    a3e4:	2140      	moveq	r1, #64	; 0x40
    a3e6:	4630      	mov	r0, r6
    a3e8:	f003 ff72 	bl	e2d0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    a3ec:	4630      	mov	r0, r6
    a3ee:	f7ff fcff 	bl	9df0 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    a3f2:	3401      	adds	r4, #1
    a3f4:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    a3f6:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    a3f8:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    a3fa:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    a3fc:	d1ed      	bne.n	a3da <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    a3fe:	4804      	ldr	r0, [pc, #16]	; (a410 <nrfx_usbd_init+0x7c>)
}
    a400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    a402:	4804      	ldr	r0, [pc, #16]	; (a414 <nrfx_usbd_init+0x80>)
    a404:	e7fc      	b.n	a400 <nrfx_usbd_init+0x6c>
    a406:	bf00      	nop
    a408:	20002534 	.word	0x20002534
    a40c:	2000213c 	.word	0x2000213c
    a410:	0bad0000 	.word	0x0bad0000
    a414:	0bad0005 	.word	0x0bad0005

0000a418 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    a418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a41c:	4604      	mov	r4, r0
	__asm__ volatile(
    a41e:	f04f 0320 	mov.w	r3, #32
    a422:	f3ef 8611 	mrs	r6, BASEPRI
    a426:	f383 8812 	msr	BASEPRI_MAX, r3
    a42a:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    a42e:	f010 090f 	ands.w	r9, r0, #15
    a432:	d103      	bne.n	a43c <nrfx_usbd_ep_transfer+0x24>
    a434:	4b27      	ldr	r3, [pc, #156]	; (a4d4 <nrfx_usbd_ep_transfer+0xbc>)
    a436:	781b      	ldrb	r3, [r3, #0]
    a438:	4283      	cmp	r3, r0
    a43a:	d147      	bne.n	a4cc <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    a43c:	4b26      	ldr	r3, [pc, #152]	; (a4d8 <nrfx_usbd_ep_transfer+0xc0>)
    a43e:	4f27      	ldr	r7, [pc, #156]	; (a4dc <nrfx_usbd_ep_transfer+0xc4>)
    a440:	681a      	ldr	r2, [r3, #0]
    a442:	683b      	ldr	r3, [r7, #0]
    a444:	43d2      	mvns	r2, r2
    a446:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    a448:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    a44a:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    a44c:	f003 ff08 	bl	e260 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    a450:	f04f 0801 	mov.w	r8, #1
    a454:	fa08 f800 	lsl.w	r8, r8, r0
    a458:	ea12 0f08 	tst.w	r2, r8
    a45c:	d138      	bne.n	a4d0 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    a45e:	4620      	mov	r0, r4
    a460:	f7ff fcc6 	bl	9df0 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    a464:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    a466:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    a468:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    a46a:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    a46e:	d529      	bpl.n	a4c4 <nrfx_usbd_ep_transfer+0xac>
    a470:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a472:	6888      	ldr	r0, [r1, #8]
    a474:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    a478:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a47c:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    a480:	d11d      	bne.n	a4be <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a482:	4a17      	ldr	r2, [pc, #92]	; (a4e0 <nrfx_usbd_ep_transfer+0xc8>)
    a484:	4c17      	ldr	r4, [pc, #92]	; (a4e4 <nrfx_usbd_ep_transfer+0xcc>)
    a486:	2800      	cmp	r0, #0
    a488:	bf08      	it	eq
    a48a:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    a48c:	4816      	ldr	r0, [pc, #88]	; (a4e8 <nrfx_usbd_ep_transfer+0xd0>)
    a48e:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    a490:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    a492:	c907      	ldmia	r1, {r0, r1, r2}
    a494:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    a498:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    a49a:	2300      	movs	r3, #0
    a49c:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    a49e:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    a4a0:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    a4a2:	4812      	ldr	r0, [pc, #72]	; (a4ec <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    a4a4:	ea43 0308 	orr.w	r3, r3, r8
    a4a8:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a4aa:	4b11      	ldr	r3, [pc, #68]	; (a4f0 <nrfx_usbd_ep_transfer+0xd8>)
    a4ac:	2280      	movs	r2, #128	; 0x80
    a4ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    a4b2:	f386 8811 	msr	BASEPRI, r6
    a4b6:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    a4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a4be:	4a0d      	ldr	r2, [pc, #52]	; (a4f4 <nrfx_usbd_ep_transfer+0xdc>)
    a4c0:	4c0d      	ldr	r4, [pc, #52]	; (a4f8 <nrfx_usbd_ep_transfer+0xe0>)
    a4c2:	e7e0      	b.n	a486 <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    a4c4:	4a0d      	ldr	r2, [pc, #52]	; (a4fc <nrfx_usbd_ep_transfer+0xe4>)
    a4c6:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    a4c8:	4a0d      	ldr	r2, [pc, #52]	; (a500 <nrfx_usbd_ep_transfer+0xe8>)
    a4ca:	e7e1      	b.n	a490 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    a4cc:	480d      	ldr	r0, [pc, #52]	; (a504 <nrfx_usbd_ep_transfer+0xec>)
    a4ce:	e7f0      	b.n	a4b2 <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
    a4d0:	480d      	ldr	r0, [pc, #52]	; (a508 <nrfx_usbd_ep_transfer+0xf0>)
    a4d2:	e7ee      	b.n	a4b2 <nrfx_usbd_ep_transfer+0x9a>
    a4d4:	20002532 	.word	0x20002532
    a4d8:	20002138 	.word	0x20002138
    a4dc:	20002134 	.word	0x20002134
    a4e0:	0000e239 	.word	0x0000e239
    a4e4:	0000e217 	.word	0x0000e217
    a4e8:	20001fa8 	.word	0x20001fa8
    a4ec:	0bad0000 	.word	0x0bad0000
    a4f0:	e000e100 	.word	0xe000e100
    a4f4:	00009f65 	.word	0x00009f65
    a4f8:	00009f2d 	.word	0x00009f2d
    a4fc:	20001f3c 	.word	0x20001f3c
    a500:	0000e1e5 	.word	0x0000e1e5
    a504:	0bad000a 	.word	0x0bad000a
    a508:	0bad000b 	.word	0x0bad000b

0000a50c <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    a50c:	f010 0f08 	tst.w	r0, #8
    a510:	4b07      	ldr	r3, [pc, #28]	; (a530 <nrfx_usbd_epout_size_get+0x24>)
    a512:	d006      	beq.n	a522 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    a514:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    a518:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    a51c:	bf18      	it	ne
    a51e:	2000      	movne	r0, #0
    a520:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    a522:	f000 000f 	and.w	r0, r0, #15
    a526:	f500 7094 	add.w	r0, r0, #296	; 0x128
    a52a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    a52e:	4770      	bx	lr
    a530:	40027000 	.word	0x40027000

0000a534 <usbd_dmareq_process>:
{
    a534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    a538:	4e59      	ldr	r6, [pc, #356]	; (a6a0 <usbd_dmareq_process+0x16c>)
    a53a:	7833      	ldrb	r3, [r6, #0]
{
    a53c:	b085      	sub	sp, #20
    if (!m_dma_pending)
    a53e:	2b00      	cmp	r3, #0
    a540:	d173      	bne.n	a62a <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    a542:	f8df 8160 	ldr.w	r8, [pc, #352]	; a6a4 <usbd_dmareq_process+0x170>
    a546:	4d58      	ldr	r5, [pc, #352]	; (a6a8 <usbd_dmareq_process+0x174>)
    a548:	f8d8 4000 	ldr.w	r4, [r8]
    a54c:	682b      	ldr	r3, [r5, #0]
    a54e:	401c      	ands	r4, r3
    a550:	d06b      	beq.n	a62a <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    a552:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    a556:	bf14      	ite	ne
    a558:	fa93 f4a3 	rbitne	r4, r3
    a55c:	fa94 f4a4 	rbiteq	r4, r4
    a560:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a564:	f04f 0901 	mov.w	r9, #1
    a568:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a56c:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a56e:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a572:	d95d      	bls.n	a630 <usbd_dmareq_process+0xfc>
    a574:	3c10      	subs	r4, #16
    a576:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    a578:	4620      	mov	r0, r4
    a57a:	f7ff fc39 	bl	9df0 <ep_state_access>
    a57e:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    a580:	4620      	mov	r0, r4
    a582:	f7ff ffc3 	bl	a50c <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    a586:	f8da 7000 	ldr.w	r7, [sl]
    a58a:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    a58e:	f8da 1004 	ldr.w	r1, [sl, #4]
    a592:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    a594:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    a596:	a802      	add	r0, sp, #8
    a598:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    a59a:	9b02      	ldr	r3, [sp, #8]
    a59c:	2b00      	cmp	r3, #0
    a59e:	d153      	bne.n	a648 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
    a5a0:	b908      	cbnz	r0, a5a6 <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    a5a2:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a5a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
    a5aa:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
    a5ac:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    a5b0:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    a5b2:	bf02      	ittt	eq
    a5b4:	4b3d      	ldreq	r3, [pc, #244]	; (a6ac <usbd_dmareq_process+0x178>)
    a5b6:	2282      	moveq	r2, #130	; 0x82
    a5b8:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    a5bc:	2301      	movs	r3, #1
    a5be:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    a5c0:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    a5c2:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    a5c4:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    a5c6:	ea03 0309 	and.w	r3, r3, r9
    a5ca:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    a5cc:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    a5d0:	2900      	cmp	r1, #0
    a5d2:	4413      	add	r3, r2
    a5d4:	f8ca 3008 	str.w	r3, [sl, #8]
    a5d8:	f004 0508 	and.w	r5, r4, #8
    a5dc:	4b33      	ldr	r3, [pc, #204]	; (a6ac <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a5de:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    a5e2:	da4e      	bge.n	a682 <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
    a5e4:	2d00      	cmp	r5, #0
    a5e6:	d044      	beq.n	a672 <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
    a5e8:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    a5ec:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    a5f0:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a5f2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a5f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a5fa:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a5fe:	2201      	movs	r2, #1
    a600:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a602:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    a604:	4a2a      	ldr	r2, [pc, #168]	; (a6b0 <usbd_dmareq_process+0x17c>)
    a606:	4b2b      	ldr	r3, [pc, #172]	; (a6b4 <usbd_dmareq_process+0x180>)
    a608:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    a60c:	bf38      	it	cc
    a60e:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a610:	4926      	ldr	r1, [pc, #152]	; (a6ac <usbd_dmareq_process+0x178>)
    a612:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a616:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a61a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a61e:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    a620:	b91a      	cbnz	r2, a62a <usbd_dmareq_process+0xf6>
    a622:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    a626:	2a00      	cmp	r2, #0
    a628:	d0f9      	beq.n	a61e <usbd_dmareq_process+0xea>
}
    a62a:	b005      	add	sp, #20
    a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a630:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    a634:	4620      	mov	r0, r4
    a636:	f7ff fbdb 	bl	9df0 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    a63a:	6803      	ldr	r3, [r0, #0]
    a63c:	8982      	ldrh	r2, [r0, #12]
    a63e:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    a640:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    a642:	a802      	add	r0, sp, #8
    a644:	4798      	blx	r3
    a646:	e7ab      	b.n	a5a0 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    a648:	9b03      	ldr	r3, [sp, #12]
    a64a:	459b      	cmp	fp, r3
    a64c:	d9a8      	bls.n	a5a0 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    a64e:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a650:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    a652:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a656:	f7ff fcc5 	bl	9fe4 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a65a:	2306      	movs	r3, #6
    a65c:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    a660:	4b15      	ldr	r3, [pc, #84]	; (a6b8 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a662:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    a666:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a668:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    a66c:	a801      	add	r0, sp, #4
    a66e:	4798      	blx	r3
                    continue;
    a670:	e76a      	b.n	a548 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    a672:	2514      	movs	r5, #20
    a674:	fb05 3304 	mla	r3, r5, r4, r3
    a678:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    a67c:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    a680:	e7b6      	b.n	a5f0 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
    a682:	b12d      	cbz	r5, a690 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
    a684:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    a688:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    a68c:	2328      	movs	r3, #40	; 0x28
    a68e:	e7b0      	b.n	a5f2 <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
    a690:	2514      	movs	r5, #20
    a692:	fb05 3304 	mla	r3, r5, r4, r3
    a696:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    a69a:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    a69e:	e7f5      	b.n	a68c <usbd_dmareq_process+0x158>
    a6a0:	20002531 	.word	0x20002531
    a6a4:	20002134 	.word	0x20002134
    a6a8:	20002138 	.word	0x20002138
    a6ac:	40027000 	.word	0x40027000
    a6b0:	0000f584 	.word	0x0000f584
    a6b4:	0000f596 	.word	0x0000f596
    a6b8:	2000213c 	.word	0x2000213c

0000a6bc <ev_epdata_handler>:
{
    a6bc:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    a6be:	4b0f      	ldr	r3, [pc, #60]	; (a6fc <ev_epdata_handler+0x40>)
    a6c0:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    a6c4:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    a6c8:	2501      	movs	r5, #1
    while (dataepstatus)
    a6ca:	b91c      	cbnz	r4, a6d4 <ev_epdata_handler+0x18>
}
    a6cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    a6d0:	f7ff bf30 	b.w	a534 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    a6d4:	fa94 f3a4 	rbit	r3, r4
    a6d8:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a6dc:	2b0f      	cmp	r3, #15
    a6de:	bfc8      	it	gt
    a6e0:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    a6e4:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a6e6:	bfd4      	ite	le
    a6e8:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    a6ec:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    a6ee:	fa05 f303 	lsl.w	r3, r5, r3
    a6f2:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    a6f6:	f7ff fcad 	bl	a054 <usbd_ep_data_handler>
    a6fa:	e7e6      	b.n	a6ca <ev_epdata_handler+0xe>
    a6fc:	40027000 	.word	0x40027000

0000a700 <nrf_usbd_epout_dma_handler>:
{
    a700:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
    a702:	f7ff fc7f 	bl	a004 <usbd_dma_pending_clear>
{
    a706:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a708:	f7ff fb72 	bl	9df0 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a70c:	7b83      	ldrb	r3, [r0, #14]
    a70e:	2b03      	cmp	r3, #3
    a710:	d10d      	bne.n	a72e <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a712:	4620      	mov	r0, r4
    a714:	f003 fda4 	bl	e260 <ep2bit>
    a718:	2301      	movs	r3, #1
    a71a:	fa03 f000 	lsl.w	r0, r3, r0
    a71e:	43c0      	mvns	r0, r0
    a720:	f7ff fc60 	bl	9fe4 <atomic_and.constprop.0.isra.0>
}
    a724:	b003      	add	sp, #12
    a726:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    a72a:	f7ff bf03 	b.w	a534 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    a72e:	6805      	ldr	r5, [r0, #0]
    a730:	2d00      	cmp	r5, #0
    a732:	d1f7      	bne.n	a724 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a734:	4620      	mov	r0, r4
    a736:	f003 fd93 	bl	e260 <ep2bit>
    a73a:	2301      	movs	r3, #1
    a73c:	fa03 f000 	lsl.w	r0, r3, r0
    a740:	43c0      	mvns	r0, r0
    a742:	f7ff fc4f 	bl	9fe4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a746:	2306      	movs	r3, #6
    a748:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    a74c:	4b04      	ldr	r3, [pc, #16]	; (a760 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a74e:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    a752:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a754:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    a758:	a801      	add	r0, sp, #4
    a75a:	4798      	blx	r3
    a75c:	e7e2      	b.n	a724 <nrf_usbd_epout_dma_handler+0x24>
    a75e:	bf00      	nop
    a760:	2000213c 	.word	0x2000213c

0000a764 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    a764:	4b02      	ldr	r3, [pc, #8]	; (a770 <nrfx_usbd_ep_stall+0xc>)
    a766:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    a76a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    a76e:	4770      	bx	lr
    a770:	40027000 	.word	0x40027000

0000a774 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    a774:	0702      	lsls	r2, r0, #28
    a776:	d413      	bmi.n	a7a0 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    a778:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    a77c:	f010 0f80 	tst.w	r0, #128	; 0x80
    a780:	4a08      	ldr	r2, [pc, #32]	; (a7a4 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    a782:	bf0b      	itete	eq
    a784:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    a788:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    a78c:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    a790:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    a794:	bf08      	it	eq
    a796:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    a798:	1e43      	subs	r3, r0, #1
    a79a:	4258      	negs	r0, r3
    a79c:	4158      	adcs	r0, r3
    a79e:	4770      	bx	lr
        return false;
    a7a0:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    a7a2:	4770      	bx	lr
    a7a4:	40027000 	.word	0x40027000

0000a7a8 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    a7a8:	4b04      	ldr	r3, [pc, #16]	; (a7bc <nrfx_usbd_ep_dtoggle_clear+0x14>)
    a7aa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    a7ae:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    a7b2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    a7b6:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    a7ba:	4770      	bx	lr
    a7bc:	40027000 	.word	0x40027000

0000a7c0 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    a7c0:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    a7c2:	2208      	movs	r2, #8
    a7c4:	2100      	movs	r1, #0
{
    a7c6:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    a7c8:	f002 ff7e 	bl	d6c8 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    a7cc:	4b0e      	ldr	r3, [pc, #56]	; (a808 <nrfx_usbd_setup_get+0x48>)
    a7ce:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    a7d2:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    a7d4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    a7d8:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    a7da:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    a7de:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    a7e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    a7e6:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    a7e8:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    a7ec:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    a7f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    a7f4:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    a7f6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    a7fa:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    a7fe:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    a802:	80e3      	strh	r3, [r4, #6]
}
    a804:	bd10      	pop	{r4, pc}
    a806:	bf00      	nop
    a808:	40027000 	.word	0x40027000

0000a80c <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a80c:	4b02      	ldr	r3, [pc, #8]	; (a818 <nrfx_usbd_setup_data_clear+0xc>)
    a80e:	2201      	movs	r2, #1
    a810:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    a814:	4770      	bx	lr
    a816:	bf00      	nop
    a818:	40027000 	.word	0x40027000

0000a81c <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a81c:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    a81e:	f7ff fbf1 	bl	a004 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a822:	4b10      	ldr	r3, [pc, #64]	; (a864 <ev_dma_epout0_handler+0x48>)
    a824:	7b9a      	ldrb	r2, [r3, #14]
    a826:	2a03      	cmp	r2, #3
    a828:	d106      	bne.n	a838 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a82a:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a82e:	b002      	add	sp, #8
    a830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a834:	f7ff bbd6 	b.w	9fe4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    a838:	681c      	ldr	r4, [r3, #0]
    a83a:	b974      	cbnz	r4, a85a <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a83c:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    a840:	f7ff fbd0 	bl	9fe4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a844:	2306      	movs	r3, #6
    a846:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    a84a:	4b07      	ldr	r3, [pc, #28]	; (a868 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a84c:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    a850:	681b      	ldr	r3, [r3, #0]
    a852:	a801      	add	r0, sp, #4
    a854:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a856:	b002      	add	sp, #8
    a858:	bd10      	pop	{r4, pc}
    a85a:	b002      	add	sp, #8
    a85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    a860:	f7ff bfd4 	b.w	a80c <nrfx_usbd_setup_data_clear>
    a864:	20002014 	.word	0x20002014
    a868:	2000213c 	.word	0x2000213c

0000a86c <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a86c:	4b02      	ldr	r3, [pc, #8]	; (a878 <nrfx_usbd_setup_clear+0xc>)
    a86e:	2201      	movs	r2, #1
    a870:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a872:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    a874:	4770      	bx	lr
    a876:	bf00      	nop
    a878:	40027000 	.word	0x40027000

0000a87c <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a87c:	4b02      	ldr	r3, [pc, #8]	; (a888 <nrfx_usbd_setup_stall+0xc>)
    a87e:	2201      	movs	r2, #1
    a880:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a882:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    a884:	4770      	bx	lr
    a886:	bf00      	nop
    a888:	40027000 	.word	0x40027000

0000a88c <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    a88c:	4b01      	ldr	r3, [pc, #4]	; (a894 <nrfx_usbd_last_setup_dir_get+0x8>)
    a88e:	7818      	ldrb	r0, [r3, #0]
    a890:	4770      	bx	lr
    a892:	bf00      	nop
    a894:	20002532 	.word	0x20002532

0000a898 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    a898:	b510      	push	{r4, lr}
    a89a:	4602      	mov	r2, r0
	__asm__ volatile(
    a89c:	f04f 0320 	mov.w	r3, #32
    a8a0:	f3ef 8411 	mrs	r4, BASEPRI
    a8a4:	f383 8812 	msr	BASEPRI_MAX, r3
    a8a8:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    a8ac:	f003 fcd8 	bl	e260 <ep2bit>
    a8b0:	490d      	ldr	r1, [pc, #52]	; (a8e8 <nrfx_usbd_transfer_out_drop+0x50>)
    a8b2:	2301      	movs	r3, #1
    a8b4:	fa03 f000 	lsl.w	r0, r3, r0
    a8b8:	680b      	ldr	r3, [r1, #0]
    a8ba:	ea23 0300 	bic.w	r3, r3, r0
    a8be:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    a8c0:	f012 0108 	ands.w	r1, r2, #8
    a8c4:	d10a      	bne.n	a8dc <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    a8c6:	f002 030f 	and.w	r3, r2, #15
    a8ca:	009b      	lsls	r3, r3, #2
    a8cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a8d0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    a8d4:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    a8d8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    a8dc:	f384 8811 	msr	BASEPRI, r4
    a8e0:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    a8e4:	bd10      	pop	{r4, pc}
    a8e6:	bf00      	nop
    a8e8:	20002138 	.word	0x20002138

0000a8ec <usbd_ep_abort>:
{
    a8ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a8ee:	4601      	mov	r1, r0
	__asm__ volatile(
    a8f0:	f04f 0320 	mov.w	r3, #32
    a8f4:	f3ef 8511 	mrs	r5, BASEPRI
    a8f8:	f383 8812 	msr	BASEPRI_MAX, r3
    a8fc:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a900:	f7ff fa76 	bl	9df0 <ep_state_access>
    a904:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a906:	4608      	mov	r0, r1
    a908:	f003 fcaa 	bl	e260 <ep2bit>
    a90c:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    a90e:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a912:	fa02 f200 	lsl.w	r2, r2, r0
    a916:	482e      	ldr	r0, [pc, #184]	; (a9d0 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    a918:	d119      	bne.n	a94e <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a91a:	6803      	ldr	r3, [r0, #0]
    a91c:	ea32 0303 	bics.w	r3, r2, r3
    a920:	d00a      	beq.n	a938 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    a922:	4608      	mov	r0, r1
    a924:	f7ff ffb8 	bl	a898 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    a928:	2303      	movs	r3, #3
    a92a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    a92c:	f385 8811 	msr	BASEPRI, r5
    a930:	f3bf 8f6f 	isb	sy
}
    a934:	b003      	add	sp, #12
    a936:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    a938:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a93a:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a93c:	4925      	ldr	r1, [pc, #148]	; (a9d4 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a93e:	ea23 0302 	bic.w	r3, r3, r2
    a942:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a944:	680b      	ldr	r3, [r1, #0]
    a946:	ea23 0302 	bic.w	r3, r3, r2
    a94a:	600b      	str	r3, [r1, #0]
    a94c:	e7ec      	b.n	a928 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    a94e:	070b      	lsls	r3, r1, #28
    a950:	d415      	bmi.n	a97e <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    a952:	2980      	cmp	r1, #128	; 0x80
    a954:	4b20      	ldr	r3, [pc, #128]	; (a9d8 <usbd_ep_abort+0xec>)
    a956:	d02f      	beq.n	a9b8 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    a958:	f001 040f 	and.w	r4, r1, #15
    a95c:	f204 34da 	addw	r4, r4, #986	; 0x3da
    a960:	0064      	lsls	r4, r4, #1
    a962:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a966:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a96a:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a96e:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a970:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a974:	433c      	orrs	r4, r7
    a976:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    a97a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    a97e:	4f15      	ldr	r7, [pc, #84]	; (a9d4 <usbd_ep_abort+0xe8>)
    a980:	6804      	ldr	r4, [r0, #0]
    a982:	683b      	ldr	r3, [r7, #0]
    a984:	ea64 0c03 	orn	ip, r4, r3
    a988:	ea1c 0f02 	tst.w	ip, r2
    a98c:	d0ce      	beq.n	a92c <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    a98e:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a990:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    a994:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    a996:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a998:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    a99a:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    a99c:	2303      	movs	r3, #3
    a99e:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a9a0:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    a9a4:	4b0d      	ldr	r3, [pc, #52]	; (a9dc <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a9a6:	f88d 1006 	strb.w	r1, [sp, #6]
    a9aa:	2206      	movs	r2, #6
            m_event_handler(&evt);
    a9ac:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a9ae:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    a9b2:	a801      	add	r0, sp, #4
    a9b4:	4798      	blx	r3
    a9b6:	e7b9      	b.n	a92c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    a9b8:	f240 74b4 	movw	r4, #1972	; 0x7b4
    a9bc:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a9c0:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a9c4:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a9c8:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a9ca:	f044 0404 	orr.w	r4, r4, #4
    a9ce:	e7d1      	b.n	a974 <usbd_ep_abort+0x88>
    a9d0:	20002134 	.word	0x20002134
    a9d4:	20002138 	.word	0x20002138
    a9d8:	40027000 	.word	0x40027000
    a9dc:	2000213c 	.word	0x2000213c

0000a9e0 <ev_setup_handler>:
{
    a9e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    a9e2:	4b14      	ldr	r3, [pc, #80]	; (aa34 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a9e4:	4c14      	ldr	r4, [pc, #80]	; (aa38 <ev_setup_handler+0x58>)
    a9e6:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    a9ea:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    a9ec:	4e13      	ldr	r6, [pc, #76]	; (aa3c <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a9ee:	43da      	mvns	r2, r3
    a9f0:	4b13      	ldr	r3, [pc, #76]	; (aa40 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    a9f2:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a9f4:	681b      	ldr	r3, [r3, #0]
    a9f6:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    a9f8:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a9fa:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    a9fc:	f003 fc30 	bl	e260 <ep2bit>
    aa00:	2301      	movs	r3, #1
    aa02:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    aa04:	4213      	tst	r3, r2
    aa06:	d002      	beq.n	aa0e <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    aa08:	4608      	mov	r0, r1
    aa0a:	f7ff ff6f 	bl	a8ec <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    aa0e:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    aa12:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    aa16:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    aa18:	f7ff fae4 	bl	9fe4 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    aa1c:	6823      	ldr	r3, [r4, #0]
    aa1e:	f043 0301 	orr.w	r3, r3, #1
    aa22:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    aa24:	2305      	movs	r3, #5
    aa26:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    aa28:	4b06      	ldr	r3, [pc, #24]	; (aa44 <ev_setup_handler+0x64>)
    aa2a:	a801      	add	r0, sp, #4
    aa2c:	681b      	ldr	r3, [r3, #0]
    aa2e:	4798      	blx	r3
}
    aa30:	b002      	add	sp, #8
    aa32:	bd70      	pop	{r4, r5, r6, pc}
    aa34:	40027000 	.word	0x40027000
    aa38:	20002138 	.word	0x20002138
    aa3c:	20002532 	.word	0x20002532
    aa40:	20002134 	.word	0x20002134
    aa44:	2000213c 	.word	0x2000213c

0000aa48 <nrfx_usbd_irq_handler>:
{
    aa48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    aa4c:	4b1a      	ldr	r3, [pc, #104]	; (aab8 <nrfx_usbd_irq_handler+0x70>)
    aa4e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    aa52:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    aa54:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    aa56:	461d      	mov	r5, r3
    while (to_process)
    aa58:	b970      	cbnz	r0, aa78 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    aa5a:	4f18      	ldr	r7, [pc, #96]	; (aabc <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    aa5c:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    aa60:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    aa64:	f04f 0801 	mov.w	r8, #1
    while (active)
    aa68:	b9bc      	cbnz	r4, aa9a <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    aa6a:	f7ff fd63 	bl	a534 <usbd_dmareq_process>
    if (setup_active)
    aa6e:	b306      	cbz	r6, aab2 <nrfx_usbd_irq_handler+0x6a>
}
    aa70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    aa74:	f7ff bfb4 	b.w	a9e0 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    aa78:	fa90 f2a0 	rbit	r2, r0
    aa7c:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    aa80:	490f      	ldr	r1, [pc, #60]	; (aac0 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    aa82:	0096      	lsls	r6, r2, #2
    aa84:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    aa86:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    aa8a:	680e      	ldr	r6, [r1, #0]
    if (ret)
    aa8c:	b116      	cbz	r6, aa94 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    aa8e:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    aa90:	6809      	ldr	r1, [r1, #0]
    aa92:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    aa94:	ea20 0002 	bic.w	r0, r0, r2
    aa98:	e7de      	b.n	aa58 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    aa9a:	fa94 f5a4 	rbit	r5, r4
    aa9e:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    aaa2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    aaa6:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    aaaa:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    aaac:	ea24 0405 	bic.w	r4, r4, r5
    aab0:	e7da      	b.n	aa68 <nrfx_usbd_irq_handler+0x20>
}
    aab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aab6:	bf00      	nop
    aab8:	40027000 	.word	0x40027000
    aabc:	0000f468 	.word	0x0000f468
    aac0:	40027100 	.word	0x40027100

0000aac4 <nrfx_usbd_stop>:
{
    aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aac6:	4b1b      	ldr	r3, [pc, #108]	; (ab34 <nrfx_usbd_stop+0x70>)
    aac8:	2280      	movs	r2, #128	; 0x80
    aaca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    aace:	2027      	movs	r0, #39	; 0x27
    aad0:	f7f8 fe8c 	bl	37ec <arch_irq_is_enabled>
    aad4:	b1b8      	cbz	r0, ab06 <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    aad6:	4e18      	ldr	r6, [pc, #96]	; (ab38 <nrfx_usbd_stop+0x74>)
    aad8:	4b18      	ldr	r3, [pc, #96]	; (ab3c <nrfx_usbd_stop+0x78>)
    aada:	6834      	ldr	r4, [r6, #0]
    aadc:	681b      	ldr	r3, [r3, #0]
    aade:	0c24      	lsrs	r4, r4, #16
    aae0:	0424      	lsls	r4, r4, #16
    aae2:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    aae4:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    aae6:	b97c      	cbnz	r4, ab08 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    aae8:	4d15      	ldr	r5, [pc, #84]	; (ab40 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    aaea:	f240 13ff 	movw	r3, #511	; 0x1ff
    aaee:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    aaf0:	2027      	movs	r0, #39	; 0x27
    aaf2:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    aaf6:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    aafa:	f7f8 fe63 	bl	37c4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    aafe:	f04f 33ff 	mov.w	r3, #4294967295
    ab02:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    ab06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    ab08:	fa94 f5a4 	rbit	r5, r4
    ab0c:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    ab10:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    ab12:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    ab14:	bfc6      	itte	gt
    ab16:	f1a5 0010 	subgt.w	r0, r5, #16
    ab1a:	b2c0      	uxtbgt	r0, r0
    ab1c:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    ab20:	0703      	lsls	r3, r0, #28
    ab22:	d401      	bmi.n	ab28 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    ab24:	f7ff fee2 	bl	a8ec <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    ab28:	fa07 f505 	lsl.w	r5, r7, r5
    ab2c:	ea24 0405 	bic.w	r4, r4, r5
    ab30:	e7d9      	b.n	aae6 <nrfx_usbd_stop+0x22>
    ab32:	bf00      	nop
    ab34:	e000e100 	.word	0xe000e100
    ab38:	20002138 	.word	0x20002138
    ab3c:	20002134 	.word	0x20002134
    ab40:	40027000 	.word	0x40027000

0000ab44 <nrfx_usbd_disable>:
{
    ab44:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    ab46:	f7ff ffbd 	bl	aac4 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    ab4a:	4b08      	ldr	r3, [pc, #32]	; (ab6c <nrfx_usbd_disable+0x28>)
    ab4c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    ab50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    ab54:	2200      	movs	r2, #0
    ab56:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    ab5a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    ab5e:	f7ff fa51 	bl	a004 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    ab62:	4b03      	ldr	r3, [pc, #12]	; (ab70 <nrfx_usbd_disable+0x2c>)
    ab64:	2201      	movs	r2, #1
    ab66:	701a      	strb	r2, [r3, #0]
}
    ab68:	bd08      	pop	{r3, pc}
    ab6a:	bf00      	nop
    ab6c:	40027000 	.word	0x40027000
    ab70:	20002534 	.word	0x20002534

0000ab74 <nrfx_usbd_ep_disable>:
{
    ab74:	b510      	push	{r4, lr}
    ab76:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    ab78:	f7ff feb8 	bl	a8ec <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    ab7c:	4a10      	ldr	r2, [pc, #64]	; (abc0 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    ab7e:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    ab82:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    ab86:	f04f 0301 	mov.w	r3, #1
    ab8a:	bf14      	ite	ne
    ab8c:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    ab90:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    ab94:	fa03 f300 	lsl.w	r3, r3, r0
    ab98:	ea6f 0303 	mvn.w	r3, r3
    ab9c:	bf15      	itete	ne
    ab9e:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    aba0:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    aba2:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    aba6:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    abaa:	bf14      	ite	ne
    abac:	4b05      	ldrne	r3, [pc, #20]	; (abc4 <nrfx_usbd_ep_disable+0x50>)
    abae:	4b06      	ldreq	r3, [pc, #24]	; (abc8 <nrfx_usbd_ep_disable+0x54>)
    abb0:	5c1a      	ldrb	r2, [r3, r0]
    abb2:	2301      	movs	r3, #1
    abb4:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    abb6:	4a02      	ldr	r2, [pc, #8]	; (abc0 <nrfx_usbd_ep_disable+0x4c>)
    abb8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    abbc:	bd10      	pop	{r4, pc}
    abbe:	bf00      	nop
    abc0:	40027000 	.word	0x40027000
    abc4:	00010676 	.word	0x00010676
    abc8:	0001066d 	.word	0x0001066d

0000abcc <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    abcc:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    abd0:	b570      	push	{r4, r5, r6, lr}
    abd2:	4924      	ldr	r1, [pc, #144]	; (ac64 <nrfx_usbd_ep_enable+0x98>)
    abd4:	4604      	mov	r4, r0
    abd6:	f000 030f 	and.w	r3, r0, #15
    abda:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    abde:	d012      	beq.n	ac06 <nrfx_usbd_ep_enable+0x3a>
    abe0:	4a21      	ldr	r2, [pc, #132]	; (ac68 <nrfx_usbd_ep_enable+0x9c>)
    abe2:	5cd2      	ldrb	r2, [r2, r3]
    abe4:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    abe8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    abec:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    abf0:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    abf2:	07d0      	lsls	r0, r2, #31
    abf4:	d406      	bmi.n	ac04 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    abf6:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    abfa:	fa05 f303 	lsl.w	r3, r5, r3
    abfe:	4313      	orrs	r3, r2
    ac00:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    ac04:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    ac06:	4a19      	ldr	r2, [pc, #100]	; (ac6c <nrfx_usbd_ep_enable+0xa0>)
    ac08:	5cd2      	ldrb	r2, [r2, r3]
    ac0a:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    ac0e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    ac12:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    ac16:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    ac18:	07d2      	lsls	r2, r2, #31
    ac1a:	d4f3      	bmi.n	ac04 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    ac1c:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    ac20:	fa05 f203 	lsl.w	r2, r5, r3
    ac24:	4332      	orrs	r2, r6
    ac26:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    ac2a:	2b00      	cmp	r3, #0
    ac2c:	d0ea      	beq.n	ac04 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    ac2e:	0703      	lsls	r3, r0, #28
    ac30:	d4e8      	bmi.n	ac04 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    ac32:	f04f 0320 	mov.w	r3, #32
    ac36:	f3ef 8611 	mrs	r6, BASEPRI
    ac3a:	f383 8812 	msr	BASEPRI_MAX, r3
    ac3e:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    ac42:	f7ff fe29 	bl	a898 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ac46:	4620      	mov	r0, r4
    ac48:	f003 fb0a 	bl	e260 <ep2bit>
    ac4c:	4a08      	ldr	r2, [pc, #32]	; (ac70 <nrfx_usbd_ep_enable+0xa4>)
    ac4e:	6813      	ldr	r3, [r2, #0]
    ac50:	fa05 f000 	lsl.w	r0, r5, r0
    ac54:	ea23 0300 	bic.w	r3, r3, r0
    ac58:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    ac5a:	f386 8811 	msr	BASEPRI, r6
    ac5e:	f3bf 8f6f 	isb	sy
}
    ac62:	e7cf      	b.n	ac04 <nrfx_usbd_ep_enable+0x38>
    ac64:	40027000 	.word	0x40027000
    ac68:	00010676 	.word	0x00010676
    ac6c:	0001066d 	.word	0x0001066d
    ac70:	20002134 	.word	0x20002134

0000ac74 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    ac74:	0603      	lsls	r3, r0, #24
{
    ac76:	b510      	push	{r4, lr}
    ac78:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    ac7a:	d405      	bmi.n	ac88 <nrfx_usbd_ep_stall_clear+0x14>
    ac7c:	f7ff fd7a 	bl	a774 <nrfx_usbd_ep_stall_check>
    ac80:	b110      	cbz	r0, ac88 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    ac82:	4620      	mov	r0, r4
    ac84:	f7ff fe08 	bl	a898 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    ac88:	4b01      	ldr	r3, [pc, #4]	; (ac90 <nrfx_usbd_ep_stall_clear+0x1c>)
    ac8a:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    ac8e:	bd10      	pop	{r4, pc}
    ac90:	40027000 	.word	0x40027000

0000ac94 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    ac94:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    ac96:	4c11      	ldr	r4, [pc, #68]	; (acdc <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    ac98:	4a11      	ldr	r2, [pc, #68]	; (ace0 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    ac9a:	4912      	ldr	r1, [pc, #72]	; (ace4 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    ac9c:	2303      	movs	r3, #3
    ac9e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    aca0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    aca2:	4b11      	ldr	r3, [pc, #68]	; (ace8 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    aca4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    aca6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    aca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    acac:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    acae:	2300      	movs	r3, #0
    acb0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    acb2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    acb4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    acb6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    acb8:	4a0c      	ldr	r2, [pc, #48]	; (acec <_DoInit+0x58>)
    acba:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    acbc:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    acbe:	2210      	movs	r2, #16
    acc0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    acc2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    acc4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    acc6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    acc8:	f002 fcd9 	bl	d67e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    accc:	4908      	ldr	r1, [pc, #32]	; (acf0 <_DoInit+0x5c>)
    acce:	4620      	mov	r0, r4
    acd0:	f002 fcd5 	bl	d67e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    acd4:	2320      	movs	r3, #32
    acd6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    acd8:	bd10      	pop	{r4, pc}
    acda:	bf00      	nop
    acdc:	20002140 	.word	0x20002140
    ace0:	00010689 	.word	0x00010689
    ace4:	00010692 	.word	0x00010692
    ace8:	20002545 	.word	0x20002545
    acec:	20002535 	.word	0x20002535
    acf0:	00010696 	.word	0x00010696

0000acf4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    acf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    acf8:	4f21      	ldr	r7, [pc, #132]	; (ad80 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    acfa:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    acfe:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    ad00:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    ad04:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    ad06:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    ad08:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    ad0a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    ad0c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    ad0e:	d831      	bhi.n	ad74 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    ad10:	f8d2 a020 	ldr.w	sl, [r2, #32]
    ad14:	ebaa 0905 	sub.w	r9, sl, r5
    ad18:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    ad1c:	4294      	cmp	r4, r2
    ad1e:	d811      	bhi.n	ad44 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    ad20:	2318      	movs	r3, #24
    ad22:	fb06 3303 	mla	r3, r6, r3, r3
    ad26:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    ad28:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    ad2a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    ad2c:	4641      	mov	r1, r8
    ad2e:	4428      	add	r0, r5
    ad30:	f002 fcbf 	bl	d6b2 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    ad34:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    ad36:	2318      	movs	r3, #24
    ad38:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    ad3c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    ad3e:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    ad40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    ad44:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    ad46:	429c      	cmp	r4, r3
    ad48:	d818      	bhi.n	ad7c <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    ad4a:	fb00 bb0b 	mla	fp, r0, fp, fp
    ad4e:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    ad50:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    ad52:	f8db 0004 	ldr.w	r0, [fp, #4]
    ad56:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    ad58:	4428      	add	r0, r5
    ad5a:	f002 fcaa 	bl	d6b2 <memcpy>
      if (NumBytes) {
    ad5e:	ebb4 040a 	subs.w	r4, r4, sl
    ad62:	d0e8      	beq.n	ad36 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    ad64:	f8db 0004 	ldr.w	r0, [fp, #4]
    ad68:	4622      	mov	r2, r4
    ad6a:	eb08 0109 	add.w	r1, r8, r9
    ad6e:	f002 fca0 	bl	d6b2 <memcpy>
      return 1;
    ad72:	e7e0      	b.n	ad36 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    ad74:	3b01      	subs	r3, #1
    ad76:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    ad78:	42a3      	cmp	r3, r4
    ad7a:	d2d1      	bcs.n	ad20 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    ad7c:	2000      	movs	r0, #0
    ad7e:	e7df      	b.n	ad40 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    ad80:	20002140 	.word	0x20002140

0000ad84 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    ad84:	4b03      	ldr	r3, [pc, #12]	; (ad94 <SEGGER_RTT_HasDataUp+0x10>)
    ad86:	2218      	movs	r2, #24
    ad88:	fb02 3300 	mla	r3, r2, r0, r3
    ad8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    ad8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    ad90:	1a80      	subs	r0, r0, r2
    ad92:	4770      	bx	lr
    ad94:	20002140 	.word	0x20002140

0000ad98 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    ad98:	4803      	ldr	r0, [pc, #12]	; (ada8 <zephyr_rtt_mutex_lock+0x10>)
    ad9a:	f04f 32ff 	mov.w	r2, #4294967295
    ad9e:	f04f 33ff 	mov.w	r3, #4294967295
    ada2:	f000 ba8f 	b.w	b2c4 <z_impl_k_mutex_lock>
    ada6:	bf00      	nop
    ada8:	20000340 	.word	0x20000340

0000adac <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    adac:	4801      	ldr	r0, [pc, #4]	; (adb4 <zephyr_rtt_mutex_unlock+0x8>)
    adae:	f000 bb03 	b.w	b3b8 <z_impl_k_mutex_unlock>
    adb2:	bf00      	nop
    adb4:	20000340 	.word	0x20000340

0000adb8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    adb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    adbc:	b086      	sub	sp, #24
    adbe:	4605      	mov	r5, r0
    adc0:	af00      	add	r7, sp, #0
    adc2:	460e      	mov	r6, r1
	__asm__ volatile(
    adc4:	f04f 0320 	mov.w	r3, #32
    adc8:	f3ef 8811 	mrs	r8, BASEPRI
    adcc:	f383 8812 	msr	BASEPRI_MAX, r3
    add0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    add4:	f001 f814 	bl	be00 <z_impl_z_current_get>
    add8:	2d04      	cmp	r5, #4
    adda:	bf96      	itet	ls
    addc:	4b2c      	ldrls	r3, [pc, #176]	; (ae90 <z_fatal_error+0xd8>)
    adde:	4b2d      	ldrhi	r3, [pc, #180]	; (ae94 <z_fatal_error+0xdc>)
    ade0:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    ade4:	46e9      	mov	r9, sp
    ade6:	b08a      	sub	sp, #40	; 0x28
    ade8:	4604      	mov	r4, r0
    adea:	466a      	mov	r2, sp
    adec:	492a      	ldr	r1, [pc, #168]	; (ae98 <z_fatal_error+0xe0>)
    adee:	61d3      	str	r3, [r2, #28]
    adf0:	f240 3301 	movw	r3, #769	; 0x301
    adf4:	8493      	strh	r3, [r2, #36]	; 0x24
    adf6:	f04f 0a00 	mov.w	sl, #0
    adfa:	4b28      	ldr	r3, [pc, #160]	; (ae9c <z_fatal_error+0xe4>)
    adfc:	f8c2 a020 	str.w	sl, [r2, #32]
    ae00:	e9c2 1505 	strd	r1, r5, [r2, #20]
    ae04:	f842 3f10 	str.w	r3, [r2, #16]!
    ae08:	4825      	ldr	r0, [pc, #148]	; (aea0 <z_fatal_error+0xe8>)
    ae0a:	4653      	mov	r3, sl
    ae0c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    ae10:	f7f6 fedc 	bl	1bcc <z_impl_z_log_msg_static_create>
    ae14:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    ae16:	b17e      	cbz	r6, ae38 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    ae18:	69f3      	ldr	r3, [r6, #28]
    ae1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    ae1e:	b15b      	cbz	r3, ae38 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    ae20:	4b20      	ldr	r3, [pc, #128]	; (aea4 <z_fatal_error+0xec>)
    ae22:	617b      	str	r3, [r7, #20]
    ae24:	2302      	movs	r3, #2
    ae26:	613b      	str	r3, [r7, #16]
    ae28:	481d      	ldr	r0, [pc, #116]	; (aea0 <z_fatal_error+0xe8>)
    ae2a:	4653      	mov	r3, sl
    ae2c:	f107 0210 	add.w	r2, r7, #16
    ae30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ae34:	f7f6 feca 	bl	1bcc <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    ae38:	b12c      	cbz	r4, ae46 <z_fatal_error+0x8e>
    ae3a:	4620      	mov	r0, r4
    ae3c:	f003 fae8 	bl	e410 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    ae40:	b108      	cbz	r0, ae46 <z_fatal_error+0x8e>
    ae42:	7803      	ldrb	r3, [r0, #0]
    ae44:	b903      	cbnz	r3, ae48 <z_fatal_error+0x90>
		thread_name = "unknown";
    ae46:	4818      	ldr	r0, [pc, #96]	; (aea8 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    ae48:	46e9      	mov	r9, sp
    ae4a:	b08a      	sub	sp, #40	; 0x28
    ae4c:	466a      	mov	r2, sp
    ae4e:	4b17      	ldr	r3, [pc, #92]	; (aeac <z_fatal_error+0xf4>)
    ae50:	61d0      	str	r0, [r2, #28]
    ae52:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ae56:	f240 3301 	movw	r3, #769	; 0x301
    ae5a:	8413      	strh	r3, [r2, #32]
    ae5c:	4b14      	ldr	r3, [pc, #80]	; (aeb0 <z_fatal_error+0xf8>)
    ae5e:	f842 3f10 	str.w	r3, [r2, #16]!
    ae62:	2300      	movs	r3, #0
    ae64:	480e      	ldr	r0, [pc, #56]	; (aea0 <z_fatal_error+0xe8>)
    ae66:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    ae6a:	f7f6 feaf 	bl	1bcc <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    ae6e:	4631      	mov	r1, r6
    ae70:	46cd      	mov	sp, r9
    ae72:	4628      	mov	r0, r5
    ae74:	f7fd fdb2 	bl	89dc <k_sys_fatal_error_handler>
	__asm__ volatile(
    ae78:	f388 8811 	msr	BASEPRI, r8
    ae7c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    ae80:	4620      	mov	r0, r4
    ae82:	f7f9 f943 	bl	410c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    ae86:	3718      	adds	r7, #24
    ae88:	46bd      	mov	sp, r7
    ae8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ae8e:	bf00      	nop
    ae90:	0000f4d0 	.word	0x0000f4d0
    ae94:	0001069d 	.word	0x0001069d
    ae98:	000106b3 	.word	0x000106b3
    ae9c:	01000005 	.word	0x01000005
    aea0:	0000f000 	.word	0x0000f000
    aea4:	000106db 	.word	0x000106db
    aea8:	000106ab 	.word	0x000106ab
    aeac:	000106fc 	.word	0x000106fc
    aeb0:	01000004 	.word	0x01000004

0000aeb4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    aeb4:	4b10      	ldr	r3, [pc, #64]	; (aef8 <z_sys_init_run_level+0x44>)
{
    aeb6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    aeb8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    aebc:	3001      	adds	r0, #1
    aebe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    aec2:	42a6      	cmp	r6, r4
    aec4:	d800      	bhi.n	aec8 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    aec6:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    aec8:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    aecc:	b18d      	cbz	r5, aef2 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    aece:	4628      	mov	r0, r5
    aed0:	4798      	blx	r3
			if (rc != 0) {
    aed2:	b138      	cbz	r0, aee4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    aed4:	2800      	cmp	r0, #0
    aed6:	bfb8      	it	lt
    aed8:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    aeda:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    aedc:	28ff      	cmp	r0, #255	; 0xff
    aede:	bfa8      	it	ge
    aee0:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    aee2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    aee4:	68ea      	ldr	r2, [r5, #12]
    aee6:	7853      	ldrb	r3, [r2, #1]
    aee8:	f043 0301 	orr.w	r3, r3, #1
    aeec:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    aeee:	3408      	adds	r4, #8
    aef0:	e7e7      	b.n	aec2 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    aef2:	4798      	blx	r3
    aef4:	e7fb      	b.n	aeee <z_sys_init_run_level+0x3a>
    aef6:	bf00      	nop
    aef8:	0000f4e4 	.word	0x0000f4e4

0000aefc <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    aefc:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    aefe:	4b0a      	ldr	r3, [pc, #40]	; (af28 <bg_thread_main+0x2c>)
    af00:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    af02:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    af04:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    af06:	f7ff ffd5 	bl	aeb4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    af0a:	f001 fa91 	bl	c430 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    af0e:	2004      	movs	r0, #4
    af10:	f7ff ffd0 	bl	aeb4 <z_sys_init_run_level>

	z_init_static_threads();
    af14:	f000 f95e 	bl	b1d4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    af18:	f7f5 fa5c 	bl	3d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    af1c:	4a03      	ldr	r2, [pc, #12]	; (af2c <bg_thread_main+0x30>)
    af1e:	7b13      	ldrb	r3, [r2, #12]
    af20:	f023 0301 	bic.w	r3, r3, #1
    af24:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    af26:	bd08      	pop	{r3, pc}
    af28:	20002945 	.word	0x20002945
    af2c:	20000ab8 	.word	0x20000ab8

0000af30 <z_bss_zero>:
{
    af30:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    af32:	4803      	ldr	r0, [pc, #12]	; (af40 <z_bss_zero+0x10>)
    af34:	4a03      	ldr	r2, [pc, #12]	; (af44 <z_bss_zero+0x14>)
    af36:	2100      	movs	r1, #0
    af38:	1a12      	subs	r2, r2, r0
    af3a:	f003 fa0f 	bl	e35c <z_early_memset>
}
    af3e:	bd08      	pop	{r3, pc}
    af40:	20000438 	.word	0x20000438
    af44:	20002948 	.word	0x20002948

0000af48 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    af48:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    af4a:	2300      	movs	r3, #0
{
    af4c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    af4e:	2201      	movs	r2, #1
    af50:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    af54:	4e13      	ldr	r6, [pc, #76]	; (afa4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    af56:	4d14      	ldr	r5, [pc, #80]	; (afa8 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    af58:	9301      	str	r3, [sp, #4]
    af5a:	220f      	movs	r2, #15
    af5c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    af60:	4912      	ldr	r1, [pc, #72]	; (afac <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    af62:	2314      	movs	r3, #20
    af64:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    af68:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    af6c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    af6e:	f44f 70c0 	mov.w	r0, #384	; 0x180
    af72:	fb00 1104 	mla	r1, r0, r4, r1
    af76:	4b0e      	ldr	r3, [pc, #56]	; (afb0 <z_init_cpu+0x68>)
    af78:	9500      	str	r5, [sp, #0]
    af7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    af7e:	4630      	mov	r0, r6
    af80:	f000 f8ca 	bl	b118 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    af84:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    af86:	4a0b      	ldr	r2, [pc, #44]	; (afb4 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    af88:	60ee      	str	r6, [r5, #12]
    af8a:	f023 0304 	bic.w	r3, r3, #4
    af8e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    af90:	f44f 6304 	mov.w	r3, #2112	; 0x840
    af94:	fb04 3303 	mla	r3, r4, r3, r3
    af98:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    af9a:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    af9c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    af9e:	b006      	add	sp, #24
    afa0:	bd70      	pop	{r4, r5, r6, pc}
    afa2:	bf00      	nop
    afa4:	20000a38 	.word	0x20000a38
    afa8:	200021e8 	.word	0x200021e8
    afac:	20003d80 	.word	0x20003d80
    afb0:	0000b28d 	.word	0x0000b28d
    afb4:	20003540 	.word	0x20003540

0000afb8 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    afb8:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    afba:	2000      	movs	r0, #0
{
    afbc:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    afbe:	f7ff ff79 	bl	aeb4 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    afc2:	4b2e      	ldr	r3, [pc, #184]	; (b07c <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    afc4:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    afc8:	4d2d      	ldr	r5, [pc, #180]	; (b080 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    afca:	4e2e      	ldr	r6, [pc, #184]	; (b084 <z_cstart+0xcc>)
    afcc:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    afce:	4f2e      	ldr	r7, [pc, #184]	; (b088 <z_cstart+0xd0>)
    afd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    afd4:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    afd6:	2400      	movs	r4, #0
    afd8:	23e0      	movs	r3, #224	; 0xe0
    afda:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    afde:	77ec      	strb	r4, [r5, #31]
    afe0:	762c      	strb	r4, [r5, #24]
    afe2:	766c      	strb	r4, [r5, #25]
    afe4:	76ac      	strb	r4, [r5, #26]
    afe6:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    afea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    afec:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    aff0:	626b      	str	r3, [r5, #36]	; 0x24
    aff2:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    aff6:	f7f8 fffd 	bl	3ff4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    affa:	f7f8 fb4f 	bl	369c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    affe:	f04f 33ff 	mov.w	r3, #4294967295
    b002:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    b004:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    b006:	f7f9 f951 	bl	42ac <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    b00a:	f7f9 f895 	bl	4138 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    b00e:	f7f6 fc69 	bl	18e4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    b012:	f240 1301 	movw	r3, #257	; 0x101
    b016:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    b01a:	ab06      	add	r3, sp, #24
    b01c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    b01e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
    b022:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    b024:	f003 f98e 	bl	e344 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    b028:	2001      	movs	r0, #1
    b02a:	f7ff ff43 	bl	aeb4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    b02e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    b030:	4d16      	ldr	r5, [pc, #88]	; (b08c <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    b032:	f7ff ff3f 	bl	aeb4 <z_sys_init_run_level>
	z_sched_init();
    b036:	f000 fe25 	bl	bc84 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b03a:	4b15      	ldr	r3, [pc, #84]	; (b090 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    b03c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b03e:	9305      	str	r3, [sp, #20]
    b040:	2301      	movs	r3, #1
    b042:	4914      	ldr	r1, [pc, #80]	; (b094 <z_cstart+0xdc>)
    b044:	9400      	str	r4, [sp, #0]
    b046:	e9cd 4303 	strd	r4, r3, [sp, #12]
    b04a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b04e:	463b      	mov	r3, r7
    b050:	e9cd 4401 	strd	r4, r4, [sp, #4]
    b054:	4628      	mov	r0, r5
    b056:	f000 f85f 	bl	b118 <z_setup_new_thread>
    b05a:	7b6a      	ldrb	r2, [r5, #13]
    b05c:	4606      	mov	r6, r0
    b05e:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    b062:	4628      	mov	r0, r5
    b064:	736a      	strb	r2, [r5, #13]
    b066:	f003 fafd 	bl	e664 <z_ready_thread>
	z_init_cpu(0);
    b06a:	4620      	mov	r0, r4
    b06c:	f7ff ff6c 	bl	af48 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    b070:	463a      	mov	r2, r7
    b072:	4631      	mov	r1, r6
    b074:	4628      	mov	r0, r5
    b076:	f7f8 fc85 	bl	3984 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    b07a:	bf00      	nop
    b07c:	20003d80 	.word	0x20003d80
    b080:	e000ed00 	.word	0xe000ed00
    b084:	200021e8 	.word	0x200021e8
    b088:	0000aefd 	.word	0x0000aefd
    b08c:	20000ab8 	.word	0x20000ab8
    b090:	0000f5ca 	.word	0x0000f5ca
    b094:	20003f00 	.word	0x20003f00

0000b098 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    b098:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b09a:	4c06      	ldr	r4, [pc, #24]	; (b0b4 <init_mem_slab_module+0x1c>)
    b09c:	4d06      	ldr	r5, [pc, #24]	; (b0b8 <init_mem_slab_module+0x20>)
	int rc = 0;
    b09e:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b0a0:	42ac      	cmp	r4, r5
    b0a2:	d300      	bcc.n	b0a6 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    b0a4:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    b0a6:	4620      	mov	r0, r4
    b0a8:	f003 f95c 	bl	e364 <create_free_list>
		if (rc < 0) {
    b0ac:	2800      	cmp	r0, #0
    b0ae:	dbf9      	blt.n	b0a4 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b0b0:	341c      	adds	r4, #28
    b0b2:	e7f5      	b.n	b0a0 <init_mem_slab_module+0x8>
    b0b4:	200002e8 	.word	0x200002e8
    b0b8:	20000304 	.word	0x20000304

0000b0bc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    b0bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b0be:	460c      	mov	r4, r1
	__asm__ volatile(
    b0c0:	f04f 0520 	mov.w	r5, #32
    b0c4:	f3ef 8111 	mrs	r1, BASEPRI
    b0c8:	f385 8812 	msr	BASEPRI_MAX, r5
    b0cc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    b0d0:	6945      	ldr	r5, [r0, #20]
    b0d2:	b15d      	cbz	r5, b0ec <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    b0d4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    b0d6:	682b      	ldr	r3, [r5, #0]
    b0d8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    b0da:	6983      	ldr	r3, [r0, #24]
    b0dc:	3301      	adds	r3, #1
    b0de:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    b0e0:	2000      	movs	r0, #0
	__asm__ volatile(
    b0e2:	f381 8811 	msr	BASEPRI, r1
    b0e6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    b0ea:	e011      	b.n	b110 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    b0ec:	ea52 0603 	orrs.w	r6, r2, r3
    b0f0:	d103      	bne.n	b0fa <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    b0f2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    b0f4:	f06f 000b 	mvn.w	r0, #11
    b0f8:	e7f3      	b.n	b0e2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    b0fa:	e9cd 2300 	strd	r2, r3, [sp]
    b0fe:	4602      	mov	r2, r0
    b100:	3008      	adds	r0, #8
    b102:	f000 fcc9 	bl	ba98 <z_pend_curr>
		if (result == 0) {
    b106:	b918      	cbnz	r0, b110 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    b108:	4b02      	ldr	r3, [pc, #8]	; (b114 <k_mem_slab_alloc+0x58>)
    b10a:	689b      	ldr	r3, [r3, #8]
    b10c:	695b      	ldr	r3, [r3, #20]
    b10e:	6023      	str	r3, [r4, #0]
}
    b110:	b002      	add	sp, #8
    b112:	bd70      	pop	{r4, r5, r6, pc}
    b114:	200021e8 	.word	0x200021e8

0000b118 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    b118:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    b11c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    b11e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    b120:	2604      	movs	r6, #4
    b122:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    b124:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b126:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    b128:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    b12c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b12e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    b130:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    b136:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b138:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    b13c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    b13e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    b142:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    b146:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    b148:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    b14a:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b14c:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b150:	9202      	str	r2, [sp, #8]
    b152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b154:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    b156:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b15a:	9200      	str	r2, [sp, #0]
    b15c:	4642      	mov	r2, r8
{
    b15e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b160:	f7f8 fbde 	bl	3920 <arch_new_thread>
	if (!_current) {
    b164:	4b04      	ldr	r3, [pc, #16]	; (b178 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    b166:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    b168:	689b      	ldr	r3, [r3, #8]
    b16a:	b103      	cbz	r3, b16e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    b16c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    b16e:	6763      	str	r3, [r4, #116]	; 0x74
}
    b170:	4640      	mov	r0, r8
    b172:	b004      	add	sp, #16
    b174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b178:	200021e8 	.word	0x200021e8

0000b17c <z_impl_k_thread_create>:
{
    b17c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b17e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b180:	2500      	movs	r5, #0
    b182:	9505      	str	r5, [sp, #20]
    b184:	9d10      	ldr	r5, [sp, #64]	; 0x40
    b186:	9504      	str	r5, [sp, #16]
    b188:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b18a:	9503      	str	r5, [sp, #12]
    b18c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b18e:	9502      	str	r5, [sp, #8]
{
    b190:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b194:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    b196:	9501      	str	r5, [sp, #4]
    b198:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b19a:	9500      	str	r5, [sp, #0]
{
    b19c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b19e:	f7ff ffbb 	bl	b118 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    b1a2:	f1b6 3fff 	cmp.w	r6, #4294967295
    b1a6:	bf08      	it	eq
    b1a8:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    b1ac:	d005      	beq.n	b1ba <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b1ae:	ea56 0307 	orrs.w	r3, r6, r7
    b1b2:	d105      	bne.n	b1c0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    b1b4:	4620      	mov	r0, r4
    b1b6:	f000 fce5 	bl	bb84 <z_sched_start>
}
    b1ba:	4620      	mov	r0, r4
    b1bc:	b007      	add	sp, #28
    b1be:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b1c0:	4903      	ldr	r1, [pc, #12]	; (b1d0 <z_impl_k_thread_create+0x54>)
    b1c2:	463a      	mov	r2, r7
    b1c4:	4633      	mov	r3, r6
    b1c6:	f104 0018 	add.w	r0, r4, #24
    b1ca:	f000 fef1 	bl	bfb0 <z_add_timeout>
    b1ce:	e7f4      	b.n	b1ba <z_impl_k_thread_create+0x3e>
    b1d0:	0000e6ed 	.word	0x0000e6ed

0000b1d4 <z_init_static_threads>:
{
    b1d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b1d8:	4c29      	ldr	r4, [pc, #164]	; (b280 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    b1da:	4d2a      	ldr	r5, [pc, #168]	; (b284 <z_init_static_threads+0xb0>)
{
    b1dc:	b087      	sub	sp, #28
    b1de:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    b1e0:	42ae      	cmp	r6, r5
    b1e2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    b1e6:	d30f      	bcc.n	b208 <z_init_static_threads+0x34>
	k_sched_lock();
    b1e8:	f000 fd1c 	bl	bc24 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    b1ec:	4c24      	ldr	r4, [pc, #144]	; (b280 <z_init_static_threads+0xac>)
    b1ee:	f8df 9098 	ldr.w	r9, [pc, #152]	; b288 <z_init_static_threads+0xb4>
    b1f2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    b1f6:	f240 37e7 	movw	r7, #999	; 0x3e7
    b1fa:	42ac      	cmp	r4, r5
    b1fc:	d320      	bcc.n	b240 <z_init_static_threads+0x6c>
}
    b1fe:	b007      	add	sp, #28
    b200:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    b204:	f000 bd22 	b.w	bc4c <k_sched_unlock>
		z_setup_new_thread(
    b208:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b20c:	9305      	str	r3, [sp, #20]
    b20e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    b212:	9304      	str	r3, [sp, #16]
    b214:	f854 3c10 	ldr.w	r3, [r4, #-16]
    b218:	9303      	str	r3, [sp, #12]
    b21a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    b21e:	9302      	str	r3, [sp, #8]
    b220:	f854 3c18 	ldr.w	r3, [r4, #-24]
    b224:	9301      	str	r3, [sp, #4]
    b226:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    b22a:	9300      	str	r3, [sp, #0]
    b22c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    b230:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    b234:	f7ff ff70 	bl	b118 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    b238:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    b23c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    b23e:	e7ce      	b.n	b1de <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    b240:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b242:	1c5a      	adds	r2, r3, #1
    b244:	d00d      	beq.n	b262 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    b246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b24a:	2100      	movs	r1, #0
    b24c:	4638      	mov	r0, r7
    b24e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b252:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    b256:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b25a:	d104      	bne.n	b266 <z_init_static_threads+0x92>
	z_sched_start(thread);
    b25c:	4640      	mov	r0, r8
    b25e:	f000 fc91 	bl	bb84 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    b262:	342c      	adds	r4, #44	; 0x2c
    b264:	e7c9      	b.n	b1fa <z_init_static_threads+0x26>
    b266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b26a:	2300      	movs	r3, #0
    b26c:	f7f4 ff48 	bl	100 <__aeabi_uldivmod>
    b270:	4602      	mov	r2, r0
    b272:	460b      	mov	r3, r1
    b274:	f108 0018 	add.w	r0, r8, #24
    b278:	4649      	mov	r1, r9
    b27a:	f000 fe99 	bl	bfb0 <z_add_timeout>
    b27e:	e7f0      	b.n	b262 <z_init_static_threads+0x8e>
    b280:	0000ef4c 	.word	0x0000ef4c
    b284:	0000ef4c 	.word	0x0000ef4c
    b288:	0000e6ed 	.word	0x0000e6ed

0000b28c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    b28c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    b28e:	4c0b      	ldr	r4, [pc, #44]	; (b2bc <idle+0x30>)
	return !z_sys_post_kernel;
    b290:	4d0b      	ldr	r5, [pc, #44]	; (b2c0 <idle+0x34>)
	__asm__ volatile(
    b292:	f04f 0220 	mov.w	r2, #32
    b296:	f3ef 8311 	mrs	r3, BASEPRI
    b29a:	f382 8812 	msr	BASEPRI_MAX, r2
    b29e:	f3bf 8f6f 	isb	sy
    b2a2:	f003 fad1 	bl	e848 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    b2a6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    b2a8:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    b2aa:	b913      	cbnz	r3, b2b2 <idle+0x26>
	arch_cpu_idle();
    b2ac:	f7f8 f9fc 	bl	36a8 <arch_cpu_idle>
}
    b2b0:	e7ef      	b.n	b292 <idle+0x6>
    b2b2:	f7f7 f867 	bl	2384 <pm_system_suspend>
    b2b6:	2800      	cmp	r0, #0
    b2b8:	d1eb      	bne.n	b292 <idle+0x6>
    b2ba:	e7f7      	b.n	b2ac <idle+0x20>
    b2bc:	200021e8 	.word	0x200021e8
    b2c0:	20002945 	.word	0x20002945

0000b2c4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    b2c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b2c8:	4604      	mov	r4, r0
    b2ca:	4617      	mov	r7, r2
    b2cc:	461e      	mov	r6, r3
    b2ce:	f04f 0320 	mov.w	r3, #32
    b2d2:	f3ef 8811 	mrs	r8, BASEPRI
    b2d6:	f383 8812 	msr	BASEPRI_MAX, r3
    b2da:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b2de:	68c3      	ldr	r3, [r0, #12]
    b2e0:	4a33      	ldr	r2, [pc, #204]	; (b3b0 <z_impl_k_mutex_lock+0xec>)
    b2e2:	b17b      	cbz	r3, b304 <z_impl_k_mutex_lock+0x40>
    b2e4:	6880      	ldr	r0, [r0, #8]
    b2e6:	6891      	ldr	r1, [r2, #8]
    b2e8:	4288      	cmp	r0, r1
    b2ea:	d019      	beq.n	b320 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    b2ec:	ea57 0306 	orrs.w	r3, r7, r6
    b2f0:	d118      	bne.n	b324 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    b2f2:	f388 8811 	msr	BASEPRI, r8
    b2f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    b2fa:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    b2fe:	b002      	add	sp, #8
    b300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    b304:	6891      	ldr	r1, [r2, #8]
    b306:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    b30a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    b30c:	3301      	adds	r3, #1
    b30e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    b310:	6893      	ldr	r3, [r2, #8]
    b312:	60a3      	str	r3, [r4, #8]
    b314:	f388 8811 	msr	BASEPRI, r8
    b318:	f3bf 8f6f 	isb	sy
		return 0;
    b31c:	2000      	movs	r0, #0
    b31e:	e7ee      	b.n	b2fe <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    b320:	6921      	ldr	r1, [r4, #16]
    b322:	e7f2      	b.n	b30a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    b324:	f991 100e 	ldrsb.w	r1, [r1, #14]
    b328:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    b32c:	4299      	cmp	r1, r3
    b32e:	bfa8      	it	ge
    b330:	4619      	movge	r1, r3
    b332:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    b336:	4291      	cmp	r1, r2
    b338:	bfb8      	it	lt
    b33a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    b33c:	428b      	cmp	r3, r1
    b33e:	dd2e      	ble.n	b39e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    b340:	f003 f871 	bl	e426 <adjust_owner_prio.isra.0>
    b344:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    b346:	e9cd 7600 	strd	r7, r6, [sp]
    b34a:	481a      	ldr	r0, [pc, #104]	; (b3b4 <z_impl_k_mutex_lock+0xf0>)
    b34c:	4622      	mov	r2, r4
    b34e:	4641      	mov	r1, r8
    b350:	f000 fba2 	bl	ba98 <z_pend_curr>
	if (got_mutex == 0) {
    b354:	2800      	cmp	r0, #0
    b356:	d0e1      	beq.n	b31c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    b358:	f04f 0320 	mov.w	r3, #32
    b35c:	f3ef 8611 	mrs	r6, BASEPRI
    b360:	f383 8812 	msr	BASEPRI_MAX, r3
    b364:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    b368:	68a0      	ldr	r0, [r4, #8]
    b36a:	b1d0      	cbz	r0, b3a2 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    b36c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b36e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b370:	429c      	cmp	r4, r3
    b372:	d00a      	beq.n	b38a <z_impl_k_mutex_lock+0xc6>
    b374:	b14b      	cbz	r3, b38a <z_impl_k_mutex_lock+0xc6>
    b376:	f993 300e 	ldrsb.w	r3, [r3, #14]
    b37a:	4299      	cmp	r1, r3
    b37c:	bfa8      	it	ge
    b37e:	4619      	movge	r1, r3
    b380:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    b384:	4299      	cmp	r1, r3
    b386:	bfb8      	it	lt
    b388:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    b38a:	f003 f84c 	bl	e426 <adjust_owner_prio.isra.0>
    b38e:	b140      	cbz	r0, b3a2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    b390:	4808      	ldr	r0, [pc, #32]	; (b3b4 <z_impl_k_mutex_lock+0xf0>)
    b392:	4631      	mov	r1, r6
    b394:	f000 fbe4 	bl	bb60 <z_reschedule>
	return -EAGAIN;
    b398:	f06f 000a 	mvn.w	r0, #10
    b39c:	e7af      	b.n	b2fe <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    b39e:	2500      	movs	r5, #0
    b3a0:	e7d1      	b.n	b346 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    b3a2:	2d00      	cmp	r5, #0
    b3a4:	d1f4      	bne.n	b390 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    b3a6:	f386 8811 	msr	BASEPRI, r6
    b3aa:	f3bf 8f6f 	isb	sy
    b3ae:	e7f3      	b.n	b398 <z_impl_k_mutex_lock+0xd4>
    b3b0:	200021e8 	.word	0x200021e8
    b3b4:	20002946 	.word	0x20002946

0000b3b8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    b3b8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    b3ba:	6883      	ldr	r3, [r0, #8]
{
    b3bc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    b3be:	b36b      	cbz	r3, b41c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    b3c0:	4a19      	ldr	r2, [pc, #100]	; (b428 <z_impl_k_mutex_unlock+0x70>)
    b3c2:	6892      	ldr	r2, [r2, #8]
    b3c4:	4293      	cmp	r3, r2
    b3c6:	d12c      	bne.n	b422 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    b3c8:	68c3      	ldr	r3, [r0, #12]
    b3ca:	2b01      	cmp	r3, #1
    b3cc:	d903      	bls.n	b3d6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    b3ce:	3b01      	subs	r3, #1
    b3d0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    b3d2:	2000      	movs	r0, #0
}
    b3d4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    b3d6:	f04f 0320 	mov.w	r3, #32
    b3da:	f3ef 8511 	mrs	r5, BASEPRI
    b3de:	f383 8812 	msr	BASEPRI_MAX, r3
    b3e2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    b3e6:	6901      	ldr	r1, [r0, #16]
    b3e8:	6880      	ldr	r0, [r0, #8]
    b3ea:	f003 f81c 	bl	e426 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    b3ee:	4620      	mov	r0, r4
    b3f0:	f003 f997 	bl	e722 <z_unpend_first_thread>
	mutex->owner = new_owner;
    b3f4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    b3f6:	b158      	cbz	r0, b410 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    b3f8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b3fc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b3fe:	2200      	movs	r2, #0
    b400:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    b402:	f003 f92f 	bl	e664 <z_ready_thread>
		z_reschedule(&lock, key);
    b406:	4809      	ldr	r0, [pc, #36]	; (b42c <z_impl_k_mutex_unlock+0x74>)
    b408:	4629      	mov	r1, r5
    b40a:	f000 fba9 	bl	bb60 <z_reschedule>
    b40e:	e7e0      	b.n	b3d2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    b410:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    b412:	f385 8811 	msr	BASEPRI, r5
    b416:	f3bf 8f6f 	isb	sy
    b41a:	e7da      	b.n	b3d2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    b41c:	f06f 0015 	mvn.w	r0, #21
    b420:	e7d8      	b.n	b3d4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    b422:	f04f 30ff 	mov.w	r0, #4294967295
    b426:	e7d5      	b.n	b3d4 <z_impl_k_mutex_unlock+0x1c>
    b428:	200021e8 	.word	0x200021e8
    b42c:	20002946 	.word	0x20002946

0000b430 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    b430:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b432:	4611      	mov	r1, r2
	__asm__ volatile(
    b434:	f04f 0220 	mov.w	r2, #32
    b438:	f3ef 8511 	mrs	r5, BASEPRI
    b43c:	f382 8812 	msr	BASEPRI_MAX, r2
    b440:	f3bf 8f6f 	isb	sy
    b444:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    b446:	b19c      	cbz	r4, b470 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    b448:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    b44a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    b44c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    b450:	4294      	cmp	r4, r2
	list->head = node;
    b452:	6003      	str	r3, [r0, #0]
	list->tail = node;
    b454:	bf08      	it	eq
    b456:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    b458:	2101      	movs	r1, #1
    b45a:	4620      	mov	r0, r4
    b45c:	f003 f858 	bl	e510 <z_queue_node_peek>
    b460:	4604      	mov	r4, r0
	__asm__ volatile(
    b462:	f385 8811 	msr	BASEPRI, r5
    b466:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    b46a:	4620      	mov	r0, r4
    b46c:	b003      	add	sp, #12
    b46e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b470:	ea51 0203 	orrs.w	r2, r1, r3
    b474:	d0f5      	beq.n	b462 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    b476:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    b47a:	e9cd 1300 	strd	r1, r3, [sp]
    b47e:	4610      	mov	r0, r2
    b480:	4629      	mov	r1, r5
    b482:	f000 fb09 	bl	ba98 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    b486:	2800      	cmp	r0, #0
    b488:	d1ef      	bne.n	b46a <z_impl_k_queue_get+0x3a>
    b48a:	4b02      	ldr	r3, [pc, #8]	; (b494 <z_impl_k_queue_get+0x64>)
    b48c:	689b      	ldr	r3, [r3, #8]
    b48e:	695c      	ldr	r4, [r3, #20]
    b490:	e7eb      	b.n	b46a <z_impl_k_queue_get+0x3a>
    b492:	bf00      	nop
    b494:	200021e8 	.word	0x200021e8

0000b498 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    b498:	b538      	push	{r3, r4, r5, lr}
    b49a:	4604      	mov	r4, r0
	__asm__ volatile(
    b49c:	f04f 0320 	mov.w	r3, #32
    b4a0:	f3ef 8511 	mrs	r5, BASEPRI
    b4a4:	f383 8812 	msr	BASEPRI_MAX, r3
    b4a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    b4ac:	f003 f939 	bl	e722 <z_unpend_first_thread>

	if (thread != NULL) {
    b4b0:	b148      	cbz	r0, b4c6 <z_impl_k_sem_give+0x2e>
    b4b2:	2200      	movs	r2, #0
    b4b4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    b4b6:	f003 f8d5 	bl	e664 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    b4ba:	4629      	mov	r1, r5
    b4bc:	4808      	ldr	r0, [pc, #32]	; (b4e0 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    b4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    b4c2:	f000 bb4d 	b.w	bb60 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b4c6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    b4ca:	429a      	cmp	r2, r3
    b4cc:	bf18      	it	ne
    b4ce:	3301      	addne	r3, #1
    b4d0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    b4d2:	2102      	movs	r1, #2
    b4d4:	f104 0010 	add.w	r0, r4, #16
    b4d8:	f003 fb4c 	bl	eb74 <z_handle_obj_poll_events>
}
    b4dc:	e7ed      	b.n	b4ba <z_impl_k_sem_give+0x22>
    b4de:	bf00      	nop
    b4e0:	20002946 	.word	0x20002946

0000b4e4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    b4e4:	b513      	push	{r0, r1, r4, lr}
    b4e6:	f04f 0420 	mov.w	r4, #32
    b4ea:	f3ef 8111 	mrs	r1, BASEPRI
    b4ee:	f384 8812 	msr	BASEPRI_MAX, r4
    b4f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    b4f6:	6884      	ldr	r4, [r0, #8]
    b4f8:	b144      	cbz	r4, b50c <z_impl_k_sem_take+0x28>
		sem->count--;
    b4fa:	3c01      	subs	r4, #1
    b4fc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    b4fe:	f381 8811 	msr	BASEPRI, r1
    b502:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b506:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    b508:	b002      	add	sp, #8
    b50a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b50c:	ea52 0403 	orrs.w	r4, r2, r3
    b510:	d106      	bne.n	b520 <z_impl_k_sem_take+0x3c>
    b512:	f381 8811 	msr	BASEPRI, r1
    b516:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b51a:	f06f 000f 	mvn.w	r0, #15
    b51e:	e7f3      	b.n	b508 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b520:	e9cd 2300 	strd	r2, r3, [sp]
    b524:	4602      	mov	r2, r0
    b526:	4802      	ldr	r0, [pc, #8]	; (b530 <z_impl_k_sem_take+0x4c>)
    b528:	f000 fab6 	bl	ba98 <z_pend_curr>
	return ret;
    b52c:	e7ec      	b.n	b508 <z_impl_k_sem_take+0x24>
    b52e:	bf00      	nop
    b530:	20002946 	.word	0x20002946

0000b534 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
    b534:	b570      	push	{r4, r5, r6, lr}
    b536:	4604      	mov	r4, r0
	__asm__ volatile(
    b538:	f04f 0320 	mov.w	r3, #32
    b53c:	f3ef 8511 	mrs	r5, BASEPRI
    b540:	f383 8812 	msr	BASEPRI_MAX, r3
    b544:	f3bf 8f6f 	isb	sy
    b548:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
    b54c:	4620      	mov	r0, r4
    b54e:	f003 f8e8 	bl	e722 <z_unpend_first_thread>
		if (thread == NULL) {
    b552:	b118      	cbz	r0, b55c <z_impl_k_sem_reset+0x28>
    b554:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
    b556:	f003 f885 	bl	e664 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
    b55a:	e7f7      	b.n	b54c <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
    b55c:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    b55e:	2102      	movs	r1, #2
    b560:	f104 0010 	add.w	r0, r4, #16
    b564:	f003 fb06 	bl	eb74 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
    b568:	4629      	mov	r1, r5
    b56a:	4802      	ldr	r0, [pc, #8]	; (b574 <z_impl_k_sem_reset+0x40>)
}
    b56c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    b570:	f000 baf6 	b.w	bb60 <z_reschedule>
    b574:	20002946 	.word	0x20002946

0000b578 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    b578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    b57a:	4b09      	ldr	r3, [pc, #36]	; (b5a0 <k_sys_work_q_init+0x28>)
    b57c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    b57e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    b580:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    b582:	9300      	str	r3, [sp, #0]
    b584:	4907      	ldr	r1, [pc, #28]	; (b5a4 <k_sys_work_q_init+0x2c>)
    b586:	4808      	ldr	r0, [pc, #32]	; (b5a8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    b588:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    b58c:	f04f 33ff 	mov.w	r3, #4294967295
    b590:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b594:	f000 f906 	bl	b7a4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    b598:	4620      	mov	r0, r4
    b59a:	b004      	add	sp, #16
    b59c:	bd10      	pop	{r4, pc}
    b59e:	bf00      	nop
    b5a0:	00010761 	.word	0x00010761
    b5a4:	20004340 	.word	0x20004340
    b5a8:	20000b38 	.word	0x20000b38

0000b5ac <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    b5b0:	4e4a      	ldr	r6, [pc, #296]	; (b6dc <work_queue_main+0x130>)
    b5b2:	b085      	sub	sp, #20
    b5b4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    b5b6:	f04f 38ff 	mov.w	r8, #4294967295
    b5ba:	f04f 39ff 	mov.w	r9, #4294967295
    b5be:	f04f 0320 	mov.w	r3, #32
    b5c2:	f3ef 8711 	mrs	r7, BASEPRI
    b5c6:	f383 8812 	msr	BASEPRI_MAX, r3
    b5ca:	f3bf 8f6f 	isb	sy
    b5ce:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    b5d2:	b98d      	cbnz	r5, b5f8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    b5d4:	2102      	movs	r1, #2
    b5d6:	f104 0098 	add.w	r0, r4, #152	; 0x98
    b5da:	f002 ffc0 	bl	e55e <flag_test_and_clear>
    b5de:	2800      	cmp	r0, #0
    b5e0:	d143      	bne.n	b66a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    b5e2:	2300      	movs	r3, #0
    b5e4:	e9cd 8900 	strd	r8, r9, [sp]
    b5e8:	9302      	str	r3, [sp, #8]
    b5ea:	f104 0288 	add.w	r2, r4, #136	; 0x88
    b5ee:	4639      	mov	r1, r7
    b5f0:	483b      	ldr	r0, [pc, #236]	; (b6e0 <work_queue_main+0x134>)
    b5f2:	f000 fc6b 	bl	becc <z_sched_wait>
			continue;
    b5f6:	e7e2      	b.n	b5be <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b5f8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    b5fc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    b5fe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b602:	4295      	cmp	r5, r2
	list->tail = node;
    b604:	bf08      	it	eq
    b606:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    b60a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    b60e:	f043 0302 	orr.w	r3, r3, #2
    b612:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    b616:	68eb      	ldr	r3, [r5, #12]
    b618:	f023 0304 	bic.w	r3, r3, #4
    b61c:	f043 0301 	orr.w	r3, r3, #1
    b620:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    b622:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    b624:	f387 8811 	msr	BASEPRI, r7
    b628:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    b62c:	4628      	mov	r0, r5
    b62e:	4798      	blx	r3
	__asm__ volatile(
    b630:	f04f 0320 	mov.w	r3, #32
    b634:	f3ef 8b11 	mrs	fp, BASEPRI
    b638:	f383 8812 	msr	BASEPRI_MAX, r3
    b63c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    b640:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b642:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    b644:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b648:	d419      	bmi.n	b67e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    b64a:	60ea      	str	r2, [r5, #12]
    b64c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    b650:	f023 0302 	bic.w	r3, r3, #2
    b654:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    b658:	f38b 8811 	msr	BASEPRI, fp
    b65c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    b660:	05db      	lsls	r3, r3, #23
    b662:	d4ac      	bmi.n	b5be <work_queue_main+0x12>
	z_impl_k_yield();
    b664:	f000 fb16 	bl	bc94 <z_impl_k_yield>
}
    b668:	e7a9      	b.n	b5be <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    b66a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    b66e:	2200      	movs	r2, #0
    b670:	2101      	movs	r1, #1
    b672:	4628      	mov	r0, r5
    b674:	f003 f8af 	bl	e7d6 <z_sched_wake>
    b678:	2800      	cmp	r0, #0
    b67a:	d1f8      	bne.n	b66e <work_queue_main+0xc2>
    b67c:	e7b1      	b.n	b5e2 <work_queue_main+0x36>
	return list->head;
    b67e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    b680:	f023 0303 	bic.w	r3, r3, #3
    b684:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    b686:	2800      	cmp	r0, #0
    b688:	d0e0      	beq.n	b64c <work_queue_main+0xa0>
	return node->next;
    b68a:	2700      	movs	r7, #0
    b68c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    b690:	463b      	mov	r3, r7
    b692:	2800      	cmp	r0, #0
    b694:	d0da      	beq.n	b64c <work_queue_main+0xa0>
		if (wc->work == work) {
    b696:	6842      	ldr	r2, [r0, #4]
    b698:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    b69a:	4601      	mov	r1, r0
		if (wc->work == work) {
    b69c:	d10c      	bne.n	b6b8 <work_queue_main+0x10c>
	return node->next;
    b69e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    b6a0:	b99f      	cbnz	r7, b6ca <work_queue_main+0x11e>
    b6a2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    b6a4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    b6a6:	4282      	cmp	r2, r0
    b6a8:	d100      	bne.n	b6ac <work_queue_main+0x100>
	list->tail = node;
    b6aa:	6071      	str	r1, [r6, #4]
	parent->next = child;
    b6ac:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    b6b0:	f7ff fef2 	bl	b498 <z_impl_k_sem_give>
}
    b6b4:	4639      	mov	r1, r7
    b6b6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    b6b8:	f1ba 0f00 	cmp.w	sl, #0
    b6bc:	d00b      	beq.n	b6d6 <work_queue_main+0x12a>
	return node->next;
    b6be:	f8da 2000 	ldr.w	r2, [sl]
    b6c2:	4650      	mov	r0, sl
    b6c4:	460f      	mov	r7, r1
    b6c6:	4692      	mov	sl, r2
    b6c8:	e7e3      	b.n	b692 <work_queue_main+0xe6>
	parent->next = child;
    b6ca:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    b6cc:	6872      	ldr	r2, [r6, #4]
    b6ce:	4282      	cmp	r2, r0
	list->tail = node;
    b6d0:	bf08      	it	eq
    b6d2:	6077      	streq	r7, [r6, #4]
}
    b6d4:	e7ea      	b.n	b6ac <work_queue_main+0x100>
    b6d6:	4652      	mov	r2, sl
    b6d8:	e7f3      	b.n	b6c2 <work_queue_main+0x116>
    b6da:	bf00      	nop
    b6dc:	2000220c 	.word	0x2000220c
    b6e0:	20002946 	.word	0x20002946

0000b6e4 <submit_to_queue_locked>:
{
    b6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    b6e6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b6e8:	079a      	lsls	r2, r3, #30
{
    b6ea:	4604      	mov	r4, r0
    b6ec:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b6ee:	f3c3 0640 	ubfx	r6, r3, #1, #1
    b6f2:	d42c      	bmi.n	b74e <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    b6f4:	075b      	lsls	r3, r3, #29
    b6f6:	d41a      	bmi.n	b72e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    b6f8:	680b      	ldr	r3, [r1, #0]
    b6fa:	b90b      	cbnz	r3, b700 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    b6fc:	6883      	ldr	r3, [r0, #8]
    b6fe:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    b700:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    b702:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    b704:	bf44      	itt	mi
    b706:	68a3      	ldrmi	r3, [r4, #8]
    b708:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    b70a:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    b70c:	bf4c      	ite	mi
    b70e:	2602      	movmi	r6, #2
		ret = 1;
    b710:	2601      	movpl	r6, #1
	if (queue == NULL) {
    b712:	2d00      	cmp	r5, #0
    b714:	d03a      	beq.n	b78c <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    b716:	4b1f      	ldr	r3, [pc, #124]	; (b794 <submit_to_queue_locked+0xb0>)
    b718:	689b      	ldr	r3, [r3, #8]
    b71a:	42ab      	cmp	r3, r5
    b71c:	d00a      	beq.n	b734 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    b71e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b722:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    b724:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b728:	d414      	bmi.n	b754 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    b72a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    b72e:	2300      	movs	r3, #0
    b730:	603b      	str	r3, [r7, #0]
	return ret;
    b732:	e025      	b.n	b780 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    b734:	f002 fe63 	bl	e3fe <k_is_in_isr>
    b738:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    b73c:	2800      	cmp	r0, #0
    b73e:	d1f0      	bne.n	b722 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b740:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    b742:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b746:	d5f0      	bpl.n	b72a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    b748:	b152      	cbz	r2, b760 <submit_to_queue_locked+0x7c>
    b74a:	075b      	lsls	r3, r3, #29
    b74c:	d408      	bmi.n	b760 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    b74e:	f06f 060f 	mvn.w	r6, #15
    b752:	e7ec      	b.n	b72e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    b754:	2a00      	cmp	r2, #0
    b756:	d1fa      	bne.n	b74e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    b758:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    b75c:	2b00      	cmp	r3, #0
    b75e:	d1f6      	bne.n	b74e <submit_to_queue_locked+0x6a>
	parent->next = child;
    b760:	2300      	movs	r3, #0
    b762:	6023      	str	r3, [r4, #0]
	return list->tail;
    b764:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    b768:	b963      	cbnz	r3, b784 <submit_to_queue_locked+0xa0>
	list->head = node;
    b76a:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    b76e:	4628      	mov	r0, r5
    b770:	f002 ff00 	bl	e574 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    b774:	68e3      	ldr	r3, [r4, #12]
    b776:	f043 0304 	orr.w	r3, r3, #4
    b77a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    b77c:	683b      	ldr	r3, [r7, #0]
    b77e:	60a3      	str	r3, [r4, #8]
}
    b780:	4630      	mov	r0, r6
    b782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    b784:	601c      	str	r4, [r3, #0]
	list->tail = node;
    b786:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    b78a:	e7f0      	b.n	b76e <submit_to_queue_locked+0x8a>
		return -EINVAL;
    b78c:	f06f 0615 	mvn.w	r6, #21
    b790:	e7cd      	b.n	b72e <submit_to_queue_locked+0x4a>
    b792:	bf00      	nop
    b794:	200021e8 	.word	0x200021e8

0000b798 <k_work_submit>:
{
    b798:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    b79a:	4801      	ldr	r0, [pc, #4]	; (b7a0 <k_work_submit+0x8>)
    b79c:	f002 bf0e 	b.w	e5bc <k_work_submit_to_queue>
    b7a0:	20000b38 	.word	0x20000b38

0000b7a4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    b7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7a6:	b089      	sub	sp, #36	; 0x24
    b7a8:	4604      	mov	r4, r0
	list->head = NULL;
    b7aa:	2000      	movs	r0, #0
	list->tail = NULL;
    b7ac:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    b7b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b7b2:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    b7b6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    b7ba:	f104 0090 	add.w	r0, r4, #144	; 0x90
    b7be:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    b7c2:	b31d      	cbz	r5, b80c <k_work_queue_start+0x68>
    b7c4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    b7c6:	2800      	cmp	r0, #0
    b7c8:	f240 1001 	movw	r0, #257	; 0x101
    b7cc:	bf08      	it	eq
    b7ce:	2001      	moveq	r0, #1
	*flagp = flags;
    b7d0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b7d4:	2000      	movs	r0, #0
    b7d6:	f04f 36ff 	mov.w	r6, #4294967295
    b7da:	f04f 37ff 	mov.w	r7, #4294967295
    b7de:	e9cd 3003 	strd	r3, r0, [sp, #12]
    b7e2:	e9cd 0001 	strd	r0, r0, [sp, #4]
    b7e6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    b7ea:	4b09      	ldr	r3, [pc, #36]	; (b810 <k_work_queue_start+0x6c>)
    b7ec:	9400      	str	r4, [sp, #0]
    b7ee:	4620      	mov	r0, r4
    b7f0:	f7ff fcc4 	bl	b17c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    b7f4:	b125      	cbz	r5, b800 <k_work_queue_start+0x5c>
    b7f6:	6829      	ldr	r1, [r5, #0]
    b7f8:	b111      	cbz	r1, b800 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    b7fa:	4620      	mov	r0, r4
    b7fc:	f002 fe05 	bl	e40a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    b800:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    b802:	b009      	add	sp, #36	; 0x24
    b804:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    b808:	f002 be04 	b.w	e414 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    b80c:	2001      	movs	r0, #1
    b80e:	e7df      	b.n	b7d0 <k_work_queue_start+0x2c>
    b810:	0000b5ad 	.word	0x0000b5ad

0000b814 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    b814:	89c3      	ldrh	r3, [r0, #14]
    b816:	2b7f      	cmp	r3, #127	; 0x7f
    b818:	d812      	bhi.n	b840 <sliceable+0x2c>
	int ret = slice_ticks;
    b81a:	4b0a      	ldr	r3, [pc, #40]	; (b844 <sliceable+0x30>)
    b81c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    b81e:	b163      	cbz	r3, b83a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b820:	4b09      	ldr	r3, [pc, #36]	; (b848 <sliceable+0x34>)
    b822:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b826:	681b      	ldr	r3, [r3, #0]
    b828:	429a      	cmp	r2, r3
    b82a:	db09      	blt.n	b840 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    b82c:	7b43      	ldrb	r3, [r0, #13]
    b82e:	06db      	lsls	r3, r3, #27
    b830:	d106      	bne.n	b840 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    b832:	4b06      	ldr	r3, [pc, #24]	; (b84c <sliceable+0x38>)
    b834:	1ac3      	subs	r3, r0, r3
    b836:	bf18      	it	ne
    b838:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    b83a:	f003 0001 	and.w	r0, r3, #1
    b83e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    b840:	2300      	movs	r3, #0
    b842:	e7fa      	b.n	b83a <sliceable+0x26>
    b844:	2000221c 	.word	0x2000221c
    b848:	20002218 	.word	0x20002218
    b84c:	20000a38 	.word	0x20000a38

0000b850 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    b850:	4b04      	ldr	r3, [pc, #16]	; (b864 <slice_timeout+0x14>)
    b852:	1ac0      	subs	r0, r0, r3
    b854:	4b04      	ldr	r3, [pc, #16]	; (b868 <slice_timeout+0x18>)
    b856:	10c0      	asrs	r0, r0, #3
    b858:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    b85a:	4b04      	ldr	r3, [pc, #16]	; (b86c <slice_timeout+0x1c>)
    b85c:	2201      	movs	r2, #1
    b85e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    b860:	4770      	bx	lr
    b862:	bf00      	nop
    b864:	20000bd8 	.word	0x20000bd8
    b868:	aaaaaaab 	.word	0xaaaaaaab
    b86c:	20002946 	.word	0x20002946

0000b870 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    b870:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    b872:	4b0e      	ldr	r3, [pc, #56]	; (b8ac <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    b874:	4c0e      	ldr	r4, [pc, #56]	; (b8b0 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    b876:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    b878:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    b87c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    b880:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    b882:	4620      	mov	r0, r4
    b884:	f002 ffca 	bl	e81c <z_abort_timeout>
	slice_expired[cpu] = false;
    b888:	4b0a      	ldr	r3, [pc, #40]	; (b8b4 <z_reset_time_slice+0x44>)
    b88a:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    b88c:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    b88e:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    b890:	f7ff ffc0 	bl	b814 <sliceable>
    b894:	b148      	cbz	r0, b8aa <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    b896:	4b08      	ldr	r3, [pc, #32]	; (b8b8 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b898:	4908      	ldr	r1, [pc, #32]	; (b8bc <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    b89a:	681a      	ldr	r2, [r3, #0]
    b89c:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b89e:	4620      	mov	r0, r4
    b8a0:	17d3      	asrs	r3, r2, #31
	}
}
    b8a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b8a6:	f000 bb83 	b.w	bfb0 <z_add_timeout>
}
    b8aa:	bd70      	pop	{r4, r5, r6, pc}
    b8ac:	200021e8 	.word	0x200021e8
    b8b0:	20000bd8 	.word	0x20000bd8
    b8b4:	20002946 	.word	0x20002946
    b8b8:	2000221c 	.word	0x2000221c
    b8bc:	0000b851 	.word	0x0000b851

0000b8c0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    b8c0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    b8c2:	4d0d      	ldr	r5, [pc, #52]	; (b8f8 <update_cache+0x38>)
    b8c4:	462b      	mov	r3, r5
    b8c6:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b8ca:	429c      	cmp	r4, r3
    b8cc:	d000      	beq.n	b8d0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b8ce:	b904      	cbnz	r4, b8d2 <update_cache+0x12>
    b8d0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    b8d2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    b8d4:	b938      	cbnz	r0, b8e6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    b8d6:	7b5a      	ldrb	r2, [r3, #13]
    b8d8:	06d2      	lsls	r2, r2, #27
    b8da:	d104      	bne.n	b8e6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    b8dc:	69a2      	ldr	r2, [r4, #24]
    b8de:	b912      	cbnz	r2, b8e6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    b8e0:	89da      	ldrh	r2, [r3, #14]
    b8e2:	2a7f      	cmp	r2, #127	; 0x7f
    b8e4:	d805      	bhi.n	b8f2 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    b8e6:	429c      	cmp	r4, r3
    b8e8:	d002      	beq.n	b8f0 <update_cache+0x30>
			z_reset_time_slice(thread);
    b8ea:	4620      	mov	r0, r4
    b8ec:	f7ff ffc0 	bl	b870 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    b8f0:	4623      	mov	r3, r4
    b8f2:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    b8f4:	bd38      	pop	{r3, r4, r5, pc}
    b8f6:	bf00      	nop
    b8f8:	200021e8 	.word	0x200021e8

0000b8fc <move_thread_to_end_of_prio_q>:
{
    b8fc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    b8fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    b902:	7b43      	ldrb	r3, [r0, #13]
    b904:	2a00      	cmp	r2, #0
{
    b906:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    b908:	da04      	bge.n	b914 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b90a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b90e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    b910:	f002 fe65 	bl	e5de <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    b914:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    b916:	4a15      	ldr	r2, [pc, #84]	; (b96c <move_thread_to_end_of_prio_q+0x70>)
    b918:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b91c:	4610      	mov	r0, r2
    b91e:	734b      	strb	r3, [r1, #13]
    b920:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    b924:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b926:	4283      	cmp	r3, r0
    b928:	bf08      	it	eq
    b92a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b92c:	b923      	cbnz	r3, b938 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    b92e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    b932:	6021      	str	r1, [r4, #0]
	list->tail = node;
    b934:	6211      	str	r1, [r2, #32]
}
    b936:	e00c      	b.n	b952 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    b938:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    b93c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    b940:	42b5      	cmp	r5, r6
    b942:	d00e      	beq.n	b962 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b944:	42ae      	cmp	r6, r5
    b946:	dd0c      	ble.n	b962 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    b948:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    b94a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    b94e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    b950:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    b952:	6890      	ldr	r0, [r2, #8]
    b954:	1a43      	subs	r3, r0, r1
    b956:	4258      	negs	r0, r3
}
    b958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    b95c:	4158      	adcs	r0, r3
    b95e:	f7ff bfaf 	b.w	b8c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b962:	429c      	cmp	r4, r3
    b964:	d0e3      	beq.n	b92e <move_thread_to_end_of_prio_q+0x32>
    b966:	681b      	ldr	r3, [r3, #0]
    b968:	e7e0      	b.n	b92c <move_thread_to_end_of_prio_q+0x30>
    b96a:	bf00      	nop
    b96c:	200021e8 	.word	0x200021e8

0000b970 <ready_thread>:
{
    b970:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    b972:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b976:	7b42      	ldrb	r2, [r0, #13]
    b978:	2b00      	cmp	r3, #0
    b97a:	db29      	blt.n	b9d0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b97c:	06d3      	lsls	r3, r2, #27
    b97e:	d127      	bne.n	b9d0 <ready_thread+0x60>
	return node->next != NULL;
    b980:	6983      	ldr	r3, [r0, #24]
    b982:	bb2b      	cbnz	r3, b9d0 <ready_thread+0x60>
	return list->head == list;
    b984:	4913      	ldr	r1, [pc, #76]	; (b9d4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    b986:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b98a:	7342      	strb	r2, [r0, #13]
    b98c:	460a      	mov	r2, r1
    b98e:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b992:	4294      	cmp	r4, r2
    b994:	bf18      	it	ne
    b996:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    b998:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b99a:	b923      	cbnz	r3, b9a6 <ready_thread+0x36>
	node->prev = tail;
    b99c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    b9a0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    b9a2:	6208      	str	r0, [r1, #32]
}
    b9a4:	e00c      	b.n	b9c0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    b9a6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    b9aa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    b9ae:	42b5      	cmp	r5, r6
    b9b0:	d00a      	beq.n	b9c8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b9b2:	42ae      	cmp	r6, r5
    b9b4:	dd08      	ble.n	b9c8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    b9b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b9b8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    b9bc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    b9be:	6058      	str	r0, [r3, #4]
}
    b9c0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    b9c2:	2000      	movs	r0, #0
    b9c4:	f7ff bf7c 	b.w	b8c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b9c8:	42a3      	cmp	r3, r4
    b9ca:	d0e7      	beq.n	b99c <ready_thread+0x2c>
    b9cc:	681b      	ldr	r3, [r3, #0]
    b9ce:	e7e4      	b.n	b99a <ready_thread+0x2a>
}
    b9d0:	bc70      	pop	{r4, r5, r6}
    b9d2:	4770      	bx	lr
    b9d4:	200021e8 	.word	0x200021e8

0000b9d8 <unready_thread>:
{
    b9d8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    b9da:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    b9de:	7b43      	ldrb	r3, [r0, #13]
    b9e0:	2a00      	cmp	r2, #0
{
    b9e2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    b9e4:	da04      	bge.n	b9f0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b9e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b9ea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b9ec:	f002 fdf7 	bl	e5de <sys_dlist_remove>
	update_cache(thread == _current);
    b9f0:	4b04      	ldr	r3, [pc, #16]	; (ba04 <unready_thread+0x2c>)
    b9f2:	6898      	ldr	r0, [r3, #8]
    b9f4:	1a43      	subs	r3, r0, r1
    b9f6:	4258      	negs	r0, r3
    b9f8:	4158      	adcs	r0, r3
}
    b9fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    b9fe:	f7ff bf5f 	b.w	b8c0 <update_cache>
    ba02:	bf00      	nop
    ba04:	200021e8 	.word	0x200021e8

0000ba08 <pend_locked>:
{
    ba08:	b570      	push	{r4, r5, r6, lr}
    ba0a:	4615      	mov	r5, r2
    ba0c:	461c      	mov	r4, r3
    ba0e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    ba10:	f002 fe00 	bl	e614 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ba14:	f1b4 3fff 	cmp.w	r4, #4294967295
    ba18:	bf08      	it	eq
    ba1a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    ba1e:	d008      	beq.n	ba32 <pend_locked+0x2a>
    ba20:	462a      	mov	r2, r5
    ba22:	4623      	mov	r3, r4
    ba24:	f106 0018 	add.w	r0, r6, #24
    ba28:	4902      	ldr	r1, [pc, #8]	; (ba34 <pend_locked+0x2c>)
}
    ba2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ba2e:	f000 babf 	b.w	bfb0 <z_add_timeout>
    ba32:	bd70      	pop	{r4, r5, r6, pc}
    ba34:	0000e6ed 	.word	0x0000e6ed

0000ba38 <z_time_slice>:
{
    ba38:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    ba3a:	f04f 0320 	mov.w	r3, #32
    ba3e:	f3ef 8511 	mrs	r5, BASEPRI
    ba42:	f383 8812 	msr	BASEPRI_MAX, r3
    ba46:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    ba4a:	4b10      	ldr	r3, [pc, #64]	; (ba8c <z_time_slice+0x54>)
	if (pending_current == curr) {
    ba4c:	4a10      	ldr	r2, [pc, #64]	; (ba90 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    ba4e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    ba50:	6810      	ldr	r0, [r2, #0]
    ba52:	42a0      	cmp	r0, r4
    ba54:	d106      	bne.n	ba64 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    ba56:	f7ff ff0b 	bl	b870 <z_reset_time_slice>
	__asm__ volatile(
    ba5a:	f385 8811 	msr	BASEPRI, r5
    ba5e:	f3bf 8f6f 	isb	sy
}
    ba62:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    ba64:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    ba66:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    ba68:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    ba6a:	4a0a      	ldr	r2, [pc, #40]	; (ba94 <z_time_slice+0x5c>)
    ba6c:	5cd3      	ldrb	r3, [r2, r3]
    ba6e:	2b00      	cmp	r3, #0
    ba70:	d0f3      	beq.n	ba5a <z_time_slice+0x22>
    ba72:	4620      	mov	r0, r4
    ba74:	f7ff fece 	bl	b814 <sliceable>
    ba78:	2800      	cmp	r0, #0
    ba7a:	d0ee      	beq.n	ba5a <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    ba7c:	7b63      	ldrb	r3, [r4, #13]
    ba7e:	06db      	lsls	r3, r3, #27
    ba80:	d102      	bne.n	ba88 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    ba82:	4620      	mov	r0, r4
    ba84:	f7ff ff3a 	bl	b8fc <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    ba88:	4620      	mov	r0, r4
    ba8a:	e7e4      	b.n	ba56 <z_time_slice+0x1e>
    ba8c:	200021e8 	.word	0x200021e8
    ba90:	20002214 	.word	0x20002214
    ba94:	20002946 	.word	0x20002946

0000ba98 <z_pend_curr>:
{
    ba98:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    ba9a:	480c      	ldr	r0, [pc, #48]	; (bacc <z_pend_curr+0x34>)
    ba9c:	4d0c      	ldr	r5, [pc, #48]	; (bad0 <z_pend_curr+0x38>)
    ba9e:	6886      	ldr	r6, [r0, #8]
    baa0:	602e      	str	r6, [r5, #0]
{
    baa2:	460c      	mov	r4, r1
    baa4:	4611      	mov	r1, r2
    baa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    baaa:	f04f 0620 	mov.w	r6, #32
    baae:	f3ef 8511 	mrs	r5, BASEPRI
    bab2:	f386 8812 	msr	BASEPRI_MAX, r6
    bab6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    baba:	6880      	ldr	r0, [r0, #8]
    babc:	f7ff ffa4 	bl	ba08 <pend_locked>
	ret = arch_swap(key);
    bac0:	4620      	mov	r0, r4
}
    bac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bac6:	f7f7 bed7 	b.w	3878 <arch_swap>
    baca:	bf00      	nop
    bacc:	200021e8 	.word	0x200021e8
    bad0:	20002214 	.word	0x20002214

0000bad4 <z_set_prio>:
{
    bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bad6:	4604      	mov	r4, r0
    bad8:	f04f 0320 	mov.w	r3, #32
    badc:	f3ef 8611 	mrs	r6, BASEPRI
    bae0:	f383 8812 	msr	BASEPRI_MAX, r3
    bae4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    bae8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    baea:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    baec:	b249      	sxtb	r1, r1
    baee:	d119      	bne.n	bb24 <z_set_prio+0x50>
	return node->next != NULL;
    baf0:	6985      	ldr	r5, [r0, #24]
    baf2:	b9bd      	cbnz	r5, bb24 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    baf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    baf8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bafa:	f002 fd70 	bl	e5de <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    bafe:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    bb00:	4a16      	ldr	r2, [pc, #88]	; (bb5c <z_set_prio+0x88>)
				thread->base.prio = prio;
    bb02:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    bb04:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bb08:	7343      	strb	r3, [r0, #13]
    bb0a:	4613      	mov	r3, r2
    bb0c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb10:	4298      	cmp	r0, r3
    bb12:	bf18      	it	ne
    bb14:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    bb16:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bb18:	b95d      	cbnz	r5, bb32 <z_set_prio+0x5e>
	node->prev = tail;
    bb1a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    bb1e:	6004      	str	r4, [r0, #0]
	list->tail = node;
    bb20:	6214      	str	r4, [r2, #32]
}
    bb22:	e011      	b.n	bb48 <z_set_prio+0x74>
			thread->base.prio = prio;
    bb24:	73a1      	strb	r1, [r4, #14]
    bb26:	2000      	movs	r0, #0
	__asm__ volatile(
    bb28:	f386 8811 	msr	BASEPRI, r6
    bb2c:	f3bf 8f6f 	isb	sy
}
    bb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    bb32:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    bb36:	42b9      	cmp	r1, r7
    bb38:	d00b      	beq.n	bb52 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bb3a:	428f      	cmp	r7, r1
    bb3c:	dd09      	ble.n	bb52 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    bb3e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    bb40:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    bb44:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    bb46:	606c      	str	r4, [r5, #4]
			update_cache(1);
    bb48:	2001      	movs	r0, #1
    bb4a:	f7ff feb9 	bl	b8c0 <update_cache>
    bb4e:	2001      	movs	r0, #1
    bb50:	e7ea      	b.n	bb28 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    bb52:	42a8      	cmp	r0, r5
    bb54:	d0e1      	beq.n	bb1a <z_set_prio+0x46>
    bb56:	682d      	ldr	r5, [r5, #0]
    bb58:	e7de      	b.n	bb18 <z_set_prio+0x44>
    bb5a:	bf00      	nop
    bb5c:	200021e8 	.word	0x200021e8

0000bb60 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bb60:	b949      	cbnz	r1, bb76 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bb62:	f3ef 8005 	mrs	r0, IPSR
    bb66:	b930      	cbnz	r0, bb76 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    bb68:	4b05      	ldr	r3, [pc, #20]	; (bb80 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    bb6a:	699a      	ldr	r2, [r3, #24]
    bb6c:	689b      	ldr	r3, [r3, #8]
    bb6e:	429a      	cmp	r2, r3
    bb70:	d001      	beq.n	bb76 <z_reschedule+0x16>
    bb72:	f7f7 be81 	b.w	3878 <arch_swap>
    bb76:	f381 8811 	msr	BASEPRI, r1
    bb7a:	f3bf 8f6f 	isb	sy
}
    bb7e:	4770      	bx	lr
    bb80:	200021e8 	.word	0x200021e8

0000bb84 <z_sched_start>:
{
    bb84:	b510      	push	{r4, lr}
	__asm__ volatile(
    bb86:	f04f 0220 	mov.w	r2, #32
    bb8a:	f3ef 8411 	mrs	r4, BASEPRI
    bb8e:	f382 8812 	msr	BASEPRI_MAX, r2
    bb92:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    bb96:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    bb98:	0751      	lsls	r1, r2, #29
    bb9a:	d404      	bmi.n	bba6 <z_sched_start+0x22>
	__asm__ volatile(
    bb9c:	f384 8811 	msr	BASEPRI, r4
    bba0:	f3bf 8f6f 	isb	sy
}
    bba4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bba6:	f022 0204 	bic.w	r2, r2, #4
    bbaa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    bbac:	f7ff fee0 	bl	b970 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    bbb0:	4621      	mov	r1, r4
    bbb2:	4802      	ldr	r0, [pc, #8]	; (bbbc <z_sched_start+0x38>)
}
    bbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    bbb8:	f7ff bfd2 	b.w	bb60 <z_reschedule>
    bbbc:	20002947 	.word	0x20002947

0000bbc0 <z_impl_k_thread_suspend>:
{
    bbc0:	b570      	push	{r4, r5, r6, lr}
    bbc2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    bbc4:	3018      	adds	r0, #24
    bbc6:	f002 fe29 	bl	e81c <z_abort_timeout>
	__asm__ volatile(
    bbca:	f04f 0320 	mov.w	r3, #32
    bbce:	f3ef 8611 	mrs	r6, BASEPRI
    bbd2:	f383 8812 	msr	BASEPRI_MAX, r3
    bbd6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    bbda:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    bbde:	7b63      	ldrb	r3, [r4, #13]
    bbe0:	2a00      	cmp	r2, #0
    bbe2:	da05      	bge.n	bbf0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bbe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bbe8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bbea:	4620      	mov	r0, r4
    bbec:	f002 fcf7 	bl	e5de <sys_dlist_remove>
		update_cache(thread == _current);
    bbf0:	4d0b      	ldr	r5, [pc, #44]	; (bc20 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    bbf2:	7b63      	ldrb	r3, [r4, #13]
    bbf4:	68a8      	ldr	r0, [r5, #8]
    bbf6:	f043 0310 	orr.w	r3, r3, #16
    bbfa:	7363      	strb	r3, [r4, #13]
    bbfc:	1b03      	subs	r3, r0, r4
    bbfe:	4258      	negs	r0, r3
    bc00:	4158      	adcs	r0, r3
    bc02:	f7ff fe5d 	bl	b8c0 <update_cache>
	__asm__ volatile(
    bc06:	f386 8811 	msr	BASEPRI, r6
    bc0a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    bc0e:	68ab      	ldr	r3, [r5, #8]
    bc10:	42a3      	cmp	r3, r4
    bc12:	d103      	bne.n	bc1c <z_impl_k_thread_suspend+0x5c>
}
    bc14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    bc18:	f002 bdc3 	b.w	e7a2 <z_reschedule_unlocked>
}
    bc1c:	bd70      	pop	{r4, r5, r6, pc}
    bc1e:	bf00      	nop
    bc20:	200021e8 	.word	0x200021e8

0000bc24 <k_sched_lock>:
	__asm__ volatile(
    bc24:	f04f 0320 	mov.w	r3, #32
    bc28:	f3ef 8111 	mrs	r1, BASEPRI
    bc2c:	f383 8812 	msr	BASEPRI_MAX, r3
    bc30:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    bc34:	4b04      	ldr	r3, [pc, #16]	; (bc48 <k_sched_lock+0x24>)
    bc36:	689a      	ldr	r2, [r3, #8]
    bc38:	7bd3      	ldrb	r3, [r2, #15]
    bc3a:	3b01      	subs	r3, #1
    bc3c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    bc3e:	f381 8811 	msr	BASEPRI, r1
    bc42:	f3bf 8f6f 	isb	sy
}
    bc46:	4770      	bx	lr
    bc48:	200021e8 	.word	0x200021e8

0000bc4c <k_sched_unlock>:
{
    bc4c:	b510      	push	{r4, lr}
	__asm__ volatile(
    bc4e:	f04f 0320 	mov.w	r3, #32
    bc52:	f3ef 8411 	mrs	r4, BASEPRI
    bc56:	f383 8812 	msr	BASEPRI_MAX, r3
    bc5a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    bc5e:	4b08      	ldr	r3, [pc, #32]	; (bc80 <k_sched_unlock+0x34>)
    bc60:	689a      	ldr	r2, [r3, #8]
    bc62:	7bd3      	ldrb	r3, [r2, #15]
    bc64:	3301      	adds	r3, #1
    bc66:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    bc68:	2000      	movs	r0, #0
    bc6a:	f7ff fe29 	bl	b8c0 <update_cache>
	__asm__ volatile(
    bc6e:	f384 8811 	msr	BASEPRI, r4
    bc72:	f3bf 8f6f 	isb	sy
}
    bc76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    bc7a:	f002 bd92 	b.w	e7a2 <z_reschedule_unlocked>
    bc7e:	bf00      	nop
    bc80:	200021e8 	.word	0x200021e8

0000bc84 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    bc84:	4b02      	ldr	r3, [pc, #8]	; (bc90 <z_sched_init+0xc>)
    bc86:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    bc8a:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    bc8e:	4770      	bx	lr
    bc90:	200021e8 	.word	0x200021e8

0000bc94 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    bc96:	f04f 0320 	mov.w	r3, #32
    bc9a:	f3ef 8511 	mrs	r5, BASEPRI
    bc9e:	f383 8812 	msr	BASEPRI_MAX, r3
    bca2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    bca6:	4919      	ldr	r1, [pc, #100]	; (bd0c <z_impl_k_yield+0x78>)
    bca8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bcaa:	7b43      	ldrb	r3, [r0, #13]
    bcac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bcb0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bcb2:	f002 fc94 	bl	e5de <sys_dlist_remove>
	}
	queue_thread(_current);
    bcb6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    bcb8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    bcba:	4608      	mov	r0, r1
    bcbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bcc0:	735a      	strb	r2, [r3, #13]
    bcc2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    bcc6:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bcc8:	4282      	cmp	r2, r0
    bcca:	bf08      	it	eq
    bccc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bcce:	b922      	cbnz	r2, bcda <z_impl_k_yield+0x46>
	node->prev = tail;
    bcd0:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    bcd4:	6023      	str	r3, [r4, #0]
	list->tail = node;
    bcd6:	620b      	str	r3, [r1, #32]
}
    bcd8:	e00c      	b.n	bcf4 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    bcda:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    bcde:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    bce2:	42be      	cmp	r6, r7
    bce4:	d00e      	beq.n	bd04 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bce6:	42b7      	cmp	r7, r6
    bce8:	dd0c      	ble.n	bd04 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    bcea:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    bcec:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    bcf0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    bcf2:	6053      	str	r3, [r2, #4]
	update_cache(1);
    bcf4:	2001      	movs	r0, #1
    bcf6:	f7ff fde3 	bl	b8c0 <update_cache>
    bcfa:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    bcfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bd00:	f7f7 bdba 	b.w	3878 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    bd04:	42a2      	cmp	r2, r4
    bd06:	d0e3      	beq.n	bcd0 <z_impl_k_yield+0x3c>
    bd08:	6812      	ldr	r2, [r2, #0]
    bd0a:	e7e0      	b.n	bcce <z_impl_k_yield+0x3a>
    bd0c:	200021e8 	.word	0x200021e8

0000bd10 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    bd10:	ea50 0301 	orrs.w	r3, r0, r1
{
    bd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd18:	4605      	mov	r5, r0
    bd1a:	460e      	mov	r6, r1
	if (ticks == 0) {
    bd1c:	d103      	bne.n	bd26 <z_tick_sleep+0x16>
	z_impl_k_yield();
    bd1e:	f7ff ffb9 	bl	bc94 <z_impl_k_yield>
		k_yield();
		return 0;
    bd22:	2000      	movs	r0, #0
    bd24:	e02c      	b.n	bd80 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    bd26:	1c83      	adds	r3, r0, #2
    bd28:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    bd2c:	db2a      	blt.n	bd84 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    bd2e:	f002 fd9b 	bl	e868 <sys_clock_tick_get_32>
    bd32:	182c      	adds	r4, r5, r0
    bd34:	f04f 0320 	mov.w	r3, #32
    bd38:	f3ef 8811 	mrs	r8, BASEPRI
    bd3c:	f383 8812 	msr	BASEPRI_MAX, r3
    bd40:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    bd44:	4f11      	ldr	r7, [pc, #68]	; (bd8c <z_tick_sleep+0x7c>)
    bd46:	4b12      	ldr	r3, [pc, #72]	; (bd90 <z_tick_sleep+0x80>)
    bd48:	68b8      	ldr	r0, [r7, #8]
    bd4a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    bd4c:	f7ff fe44 	bl	b9d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    bd50:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    bd52:	4910      	ldr	r1, [pc, #64]	; (bd94 <z_tick_sleep+0x84>)
    bd54:	462a      	mov	r2, r5
    bd56:	4633      	mov	r3, r6
    bd58:	3018      	adds	r0, #24
    bd5a:	f000 f929 	bl	bfb0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    bd5e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    bd60:	7b53      	ldrb	r3, [r2, #13]
    bd62:	f043 0310 	orr.w	r3, r3, #16
    bd66:	7353      	strb	r3, [r2, #13]
    bd68:	4640      	mov	r0, r8
    bd6a:	f7f7 fd85 	bl	3878 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    bd6e:	f002 fd7b 	bl	e868 <sys_clock_tick_get_32>
    bd72:	1a20      	subs	r0, r4, r0
    bd74:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    bd78:	2801      	cmp	r0, #1
    bd7a:	f173 0300 	sbcs.w	r3, r3, #0
    bd7e:	dbd0      	blt.n	bd22 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    bd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    bd84:	f06f 0401 	mvn.w	r4, #1
    bd88:	1a24      	subs	r4, r4, r0
    bd8a:	e7d3      	b.n	bd34 <z_tick_sleep+0x24>
    bd8c:	200021e8 	.word	0x200021e8
    bd90:	20002214 	.word	0x20002214
    bd94:	0000e6ed 	.word	0x0000e6ed

0000bd98 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bd98:	f1b1 3fff 	cmp.w	r1, #4294967295
    bd9c:	bf08      	it	eq
    bd9e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    bda2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bda4:	d106      	bne.n	bdb4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    bda6:	4b08      	ldr	r3, [pc, #32]	; (bdc8 <z_impl_k_sleep+0x30>)
    bda8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    bdaa:	f7ff ff09 	bl	bbc0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    bdae:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    bdb2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    bdb4:	f7ff ffac 	bl	bd10 <z_tick_sleep>
    bdb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    bdbc:	fb80 0303 	smull	r0, r3, r0, r3
    bdc0:	0bc0      	lsrs	r0, r0, #15
    bdc2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    bdc6:	e7f4      	b.n	bdb2 <z_impl_k_sleep+0x1a>
    bdc8:	200021e8 	.word	0x200021e8

0000bdcc <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    bdcc:	b538      	push	{r3, r4, r5, lr}
    bdce:	4c0a      	ldr	r4, [pc, #40]	; (bdf8 <z_impl_k_usleep+0x2c>)
    bdd0:	4a0a      	ldr	r2, [pc, #40]	; (bdfc <z_impl_k_usleep+0x30>)
    bdd2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    bdd6:	2100      	movs	r1, #0
    bdd8:	fbc0 4105 	smlal	r4, r1, r0, r5
    bddc:	2300      	movs	r3, #0
    bdde:	4620      	mov	r0, r4
    bde0:	f7f4 f98e 	bl	100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    bde4:	17c1      	asrs	r1, r0, #31
    bde6:	f7ff ff93 	bl	bd10 <z_tick_sleep>
    bdea:	4b04      	ldr	r3, [pc, #16]	; (bdfc <z_impl_k_usleep+0x30>)
    bdec:	fb80 0303 	smull	r0, r3, r0, r3
    bdf0:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    bdf2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    bdf6:	bd38      	pop	{r3, r4, r5, pc}
    bdf8:	000f423f 	.word	0x000f423f
    bdfc:	000f4240 	.word	0x000f4240

0000be00 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    be00:	4b01      	ldr	r3, [pc, #4]	; (be08 <z_impl_z_current_get+0x8>)
    be02:	6898      	ldr	r0, [r3, #8]
    be04:	4770      	bx	lr
    be06:	bf00      	nop
    be08:	200021e8 	.word	0x200021e8

0000be0c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    be0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be10:	4604      	mov	r4, r0
    be12:	f04f 0320 	mov.w	r3, #32
    be16:	f3ef 8611 	mrs	r6, BASEPRI
    be1a:	f383 8812 	msr	BASEPRI_MAX, r3
    be1e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    be22:	7b03      	ldrb	r3, [r0, #12]
    be24:	07d9      	lsls	r1, r3, #31
    be26:	d50b      	bpl.n	be40 <z_thread_abort+0x34>
	__asm__ volatile(
    be28:	f386 8811 	msr	BASEPRI, r6
    be2c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    be30:	4040      	eors	r0, r0
    be32:	f380 8811 	msr	BASEPRI, r0
    be36:	f04f 0004 	mov.w	r0, #4
    be3a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    be3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    be40:	7b43      	ldrb	r3, [r0, #13]
    be42:	071a      	lsls	r2, r3, #28
    be44:	d504      	bpl.n	be50 <z_thread_abort+0x44>
    be46:	f386 8811 	msr	BASEPRI, r6
    be4a:	f3bf 8f6f 	isb	sy
    be4e:	e7f5      	b.n	be3c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    be50:	f023 0220 	bic.w	r2, r3, #32
    be54:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    be58:	09d2      	lsrs	r2, r2, #7
    be5a:	d120      	bne.n	be9e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    be5c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    be5e:	68a3      	ldr	r3, [r4, #8]
    be60:	b113      	cbz	r3, be68 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    be62:	4620      	mov	r0, r4
    be64:	f002 fbc3 	bl	e5ee <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    be68:	f104 0018 	add.w	r0, r4, #24
    be6c:	f002 fcd6 	bl	e81c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    be70:	f104 0758 	add.w	r7, r4, #88	; 0x58
    be74:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    be78:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be7a:	42bd      	cmp	r5, r7
    be7c:	d000      	beq.n	be80 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    be7e:	b9b5      	cbnz	r5, beae <z_thread_abort+0xa2>
		update_cache(1);
    be80:	2001      	movs	r0, #1
    be82:	f7ff fd1d 	bl	b8c0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    be86:	4b10      	ldr	r3, [pc, #64]	; (bec8 <z_thread_abort+0xbc>)
    be88:	689b      	ldr	r3, [r3, #8]
    be8a:	42a3      	cmp	r3, r4
    be8c:	d1db      	bne.n	be46 <z_thread_abort+0x3a>
    be8e:	f3ef 8305 	mrs	r3, IPSR
    be92:	2b00      	cmp	r3, #0
    be94:	d1d7      	bne.n	be46 <z_thread_abort+0x3a>
    be96:	4630      	mov	r0, r6
    be98:	f7f7 fcee 	bl	3878 <arch_swap>
	return ret;
    be9c:	e7d3      	b.n	be46 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    be9e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    bea2:	f043 0308 	orr.w	r3, r3, #8
    bea6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bea8:	f002 fb99 	bl	e5de <sys_dlist_remove>
}
    beac:	e7d7      	b.n	be5e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    beae:	4628      	mov	r0, r5
    beb0:	f002 fb9d 	bl	e5ee <unpend_thread_no_timeout>
    beb4:	f105 0018 	add.w	r0, r5, #24
    beb8:	f002 fcb0 	bl	e81c <z_abort_timeout>
    bebc:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    bec0:	4628      	mov	r0, r5
    bec2:	f7ff fd55 	bl	b970 <ready_thread>
    bec6:	e7d7      	b.n	be78 <z_thread_abort+0x6c>
    bec8:	200021e8 	.word	0x200021e8

0000becc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    becc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    bece:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    bed2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    bed4:	e9cd 6700 	strd	r6, r7, [sp]
    bed8:	f7ff fdde 	bl	ba98 <z_pend_curr>

	if (data != NULL) {
    bedc:	b11c      	cbz	r4, bee6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    bede:	4b03      	ldr	r3, [pc, #12]	; (beec <z_sched_wait+0x20>)
    bee0:	689b      	ldr	r3, [r3, #8]
    bee2:	695b      	ldr	r3, [r3, #20]
    bee4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    bee6:	b002      	add	sp, #8
    bee8:	bdd0      	pop	{r4, r6, r7, pc}
    beea:	bf00      	nop
    beec:	200021e8 	.word	0x200021e8

0000bef0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    bef0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    bef2:	4806      	ldr	r0, [pc, #24]	; (bf0c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    bef4:	4a06      	ldr	r2, [pc, #24]	; (bf10 <z_data_copy+0x20>)
    bef6:	4907      	ldr	r1, [pc, #28]	; (bf14 <z_data_copy+0x24>)
    bef8:	1a12      	subs	r2, r2, r0
    befa:	f002 fa31 	bl	e360 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    befe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    bf02:	4a05      	ldr	r2, [pc, #20]	; (bf18 <z_data_copy+0x28>)
    bf04:	4905      	ldr	r1, [pc, #20]	; (bf1c <z_data_copy+0x2c>)
    bf06:	4806      	ldr	r0, [pc, #24]	; (bf20 <z_data_copy+0x30>)
    bf08:	f002 ba2a 	b.w	e360 <z_early_memcpy>
    bf0c:	20000000 	.word	0x20000000
    bf10:	20000431 	.word	0x20000431
    bf14:	00010798 	.word	0x00010798
    bf18:	00000000 	.word	0x00000000
    bf1c:	00010798 	.word	0x00010798
    bf20:	20000000 	.word	0x20000000

0000bf24 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    bf24:	4b03      	ldr	r3, [pc, #12]	; (bf34 <elapsed+0x10>)
    bf26:	681b      	ldr	r3, [r3, #0]
    bf28:	b90b      	cbnz	r3, bf2e <elapsed+0xa>
    bf2a:	f7fc bd35 	b.w	8998 <sys_clock_elapsed>
}
    bf2e:	2000      	movs	r0, #0
    bf30:	4770      	bx	lr
    bf32:	bf00      	nop
    bf34:	20002220 	.word	0x20002220

0000bf38 <next_timeout>:

static int32_t next_timeout(void)
{
    bf38:	b510      	push	{r4, lr}
	return list->head == list;
    bf3a:	4b0e      	ldr	r3, [pc, #56]	; (bf74 <next_timeout+0x3c>)
    bf3c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bf3e:	429c      	cmp	r4, r3
    bf40:	d104      	bne.n	bf4c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    bf42:	f7ff ffef 	bl	bf24 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    bf46:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    bf4a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    bf4c:	f7ff ffea 	bl	bf24 <elapsed>
	if ((to == NULL) ||
    bf50:	2c00      	cmp	r4, #0
    bf52:	d0f8      	beq.n	bf46 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    bf54:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    bf58:	1a1b      	subs	r3, r3, r0
    bf5a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    bf5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    bf62:	f172 0100 	sbcs.w	r1, r2, #0
    bf66:	daee      	bge.n	bf46 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    bf68:	2a00      	cmp	r2, #0
    bf6a:	bfac      	ite	ge
    bf6c:	4618      	movge	r0, r3
    bf6e:	2000      	movlt	r0, #0
	return ret;
    bf70:	e7eb      	b.n	bf4a <next_timeout+0x12>
    bf72:	bf00      	nop
    bf74:	200001e4 	.word	0x200001e4

0000bf78 <remove_timeout>:
{
    bf78:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bf7a:	b170      	cbz	r0, bf9a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    bf7c:	4b0b      	ldr	r3, [pc, #44]	; (bfac <remove_timeout+0x34>)
    bf7e:	685b      	ldr	r3, [r3, #4]
    bf80:	4298      	cmp	r0, r3
    bf82:	d00a      	beq.n	bf9a <remove_timeout+0x22>
    bf84:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    bf86:	b143      	cbz	r3, bf9a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    bf88:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    bf8c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    bf90:	1912      	adds	r2, r2, r4
    bf92:	eb41 0105 	adc.w	r1, r1, r5
    bf96:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    bf9a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    bf9e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    bfa0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    bfa2:	2300      	movs	r3, #0
	node->prev = NULL;
    bfa4:	e9c0 3300 	strd	r3, r3, [r0]
}
    bfa8:	bd30      	pop	{r4, r5, pc}
    bfaa:	bf00      	nop
    bfac:	200001e4 	.word	0x200001e4

0000bfb0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
    bfb4:	bf08      	it	eq
    bfb6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    bfba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bfbc:	4604      	mov	r4, r0
    bfbe:	461d      	mov	r5, r3
    bfc0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bfc2:	d05c      	beq.n	c07e <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    bfc4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    bfc6:	f04f 0320 	mov.w	r3, #32
    bfca:	f3ef 8711 	mrs	r7, BASEPRI
    bfce:	f383 8812 	msr	BASEPRI_MAX, r3
    bfd2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    bfd6:	3201      	adds	r2, #1
    bfd8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    bfdc:	da24      	bge.n	c028 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    bfde:	492d      	ldr	r1, [pc, #180]	; (c094 <z_add_timeout+0xe4>)
    bfe0:	e9d1 2000 	ldrd	r2, r0, [r1]
    bfe4:	f06f 0301 	mvn.w	r3, #1
    bfe8:	1a9b      	subs	r3, r3, r2
    bfea:	f04f 32ff 	mov.w	r2, #4294967295
    bfee:	eb62 0000 	sbc.w	r0, r2, r0
    bff2:	1b9e      	subs	r6, r3, r6
    bff4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    bff8:	2e01      	cmp	r6, #1
    bffa:	f170 0300 	sbcs.w	r3, r0, #0
    bffe:	da01      	bge.n	c004 <z_add_timeout+0x54>
    c000:	2601      	movs	r6, #1
    c002:	2000      	movs	r0, #0
    c004:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    c008:	4e23      	ldr	r6, [pc, #140]	; (c098 <z_add_timeout+0xe8>)
    c00a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    c00e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c010:	45b4      	cmp	ip, r6
    c012:	bf08      	it	eq
    c014:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    c018:	f1bc 0f00 	cmp.w	ip, #0
    c01c:	d10d      	bne.n	c03a <z_add_timeout+0x8a>
	node->prev = tail;
    c01e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    c022:	602c      	str	r4, [r5, #0]
	list->tail = node;
    c024:	6074      	str	r4, [r6, #4]
}
    c026:	e01c      	b.n	c062 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    c028:	f7ff ff7c 	bl	bf24 <elapsed>
    c02c:	3601      	adds	r6, #1
    c02e:	f145 0500 	adc.w	r5, r5, #0
    c032:	1836      	adds	r6, r6, r0
    c034:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    c038:	e7e4      	b.n	c004 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    c03a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    c03e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    c042:	4293      	cmp	r3, r2
    c044:	eb71 0e00 	sbcs.w	lr, r1, r0
    c048:	da1a      	bge.n	c080 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    c04a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    c04c:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c050:	eb60 0001 	sbc.w	r0, r0, r1
    c054:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    c058:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    c05c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    c05e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    c062:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c064:	42b3      	cmp	r3, r6
    c066:	d006      	beq.n	c076 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    c068:	429c      	cmp	r4, r3
    c06a:	d104      	bne.n	c076 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    c06c:	f7ff ff64 	bl	bf38 <next_timeout>
    c070:	2100      	movs	r1, #0
    c072:	f7fc fc5f 	bl	8934 <sys_clock_set_timeout>
	__asm__ volatile(
    c076:	f387 8811 	msr	BASEPRI, r7
    c07a:	f3bf 8f6f 	isb	sy
		}
	}
}
    c07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    c080:	1a9b      	subs	r3, r3, r2
    c082:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    c086:	45ac      	cmp	ip, r5
    c088:	e9c4 3104 	strd	r3, r1, [r4, #16]
    c08c:	d0c7      	beq.n	c01e <z_add_timeout+0x6e>
    c08e:	f8dc c000 	ldr.w	ip, [ip]
    c092:	e7c1      	b.n	c018 <z_add_timeout+0x68>
    c094:	20000bf0 	.word	0x20000bf0
    c098:	200001e4 	.word	0x200001e4

0000c09c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    c09c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    c0a0:	f04f 0320 	mov.w	r3, #32
    c0a4:	f3ef 8c11 	mrs	ip, BASEPRI
    c0a8:	f383 8812 	msr	BASEPRI_MAX, r3
    c0ac:	f3bf 8f6f 	isb	sy
	return list->head == list;
    c0b0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; c164 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    c0b4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; c168 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    c0b8:	4f2c      	ldr	r7, [pc, #176]	; (c16c <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    c0ba:	f8c9 0000 	str.w	r0, [r9]
    c0be:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    c0c2:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c0c4:	4550      	cmp	r0, sl
    c0c6:	bf08      	it	eq
    c0c8:	2000      	moveq	r0, #0
    c0ca:	2500      	movs	r5, #0
		curr_tick += dt;
    c0cc:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    c0d0:	f8d9 3000 	ldr.w	r3, [r9]
    c0d4:	46e0      	mov	r8, ip
    c0d6:	b380      	cbz	r0, c13a <sys_clock_announce+0x9e>
    c0d8:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    c0dc:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    c0e0:	42b3      	cmp	r3, r6
    c0e2:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    c0e6:	da05      	bge.n	c0f4 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    c0e8:	1af6      	subs	r6, r6, r3
    c0ea:	eb6c 040e 	sbc.w	r4, ip, lr
    c0ee:	e9c0 6404 	strd	r6, r4, [r0, #16]
    c0f2:	e022      	b.n	c13a <sys_clock_announce+0x9e>
		curr_tick += dt;
    c0f4:	18b2      	adds	r2, r6, r2
    c0f6:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    c0fa:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    c0fe:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    c102:	f7ff ff39 	bl	bf78 <remove_timeout>
	__asm__ volatile(
    c106:	f388 8811 	msr	BASEPRI, r8
    c10a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    c10e:	6883      	ldr	r3, [r0, #8]
    c110:	4798      	blx	r3
	__asm__ volatile(
    c112:	f04f 0320 	mov.w	r3, #32
    c116:	f3ef 8811 	mrs	r8, BASEPRI
    c11a:	f383 8812 	msr	BASEPRI_MAX, r3
    c11e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    c122:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    c126:	f8da 0000 	ldr.w	r0, [sl]
    c12a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c12c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    c12e:	46c4      	mov	ip, r8
    c130:	f8c9 3000 	str.w	r3, [r9]
    c134:	d1ca      	bne.n	c0cc <sys_clock_announce+0x30>
		curr_tick += dt;
    c136:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    c13a:	189a      	adds	r2, r3, r2
    c13c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    c140:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    c142:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    c146:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    c14a:	f7ff fef5 	bl	bf38 <next_timeout>
    c14e:	4621      	mov	r1, r4
    c150:	f7fc fbf0 	bl	8934 <sys_clock_set_timeout>
	__asm__ volatile(
    c154:	f388 8811 	msr	BASEPRI, r8
    c158:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    c15c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    c160:	f7ff bc6a 	b.w	ba38 <z_time_slice>
    c164:	200001e4 	.word	0x200001e4
    c168:	20002220 	.word	0x20002220
    c16c:	20000bf0 	.word	0x20000bf0

0000c170 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    c170:	b510      	push	{r4, lr}
	__asm__ volatile(
    c172:	f04f 0320 	mov.w	r3, #32
    c176:	f3ef 8411 	mrs	r4, BASEPRI
    c17a:	f383 8812 	msr	BASEPRI_MAX, r3
    c17e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    c182:	f7ff fecf 	bl	bf24 <elapsed>
    c186:	4a06      	ldr	r2, [pc, #24]	; (c1a0 <sys_clock_tick_get+0x30>)
    c188:	4603      	mov	r3, r0
    c18a:	e9d2 0100 	ldrd	r0, r1, [r2]
    c18e:	1818      	adds	r0, r3, r0
    c190:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    c194:	f384 8811 	msr	BASEPRI, r4
    c198:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    c19c:	bd10      	pop	{r4, pc}
    c19e:	bf00      	nop
    c1a0:	20000bf0 	.word	0x20000bf0

0000c1a4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1a6:	4604      	mov	r4, r0
	__asm__ volatile(
    c1a8:	f04f 0320 	mov.w	r3, #32
    c1ac:	f3ef 8711 	mrs	r7, BASEPRI
    c1b0:	f383 8812 	msr	BASEPRI_MAX, r3
    c1b4:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    c1b8:	6802      	ldr	r2, [r0, #0]
    c1ba:	b122      	cbz	r2, c1c6 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    c1bc:	f387 8811 	msr	BASEPRI, r7
    c1c0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    c1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    c1c6:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    c1ca:	1c58      	adds	r0, r3, #1
    c1cc:	f146 0100 	adc.w	r1, r6, #0
    c1d0:	2802      	cmp	r0, #2
    c1d2:	f171 0100 	sbcs.w	r1, r1, #0
    c1d6:	d327      	bcc.n	c228 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    c1d8:	2b01      	cmp	r3, #1
    c1da:	f176 0100 	sbcs.w	r1, r6, #0
    c1de:	bfbc      	itt	lt
    c1e0:	2301      	movlt	r3, #1
    c1e2:	4616      	movlt	r6, r2
    c1e4:	1e5d      	subs	r5, r3, #1
    c1e6:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
    c1ea:	f002 fb41 	bl	e870 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    c1ee:	3001      	adds	r0, #1
    c1f0:	f141 0100 	adc.w	r1, r1, #0
    c1f4:	1940      	adds	r0, r0, r5
    c1f6:	eb46 0101 	adc.w	r1, r6, r1
    c1fa:	2801      	cmp	r0, #1
    c1fc:	f171 0100 	sbcs.w	r1, r1, #0
    c200:	db3a      	blt.n	c278 <z_timer_expiration_handler+0xd4>
    c202:	f002 fb35 	bl	e870 <z_impl_k_uptime_ticks>
    c206:	3001      	adds	r0, #1
    c208:	f141 0100 	adc.w	r1, r1, #0
    c20c:	f06f 0201 	mvn.w	r2, #1
    c210:	1940      	adds	r0, r0, r5
    c212:	eb46 0301 	adc.w	r3, r6, r1
    c216:	1a12      	subs	r2, r2, r0
    c218:	f04f 31ff 	mov.w	r1, #4294967295
    c21c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c220:	4918      	ldr	r1, [pc, #96]	; (c284 <z_timer_expiration_handler+0xe0>)
    c222:	4620      	mov	r0, r4
    c224:	f7ff fec4 	bl	bfb0 <z_add_timeout>
	timer->status += 1U;
    c228:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c22a:	3301      	adds	r3, #1
    c22c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    c22e:	6a23      	ldr	r3, [r4, #32]
    c230:	b173      	cbz	r3, c250 <z_timer_expiration_handler+0xac>
    c232:	f387 8811 	msr	BASEPRI, r7
    c236:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    c23a:	6a23      	ldr	r3, [r4, #32]
    c23c:	4620      	mov	r0, r4
    c23e:	4798      	blx	r3
	__asm__ volatile(
    c240:	f04f 0320 	mov.w	r3, #32
    c244:	f3ef 8711 	mrs	r7, BASEPRI
    c248:	f383 8812 	msr	BASEPRI_MAX, r3
    c24c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    c250:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c254:	42a5      	cmp	r5, r4
    c256:	d0b1      	beq.n	c1bc <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    c258:	2d00      	cmp	r5, #0
    c25a:	d0af      	beq.n	c1bc <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    c25c:	4628      	mov	r0, r5
    c25e:	f002 fa11 	bl	e684 <z_unpend_thread_no_timeout>
    c262:	2300      	movs	r3, #0
    c264:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
    c266:	f387 8811 	msr	BASEPRI, r7
    c26a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    c26e:	4628      	mov	r0, r5
}
    c270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    c274:	f002 b9f6 	b.w	e664 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    c278:	f06f 0201 	mvn.w	r2, #1
    c27c:	f04f 33ff 	mov.w	r3, #4294967295
    c280:	e7ce      	b.n	c220 <z_timer_expiration_handler+0x7c>
    c282:	bf00      	nop
    c284:	0000c1a5 	.word	0x0000c1a5

0000c288 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    c288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    c28c:	f1b3 3fff 	cmp.w	r3, #4294967295
    c290:	bf08      	it	eq
    c292:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    c296:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    c29a:	4605      	mov	r5, r0
    c29c:	461c      	mov	r4, r3
    c29e:	4691      	mov	r9, r2
    c2a0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    c2a2:	d01c      	beq.n	c2de <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    c2a4:	1c53      	adds	r3, r2, #1
    c2a6:	f174 33ff 	sbcs.w	r3, r4, #4294967295
    c2aa:	db09      	blt.n	c2c0 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    c2ac:	2a01      	cmp	r2, #1
    c2ae:	f174 0300 	sbcs.w	r3, r4, #0
    c2b2:	bfbc      	itt	lt
    c2b4:	2201      	movlt	r2, #1
    c2b6:	2400      	movlt	r4, #0
    c2b8:	f112 39ff 	adds.w	r9, r2, #4294967295
    c2bc:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    c2c0:	4628      	mov	r0, r5
    c2c2:	f002 faab 	bl	e81c <z_abort_timeout>
	timer->period = period;
    c2c6:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    c2ca:	2300      	movs	r3, #0
    c2cc:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c2ce:	464a      	mov	r2, r9
    c2d0:	4643      	mov	r3, r8
    c2d2:	4628      	mov	r0, r5
    c2d4:	4903      	ldr	r1, [pc, #12]	; (c2e4 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    c2d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c2da:	f7ff be69 	b.w	bfb0 <z_add_timeout>
}
    c2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2e2:	bf00      	nop
    c2e4:	0000c1a5 	.word	0x0000c1a5

0000c2e8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    c2e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    c2ec:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    c2ee:	4b29      	ldr	r3, [pc, #164]	; (c394 <z_impl_k_poll+0xac>)
    c2f0:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
    c2f2:	2301      	movs	r3, #1
    c2f4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
    c2f8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    c2fc:	ea52 0305 	orrs.w	r3, r2, r5
{
    c300:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    c302:	bf0c      	ite	eq
    c304:	2301      	moveq	r3, #1
    c306:	2300      	movne	r3, #0
    c308:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
    c30c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    c30e:	f002 fb31 	bl	e974 <register_events>
    c312:	4681      	mov	r9, r0
	__asm__ volatile(
    c314:	f04f 0320 	mov.w	r3, #32
    c318:	f3ef 8a11 	mrs	sl, BASEPRI
    c31c:	f383 8812 	msr	BASEPRI_MAX, r3
    c320:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    c324:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
    c328:	b964      	cbnz	r4, c344 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    c32a:	4601      	mov	r1, r0
    c32c:	4652      	mov	r2, sl
    c32e:	4640      	mov	r0, r8
    c330:	f002 fbf1 	bl	eb16 <clear_event_registrations>
	__asm__ volatile(
    c334:	f38a 8811 	msr	BASEPRI, sl
    c338:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    c33c:	4620      	mov	r0, r4
    c33e:	b002      	add	sp, #8
    c340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    c344:	2300      	movs	r3, #0
    c346:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    c34a:	ea56 0305 	orrs.w	r3, r6, r5
    c34e:	d106      	bne.n	c35e <z_impl_k_poll+0x76>
    c350:	f38a 8811 	msr	BASEPRI, sl
    c354:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    c358:	f06f 040a 	mvn.w	r4, #10
    c35c:	e7ee      	b.n	c33c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    c35e:	e9cd 6500 	strd	r6, r5, [sp]
    c362:	4a0d      	ldr	r2, [pc, #52]	; (c398 <z_impl_k_poll+0xb0>)
    c364:	480d      	ldr	r0, [pc, #52]	; (c39c <z_impl_k_poll+0xb4>)
    c366:	4651      	mov	r1, sl
    c368:	f7ff fb96 	bl	ba98 <z_pend_curr>
    c36c:	4604      	mov	r4, r0
	__asm__ volatile(
    c36e:	f04f 0320 	mov.w	r3, #32
    c372:	f3ef 8511 	mrs	r5, BASEPRI
    c376:	f383 8812 	msr	BASEPRI_MAX, r3
    c37a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    c37e:	462a      	mov	r2, r5
    c380:	4649      	mov	r1, r9
    c382:	4640      	mov	r0, r8
    c384:	f002 fbc7 	bl	eb16 <clear_event_registrations>
	__asm__ volatile(
    c388:	f385 8811 	msr	BASEPRI, r5
    c38c:	f3bf 8f6f 	isb	sy
	return swap_rc;
    c390:	e7d4      	b.n	c33c <z_impl_k_poll+0x54>
    c392:	bf00      	nop
    c394:	200021e8 	.word	0x200021e8
    c398:	200001ec 	.word	0x200001ec
    c39c:	20002947 	.word	0x20002947

0000c3a0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    c3a0:	b538      	push	{r3, r4, r5, lr}
    c3a2:	4603      	mov	r3, r0
	__asm__ volatile(
    c3a4:	f04f 0220 	mov.w	r2, #32
    c3a8:	f3ef 8511 	mrs	r5, BASEPRI
    c3ac:	f382 8812 	msr	BASEPRI_MAX, r2
    c3b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    c3b4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    c3b6:	2101      	movs	r1, #1
    c3b8:	6081      	str	r1, [r0, #8]
	return list->head == list;
    c3ba:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    c3bc:	4283      	cmp	r3, r0
    c3be:	d106      	bne.n	c3ce <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    c3c0:	f385 8811 	msr	BASEPRI, r5
    c3c4:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    c3c8:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    c3ca:	4620      	mov	r0, r4
    c3cc:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    c3ce:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    c3d2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c3d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c3d6:	2300      	movs	r3, #0
	node->prev = NULL;
    c3d8:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    c3dc:	f002 fb41 	bl	ea62 <signal_poll_event>
	z_reschedule(&lock, key);
    c3e0:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    c3e2:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    c3e4:	4801      	ldr	r0, [pc, #4]	; (c3ec <z_impl_k_poll_signal_raise+0x4c>)
    c3e6:	f7ff fbbb 	bl	bb60 <z_reschedule>
	return rc;
    c3ea:	e7ee      	b.n	c3ca <z_impl_k_poll_signal_raise+0x2a>
    c3ec:	20002947 	.word	0x20002947

0000c3f0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    c3f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c3f2:	4606      	mov	r6, r0
    c3f4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    c3f6:	f002 f802 	bl	e3fe <k_is_in_isr>
    c3fa:	b978      	cbnz	r0, c41c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    c3fc:	4b0b      	ldr	r3, [pc, #44]	; (c42c <z_thread_aligned_alloc+0x3c>)
    c3fe:	689b      	ldr	r3, [r3, #8]
    c400:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
    c402:	b17c      	cbz	r4, c424 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    c404:	1d2a      	adds	r2, r5, #4
    c406:	d209      	bcs.n	c41c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    c408:	2000      	movs	r0, #0
    c40a:	2100      	movs	r1, #0
    c40c:	e9cd 0100 	strd	r0, r1, [sp]
    c410:	f046 0104 	orr.w	r1, r6, #4
    c414:	4620      	mov	r0, r4
    c416:	f002 fbca 	bl	ebae <k_heap_aligned_alloc>
	if (mem == NULL) {
    c41a:	b908      	cbnz	r0, c420 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    c41c:	2400      	movs	r4, #0
	}

	return ret;
    c41e:	e001      	b.n	c424 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    c420:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    c422:	1d04      	adds	r4, r0, #4
}
    c424:	4620      	mov	r0, r4
    c426:	b002      	add	sp, #8
    c428:	bd70      	pop	{r4, r5, r6, pc}
    c42a:	bf00      	nop
    c42c:	200021e8 	.word	0x200021e8

0000c430 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    c430:	4801      	ldr	r0, [pc, #4]	; (c438 <boot_banner+0x8>)
    c432:	f000 ba70 	b.w	c916 <printk>
    c436:	bf00      	nop
    c438:	0001076a 	.word	0x0001076a

0000c43c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    c43c:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c43e:	4c06      	ldr	r4, [pc, #24]	; (c458 <statics_init+0x1c>)
    c440:	4d06      	ldr	r5, [pc, #24]	; (c45c <statics_init+0x20>)
    c442:	42ac      	cmp	r4, r5
    c444:	d301      	bcc.n	c44a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    c446:	2000      	movs	r0, #0
    c448:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    c44a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    c44e:	4620      	mov	r0, r4
    c450:	f002 fba5 	bl	eb9e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c454:	3414      	adds	r4, #20
    c456:	e7f4      	b.n	c442 <statics_init+0x6>
    c458:	20000304 	.word	0x20000304
    c45c:	20000304 	.word	0x20000304

0000c460 <nrf_cc3xx_platform_init_no_rng>:
    c460:	b510      	push	{r4, lr}
    c462:	4c0a      	ldr	r4, [pc, #40]	; (c48c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    c464:	6823      	ldr	r3, [r4, #0]
    c466:	b11b      	cbz	r3, c470 <nrf_cc3xx_platform_init_no_rng+0x10>
    c468:	2301      	movs	r3, #1
    c46a:	6023      	str	r3, [r4, #0]
    c46c:	2000      	movs	r0, #0
    c46e:	bd10      	pop	{r4, pc}
    c470:	f000 f8ea 	bl	c648 <CC_LibInitNoRng>
    c474:	2800      	cmp	r0, #0
    c476:	d0f7      	beq.n	c468 <nrf_cc3xx_platform_init_no_rng+0x8>
    c478:	3801      	subs	r0, #1
    c47a:	2806      	cmp	r0, #6
    c47c:	d803      	bhi.n	c486 <nrf_cc3xx_platform_init_no_rng+0x26>
    c47e:	4b04      	ldr	r3, [pc, #16]	; (c490 <nrf_cc3xx_platform_init_no_rng+0x30>)
    c480:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    c484:	bd10      	pop	{r4, pc}
    c486:	4803      	ldr	r0, [pc, #12]	; (c494 <nrf_cc3xx_platform_init_no_rng+0x34>)
    c488:	bd10      	pop	{r4, pc}
    c48a:	bf00      	nop
    c48c:	20002224 	.word	0x20002224
    c490:	0000f4fc 	.word	0x0000f4fc
    c494:	ffff8ffe 	.word	0xffff8ffe

0000c498 <nrf_cc3xx_platform_abort>:
    c498:	f3bf 8f4f 	dsb	sy
    c49c:	4905      	ldr	r1, [pc, #20]	; (c4b4 <nrf_cc3xx_platform_abort+0x1c>)
    c49e:	4b06      	ldr	r3, [pc, #24]	; (c4b8 <nrf_cc3xx_platform_abort+0x20>)
    c4a0:	68ca      	ldr	r2, [r1, #12]
    c4a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c4a6:	4313      	orrs	r3, r2
    c4a8:	60cb      	str	r3, [r1, #12]
    c4aa:	f3bf 8f4f 	dsb	sy
    c4ae:	bf00      	nop
    c4b0:	e7fd      	b.n	c4ae <nrf_cc3xx_platform_abort+0x16>
    c4b2:	bf00      	nop
    c4b4:	e000ed00 	.word	0xe000ed00
    c4b8:	05fa0004 	.word	0x05fa0004

0000c4bc <CC_PalAbort>:
    c4bc:	b410      	push	{r4}
    c4be:	4b09      	ldr	r3, [pc, #36]	; (c4e4 <CC_PalAbort+0x28>)
    c4c0:	4909      	ldr	r1, [pc, #36]	; (c4e8 <CC_PalAbort+0x2c>)
    c4c2:	4c0a      	ldr	r4, [pc, #40]	; (c4ec <CC_PalAbort+0x30>)
    c4c4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    c4c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    c4cc:	6849      	ldr	r1, [r1, #4]
    c4ce:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    c4d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    c4d6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    c4da:	2300      	movs	r3, #0
    c4dc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    c4e0:	bc10      	pop	{r4}
    c4e2:	4708      	bx	r1
    c4e4:	5002b000 	.word	0x5002b000
    c4e8:	200001f4 	.word	0x200001f4
    c4ec:	5002a000 	.word	0x5002a000

0000c4f0 <nrf_cc3xx_platform_set_abort>:
    c4f0:	e9d0 1200 	ldrd	r1, r2, [r0]
    c4f4:	4b01      	ldr	r3, [pc, #4]	; (c4fc <nrf_cc3xx_platform_set_abort+0xc>)
    c4f6:	e9c3 1200 	strd	r1, r2, [r3]
    c4fa:	4770      	bx	lr
    c4fc:	200001f4 	.word	0x200001f4

0000c500 <mutex_free>:
    c500:	b510      	push	{r4, lr}
    c502:	4604      	mov	r4, r0
    c504:	b150      	cbz	r0, c51c <mutex_free+0x1c>
    c506:	6863      	ldr	r3, [r4, #4]
    c508:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    c50c:	d005      	beq.n	c51a <mutex_free+0x1a>
    c50e:	4a06      	ldr	r2, [pc, #24]	; (c528 <mutex_free+0x28>)
    c510:	4293      	cmp	r3, r2
    c512:	d002      	beq.n	c51a <mutex_free+0x1a>
    c514:	2300      	movs	r3, #0
    c516:	6023      	str	r3, [r4, #0]
    c518:	6062      	str	r2, [r4, #4]
    c51a:	bd10      	pop	{r4, pc}
    c51c:	4b03      	ldr	r3, [pc, #12]	; (c52c <mutex_free+0x2c>)
    c51e:	4804      	ldr	r0, [pc, #16]	; (c530 <mutex_free+0x30>)
    c520:	685b      	ldr	r3, [r3, #4]
    c522:	4798      	blx	r3
    c524:	e7ef      	b.n	c506 <mutex_free+0x6>
    c526:	bf00      	nop
    c528:	a95c5f2c 	.word	0xa95c5f2c
    c52c:	200001f4 	.word	0x200001f4
    c530:	0000f518 	.word	0x0000f518

0000c534 <mutex_lock>:
    c534:	b1c8      	cbz	r0, c56a <mutex_lock+0x36>
    c536:	6843      	ldr	r3, [r0, #4]
    c538:	4a0d      	ldr	r2, [pc, #52]	; (c570 <mutex_lock+0x3c>)
    c53a:	4293      	cmp	r3, r2
    c53c:	d013      	beq.n	c566 <mutex_lock+0x32>
    c53e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    c542:	d00e      	beq.n	c562 <mutex_lock+0x2e>
    c544:	2301      	movs	r3, #1
    c546:	e850 2f00 	ldrex	r2, [r0]
    c54a:	4619      	mov	r1, r3
    c54c:	e840 1c00 	strex	ip, r1, [r0]
    c550:	f09c 0f00 	teq	ip, #0
    c554:	d1f7      	bne.n	c546 <mutex_lock+0x12>
    c556:	2a01      	cmp	r2, #1
    c558:	d0f5      	beq.n	c546 <mutex_lock+0x12>
    c55a:	f3bf 8f5f 	dmb	sy
    c55e:	2000      	movs	r0, #0
    c560:	4770      	bx	lr
    c562:	4804      	ldr	r0, [pc, #16]	; (c574 <mutex_lock+0x40>)
    c564:	4770      	bx	lr
    c566:	4804      	ldr	r0, [pc, #16]	; (c578 <mutex_lock+0x44>)
    c568:	4770      	bx	lr
    c56a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c56e:	4770      	bx	lr
    c570:	a95c5f2c 	.word	0xa95c5f2c
    c574:	ffff8fe9 	.word	0xffff8fe9
    c578:	ffff8fea 	.word	0xffff8fea

0000c57c <mutex_unlock>:
    c57c:	b180      	cbz	r0, c5a0 <mutex_unlock+0x24>
    c57e:	6843      	ldr	r3, [r0, #4]
    c580:	4a09      	ldr	r2, [pc, #36]	; (c5a8 <mutex_unlock+0x2c>)
    c582:	4293      	cmp	r3, r2
    c584:	d00a      	beq.n	c59c <mutex_unlock+0x20>
    c586:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    c58a:	d005      	beq.n	c598 <mutex_unlock+0x1c>
    c58c:	f3bf 8f5f 	dmb	sy
    c590:	2300      	movs	r3, #0
    c592:	6003      	str	r3, [r0, #0]
    c594:	4618      	mov	r0, r3
    c596:	4770      	bx	lr
    c598:	4804      	ldr	r0, [pc, #16]	; (c5ac <mutex_unlock+0x30>)
    c59a:	4770      	bx	lr
    c59c:	4804      	ldr	r0, [pc, #16]	; (c5b0 <mutex_unlock+0x34>)
    c59e:	4770      	bx	lr
    c5a0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c5a4:	4770      	bx	lr
    c5a6:	bf00      	nop
    c5a8:	a95c5f2c 	.word	0xa95c5f2c
    c5ac:	ffff8fe9 	.word	0xffff8fe9
    c5b0:	ffff8fea 	.word	0xffff8fea

0000c5b4 <mutex_init>:
    c5b4:	b510      	push	{r4, lr}
    c5b6:	4604      	mov	r4, r0
    c5b8:	b120      	cbz	r0, c5c4 <mutex_init+0x10>
    c5ba:	4b04      	ldr	r3, [pc, #16]	; (c5cc <mutex_init+0x18>)
    c5bc:	6063      	str	r3, [r4, #4]
    c5be:	2200      	movs	r2, #0
    c5c0:	6022      	str	r2, [r4, #0]
    c5c2:	bd10      	pop	{r4, pc}
    c5c4:	4802      	ldr	r0, [pc, #8]	; (c5d0 <mutex_init+0x1c>)
    c5c6:	f7ff ff79 	bl	c4bc <CC_PalAbort>
    c5ca:	e7f6      	b.n	c5ba <mutex_init+0x6>
    c5cc:	3a00003a 	.word	0x3a00003a
    c5d0:	0000f540 	.word	0x0000f540

0000c5d4 <nrf_cc3xx_platform_set_mutexes>:
    c5d4:	b570      	push	{r4, r5, r6, lr}
    c5d6:	e9d0 2300 	ldrd	r2, r3, [r0]
    c5da:	4c17      	ldr	r4, [pc, #92]	; (c638 <nrf_cc3xx_platform_set_mutexes+0x64>)
    c5dc:	4d17      	ldr	r5, [pc, #92]	; (c63c <nrf_cc3xx_platform_set_mutexes+0x68>)
    c5de:	6063      	str	r3, [r4, #4]
    c5e0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    c5e4:	e9c4 3002 	strd	r3, r0, [r4, #8]
    c5e8:	6022      	str	r2, [r4, #0]
    c5ea:	6848      	ldr	r0, [r1, #4]
    c5ec:	f8d1 c000 	ldr.w	ip, [r1]
    c5f0:	4b13      	ldr	r3, [pc, #76]	; (c640 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    c5f2:	e9c3 c000 	strd	ip, r0, [r3]
    c5f6:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    c5fa:	f8d1 c008 	ldr.w	ip, [r1, #8]
    c5fe:	f8c3 c008 	str.w	ip, [r3, #8]
    c602:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    c606:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    c60a:	6909      	ldr	r1, [r1, #16]
    c60c:	f8c3 c00c 	str.w	ip, [r3, #12]
    c610:	6119      	str	r1, [r3, #16]
    c612:	d010      	beq.n	c636 <nrf_cc3xx_platform_set_mutexes+0x62>
    c614:	490b      	ldr	r1, [pc, #44]	; (c644 <nrf_cc3xx_platform_set_mutexes+0x70>)
    c616:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    c61a:	2300      	movs	r3, #0
    c61c:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    c620:	f505 708a 	add.w	r0, r5, #276	; 0x114
    c624:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    c628:	4790      	blx	r2
    c62a:	6823      	ldr	r3, [r4, #0]
    c62c:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    c630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c634:	4718      	bx	r3
    c636:	bd70      	pop	{r4, r5, r6, pc}
    c638:	20000210 	.word	0x20000210
    c63c:	2000223c 	.word	0x2000223c
    c640:	200001fc 	.word	0x200001fc
    c644:	a95c5f2c 	.word	0xa95c5f2c

0000c648 <CC_LibInitNoRng>:
    c648:	b538      	push	{r3, r4, r5, lr}
    c64a:	f000 f82f 	bl	c6ac <CC_HalInit>
    c64e:	b120      	cbz	r0, c65a <CC_LibInitNoRng+0x12>
    c650:	2403      	movs	r4, #3
    c652:	f000 f863 	bl	c71c <CC_PalTerminate>
    c656:	4620      	mov	r0, r4
    c658:	bd38      	pop	{r3, r4, r5, pc}
    c65a:	f000 f831 	bl	c6c0 <CC_PalInit>
    c65e:	b998      	cbnz	r0, c688 <CC_LibInitNoRng+0x40>
    c660:	f000 f8ac 	bl	c7bc <CC_PalPowerSaveModeSelect>
    c664:	b998      	cbnz	r0, c68e <CC_LibInitNoRng+0x46>
    c666:	4d0f      	ldr	r5, [pc, #60]	; (c6a4 <CC_LibInitNoRng+0x5c>)
    c668:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    c66c:	0e1b      	lsrs	r3, r3, #24
    c66e:	2bf0      	cmp	r3, #240	; 0xf0
    c670:	d108      	bne.n	c684 <CC_LibInitNoRng+0x3c>
    c672:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    c676:	4b0c      	ldr	r3, [pc, #48]	; (c6a8 <CC_LibInitNoRng+0x60>)
    c678:	429a      	cmp	r2, r3
    c67a:	d00a      	beq.n	c692 <CC_LibInitNoRng+0x4a>
    c67c:	2407      	movs	r4, #7
    c67e:	f000 f817 	bl	c6b0 <CC_HalTerminate>
    c682:	e7e6      	b.n	c652 <CC_LibInitNoRng+0xa>
    c684:	2406      	movs	r4, #6
    c686:	e7fa      	b.n	c67e <CC_LibInitNoRng+0x36>
    c688:	2404      	movs	r4, #4
    c68a:	4620      	mov	r0, r4
    c68c:	bd38      	pop	{r3, r4, r5, pc}
    c68e:	2400      	movs	r4, #0
    c690:	e7f5      	b.n	c67e <CC_LibInitNoRng+0x36>
    c692:	2001      	movs	r0, #1
    c694:	f000 f892 	bl	c7bc <CC_PalPowerSaveModeSelect>
    c698:	4604      	mov	r4, r0
    c69a:	2800      	cmp	r0, #0
    c69c:	d1f7      	bne.n	c68e <CC_LibInitNoRng+0x46>
    c69e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    c6a2:	e7d8      	b.n	c656 <CC_LibInitNoRng+0xe>
    c6a4:	5002b000 	.word	0x5002b000
    c6a8:	20e00000 	.word	0x20e00000

0000c6ac <CC_HalInit>:
    c6ac:	2000      	movs	r0, #0
    c6ae:	4770      	bx	lr

0000c6b0 <CC_HalTerminate>:
    c6b0:	2000      	movs	r0, #0
    c6b2:	4770      	bx	lr

0000c6b4 <CC_HalMaskInterrupt>:
    c6b4:	4b01      	ldr	r3, [pc, #4]	; (c6bc <CC_HalMaskInterrupt+0x8>)
    c6b6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    c6ba:	4770      	bx	lr
    c6bc:	5002b000 	.word	0x5002b000

0000c6c0 <CC_PalInit>:
    c6c0:	b510      	push	{r4, lr}
    c6c2:	4811      	ldr	r0, [pc, #68]	; (c708 <CC_PalInit+0x48>)
    c6c4:	f000 f848 	bl	c758 <CC_PalMutexCreate>
    c6c8:	b100      	cbz	r0, c6cc <CC_PalInit+0xc>
    c6ca:	bd10      	pop	{r4, pc}
    c6cc:	480f      	ldr	r0, [pc, #60]	; (c70c <CC_PalInit+0x4c>)
    c6ce:	f000 f843 	bl	c758 <CC_PalMutexCreate>
    c6d2:	2800      	cmp	r0, #0
    c6d4:	d1f9      	bne.n	c6ca <CC_PalInit+0xa>
    c6d6:	4c0e      	ldr	r4, [pc, #56]	; (c710 <CC_PalInit+0x50>)
    c6d8:	4620      	mov	r0, r4
    c6da:	f000 f83d 	bl	c758 <CC_PalMutexCreate>
    c6de:	2800      	cmp	r0, #0
    c6e0:	d1f3      	bne.n	c6ca <CC_PalInit+0xa>
    c6e2:	4b0c      	ldr	r3, [pc, #48]	; (c714 <CC_PalInit+0x54>)
    c6e4:	480c      	ldr	r0, [pc, #48]	; (c718 <CC_PalInit+0x58>)
    c6e6:	601c      	str	r4, [r3, #0]
    c6e8:	f000 f836 	bl	c758 <CC_PalMutexCreate>
    c6ec:	4601      	mov	r1, r0
    c6ee:	2800      	cmp	r0, #0
    c6f0:	d1eb      	bne.n	c6ca <CC_PalInit+0xa>
    c6f2:	f000 f82d 	bl	c750 <CC_PalDmaInit>
    c6f6:	4604      	mov	r4, r0
    c6f8:	b108      	cbz	r0, c6fe <CC_PalInit+0x3e>
    c6fa:	4620      	mov	r0, r4
    c6fc:	bd10      	pop	{r4, pc}
    c6fe:	f000 f83f 	bl	c780 <CC_PalPowerSaveModeInit>
    c702:	4620      	mov	r0, r4
    c704:	e7fa      	b.n	c6fc <CC_PalInit+0x3c>
    c706:	bf00      	nop
    c708:	20000250 	.word	0x20000250
    c70c:	2000024c 	.word	0x2000024c
    c710:	20000248 	.word	0x20000248
    c714:	20000240 	.word	0x20000240
    c718:	20000244 	.word	0x20000244

0000c71c <CC_PalTerminate>:
    c71c:	b508      	push	{r3, lr}
    c71e:	4808      	ldr	r0, [pc, #32]	; (c740 <CC_PalTerminate+0x24>)
    c720:	f000 f824 	bl	c76c <CC_PalMutexDestroy>
    c724:	4807      	ldr	r0, [pc, #28]	; (c744 <CC_PalTerminate+0x28>)
    c726:	f000 f821 	bl	c76c <CC_PalMutexDestroy>
    c72a:	4807      	ldr	r0, [pc, #28]	; (c748 <CC_PalTerminate+0x2c>)
    c72c:	f000 f81e 	bl	c76c <CC_PalMutexDestroy>
    c730:	4806      	ldr	r0, [pc, #24]	; (c74c <CC_PalTerminate+0x30>)
    c732:	f000 f81b 	bl	c76c <CC_PalMutexDestroy>
    c736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c73a:	f000 b80b 	b.w	c754 <CC_PalDmaTerminate>
    c73e:	bf00      	nop
    c740:	20000250 	.word	0x20000250
    c744:	2000024c 	.word	0x2000024c
    c748:	20000248 	.word	0x20000248
    c74c:	20000244 	.word	0x20000244

0000c750 <CC_PalDmaInit>:
    c750:	2000      	movs	r0, #0
    c752:	4770      	bx	lr

0000c754 <CC_PalDmaTerminate>:
    c754:	4770      	bx	lr
    c756:	bf00      	nop

0000c758 <CC_PalMutexCreate>:
    c758:	b508      	push	{r3, lr}
    c75a:	4b03      	ldr	r3, [pc, #12]	; (c768 <CC_PalMutexCreate+0x10>)
    c75c:	6802      	ldr	r2, [r0, #0]
    c75e:	681b      	ldr	r3, [r3, #0]
    c760:	6810      	ldr	r0, [r2, #0]
    c762:	4798      	blx	r3
    c764:	2000      	movs	r0, #0
    c766:	bd08      	pop	{r3, pc}
    c768:	20000210 	.word	0x20000210

0000c76c <CC_PalMutexDestroy>:
    c76c:	b508      	push	{r3, lr}
    c76e:	4b03      	ldr	r3, [pc, #12]	; (c77c <CC_PalMutexDestroy+0x10>)
    c770:	6802      	ldr	r2, [r0, #0]
    c772:	685b      	ldr	r3, [r3, #4]
    c774:	6810      	ldr	r0, [r2, #0]
    c776:	4798      	blx	r3
    c778:	2000      	movs	r0, #0
    c77a:	bd08      	pop	{r3, pc}
    c77c:	20000210 	.word	0x20000210

0000c780 <CC_PalPowerSaveModeInit>:
    c780:	b570      	push	{r4, r5, r6, lr}
    c782:	4c09      	ldr	r4, [pc, #36]	; (c7a8 <CC_PalPowerSaveModeInit+0x28>)
    c784:	4d09      	ldr	r5, [pc, #36]	; (c7ac <CC_PalPowerSaveModeInit+0x2c>)
    c786:	6920      	ldr	r0, [r4, #16]
    c788:	68ab      	ldr	r3, [r5, #8]
    c78a:	4798      	blx	r3
    c78c:	b118      	cbz	r0, c796 <CC_PalPowerSaveModeInit+0x16>
    c78e:	4b08      	ldr	r3, [pc, #32]	; (c7b0 <CC_PalPowerSaveModeInit+0x30>)
    c790:	4808      	ldr	r0, [pc, #32]	; (c7b4 <CC_PalPowerSaveModeInit+0x34>)
    c792:	685b      	ldr	r3, [r3, #4]
    c794:	4798      	blx	r3
    c796:	4a08      	ldr	r2, [pc, #32]	; (c7b8 <CC_PalPowerSaveModeInit+0x38>)
    c798:	68eb      	ldr	r3, [r5, #12]
    c79a:	6920      	ldr	r0, [r4, #16]
    c79c:	2100      	movs	r1, #0
    c79e:	6011      	str	r1, [r2, #0]
    c7a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c7a4:	4718      	bx	r3
    c7a6:	bf00      	nop
    c7a8:	200001fc 	.word	0x200001fc
    c7ac:	20000210 	.word	0x20000210
    c7b0:	200001f4 	.word	0x200001f4
    c7b4:	0000f564 	.word	0x0000f564
    c7b8:	20002238 	.word	0x20002238

0000c7bc <CC_PalPowerSaveModeSelect>:
    c7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7be:	4d1a      	ldr	r5, [pc, #104]	; (c828 <CC_PalPowerSaveModeSelect+0x6c>)
    c7c0:	4e1a      	ldr	r6, [pc, #104]	; (c82c <CC_PalPowerSaveModeSelect+0x70>)
    c7c2:	4604      	mov	r4, r0
    c7c4:	68b2      	ldr	r2, [r6, #8]
    c7c6:	6928      	ldr	r0, [r5, #16]
    c7c8:	4790      	blx	r2
    c7ca:	b9e8      	cbnz	r0, c808 <CC_PalPowerSaveModeSelect+0x4c>
    c7cc:	4f18      	ldr	r7, [pc, #96]	; (c830 <CC_PalPowerSaveModeSelect+0x74>)
    c7ce:	683b      	ldr	r3, [r7, #0]
    c7d0:	b14c      	cbz	r4, c7e6 <CC_PalPowerSaveModeSelect+0x2a>
    c7d2:	b1a3      	cbz	r3, c7fe <CC_PalPowerSaveModeSelect+0x42>
    c7d4:	2b01      	cmp	r3, #1
    c7d6:	d019      	beq.n	c80c <CC_PalPowerSaveModeSelect+0x50>
    c7d8:	3b01      	subs	r3, #1
    c7da:	603b      	str	r3, [r7, #0]
    c7dc:	6928      	ldr	r0, [r5, #16]
    c7de:	68f3      	ldr	r3, [r6, #12]
    c7e0:	4798      	blx	r3
    c7e2:	2000      	movs	r0, #0
    c7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c7e6:	b943      	cbnz	r3, c7fa <CC_PalPowerSaveModeSelect+0x3e>
    c7e8:	4a12      	ldr	r2, [pc, #72]	; (c834 <CC_PalPowerSaveModeSelect+0x78>)
    c7ea:	2101      	movs	r1, #1
    c7ec:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    c7f0:	4911      	ldr	r1, [pc, #68]	; (c838 <CC_PalPowerSaveModeSelect+0x7c>)
    c7f2:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    c7f6:	2a00      	cmp	r2, #0
    c7f8:	d1fb      	bne.n	c7f2 <CC_PalPowerSaveModeSelect+0x36>
    c7fa:	3301      	adds	r3, #1
    c7fc:	603b      	str	r3, [r7, #0]
    c7fe:	68f3      	ldr	r3, [r6, #12]
    c800:	6928      	ldr	r0, [r5, #16]
    c802:	4798      	blx	r3
    c804:	2000      	movs	r0, #0
    c806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c808:	480c      	ldr	r0, [pc, #48]	; (c83c <CC_PalPowerSaveModeSelect+0x80>)
    c80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c80c:	4a0a      	ldr	r2, [pc, #40]	; (c838 <CC_PalPowerSaveModeSelect+0x7c>)
    c80e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    c812:	2b00      	cmp	r3, #0
    c814:	d1fb      	bne.n	c80e <CC_PalPowerSaveModeSelect+0x52>
    c816:	4a07      	ldr	r2, [pc, #28]	; (c834 <CC_PalPowerSaveModeSelect+0x78>)
    c818:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    c81c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    c820:	f7ff ff48 	bl	c6b4 <CC_HalMaskInterrupt>
    c824:	683b      	ldr	r3, [r7, #0]
    c826:	e7d7      	b.n	c7d8 <CC_PalPowerSaveModeSelect+0x1c>
    c828:	200001fc 	.word	0x200001fc
    c82c:	20000210 	.word	0x20000210
    c830:	20002238 	.word	0x20002238
    c834:	5002a000 	.word	0x5002a000
    c838:	5002b000 	.word	0x5002b000
    c83c:	ffff8fe9 	.word	0xffff8fe9

0000c840 <cbpprintf_external>:
{
    c840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c844:	4606      	mov	r6, r0
    c846:	460d      	mov	r5, r1
    c848:	4617      	mov	r7, r2
	if (buf == NULL) {
    c84a:	4698      	mov	r8, r3
    c84c:	b32b      	cbz	r3, c89a <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    c84e:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    c852:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c856:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    c858:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c85a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    c85e:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c862:	441c      	add	r4, r3
    c864:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    c866:	f04f 0a00 	mov.w	sl, #0
    c86a:	45ca      	cmp	sl, r9
    c86c:	d309      	bcc.n	c882 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    c86e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    c872:	f108 0308 	add.w	r3, r8, #8
    c876:	4639      	mov	r1, r7
    c878:	4630      	mov	r0, r6
    c87a:	46ac      	mov	ip, r5
}
    c87c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    c880:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    c882:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    c886:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    c88a:	4620      	mov	r0, r4
    c88c:	f000 ff01 	bl	d692 <strlen>
    c890:	3001      	adds	r0, #1
    c892:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    c894:	f10a 0a01 	add.w	sl, sl, #1
    c898:	e7e7      	b.n	c86a <cbpprintf_external+0x2a>
}
    c89a:	f06f 0015 	mvn.w	r0, #21
    c89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c8a2 <is_ptr>:
{
    c8a2:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    c8a4:	2500      	movs	r5, #0
{
    c8a6:	4602      	mov	r2, r0
	bool mod = false;
    c8a8:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    c8aa:	4614      	mov	r4, r2
    c8ac:	f814 3b01 	ldrb.w	r3, [r4], #1
    c8b0:	b90b      	cbnz	r3, c8b6 <is_ptr+0x14>
					return false;
    c8b2:	4618      	mov	r0, r3
    c8b4:	e009      	b.n	c8ca <is_ptr+0x28>
		if (mod) {
    c8b6:	b198      	cbz	r0, c8e0 <is_ptr+0x3e>
			if (cnt == n) {
    c8b8:	428d      	cmp	r5, r1
    c8ba:	d107      	bne.n	c8cc <is_ptr+0x2a>
				if (c == 'p') {
    c8bc:	2b70      	cmp	r3, #112	; 0x70
    c8be:	d004      	beq.n	c8ca <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    c8c0:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    c8c4:	2a3a      	cmp	r2, #58	; 0x3a
    c8c6:	d80b      	bhi.n	c8e0 <is_ptr+0x3e>
					return false;
    c8c8:	2000      	movs	r0, #0
}
    c8ca:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    c8cc:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    c8d0:	2e3a      	cmp	r6, #58	; 0x3a
    c8d2:	d805      	bhi.n	c8e0 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    c8d4:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    c8d6:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    c8d8:	1c94      	adds	r4, r2, #2
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d0e9      	beq.n	c8b2 <is_ptr+0x10>
    c8de:	2000      	movs	r0, #0
		if (c == '%') {
    c8e0:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    c8e2:	bf08      	it	eq
    c8e4:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    c8e8:	4622      	mov	r2, r4
    c8ea:	e7de      	b.n	c8aa <is_ptr+0x8>

0000c8ec <arch_printk_char_out>:
}
    c8ec:	2000      	movs	r0, #0
    c8ee:	4770      	bx	lr

0000c8f0 <str_out>:
{
    c8f0:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    c8f2:	688a      	ldr	r2, [r1, #8]
    c8f4:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    c8f6:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    c8f8:	b114      	cbz	r4, c900 <str_out+0x10>
    c8fa:	684b      	ldr	r3, [r1, #4]
    c8fc:	4293      	cmp	r3, r2
    c8fe:	dc01      	bgt.n	c904 <str_out+0x14>
		ctx->count++;
    c900:	608d      	str	r5, [r1, #8]
}
    c902:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    c904:	3b01      	subs	r3, #1
    c906:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    c908:	bf08      	it	eq
    c90a:	2200      	moveq	r2, #0
    c90c:	608d      	str	r5, [r1, #8]
    c90e:	bf0c      	ite	eq
    c910:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    c912:	54a0      	strbne	r0, [r4, r2]
    c914:	e7f5      	b.n	c902 <str_out+0x12>

0000c916 <printk>:
{
    c916:	b40f      	push	{r0, r1, r2, r3}
    c918:	b507      	push	{r0, r1, r2, lr}
    c91a:	a904      	add	r1, sp, #16
    c91c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    c920:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    c922:	f000 fdf8 	bl	d516 <z_log_vprintk>
}
    c926:	b003      	add	sp, #12
    c928:	f85d eb04 	ldr.w	lr, [sp], #4
    c92c:	b004      	add	sp, #16
    c92e:	4770      	bx	lr

0000c930 <snprintk>:
{
    c930:	b40c      	push	{r2, r3}
    c932:	b507      	push	{r0, r1, r2, lr}
    c934:	ab04      	add	r3, sp, #16
    c936:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    c93a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    c93c:	f7f4 f9c0 	bl	cc0 <vsnprintk>
}
    c940:	b003      	add	sp, #12
    c942:	f85d eb04 	ldr.w	lr, [sp], #4
    c946:	b002      	add	sp, #8
    c948:	4770      	bx	lr

0000c94a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    c94a:	4604      	mov	r4, r0
    c94c:	b508      	push	{r3, lr}
    c94e:	4608      	mov	r0, r1
    c950:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    c952:	461a      	mov	r2, r3
    c954:	47a0      	blx	r4
	return z_impl_z_current_get();
    c956:	f7ff fa53 	bl	be00 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    c95a:	f7f7 fbd7 	bl	410c <z_impl_k_thread_abort>

0000c95e <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    c95e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    c962:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    c964:	0840      	lsrs	r0, r0, #1
    c966:	4770      	bx	lr

0000c968 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c96a:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    c96c:	f7ff fff7 	bl	c95e <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    c970:	fab0 f080 	clz	r0, r0
    c974:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    c978:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    c97c:	00ca      	lsls	r2, r1, #3
    c97e:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    c982:	1d17      	adds	r7, r2, #4
{
    c984:	460c      	mov	r4, r1
    c986:	3206      	adds	r2, #6
    c988:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    c98a:	b956      	cbnz	r6, c9a2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    c98c:	2101      	movs	r1, #1
    c98e:	fa01 f000 	lsl.w	r0, r1, r0
    c992:	68d9      	ldr	r1, [r3, #12]
    c994:	4301      	orrs	r1, r0
    c996:	60d9      	str	r1, [r3, #12]
		b->next = c;
    c998:	f8cc 4010 	str.w	r4, [ip, #16]
    c99c:	53dd      	strh	r5, [r3, r7]
    c99e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    c9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    c9a2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    c9a4:	3104      	adds	r1, #4
    c9a6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    c9a8:	53d8      	strh	r0, [r3, r7]
    c9aa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    c9ae:	529e      	strh	r6, [r3, r2]
    c9b0:	80c5      	strh	r5, [r0, #6]
    c9b2:	525d      	strh	r5, [r3, r1]
    c9b4:	e7f4      	b.n	c9a0 <free_list_add+0x38>

0000c9b6 <free_list_remove_bidx>:
{
    c9b6:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    c9b8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    c9bc:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    c9be:	4299      	cmp	r1, r3
    c9c0:	f102 0104 	add.w	r1, r2, #4
    c9c4:	d10a      	bne.n	c9dc <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    c9c6:	2301      	movs	r3, #1
    c9c8:	fa03 f202 	lsl.w	r2, r3, r2
    c9cc:	68c3      	ldr	r3, [r0, #12]
    c9ce:	ea23 0302 	bic.w	r3, r3, r2
    c9d2:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    c9d4:	2300      	movs	r3, #0
    c9d6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    c9da:	bd10      	pop	{r4, pc}
    c9dc:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    c9de:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    c9e2:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    c9e6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    c9ea:	80cb      	strh	r3, [r1, #6]
    c9ec:	8082      	strh	r2, [r0, #4]
}
    c9ee:	e7f4      	b.n	c9da <free_list_remove_bidx+0x24>

0000c9f0 <free_list_remove>:
{
    c9f0:	b508      	push	{r3, lr}
    c9f2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    c9f4:	f7ff ffb3 	bl	c95e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    c9f8:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    c9fc:	f1c2 021f 	rsb	r2, r2, #31
    ca00:	4618      	mov	r0, r3
}
    ca02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    ca06:	f7ff bfd6 	b.w	c9b6 <free_list_remove_bidx>

0000ca0a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    ca0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca0e:	fab1 f581 	clz	r5, r1
    ca12:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    ca16:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    ca1a:	4603      	mov	r3, r0
	if (b->next) {
    ca1c:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    ca20:	460e      	mov	r6, r1
	if (b->next) {
    ca22:	b1c2      	cbz	r2, ca56 <alloc_chunk+0x4c>
    ca24:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    ca26:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    ca2a:	4618      	mov	r0, r3
    ca2c:	4621      	mov	r1, r4
    ca2e:	f7ff ff96 	bl	c95e <chunk_size>
    ca32:	42b0      	cmp	r0, r6
    ca34:	d306      	bcc.n	ca44 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    ca36:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    ca38:	4618      	mov	r0, r3
    ca3a:	f7ff ffbc 	bl	c9b6 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    ca3e:	4620      	mov	r0, r4
    ca40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    ca44:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    ca48:	3f01      	subs	r7, #1
    ca4a:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    ca4c:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    ca50:	d001      	beq.n	ca56 <alloc_chunk+0x4c>
    ca52:	4282      	cmp	r2, r0
    ca54:	d1e7      	bne.n	ca26 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    ca56:	f1c5 0220 	rsb	r2, r5, #32
    ca5a:	f04f 34ff 	mov.w	r4, #4294967295
    ca5e:	4094      	lsls	r4, r2
    ca60:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    ca62:	4014      	ands	r4, r2
    ca64:	d0eb      	beq.n	ca3e <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    ca66:	fa94 f2a4 	rbit	r2, r4
    ca6a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    ca6e:	1d11      	adds	r1, r2, #4
    ca70:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    ca74:	4621      	mov	r1, r4
    ca76:	e7df      	b.n	ca38 <alloc_chunk+0x2e>

0000ca78 <merge_chunks>:
{
    ca78:	b538      	push	{r3, r4, r5, lr}
    ca7a:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    ca7c:	f7ff ff6f 	bl	c95e <chunk_size>
{
    ca80:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    ca82:	4604      	mov	r4, r0
    ca84:	4611      	mov	r1, r2
    ca86:	4618      	mov	r0, r3
    ca88:	f7ff ff69 	bl	c95e <chunk_size>
		((uint16_t *)cmem)[f] = val;
    ca8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    ca90:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ca92:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    ca94:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    ca96:	4618      	mov	r0, r3
    ca98:	f7ff ff61 	bl	c95e <chunk_size>
	void *cmem = &buf[c];
    ca9c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    ca9e:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    caa2:	bd38      	pop	{r3, r4, r5, pc}

0000caa4 <split_chunks>:
{
    caa4:	b538      	push	{r3, r4, r5, lr}
    caa6:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    caa8:	f7ff ff59 	bl	c95e <chunk_size>
{
    caac:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    caae:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    cab0:	1a51      	subs	r1, r2, r1
    cab2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    cab6:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cab8:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    caba:	8060      	strh	r0, [r4, #2]
    cabc:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cac0:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    cac2:	8044      	strh	r4, [r0, #2]
    cac4:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    cac8:	4618      	mov	r0, r3
    caca:	4611      	mov	r1, r2
    cacc:	f7ff ff47 	bl	c95e <chunk_size>
	void *cmem = &buf[c];
    cad0:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    cad2:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    cad6:	bd38      	pop	{r3, r4, r5, pc}

0000cad8 <free_chunk>:
{
    cad8:	b538      	push	{r3, r4, r5, lr}
    cada:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    cadc:	f7ff ff3f 	bl	c95e <chunk_size>
    cae0:	460c      	mov	r4, r1
    cae2:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    cae4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    cae8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    caea:	07da      	lsls	r2, r3, #31
    caec:	d40a      	bmi.n	cb04 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    caee:	4628      	mov	r0, r5
    caf0:	f7ff ff7e 	bl	c9f0 <free_list_remove>
	return c + chunk_size(h, c);
    caf4:	4621      	mov	r1, r4
    caf6:	4628      	mov	r0, r5
    caf8:	f7ff ff31 	bl	c95e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    cafc:	1822      	adds	r2, r4, r0
    cafe:	4628      	mov	r0, r5
    cb00:	f7ff ffba 	bl	ca78 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    cb04:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    cb08:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    cb0a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    cb0e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    cb10:	07db      	lsls	r3, r3, #31
    cb12:	d40c      	bmi.n	cb2e <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    cb14:	4628      	mov	r0, r5
    cb16:	f7ff ff6b 	bl	c9f0 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    cb1a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    cb1e:	4622      	mov	r2, r4
    cb20:	1a61      	subs	r1, r4, r1
    cb22:	4628      	mov	r0, r5
    cb24:	f7ff ffa8 	bl	ca78 <merge_chunks>
    cb28:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    cb2c:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    cb2e:	4621      	mov	r1, r4
    cb30:	4628      	mov	r0, r5
}
    cb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    cb36:	f7ff bf17 	b.w	c968 <free_list_add>

0000cb3a <sys_heap_free>:
	if (mem == NULL) {
    cb3a:	b161      	cbz	r1, cb56 <sys_heap_free+0x1c>
    cb3c:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cb3e:	3904      	subs	r1, #4
    cb40:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    cb42:	f021 0307 	bic.w	r3, r1, #7
    cb46:	4403      	add	r3, r0
	free_chunk(h, c);
    cb48:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    cb4a:	885a      	ldrh	r2, [r3, #2]
    cb4c:	f022 0201 	bic.w	r2, r2, #1
    cb50:	805a      	strh	r2, [r3, #2]
    cb52:	f7ff bfc1 	b.w	cad8 <free_chunk>
}
    cb56:	4770      	bx	lr

0000cb58 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    cb58:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    cb5a:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    cb5c:	b909      	cbnz	r1, cb62 <sys_heap_alloc+0xa>
		return NULL;
    cb5e:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    cb60:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    cb62:	68ab      	ldr	r3, [r5, #8]
    cb64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    cb68:	d9f9      	bls.n	cb5e <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cb6a:	310b      	adds	r1, #11
    cb6c:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    cb6e:	4621      	mov	r1, r4
    cb70:	4628      	mov	r0, r5
    cb72:	f7ff ff4a 	bl	ca0a <alloc_chunk>
	if (c == 0U) {
    cb76:	4606      	mov	r6, r0
    cb78:	2800      	cmp	r0, #0
    cb7a:	d0f0      	beq.n	cb5e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    cb7c:	4601      	mov	r1, r0
    cb7e:	4628      	mov	r0, r5
    cb80:	f7ff feed 	bl	c95e <chunk_size>
    cb84:	42a0      	cmp	r0, r4
    cb86:	d907      	bls.n	cb98 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    cb88:	1932      	adds	r2, r6, r4
    cb8a:	4628      	mov	r0, r5
    cb8c:	f7ff ff8a 	bl	caa4 <split_chunks>
		free_list_add(h, c + chunk_sz);
    cb90:	4611      	mov	r1, r2
    cb92:	4628      	mov	r0, r5
    cb94:	f7ff fee8 	bl	c968 <free_list_add>
	void *cmem = &buf[c];
    cb98:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    cb9c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cb9e:	8853      	ldrh	r3, [r2, #2]
    cba0:	f043 0301 	orr.w	r3, r3, #1
    cba4:	8053      	strh	r3, [r2, #2]
    cba6:	3004      	adds	r0, #4
	return mem;
    cba8:	e7da      	b.n	cb60 <sys_heap_alloc+0x8>

0000cbaa <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    cbaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cbae:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    cbb2:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    cbb6:	6806      	ldr	r6, [r0, #0]
{
    cbb8:	460f      	mov	r7, r1
    cbba:	4614      	mov	r4, r2
	if (align != rew) {
    cbbc:	d00c      	beq.n	cbd8 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    cbbe:	424b      	negs	r3, r1
    cbc0:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    cbc2:	2b04      	cmp	r3, #4
    cbc4:	461a      	mov	r2, r3
    cbc6:	464f      	mov	r7, r9
    cbc8:	bf28      	it	cs
    cbca:	2204      	movcs	r2, #4
	rew = align & -align;
    cbcc:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    cbce:	b964      	cbnz	r4, cbea <sys_heap_aligned_alloc+0x40>
		return NULL;
    cbd0:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    cbd2:	4628      	mov	r0, r5
    cbd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    cbd8:	2904      	cmp	r1, #4
    cbda:	d804      	bhi.n	cbe6 <sys_heap_aligned_alloc+0x3c>
}
    cbdc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    cbe0:	4611      	mov	r1, r2
    cbe2:	f7ff bfb9 	b.w	cb58 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    cbe6:	2204      	movs	r2, #4
    cbe8:	e7f1      	b.n	cbce <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    cbea:	68b3      	ldr	r3, [r6, #8]
    cbec:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    cbf0:	d9ee      	bls.n	cbd0 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cbf2:	f104 010b 	add.w	r1, r4, #11
    cbf6:	4439      	add	r1, r7
    cbf8:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    cbfa:	08c9      	lsrs	r1, r1, #3
    cbfc:	4630      	mov	r0, r6
    cbfe:	f7ff ff04 	bl	ca0a <alloc_chunk>
	if (c0 == 0) {
    cc02:	4680      	mov	r8, r0
    cc04:	2800      	cmp	r0, #0
    cc06:	d0e3      	beq.n	cbd0 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    cc08:	f109 0504 	add.w	r5, r9, #4
    cc0c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    cc10:	1e7b      	subs	r3, r7, #1
    cc12:	4435      	add	r5, r6
    cc14:	441d      	add	r5, r3
    cc16:	427f      	negs	r7, r7
    cc18:	403d      	ands	r5, r7
    cc1a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cc1e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cc20:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cc22:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cc24:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cc26:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    cc2a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    cc2c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cc30:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    cc34:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    cc38:	d208      	bcs.n	cc4c <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    cc3a:	4601      	mov	r1, r0
    cc3c:	463a      	mov	r2, r7
    cc3e:	4630      	mov	r0, r6
    cc40:	f7ff ff30 	bl	caa4 <split_chunks>
		free_list_add(h, c0);
    cc44:	4641      	mov	r1, r8
    cc46:	4630      	mov	r0, r6
    cc48:	f7ff fe8e 	bl	c968 <free_list_add>
	return c + chunk_size(h, c);
    cc4c:	4639      	mov	r1, r7
    cc4e:	4630      	mov	r0, r6
    cc50:	f7ff fe85 	bl	c95e <chunk_size>
    cc54:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    cc56:	4284      	cmp	r4, r0
    cc58:	d207      	bcs.n	cc6a <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    cc5a:	4630      	mov	r0, r6
    cc5c:	4622      	mov	r2, r4
    cc5e:	f7ff ff21 	bl	caa4 <split_chunks>
		free_list_add(h, c_end);
    cc62:	4621      	mov	r1, r4
    cc64:	4630      	mov	r0, r6
    cc66:	f7ff fe7f 	bl	c968 <free_list_add>
	void *cmem = &buf[c];
    cc6a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cc6e:	8873      	ldrh	r3, [r6, #2]
    cc70:	f043 0301 	orr.w	r3, r3, #1
    cc74:	8073      	strh	r3, [r6, #2]
    cc76:	e7ac      	b.n	cbd2 <sys_heap_aligned_alloc+0x28>

0000cc78 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    cc78:	3a04      	subs	r2, #4
{
    cc7a:	b4f0      	push	{r4, r5, r6, r7}
    cc7c:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cc7e:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cc80:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cc82:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cc86:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cc8a:	1a0e      	subs	r6, r1, r0
    cc8c:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    cc8e:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    cc90:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    cc94:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cc96:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    cc9a:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    cc9c:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cc9e:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    cca0:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cca4:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    cca6:	f1c2 0220 	rsb	r2, r2, #32
    ccaa:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    ccac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    ccb0:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    ccb4:	4294      	cmp	r4, r2
    ccb6:	d1fb      	bne.n	ccb0 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ccb8:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ccba:	f042 0201 	orr.w	r2, r2, #1
    ccbe:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    ccc0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    ccc4:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ccc6:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    ccc8:	8007      	strh	r7, [r0, #0]
    ccca:	8065      	strh	r5, [r4, #2]
    cccc:	1984      	adds	r4, r0, r6
    ccce:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    ccd2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    ccd6:	8067      	strh	r7, [r4, #2]
    ccd8:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ccda:	885a      	ldrh	r2, [r3, #2]
    ccdc:	f042 0201 	orr.w	r2, r2, #1
    cce0:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    cce2:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    cce4:	f7ff be40 	b.w	c968 <free_list_add>

0000cce8 <sys_slist_find_and_remove>:
	return list->head;
    cce8:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ccea:	2200      	movs	r2, #0
    ccec:	b90b      	cbnz	r3, ccf2 <sys_slist_find_and_remove+0xa>
    ccee:	4618      	mov	r0, r3
    ccf0:	4770      	bx	lr
    ccf2:	428b      	cmp	r3, r1
    ccf4:	d110      	bne.n	cd18 <sys_slist_find_and_remove+0x30>
	return node->next;
    ccf6:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    ccf8:	b942      	cbnz	r2, cd0c <sys_slist_find_and_remove+0x24>
    ccfa:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    ccfc:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    ccfe:	4291      	cmp	r1, r2
    cd00:	d100      	bne.n	cd04 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    cd02:	6043      	str	r3, [r0, #4]
	parent->next = child;
    cd04:	2300      	movs	r3, #0
    cd06:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cd08:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    cd0a:	4770      	bx	lr
	parent->next = child;
    cd0c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    cd0e:	6843      	ldr	r3, [r0, #4]
    cd10:	4299      	cmp	r1, r3
	list->tail = node;
    cd12:	bf08      	it	eq
    cd14:	6042      	streq	r2, [r0, #4]
}
    cd16:	e7f5      	b.n	cd04 <sys_slist_find_and_remove+0x1c>
	return node->next;
    cd18:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cd1a:	681b      	ldr	r3, [r3, #0]
    cd1c:	e7e6      	b.n	ccec <sys_slist_find_and_remove+0x4>

0000cd1e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cd1e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    cd20:	f013 0307 	ands.w	r3, r3, #7
    cd24:	d105      	bne.n	cd32 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    cd26:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    cd28:	2b00      	cmp	r3, #0
    cd2a:	bf0c      	ite	eq
    cd2c:	2000      	moveq	r0, #0
    cd2e:	2003      	movne	r0, #3
    cd30:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    cd32:	2b02      	cmp	r3, #2
    cd34:	d105      	bne.n	cd42 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    cd36:	8b40      	ldrh	r0, [r0, #26]
    cd38:	fab0 f080 	clz	r0, r0
    cd3c:	0940      	lsrs	r0, r0, #5
    cd3e:	0080      	lsls	r0, r0, #2
    cd40:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    cd42:	2b01      	cmp	r3, #1
    cd44:	d105      	bne.n	cd52 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    cd46:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    cd48:	2b00      	cmp	r3, #0
    cd4a:	bf0c      	ite	eq
    cd4c:	2000      	moveq	r0, #0
    cd4e:	2005      	movne	r0, #5
    cd50:	4770      	bx	lr
	int evt = EVT_NOP;
    cd52:	2000      	movs	r0, #0
}
    cd54:	4770      	bx	lr

0000cd56 <validate_args>:
{
    cd56:	b510      	push	{r4, lr}
    cd58:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    cd5a:	b100      	cbz	r0, cd5e <validate_args+0x8>
    cd5c:	b911      	cbnz	r1, cd64 <validate_args+0xe>
		return -EINVAL;
    cd5e:	f06f 0015 	mvn.w	r0, #21
}
    cd62:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    cd64:	1d08      	adds	r0, r1, #4
    cd66:	f000 f8d6 	bl	cf16 <sys_notify_validate>
	if ((rv == 0)
    cd6a:	2800      	cmp	r0, #0
    cd6c:	d1f9      	bne.n	cd62 <validate_args+0xc>
	    && ((cli->notify.flags
    cd6e:	68a3      	ldr	r3, [r4, #8]
    cd70:	2b03      	cmp	r3, #3
    cd72:	d9f6      	bls.n	cd62 <validate_args+0xc>
    cd74:	e7f3      	b.n	cd5e <validate_args+0x8>

0000cd76 <notify_one>:
{
    cd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd7a:	460d      	mov	r5, r1
    cd7c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    cd7e:	4619      	mov	r1, r3
    cd80:	1d28      	adds	r0, r5, #4
{
    cd82:	4690      	mov	r8, r2
    cd84:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    cd86:	f000 f8da 	bl	cf3e <sys_notify_finalize>
	if (cb) {
    cd8a:	4604      	mov	r4, r0
    cd8c:	b138      	cbz	r0, cd9e <notify_one+0x28>
		cb(mgr, cli, state, res);
    cd8e:	4633      	mov	r3, r6
    cd90:	4642      	mov	r2, r8
    cd92:	4629      	mov	r1, r5
    cd94:	4638      	mov	r0, r7
    cd96:	46a4      	mov	ip, r4
}
    cd98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    cd9c:	4760      	bx	ip
}
    cd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cda2 <transition_complete>:
{
    cda2:	b410      	push	{r4}
	__asm__ volatile(
    cda4:	f04f 0420 	mov.w	r4, #32
    cda8:	f3ef 8211 	mrs	r2, BASEPRI
    cdac:	f384 8812 	msr	BASEPRI_MAX, r4
    cdb0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    cdb4:	6141      	str	r1, [r0, #20]
}
    cdb6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    cdb8:	2101      	movs	r1, #1
    cdba:	f7f3 bf97 	b.w	cec <process_event>

0000cdbe <onoff_manager_init>:
{
    cdbe:	b538      	push	{r3, r4, r5, lr}
    cdc0:	460c      	mov	r4, r1
	if ((mgr == NULL)
    cdc2:	4605      	mov	r5, r0
    cdc4:	b158      	cbz	r0, cdde <onoff_manager_init+0x20>
	    || (transitions == NULL)
    cdc6:	b151      	cbz	r1, cdde <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    cdc8:	680b      	ldr	r3, [r1, #0]
    cdca:	b143      	cbz	r3, cdde <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    cdcc:	684b      	ldr	r3, [r1, #4]
    cdce:	b133      	cbz	r3, cdde <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    cdd0:	221c      	movs	r2, #28
    cdd2:	2100      	movs	r1, #0
    cdd4:	f000 fc78 	bl	d6c8 <memset>
    cdd8:	612c      	str	r4, [r5, #16]
	return 0;
    cdda:	2000      	movs	r0, #0
}
    cddc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    cdde:	f06f 0015 	mvn.w	r0, #21
    cde2:	e7fb      	b.n	cddc <onoff_manager_init+0x1e>

0000cde4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    cde4:	b570      	push	{r4, r5, r6, lr}
    cde6:	4605      	mov	r5, r0
    cde8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    cdea:	f7ff ffb4 	bl	cd56 <validate_args>

	if (rv < 0) {
    cdee:	1e04      	subs	r4, r0, #0
    cdf0:	db15      	blt.n	ce1e <onoff_request+0x3a>
    cdf2:	f04f 0320 	mov.w	r3, #32
    cdf6:	f3ef 8211 	mrs	r2, BASEPRI
    cdfa:	f383 8812 	msr	BASEPRI_MAX, r3
    cdfe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    ce02:	8b6b      	ldrh	r3, [r5, #26]
    ce04:	8b2c      	ldrh	r4, [r5, #24]
    ce06:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ce0a:	428b      	cmp	r3, r1
    ce0c:	f004 0407 	and.w	r4, r4, #7
    ce10:	d107      	bne.n	ce22 <onoff_request+0x3e>
	__asm__ volatile(
    ce12:	f382 8811 	msr	BASEPRI, r2
    ce16:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    ce1a:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    ce1e:	4620      	mov	r0, r4
    ce20:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    ce22:	2c02      	cmp	r4, #2
    ce24:	d10c      	bne.n	ce40 <onoff_request+0x5c>
		mgr->refs += 1U;
    ce26:	3301      	adds	r3, #1
    ce28:	836b      	strh	r3, [r5, #26]
    ce2a:	f382 8811 	msr	BASEPRI, r2
    ce2e:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    ce32:	2300      	movs	r3, #0
    ce34:	4622      	mov	r2, r4
    ce36:	4631      	mov	r1, r6
    ce38:	4628      	mov	r0, r5
    ce3a:	f7ff ff9c 	bl	cd76 <notify_one>
    ce3e:	e7ee      	b.n	ce1e <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    ce40:	2c06      	cmp	r4, #6
    ce42:	d814      	bhi.n	ce6e <onoff_request+0x8a>
    ce44:	e8df f004 	tbb	[pc, r4]
    ce48:	13131304 	.word	0x13131304
    ce4c:	1a04      	.short	0x1a04
    ce4e:	04          	.byte	0x04
    ce4f:	00          	.byte	0x00
	parent->next = child;
    ce50:	2300      	movs	r3, #0
    ce52:	6033      	str	r3, [r6, #0]
	return list->tail;
    ce54:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    ce56:	b93b      	cbnz	r3, ce68 <onoff_request+0x84>
	list->head = node;
    ce58:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    ce5c:	b9ac      	cbnz	r4, ce8a <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    ce5e:	2102      	movs	r1, #2
    ce60:	4628      	mov	r0, r5
    ce62:	f7f3 ff43 	bl	cec <process_event>
    ce66:	e7da      	b.n	ce1e <onoff_request+0x3a>
	parent->next = child;
    ce68:	601e      	str	r6, [r3, #0]
	list->tail = node;
    ce6a:	606e      	str	r6, [r5, #4]
}
    ce6c:	e7f6      	b.n	ce5c <onoff_request+0x78>
    ce6e:	f382 8811 	msr	BASEPRI, r2
    ce72:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    ce76:	f06f 0404 	mvn.w	r4, #4
    ce7a:	e7d0      	b.n	ce1e <onoff_request+0x3a>
    ce7c:	f382 8811 	msr	BASEPRI, r2
    ce80:	f3bf 8f6f 	isb	sy
    ce84:	f06f 0485 	mvn.w	r4, #133	; 0x85
    ce88:	e7c9      	b.n	ce1e <onoff_request+0x3a>
    ce8a:	f382 8811 	msr	BASEPRI, r2
    ce8e:	f3bf 8f6f 	isb	sy
		if (notify) {
    ce92:	e7c4      	b.n	ce1e <onoff_request+0x3a>

0000ce94 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    ce94:	b510      	push	{r4, lr}
	__asm__ volatile(
    ce96:	f04f 0320 	mov.w	r3, #32
    ce9a:	f3ef 8211 	mrs	r2, BASEPRI
    ce9e:	f383 8812 	msr	BASEPRI_MAX, r3
    cea2:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cea6:	8b04      	ldrh	r4, [r0, #24]
    cea8:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    ceac:	2c02      	cmp	r4, #2
    ceae:	d00a      	beq.n	cec6 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    ceb0:	2c01      	cmp	r4, #1
    ceb2:	bf0c      	ite	eq
    ceb4:	f06f 0004 	mvneq.w	r0, #4
    ceb8:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    cebc:	f382 8811 	msr	BASEPRI, r2
    cec0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    cec4:	e008      	b.n	ced8 <onoff_release+0x44>
	mgr->refs -= 1U;
    cec6:	8b43      	ldrh	r3, [r0, #26]
    cec8:	3b01      	subs	r3, #1
    ceca:	b29b      	uxth	r3, r3
    cecc:	8343      	strh	r3, [r0, #26]
	if (stop) {
    cece:	b923      	cbnz	r3, ceda <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    ced0:	4621      	mov	r1, r4
    ced2:	f7f3 ff0b 	bl	cec <process_event>
	int rv = state;
    ced6:	4620      	mov	r0, r4
}
    ced8:	bd10      	pop	{r4, pc}
	int rv = state;
    ceda:	4620      	mov	r0, r4
    cedc:	e7ee      	b.n	cebc <onoff_release+0x28>

0000cede <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    cede:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    cee0:	b1b0      	cbz	r0, cf10 <onoff_cancel+0x32>
    cee2:	b1a9      	cbz	r1, cf10 <onoff_cancel+0x32>
	__asm__ volatile(
    cee4:	f04f 0220 	mov.w	r2, #32
    cee8:	f3ef 8511 	mrs	r5, BASEPRI
    ceec:	f382 8812 	msr	BASEPRI_MAX, r2
    cef0:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cef4:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    cef6:	f7ff fef7 	bl	cce8 <sys_slist_find_and_remove>
    cefa:	b130      	cbz	r0, cf0a <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    cefc:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    cf00:	f385 8811 	msr	BASEPRI, r5
    cf04:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    cf08:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    cf0a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cf0e:	e7f7      	b.n	cf00 <onoff_cancel+0x22>
		return -EINVAL;
    cf10:	f06f 0015 	mvn.w	r0, #21
    cf14:	e7f8      	b.n	cf08 <onoff_cancel+0x2a>

0000cf16 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    cf16:	4603      	mov	r3, r0
    cf18:	b140      	cbz	r0, cf2c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    cf1a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    cf1c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    cf20:	2a02      	cmp	r2, #2
    cf22:	d006      	beq.n	cf32 <sys_notify_validate+0x1c>
    cf24:	2a03      	cmp	r2, #3
    cf26:	d004      	beq.n	cf32 <sys_notify_validate+0x1c>
    cf28:	2a01      	cmp	r2, #1
    cf2a:	d005      	beq.n	cf38 <sys_notify_validate+0x22>
    cf2c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    cf30:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    cf32:	681a      	ldr	r2, [r3, #0]
    cf34:	2a00      	cmp	r2, #0
    cf36:	d0f9      	beq.n	cf2c <sys_notify_validate+0x16>
		notify->result = 0;
    cf38:	2000      	movs	r0, #0
    cf3a:	6098      	str	r0, [r3, #8]
    cf3c:	4770      	bx	lr

0000cf3e <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    cf3e:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    cf40:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    cf42:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    cf44:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    cf48:	2a02      	cmp	r2, #2
{
    cf4a:	4603      	mov	r3, r0
	switch (method) {
    cf4c:	f04f 0400 	mov.w	r4, #0
    cf50:	d007      	beq.n	cf62 <sys_notify_finalize+0x24>
    cf52:	2a03      	cmp	r2, #3
    cf54:	d002      	beq.n	cf5c <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    cf56:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
    cf58:	2000      	movs	r0, #0
    cf5a:	e001      	b.n	cf60 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
    cf5c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    cf5e:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    cf60:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    cf62:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    cf64:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    cf66:	2800      	cmp	r0, #0
    cf68:	d0f6      	beq.n	cf58 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
    cf6a:	f7ff fa19 	bl	c3a0 <z_impl_k_poll_signal_raise>
    cf6e:	e7f3      	b.n	cf58 <sys_notify_finalize+0x1a>

0000cf70 <encode_uint>:
{
    cf70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf74:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    cf76:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    cf78:	2b6f      	cmp	r3, #111	; 0x6f
{
    cf7a:	4680      	mov	r8, r0
    cf7c:	460f      	mov	r7, r1
    cf7e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    cf80:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    cf84:	d029      	beq.n	cfda <encode_uint+0x6a>
    cf86:	d824      	bhi.n	cfd2 <encode_uint+0x62>
		return 10;
    cf88:	2b58      	cmp	r3, #88	; 0x58
    cf8a:	bf0c      	ite	eq
    cf8c:	2610      	moveq	r6, #16
    cf8e:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    cf90:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    cf94:	4632      	mov	r2, r6
    cf96:	2300      	movs	r3, #0
    cf98:	4640      	mov	r0, r8
    cf9a:	4639      	mov	r1, r7
    cf9c:	f7f3 f8b0 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cfa0:	2a09      	cmp	r2, #9
    cfa2:	b2d4      	uxtb	r4, r2
    cfa4:	d81e      	bhi.n	cfe4 <encode_uint+0x74>
    cfa6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    cfa8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cfaa:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    cfac:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cfb0:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    cfb4:	d301      	bcc.n	cfba <encode_uint+0x4a>
    cfb6:	45d1      	cmp	r9, sl
    cfb8:	d811      	bhi.n	cfde <encode_uint+0x6e>
	if (conv->flag_hash) {
    cfba:	782b      	ldrb	r3, [r5, #0]
    cfbc:	069b      	lsls	r3, r3, #26
    cfbe:	d505      	bpl.n	cfcc <encode_uint+0x5c>
		if (radix == 8) {
    cfc0:	2e08      	cmp	r6, #8
    cfc2:	d115      	bne.n	cff0 <encode_uint+0x80>
			conv->altform_0 = true;
    cfc4:	78ab      	ldrb	r3, [r5, #2]
    cfc6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    cfca:	70ab      	strb	r3, [r5, #2]
}
    cfcc:	4648      	mov	r0, r9
    cfce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    cfd2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    cfd6:	2b70      	cmp	r3, #112	; 0x70
    cfd8:	e7d7      	b.n	cf8a <encode_uint+0x1a>
	switch (specifier) {
    cfda:	2608      	movs	r6, #8
    cfdc:	e7d8      	b.n	cf90 <encode_uint+0x20>
		value /= radix;
    cfde:	4680      	mov	r8, r0
    cfe0:	460f      	mov	r7, r1
    cfe2:	e7d7      	b.n	cf94 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cfe4:	f1bb 0f19 	cmp.w	fp, #25
    cfe8:	bf94      	ite	ls
    cfea:	3437      	addls	r4, #55	; 0x37
    cfec:	3457      	addhi	r4, #87	; 0x57
    cfee:	e7db      	b.n	cfa8 <encode_uint+0x38>
		} else if (radix == 16) {
    cff0:	2e10      	cmp	r6, #16
    cff2:	d1eb      	bne.n	cfcc <encode_uint+0x5c>
			conv->altform_0c = true;
    cff4:	78ab      	ldrb	r3, [r5, #2]
    cff6:	f043 0310 	orr.w	r3, r3, #16
    cffa:	e7e6      	b.n	cfca <encode_uint+0x5a>

0000cffc <outs>:
{
    cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d000:	4607      	mov	r7, r0
    d002:	4688      	mov	r8, r1
    d004:	4615      	mov	r5, r2
    d006:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    d008:	4614      	mov	r4, r2
    d00a:	42b4      	cmp	r4, r6
    d00c:	d305      	bcc.n	d01a <outs+0x1e>
    d00e:	b10e      	cbz	r6, d014 <outs+0x18>
	return (int)count;
    d010:	1b60      	subs	r0, r4, r5
    d012:	e008      	b.n	d026 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    d014:	7823      	ldrb	r3, [r4, #0]
    d016:	2b00      	cmp	r3, #0
    d018:	d0fa      	beq.n	d010 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    d01a:	f814 0b01 	ldrb.w	r0, [r4], #1
    d01e:	4641      	mov	r1, r8
    d020:	47b8      	blx	r7
		if (rc < 0) {
    d022:	2800      	cmp	r0, #0
    d024:	daf1      	bge.n	d00a <outs+0xe>
}
    d026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d02a <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    d02a:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    d02c:	6903      	ldr	r3, [r0, #16]
{
    d02e:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    d030:	f013 0008 	ands.w	r0, r3, #8
    d034:	d109      	bne.n	d04a <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    d036:	6813      	ldr	r3, [r2, #0]
    d038:	68d4      	ldr	r4, [r2, #12]
    d03a:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    d03c:	bf97      	itett	ls
    d03e:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    d040:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    d042:	1ad3      	subls	r3, r2, r3

	return true;
    d044:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    d046:	600b      	str	r3, [r1, #0]
}
    d048:	bd10      	pop	{r4, pc}
    d04a:	2300      	movs	r3, #0
		return false;
    d04c:	4618      	mov	r0, r3
    d04e:	e7fa      	b.n	d046 <free_space+0x1c>

0000d050 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    d050:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    d052:	a901      	add	r1, sp, #4
{
    d054:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    d056:	f7ff ffe8 	bl	d02a <free_space>
    d05a:	b120      	cbz	r0, d066 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    d05c:	9b01      	ldr	r3, [sp, #4]
    d05e:	68e2      	ldr	r2, [r4, #12]
    d060:	3b01      	subs	r3, #1
    d062:	4413      	add	r3, r2
    d064:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    d066:	6a20      	ldr	r0, [r4, #32]
    d068:	9b01      	ldr	r3, [sp, #4]
    d06a:	1ac0      	subs	r0, r0, r3
}
    d06c:	3801      	subs	r0, #1
    d06e:	b002      	add	sp, #8
    d070:	bd10      	pop	{r4, pc}

0000d072 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    d072:	b510      	push	{r4, lr}
    d074:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    d076:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    d078:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    d07a:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    d07c:	07d2      	lsls	r2, r2, #31
    d07e:	d502      	bpl.n	d086 <idx_inc+0x14>
		return i & (buffer->size - 1);
    d080:	3b01      	subs	r3, #1
    d082:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    d084:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    d086:	4298      	cmp	r0, r3
    d088:	bf28      	it	cs
    d08a:	1ac0      	subcs	r0, r0, r3
    d08c:	e7fa      	b.n	d084 <idx_inc+0x12>

0000d08e <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    d08e:	b510      	push	{r4, lr}
    d090:	4604      	mov	r4, r0
    d092:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    d094:	68c1      	ldr	r1, [r0, #12]
    d096:	f7ff ffec 	bl	d072 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    d09a:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    d09c:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    d09e:	f023 0308 	bic.w	r3, r3, #8
    d0a2:	6123      	str	r3, [r4, #16]
}
    d0a4:	bd10      	pop	{r4, pc}

0000d0a6 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    d0a6:	b538      	push	{r3, r4, r5, lr}
    d0a8:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    d0aa:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    d0ac:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    d0ae:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    d0b0:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    d0b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    d0b8:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    d0ba:	6801      	ldr	r1, [r0, #0]
    d0bc:	462a      	mov	r2, r5
    d0be:	f7ff ffd8 	bl	d072 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    d0c2:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    d0c4:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    d0c6:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    d0c8:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    d0ca:	bf02      	ittt	eq
    d0cc:	6923      	ldreq	r3, [r4, #16]
    d0ce:	f043 0308 	orreq.w	r3, r3, #8
    d0d2:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    d0d4:	462a      	mov	r2, r5
    d0d6:	4620      	mov	r0, r4
    d0d8:	f7ff ffcb 	bl	d072 <idx_inc>
    d0dc:	6060      	str	r0, [r4, #4]
}
    d0de:	bd38      	pop	{r3, r4, r5, pc}

0000d0e0 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    d0e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    d0e4:	68c7      	ldr	r7, [r0, #12]
    d0e6:	69c6      	ldr	r6, [r0, #28]
{
    d0e8:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    d0ea:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    d0ee:	f003 0303 	and.w	r3, r3, #3
    d0f2:	2b02      	cmp	r3, #2
{
    d0f4:	4604      	mov	r4, r0
    d0f6:	4688      	mov	r8, r1
    d0f8:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    d0fa:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    d0fe:	f04f 0300 	mov.w	r3, #0
    d102:	d009      	beq.n	d118 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    d104:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    d106:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    d10a:	6923      	ldr	r3, [r4, #16]
    d10c:	0799      	lsls	r1, r3, #30
    d10e:	d410      	bmi.n	d132 <drop_item_locked+0x52>
		return false;
    d110:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    d112:	b003      	add	sp, #12
    d114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    d118:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    d11c:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    d11e:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    d120:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    d124:	d0f1      	beq.n	d10a <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    d126:	f7ff ffb2 	bl	d08e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    d12a:	68e3      	ldr	r3, [r4, #12]
    d12c:	60a3      	str	r3, [r4, #8]
		return true;
    d12e:	2001      	movs	r0, #1
    d130:	e7ef      	b.n	d112 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    d132:	69a3      	ldr	r3, [r4, #24]
    d134:	4650      	mov	r0, sl
    d136:	4798      	blx	r3
	return item->hdr.valid;
    d138:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    d13c:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    d13e:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    d140:	d5e6      	bpl.n	d110 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    d142:	f013 0302 	ands.w	r3, r3, #2
    d146:	d01d      	beq.n	d184 <drop_item_locked+0xa4>
		if (free_wlen) {
    d148:	f1b8 0f00 	cmp.w	r8, #0
    d14c:	d003      	beq.n	d156 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    d14e:	4641      	mov	r1, r8
    d150:	4620      	mov	r0, r4
    d152:	f7ff ffa8 	bl	d0a6 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    d156:	6861      	ldr	r1, [r4, #4]
    d158:	462a      	mov	r2, r5
    d15a:	4620      	mov	r0, r4
    d15c:	f7ff ff89 	bl	d072 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    d160:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    d164:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    d166:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    d168:	d104      	bne.n	d174 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    d16a:	462a      	mov	r2, r5
    d16c:	4620      	mov	r0, r4
    d16e:	f7ff ff80 	bl	d072 <idx_inc>
    d172:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    d174:	68a3      	ldr	r3, [r4, #8]
    d176:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    d178:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    d17a:	6923      	ldr	r3, [r4, #16]
    d17c:	f043 0308 	orr.w	r3, r3, #8
    d180:	6123      	str	r3, [r4, #16]
    d182:	e7d4      	b.n	d12e <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    d184:	4601      	mov	r1, r0
    d186:	4620      	mov	r0, r4
    d188:	9301      	str	r3, [sp, #4]
    d18a:	f7ff ff80 	bl	d08e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    d18e:	68e2      	ldr	r2, [r4, #12]
    d190:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    d192:	f1b8 0f00 	cmp.w	r8, #0
    d196:	d004      	beq.n	d1a2 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    d198:	6821      	ldr	r1, [r4, #0]
    d19a:	69e2      	ldr	r2, [r4, #28]
    d19c:	9b01      	ldr	r3, [sp, #4]
    d19e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    d1a2:	eb05 0208 	add.w	r2, r5, r8
    d1a6:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    d1aa:	6821      	ldr	r1, [r4, #0]
    d1ac:	4620      	mov	r0, r4
    d1ae:	f7ff ff60 	bl	d072 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    d1b2:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    d1b4:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    d1b6:	f043 0308 	orr.w	r3, r3, #8
    d1ba:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    d1bc:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    d1c0:	f36f 0300 	bfc	r3, #0, #1
    d1c4:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    d1c8:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    d1cc:	e7af      	b.n	d12e <drop_item_locked+0x4e>

0000d1ce <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    d1ce:	b570      	push	{r4, r5, r6, lr}
    d1d0:	4604      	mov	r4, r0
    d1d2:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    d1d4:	f7ff ff4d 	bl	d072 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    d1d8:	6823      	ldr	r3, [r4, #0]
    d1da:	4283      	cmp	r3, r0
    d1dc:	d105      	bne.n	d1ea <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    d1de:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    d1e0:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    d1e2:	f023 0308 	bic.w	r3, r3, #8
    d1e6:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    d1e8:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    d1ea:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    d1ec:	00ab      	lsls	r3, r5, #2
    d1ee:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    d1f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    d1f6:	4620      	mov	r0, r4
    d1f8:	6861      	ldr	r1, [r4, #4]
    d1fa:	462a      	mov	r2, r5
    d1fc:	f7ff ff39 	bl	d072 <idx_inc>
    d200:	6060      	str	r0, [r4, #4]
    d202:	e7f1      	b.n	d1e8 <post_drop_action+0x1a>

0000d204 <max_utilization_update>:
{
    d204:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    d206:	6903      	ldr	r3, [r0, #16]
    d208:	075b      	lsls	r3, r3, #29
{
    d20a:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    d20c:	d506      	bpl.n	d21c <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    d20e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    d210:	f7ff ff1e 	bl	d050 <get_usage>
    d214:	4285      	cmp	r5, r0
    d216:	bf2c      	ite	cs
    d218:	6265      	strcs	r5, [r4, #36]	; 0x24
    d21a:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    d21c:	bd38      	pop	{r3, r4, r5, pc}

0000d21e <mpsc_pbuf_init>:
{
    d21e:	b538      	push	{r3, r4, r5, lr}
    d220:	460d      	mov	r5, r1
    d222:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    d224:	221c      	movs	r2, #28
    d226:	2100      	movs	r1, #0
    d228:	f000 fa4e 	bl	d6c8 <memset>
	buffer->get_wlen = cfg->get_wlen;
    d22c:	68eb      	ldr	r3, [r5, #12]
    d22e:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    d230:	68ab      	ldr	r3, [r5, #8]
    d232:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    d234:	682b      	ldr	r3, [r5, #0]
    d236:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    d238:	686b      	ldr	r3, [r5, #4]
    d23a:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    d23c:	2200      	movs	r2, #0
    d23e:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    d240:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    d242:	b123      	cbz	r3, d24e <mpsc_pbuf_init+0x30>
    d244:	1e59      	subs	r1, r3, #1
    d246:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    d248:	bf08      	it	eq
    d24a:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    d24e:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    d250:	2201      	movs	r2, #1
    d252:	f104 0028 	add.w	r0, r4, #40	; 0x28
    d256:	2100      	movs	r1, #0
}
    d258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d25c:	f001 b96f 	b.w	e53e <z_impl_k_sem_init>

0000d260 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d264:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    d266:	2500      	movs	r5, #0
{
    d268:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    d26a:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    d26c:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    d26e:	428b      	cmp	r3, r1
{
    d270:	4604      	mov	r4, r0
    d272:	460e      	mov	r6, r1
    d274:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    d276:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    d278:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    d27a:	d33a      	bcc.n	d2f2 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    d27c:	f04f 0320 	mov.w	r3, #32
    d280:	f3ef 8b11 	mrs	fp, BASEPRI
    d284:	f383 8812 	msr	BASEPRI_MAX, r3
    d288:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    d28c:	9a05      	ldr	r2, [sp, #20]
    d28e:	46d8      	mov	r8, fp
    d290:	b12a      	cbz	r2, d29e <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    d292:	4629      	mov	r1, r5
    d294:	4620      	mov	r0, r4
    d296:	f7ff ff9a 	bl	d1ce <post_drop_action>
			tmp_wr_idx_shift = 0;
    d29a:	2300      	movs	r3, #0
    d29c:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    d29e:	a904      	add	r1, sp, #16
    d2a0:	4620      	mov	r0, r4
    d2a2:	f7ff fec2 	bl	d02a <free_space>

		if (free_wlen >= wlen) {
    d2a6:	9904      	ldr	r1, [sp, #16]
    d2a8:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    d2aa:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    d2ac:	d32a      	bcc.n	d304 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    d2ae:	6822      	ldr	r2, [r4, #0]
			item =
    d2b0:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    d2b2:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    d2b6:	f021 0103 	bic.w	r1, r1, #3
    d2ba:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    d2be:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    d2c2:	6821      	ldr	r1, [r4, #0]
    d2c4:	4632      	mov	r2, r6
    d2c6:	4620      	mov	r0, r4
    d2c8:	f7ff fed3 	bl	d072 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    d2cc:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    d2ce:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    d2d0:	4298      	cmp	r0, r3
    d2d2:	d012      	beq.n	d2fa <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    d2d4:	2700      	movs	r7, #0
	__asm__ volatile(
    d2d6:	f388 8811 	msr	BASEPRI, r8
    d2da:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    d2de:	9903      	ldr	r1, [sp, #12]
    d2e0:	b129      	cbz	r1, d2ee <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    d2e2:	6962      	ldr	r2, [r4, #20]
    d2e4:	b10a      	cbz	r2, d2ea <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    d2e6:	4620      	mov	r0, r4
    d2e8:	4790      	blx	r2
			}
			dropped_item = NULL;
    d2ea:	2300      	movs	r3, #0
    d2ec:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    d2ee:	2f00      	cmp	r7, #0
    d2f0:	d1c4      	bne.n	d27c <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    d2f2:	4648      	mov	r0, r9
    d2f4:	b007      	add	sp, #28
    d2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    d2fa:	6923      	ldr	r3, [r4, #16]
    d2fc:	f043 0308 	orr.w	r3, r3, #8
    d300:	6123      	str	r3, [r4, #16]
    d302:	e7e7      	b.n	d2d4 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    d304:	b118      	cbz	r0, d30e <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    d306:	4620      	mov	r0, r4
    d308:	f7ff fecd 	bl	d0a6 <add_skip_item>
			cont = true;
    d30c:	e7e3      	b.n	d2d6 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    d30e:	9b00      	ldr	r3, [sp, #0]
    d310:	ea5a 0303 	orrs.w	r3, sl, r3
    d314:	d01a      	beq.n	d34c <mpsc_pbuf_alloc+0xec>
    d316:	9101      	str	r1, [sp, #4]
    d318:	f001 f871 	bl	e3fe <k_is_in_isr>
    d31c:	9901      	ldr	r1, [sp, #4]
    d31e:	b9a8      	cbnz	r0, d34c <mpsc_pbuf_alloc+0xec>
    d320:	f38b 8811 	msr	BASEPRI, fp
    d324:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    d328:	9b00      	ldr	r3, [sp, #0]
    d32a:	4652      	mov	r2, sl
    d32c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    d330:	f7fe f8d8 	bl	b4e4 <z_impl_k_sem_take>
	__asm__ volatile(
    d334:	f04f 0320 	mov.w	r3, #32
    d338:	f3ef 8811 	mrs	r8, BASEPRI
    d33c:	f383 8812 	msr	BASEPRI_MAX, r3
    d340:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    d344:	fab0 f780 	clz	r7, r0
    d348:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    d34a:	e7c4      	b.n	d2d6 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    d34c:	ab05      	add	r3, sp, #20
    d34e:	aa03      	add	r2, sp, #12
    d350:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    d352:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    d354:	f7ff fec4 	bl	d0e0 <drop_item_locked>
    d358:	4607      	mov	r7, r0
    d35a:	e7bc      	b.n	d2d6 <mpsc_pbuf_alloc+0x76>

0000d35c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    d35c:	b570      	push	{r4, r5, r6, lr}
    d35e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    d360:	6983      	ldr	r3, [r0, #24]
    d362:	4608      	mov	r0, r1
{
    d364:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    d366:	4798      	blx	r3
    d368:	4602      	mov	r2, r0
    d36a:	f04f 0320 	mov.w	r3, #32
    d36e:	f3ef 8611 	mrs	r6, BASEPRI
    d372:	f383 8812 	msr	BASEPRI_MAX, r3
    d376:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    d37a:	782b      	ldrb	r3, [r5, #0]
    d37c:	f043 0301 	orr.w	r3, r3, #1
    d380:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    d382:	6861      	ldr	r1, [r4, #4]
    d384:	4620      	mov	r0, r4
    d386:	f7ff fe74 	bl	d072 <idx_inc>
    d38a:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    d38c:	4620      	mov	r0, r4
    d38e:	f7ff ff39 	bl	d204 <max_utilization_update>
	__asm__ volatile(
    d392:	f386 8811 	msr	BASEPRI, r6
    d396:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    d39a:	bd70      	pop	{r4, r5, r6, pc}

0000d39c <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d39e:	4604      	mov	r4, r0
	__asm__ volatile(
    d3a0:	f04f 0320 	mov.w	r3, #32
    d3a4:	f3ef 8611 	mrs	r6, BASEPRI
    d3a8:	f383 8812 	msr	BASEPRI_MAX, r3
    d3ac:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    d3b0:	6923      	ldr	r3, [r4, #16]
    d3b2:	f013 0f08 	tst.w	r3, #8
    d3b6:	68a3      	ldr	r3, [r4, #8]
    d3b8:	d102      	bne.n	d3c0 <mpsc_pbuf_claim+0x24>
    d3ba:	6862      	ldr	r2, [r4, #4]
    d3bc:	4293      	cmp	r3, r2
    d3be:	d900      	bls.n	d3c2 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    d3c0:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    d3c2:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    d3c4:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    d3c6:	b92a      	cbnz	r2, d3d4 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    d3c8:	f386 8811 	msr	BASEPRI, r6
    d3cc:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    d3d0:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    d3d2:	e033      	b.n	d43c <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    d3d4:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    d3d8:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    d3dc:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    d3e0:	d0f2      	beq.n	d3c8 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    d3e2:	2802      	cmp	r0, #2
    d3e4:	d103      	bne.n	d3ee <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    d3e6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    d3ea:	08ad      	lsrs	r5, r5, #2
    d3ec:	d105      	bne.n	d3fa <mpsc_pbuf_claim+0x5e>
    d3ee:	07d0      	lsls	r0, r2, #31
    d3f0:	d412      	bmi.n	d418 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    d3f2:	69a3      	ldr	r3, [r4, #24]
    d3f4:	4638      	mov	r0, r7
    d3f6:	4798      	blx	r3
    d3f8:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    d3fa:	68a1      	ldr	r1, [r4, #8]
    d3fc:	462a      	mov	r2, r5
    d3fe:	4620      	mov	r0, r4
    d400:	f7ff fe37 	bl	d072 <idx_inc>
				rd_idx_inc(buffer, inc);
    d404:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    d406:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    d408:	4620      	mov	r0, r4
    d40a:	f7ff fe40 	bl	d08e <rd_idx_inc>
    d40e:	f386 8811 	msr	BASEPRI, r6
    d412:	f3bf 8f6f 	isb	sy
	} while (cont);
    d416:	e7c3      	b.n	d3a0 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    d418:	f042 0202 	orr.w	r2, r2, #2
    d41c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    d420:	4638      	mov	r0, r7
    d422:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    d424:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    d426:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    d428:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    d42a:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    d42c:	4620      	mov	r0, r4
    d42e:	f7ff fe20 	bl	d072 <idx_inc>
				buffer->tmp_rd_idx =
    d432:	60a0      	str	r0, [r4, #8]
    d434:	f386 8811 	msr	BASEPRI, r6
    d438:	f3bf 8f6f 	isb	sy
}
    d43c:	4638      	mov	r0, r7
    d43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d440 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d442:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    d444:	6983      	ldr	r3, [r0, #24]
    d446:	4608      	mov	r0, r1
{
    d448:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    d44a:	4798      	blx	r3
    d44c:	4606      	mov	r6, r0
	__asm__ volatile(
    d44e:	f04f 0320 	mov.w	r3, #32
    d452:	f3ef 8711 	mrs	r7, BASEPRI
    d456:	f383 8812 	msr	BASEPRI_MAX, r3
    d45a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    d45e:	782b      	ldrb	r3, [r5, #0]
    d460:	f36f 0300 	bfc	r3, #0, #1
    d464:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    d466:	6923      	ldr	r3, [r4, #16]
    d468:	079b      	lsls	r3, r3, #30
    d46a:	d505      	bpl.n	d478 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    d46c:	68e2      	ldr	r2, [r4, #12]
    d46e:	69e3      	ldr	r3, [r4, #28]
    d470:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    d474:	429d      	cmp	r5, r3
    d476:	d11a      	bne.n	d4ae <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    d478:	782b      	ldrb	r3, [r5, #0]
    d47a:	f36f 0341 	bfc	r3, #1, #1
    d47e:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    d480:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    d484:	4299      	cmp	r1, r3
    d486:	d104      	bne.n	d492 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    d488:	4632      	mov	r2, r6
    d48a:	4620      	mov	r0, r4
    d48c:	f7ff fdf1 	bl	d072 <idx_inc>
    d490:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    d492:	4631      	mov	r1, r6
    d494:	4620      	mov	r0, r4
    d496:	f7ff fdfa 	bl	d08e <rd_idx_inc>
	__asm__ volatile(
    d49a:	f387 8811 	msr	BASEPRI, r7
    d49e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    d4a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    d4a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d4aa:	f7fd bff5 	b.w	b498 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    d4ae:	682b      	ldr	r3, [r5, #0]
    d4b0:	f360 039f 	bfi	r3, r0, #2, #30
    d4b4:	602b      	str	r3, [r5, #0]
    d4b6:	e7f0      	b.n	d49a <mpsc_pbuf_free+0x5a>

0000d4b8 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    d4b8:	6902      	ldr	r2, [r0, #16]
    d4ba:	6883      	ldr	r3, [r0, #8]
    d4bc:	0712      	lsls	r2, r2, #28
    d4be:	d402      	bmi.n	d4c6 <mpsc_pbuf_is_pending+0xe>
    d4c0:	6842      	ldr	r2, [r0, #4]
    d4c2:	429a      	cmp	r2, r3
    d4c4:	d200      	bcs.n	d4c8 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    d4c6:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    d4c8:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    d4ca:	1e18      	subs	r0, r3, #0
    d4cc:	bf18      	it	ne
    d4ce:	2001      	movne	r0, #1
    d4d0:	4770      	bx	lr

0000d4d2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    d4d2:	4770      	bx	lr

0000d4d4 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    d4d4:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    d4d6:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    d4d8:	bf5f      	itttt	pl
    d4da:	6803      	ldrpl	r3, [r0, #0]
    d4dc:	8842      	ldrhpl	r2, [r0, #2]
    d4de:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    d4e2:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    d4e6:	bf5d      	ittte	pl
    d4e8:	3017      	addpl	r0, #23
    d4ea:	f020 0007 	bicpl.w	r0, r0, #7
    d4ee:	0880      	lsrpl	r0, r0, #2
	return 0;
    d4f0:	2000      	movmi	r0, #0
}
    d4f2:	4770      	bx	lr

0000d4f4 <dummy_timestamp>:
}
    d4f4:	2000      	movs	r0, #0
    d4f6:	4770      	bx	lr

0000d4f8 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    d4f8:	f000 bd16 	b.w	df28 <sys_clock_cycle_get_32>

0000d4fc <atomic_inc>:
{
    d4fc:	4603      	mov	r3, r0
}
    d4fe:	f3bf 8f5b 	dmb	ish
    d502:	e853 0f00 	ldrex	r0, [r3]
    d506:	1c42      	adds	r2, r0, #1
    d508:	e843 2100 	strex	r1, r2, [r3]
    d50c:	2900      	cmp	r1, #0
    d50e:	d1f8      	bne.n	d502 <atomic_inc+0x6>
    d510:	f3bf 8f5b 	dmb	ish
    d514:	4770      	bx	lr

0000d516 <z_log_vprintk>:
{
    d516:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    d518:	2300      	movs	r3, #0
    d51a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d51e:	e9cd 3300 	strd	r3, r3, [sp]
    d522:	461a      	mov	r2, r3
    d524:	4619      	mov	r1, r3
    d526:	4618      	mov	r0, r3
    d528:	f7f4 fbd4 	bl	1cd4 <z_impl_z_log_msg_runtime_vcreate>
}
    d52c:	b005      	add	sp, #20
    d52e:	f85d fb04 	ldr.w	pc, [sp], #4

0000d532 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    d532:	2001      	movs	r0, #1
    d534:	f7f4 b986 	b.w	1844 <z_log_dropped>

0000d538 <z_log_get_tag>:
}
    d538:	2000      	movs	r0, #0
    d53a:	4770      	bx	lr

0000d53c <z_cbprintf_cpy>:
{
    d53c:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    d53e:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    d542:	1b9b      	subs	r3, r3, r6
    d544:	428b      	cmp	r3, r1
{
    d546:	460c      	mov	r4, r1
    d548:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    d54a:	d30a      	bcc.n	d562 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    d54c:	6813      	ldr	r3, [r2, #0]
    d54e:	460a      	mov	r2, r1
    d550:	4601      	mov	r1, r0
    d552:	1998      	adds	r0, r3, r6
    d554:	f000 f8ad 	bl	d6b2 <memcpy>
	desc->off += len;
    d558:	68ab      	ldr	r3, [r5, #8]
    d55a:	4423      	add	r3, r4
    d55c:	60ab      	str	r3, [r5, #8]
	return len;
    d55e:	4620      	mov	r0, r4
}
    d560:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    d562:	f06f 001b 	mvn.w	r0, #27
    d566:	e7fb      	b.n	d560 <z_cbprintf_cpy+0x24>

0000d568 <z_log_msg_finalize>:
{
    d568:	b570      	push	{r4, r5, r6, lr}
    d56a:	460e      	mov	r6, r1
    d56c:	4615      	mov	r5, r2
    d56e:	4619      	mov	r1, r3
	if (!msg) {
    d570:	4604      	mov	r4, r0
    d572:	b918      	cbnz	r0, d57c <z_log_msg_finalize+0x14>
}
    d574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    d578:	f7f4 b964 	b.w	1844 <z_log_dropped>
	if (data) {
    d57c:	b133      	cbz	r3, d58c <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    d57e:	f3c2 234a 	ubfx	r3, r2, #9, #11
    d582:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    d584:	0d12      	lsrs	r2, r2, #20
    d586:	4418      	add	r0, r3
    d588:	f000 f893 	bl	d6b2 <memcpy>
	msg->hdr.source = source;
    d58c:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    d590:	4620      	mov	r0, r4
}
    d592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    d596:	f7f4 bae5 	b.w	1b64 <z_log_msg_commit>

0000d59a <buffer_write>:
{
    d59a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d59c:	4606      	mov	r6, r0
    d59e:	460d      	mov	r5, r1
    d5a0:	4614      	mov	r4, r2
    d5a2:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    d5a4:	4621      	mov	r1, r4
    d5a6:	4628      	mov	r0, r5
    d5a8:	463a      	mov	r2, r7
    d5aa:	47b0      	blx	r6
	} while (len != 0);
    d5ac:	1a24      	subs	r4, r4, r0
		buf += processed;
    d5ae:	4405      	add	r5, r0
	} while (len != 0);
    d5b0:	d1f8      	bne.n	d5a4 <buffer_write+0xa>
}
    d5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d5b4 <cbvprintf>:
{
    d5b4:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    d5b6:	2400      	movs	r4, #0
    d5b8:	9400      	str	r4, [sp, #0]
    d5ba:	f7f3 fca5 	bl	f08 <z_cbvprintf_impl>
}
    d5be:	b002      	add	sp, #8
    d5c0:	bd10      	pop	{r4, pc}

0000d5c2 <log_output_flush>:
{
    d5c2:	b510      	push	{r4, lr}
		     output->control_block->offset,
    d5c4:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    d5c6:	6881      	ldr	r1, [r0, #8]
{
    d5c8:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    d5ca:	e9d2 2300 	ldrd	r2, r3, [r2]
    d5ce:	6800      	ldr	r0, [r0, #0]
    d5d0:	f7ff ffe3 	bl	d59a <buffer_write>
	output->control_block->offset = 0;
    d5d4:	6863      	ldr	r3, [r4, #4]
    d5d6:	2200      	movs	r2, #0
    d5d8:	601a      	str	r2, [r3, #0]
}
    d5da:	bd10      	pop	{r4, pc}

0000d5dc <out_func>:
{
    d5dc:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    d5de:	684b      	ldr	r3, [r1, #4]
    d5e0:	681a      	ldr	r2, [r3, #0]
    d5e2:	68cb      	ldr	r3, [r1, #12]
    d5e4:	429a      	cmp	r2, r3
{
    d5e6:	4605      	mov	r5, r0
    d5e8:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    d5ea:	d102      	bne.n	d5f2 <out_func+0x16>
		log_output_flush(out_ctx);
    d5ec:	4608      	mov	r0, r1
    d5ee:	f7ff ffe8 	bl	d5c2 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d5f2:	6863      	ldr	r3, [r4, #4]
    d5f4:	f3bf 8f5b 	dmb	ish
    d5f8:	e853 2f00 	ldrex	r2, [r3]
    d5fc:	1c51      	adds	r1, r2, #1
    d5fe:	e843 1000 	strex	r0, r1, [r3]
    d602:	2800      	cmp	r0, #0
    d604:	d1f8      	bne.n	d5f8 <out_func+0x1c>
    d606:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    d60a:	68a3      	ldr	r3, [r4, #8]
    d60c:	549d      	strb	r5, [r3, r2]
}
    d60e:	2000      	movs	r0, #0
    d610:	bd38      	pop	{r3, r4, r5, pc}

0000d612 <cr_out_func>:
	if (c == '\n') {
    d612:	280a      	cmp	r0, #10
{
    d614:	b538      	push	{r3, r4, r5, lr}
    d616:	4604      	mov	r4, r0
    d618:	460d      	mov	r5, r1
	if (c == '\n') {
    d61a:	d102      	bne.n	d622 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    d61c:	200d      	movs	r0, #13
    d61e:	f7ff ffdd 	bl	d5dc <out_func>
	out_func(c, ctx);
    d622:	4629      	mov	r1, r5
    d624:	4620      	mov	r0, r4
    d626:	f7ff ffd9 	bl	d5dc <out_func>
}
    d62a:	2000      	movs	r0, #0
    d62c:	bd38      	pop	{r3, r4, r5, pc}

0000d62e <log_backend_uart_init>:
}
    d62e:	4770      	bx	lr

0000d630 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    d630:	2300      	movs	r3, #0
    d632:	f7f4 bacb 	b.w	1bcc <z_impl_z_log_msg_static_create>

0000d636 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    d636:	f010 0f70 	tst.w	r0, #112	; 0x70
	ep_idx = ep & (~USB_EP_DIR_IN);
    d63a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
	if (ep_idx > 15) {
    d63e:	d001      	beq.n	d644 <get_ep_bm_from_addr+0xe>
    d640:	f7f5 b82a 	b.w	2698 <get_ep_bm_from_addr.part.0>
	if (ep & USB_EP_DIR_IN) {
    d644:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    d648:	bf18      	it	ne
    d64a:	3210      	addne	r2, #16
    d64c:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    d64e:	4090      	lsls	r0, r2
}
    d650:	4770      	bx	lr

0000d652 <abort_function>:
{
    d652:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    d654:	2000      	movs	r0, #0
    d656:	f7f4 f809 	bl	166c <sys_reboot>

0000d65a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    d65a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    d65c:	6800      	ldr	r0, [r0, #0]
    d65e:	f7f6 b83d 	b.w	36dc <z_arm_fatal_error>

0000d662 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    d662:	2100      	movs	r1, #0
    d664:	2001      	movs	r0, #1
    d666:	f7f6 b839 	b.w	36dc <z_arm_fatal_error>

0000d66a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    d66a:	b508      	push	{r3, lr}
	handler();
    d66c:	f7f6 f8e4 	bl	3838 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    d670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    d674:	f7f6 b9bc 	b.w	39f0 <z_arm_exc_exit>

0000d678 <z_log_msg_static_create.constprop.0>:
    d678:	2300      	movs	r3, #0
    d67a:	f7f4 baa7 	b.w	1bcc <z_impl_z_log_msg_static_create>

0000d67e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    d67e:	3901      	subs	r1, #1
    d680:	4603      	mov	r3, r0
    d682:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    d686:	b90a      	cbnz	r2, d68c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    d688:	701a      	strb	r2, [r3, #0]

	return dest;
}
    d68a:	4770      	bx	lr
		*d = *s;
    d68c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    d690:	e7f7      	b.n	d682 <strcpy+0x4>

0000d692 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    d692:	4603      	mov	r3, r0
	size_t n = 0;
    d694:	2000      	movs	r0, #0

	while (*s != '\0') {
    d696:	5c1a      	ldrb	r2, [r3, r0]
    d698:	b902      	cbnz	r2, d69c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    d69a:	4770      	bx	lr
		n++;
    d69c:	3001      	adds	r0, #1
    d69e:	e7fa      	b.n	d696 <strlen+0x4>

0000d6a0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    d6a0:	4603      	mov	r3, r0
	size_t n = 0;
    d6a2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    d6a4:	5c1a      	ldrb	r2, [r3, r0]
    d6a6:	b10a      	cbz	r2, d6ac <strnlen+0xc>
    d6a8:	4288      	cmp	r0, r1
    d6aa:	d100      	bne.n	d6ae <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    d6ac:	4770      	bx	lr
		n++;
    d6ae:	3001      	adds	r0, #1
    d6b0:	e7f8      	b.n	d6a4 <strnlen+0x4>

0000d6b2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    d6b2:	b510      	push	{r4, lr}
    d6b4:	1e43      	subs	r3, r0, #1
    d6b6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    d6b8:	4291      	cmp	r1, r2
    d6ba:	d100      	bne.n	d6be <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    d6bc:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    d6be:	f811 4b01 	ldrb.w	r4, [r1], #1
    d6c2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    d6c6:	e7f7      	b.n	d6b8 <memcpy+0x6>

0000d6c8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    d6c8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    d6ca:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    d6cc:	4603      	mov	r3, r0
	while (n > 0) {
    d6ce:	4293      	cmp	r3, r2
    d6d0:	d100      	bne.n	d6d4 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    d6d2:	4770      	bx	lr
		*(d_byte++) = c_byte;
    d6d4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    d6d8:	e7f9      	b.n	d6ce <memset+0x6>

0000d6da <_stdout_hook_default>:
}
    d6da:	f04f 30ff 	mov.w	r0, #4294967295
    d6de:	4770      	bx	lr

0000d6e0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    d6e0:	2806      	cmp	r0, #6
    d6e2:	d108      	bne.n	d6f6 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    d6e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d6e8:	2201      	movs	r2, #1
    d6ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    d6ee:	f3bf 8f4f 	dsb	sy
        __WFE();
    d6f2:	bf20      	wfe
    while (true)
    d6f4:	e7fd      	b.n	d6f2 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    d6f6:	4770      	bx	lr

0000d6f8 <pm_state_exit_post_ops>:
    d6f8:	2300      	movs	r3, #0
    d6fa:	f383 8811 	msr	BASEPRI, r3
    d6fe:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    d702:	4770      	bx	lr

0000d704 <ep_ctx_reset>:
{
    d704:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    d706:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    d708:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    d70c:	2300      	movs	r3, #0
    d70e:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    d710:	7f83      	ldrb	r3, [r0, #30]
{
    d712:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    d714:	b113      	cbz	r3, d71c <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d716:	7a40      	ldrb	r0, [r0, #9]
    d718:	f000 fe0b 	bl	e332 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    d71c:	2301      	movs	r3, #1
    d71e:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    d720:	2300      	movs	r3, #0
    d722:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    d724:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    d726:	77a3      	strb	r3, [r4, #30]
}
    d728:	bd10      	pop	{r4, pc}

0000d72a <z_log_msg_static_create.constprop.0>:
    d72a:	2300      	movs	r3, #0
    d72c:	f7f4 ba4e 	b.w	1bcc <z_impl_z_log_msg_static_create>

0000d730 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    d730:	f7fd bdc8 	b.w	b2c4 <z_impl_k_mutex_lock>

0000d734 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    d734:	f7fd be40 	b.w	b3b8 <z_impl_k_mutex_unlock>

0000d738 <usb_dc_ep_disable>:
{
    d738:	b538      	push	{r3, r4, r5, lr}
    d73a:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    d73c:	f7f6 fe3c 	bl	43b8 <endpoint_ctx>
	if (!ep_ctx) {
    d740:	4605      	mov	r5, r0
    d742:	b160      	cbz	r0, d75e <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    d744:	7a03      	ldrb	r3, [r0, #8]
    d746:	b16b      	cbz	r3, d764 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    d748:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    d74a:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    d74c:	f7fd fa12 	bl	ab74 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    d750:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    d752:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    d754:	f7ff ffd6 	bl	d704 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    d758:	722c      	strb	r4, [r5, #8]
	return 0;
    d75a:	4620      	mov	r0, r4
}
    d75c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    d75e:	f06f 0015 	mvn.w	r0, #21
    d762:	e7fb      	b.n	d75c <usb_dc_ep_disable+0x24>
		return -EALREADY;
    d764:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d768:	e7f8      	b.n	d75c <usb_dc_ep_disable+0x24>

0000d76a <usb_dc_ep_read>:
{
    d76a:	b570      	push	{r4, r5, r6, lr}
    d76c:	4604      	mov	r4, r0
    d76e:	460e      	mov	r6, r1
    d770:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    d772:	f7f7 fc51 	bl	5018 <usb_dc_ep_read_wait>
	if (ret) {
    d776:	b930      	cbnz	r0, d786 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    d778:	b906      	cbnz	r6, d77c <usb_dc_ep_read+0x12>
    d77a:	b125      	cbz	r5, d786 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    d77c:	4620      	mov	r0, r4
}
    d77e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    d782:	f7f7 bcaf 	b.w	50e4 <usb_dc_ep_read_continue>
}
    d786:	bd70      	pop	{r4, r5, r6, pc}

0000d788 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    d788:	6903      	ldr	r3, [r0, #16]
    d78a:	b2c9      	uxtb	r1, r1
    d78c:	220c      	movs	r2, #12
    d78e:	fb01 3302 	mla	r3, r1, r2, r3
    d792:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    d794:	f000 0007 	and.w	r0, r0, #7
    d798:	4770      	bx	lr

0000d79a <set_on_state>:
	__asm__ volatile(
    d79a:	f04f 0320 	mov.w	r3, #32
    d79e:	f3ef 8211 	mrs	r2, BASEPRI
    d7a2:	f383 8812 	msr	BASEPRI_MAX, r3
    d7a6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    d7aa:	6803      	ldr	r3, [r0, #0]
    d7ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d7b0:	f043 0302 	orr.w	r3, r3, #2
    d7b4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    d7b6:	f382 8811 	msr	BASEPRI, r2
    d7ba:	f3bf 8f6f 	isb	sy
}
    d7be:	4770      	bx	lr

0000d7c0 <stop>:
{
    d7c0:	b570      	push	{r4, r5, r6, lr}
    d7c2:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    d7c4:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    d7c6:	f04f 0420 	mov.w	r4, #32
    d7ca:	f3ef 8511 	mrs	r5, BASEPRI
    d7ce:	f384 8812 	msr	BASEPRI_MAX, r4
    d7d2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d7d6:	260c      	movs	r6, #12
    d7d8:	fb06 3401 	mla	r4, r6, r1, r3
    d7dc:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    d7de:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    d7e2:	d008      	beq.n	d7f6 <stop+0x36>
    d7e4:	42a2      	cmp	r2, r4
    d7e6:	d006      	beq.n	d7f6 <stop+0x36>
	__asm__ volatile(
    d7e8:	f385 8811 	msr	BASEPRI, r5
    d7ec:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    d7f0:	f04f 30ff 	mov.w	r0, #4294967295
}
    d7f4:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    d7f6:	4371      	muls	r1, r6
    d7f8:	440b      	add	r3, r1
    d7fa:	2201      	movs	r2, #1
    d7fc:	641a      	str	r2, [r3, #64]	; 0x40
    d7fe:	f385 8811 	msr	BASEPRI, r5
    d802:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    d806:	6843      	ldr	r3, [r0, #4]
    d808:	440b      	add	r3, r1
    d80a:	685b      	ldr	r3, [r3, #4]
    d80c:	4798      	blx	r3
	return 0;
    d80e:	2000      	movs	r0, #0
    d810:	e7f0      	b.n	d7f4 <stop+0x34>

0000d812 <api_stop>:
	return stop(dev, subsys, CTX_API);
    d812:	2280      	movs	r2, #128	; 0x80
    d814:	f7ff bfd4 	b.w	d7c0 <stop>

0000d818 <async_start>:
{
    d818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d81a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    d81c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    d81e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    d820:	f04f 0520 	mov.w	r5, #32
    d824:	f3ef 8611 	mrs	r6, BASEPRI
    d828:	f385 8812 	msr	BASEPRI_MAX, r5
    d82c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d830:	250c      	movs	r5, #12
    d832:	4369      	muls	r1, r5
    d834:	440c      	add	r4, r1
    d836:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    d838:	f005 0c07 	and.w	ip, r5, #7
    d83c:	f1bc 0f01 	cmp.w	ip, #1
    d840:	d10b      	bne.n	d85a <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    d842:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    d844:	f386 8811 	msr	BASEPRI, r6
    d848:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    d84c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    d850:	6843      	ldr	r3, [r0, #4]
    d852:	585b      	ldr	r3, [r3, r1]
    d854:	4798      	blx	r3
	return 0;
    d856:	2000      	movs	r0, #0
}
    d858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    d85a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    d85e:	42af      	cmp	r7, r5
    d860:	f386 8811 	msr	BASEPRI, r6
    d864:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    d868:	bf0c      	ite	eq
    d86a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    d86e:	f04f 30ff 	movne.w	r0, #4294967295
    d872:	e7f1      	b.n	d858 <async_start+0x40>

0000d874 <api_start>:
{
    d874:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    d876:	2480      	movs	r4, #128	; 0x80
    d878:	9400      	str	r4, [sp, #0]
    d87a:	f7ff ffcd 	bl	d818 <async_start>
}
    d87e:	b002      	add	sp, #8
    d880:	bd10      	pop	{r4, pc}

0000d882 <onoff_started_callback>:
{
    d882:	b410      	push	{r4}
	return &data->mgr[type];
    d884:	6900      	ldr	r0, [r0, #16]
    d886:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    d888:	241c      	movs	r4, #28
    d88a:	fb03 0004 	mla	r0, r3, r4, r0
    d88e:	2100      	movs	r1, #0
}
    d890:	bc10      	pop	{r4}
	notify(mgr, 0);
    d892:	4710      	bx	r2

0000d894 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    d894:	2000      	movs	r0, #0
    d896:	f000 bb59 	b.w	df4c <nrfx_clock_start>

0000d89a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d89a:	2000      	movs	r0, #0
    d89c:	f000 bb92 	b.w	dfc4 <nrfx_clock_stop>

0000d8a0 <blocking_start_callback>:
{
    d8a0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    d8a2:	f7fd bdf9 	b.w	b498 <z_impl_k_sem_give>

0000d8a6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d8a6:	6843      	ldr	r3, [r0, #4]
    d8a8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    d8aa:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    d8ae:	600b      	str	r3, [r1, #0]
}
    d8b0:	2000      	movs	r0, #0
    d8b2:	4770      	bx	lr

0000d8b4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d8b4:	6843      	ldr	r3, [r0, #4]
    d8b6:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    d8b8:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    d8bc:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    d8c0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    d8c4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    d8c8:	2000      	movs	r0, #0
    d8ca:	4770      	bx	lr

0000d8cc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d8cc:	6843      	ldr	r3, [r0, #4]
    d8ce:	685b      	ldr	r3, [r3, #4]
}
    d8d0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    d8d2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    d8d6:	4770      	bx	lr

0000d8d8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d8d8:	6843      	ldr	r3, [r0, #4]
    d8da:	685b      	ldr	r3, [r3, #4]
}
    d8dc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    d8de:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    d8e2:	4770      	bx	lr

0000d8e4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d8e4:	6843      	ldr	r3, [r0, #4]
    d8e6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    d8e8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    d8ec:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    d8f0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    d8f2:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    d8f6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    d8fa:	2000      	movs	r0, #0
    d8fc:	4770      	bx	lr

0000d8fe <gpio_nrfx_manage_callback>:
{
    d8fe:	b510      	push	{r4, lr}
	return port->data;
    d900:	6903      	ldr	r3, [r0, #16]
	return list->head;
    d902:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    d904:	b1f8      	cbz	r0, d946 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d906:	4288      	cmp	r0, r1
    d908:	d119      	bne.n	d93e <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    d90a:	689c      	ldr	r4, [r3, #8]
	return node->next;
    d90c:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    d90e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    d910:	42a1      	cmp	r1, r4
    d912:	d100      	bne.n	d916 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    d914:	6098      	str	r0, [r3, #8]
	parent->next = child;
    d916:	2000      	movs	r0, #0
    d918:	6008      	str	r0, [r1, #0]
	if (set) {
    d91a:	b12a      	cbz	r2, d928 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    d91c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    d91e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    d920:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    d922:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    d924:	b902      	cbnz	r2, d928 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    d926:	6099      	str	r1, [r3, #8]
	return 0;
    d928:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d92a:	e010      	b.n	d94e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d92c:	4281      	cmp	r1, r0
    d92e:	d106      	bne.n	d93e <gpio_nrfx_manage_callback+0x40>
	return node->next;
    d930:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    d932:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    d934:	6898      	ldr	r0, [r3, #8]
    d936:	4281      	cmp	r1, r0
    d938:	d1ed      	bne.n	d916 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    d93a:	609c      	str	r4, [r3, #8]
}
    d93c:	e7eb      	b.n	d916 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    d93e:	4604      	mov	r4, r0
    d940:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d942:	2800      	cmp	r0, #0
    d944:	d1f2      	bne.n	d92c <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    d946:	2a00      	cmp	r2, #0
    d948:	d1e8      	bne.n	d91c <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    d94a:	f06f 0015 	mvn.w	r0, #21
}
    d94e:	bd10      	pop	{r4, pc}

0000d950 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    d950:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    d952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    d956:	2908      	cmp	r1, #8
    d958:	6e13      	ldr	r3, [r2, #96]	; 0x60
    d95a:	6e52      	ldr	r2, [r2, #100]	; 0x64
    d95c:	bf28      	it	cs
    d95e:	2108      	movcs	r1, #8
    d960:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    d962:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    d964:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    d966:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    d968:	460a      	mov	r2, r1
    d96a:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    d96c:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    d96e:	f7ff fea0 	bl	d6b2 <memcpy>

	return length;
}
    d972:	4620      	mov	r0, r4
    d974:	b002      	add	sp, #8
    d976:	bd10      	pop	{r4, pc}

0000d978 <timer_work_handler>:
	TimerIrqHandler();
    d978:	f7f8 bc4e 	b.w	6218 <TimerIrqHandler>

0000d97c <k_uptime_get_32>:
{
    d97c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    d97e:	f000 ff77 	bl	e870 <z_impl_k_uptime_ticks>
    d982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d986:	fba0 0302 	umull	r0, r3, r0, r2
    d98a:	fb02 3301 	mla	r3, r2, r1, r3
    d98e:	0bc0      	lsrs	r0, r0, #15
}
    d990:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    d994:	bd08      	pop	{r3, pc}

0000d996 <RtcGetTimerValue>:
	return k_uptime_get_32();
    d996:	f7ff bff1 	b.w	d97c <k_uptime_get_32>

0000d99a <RtcGetMinimumTimeout>:
}
    d99a:	2001      	movs	r0, #1
    d99c:	4770      	bx	lr

0000d99e <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
    d99e:	4601      	mov	r1, r0
    d9a0:	f240 30e7 	movw	r0, #999	; 0x3e7
    d9a4:	b508      	push	{r3, lr}
    d9a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d9aa:	2300      	movs	r3, #0
    d9ac:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    d9b0:	0c49      	lsrs	r1, r1, #17
    d9b2:	f7f2 fba5 	bl	100 <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
    d9b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    d9ba:	f7fe b9ed 	b.w	bd98 <z_impl_k_sleep>

0000d9be <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
    d9be:	4770      	bx	lr

0000d9c0 <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
    d9c0:	4770      	bx	lr

0000d9c2 <BoardCriticalSectionBegin>:
	__asm__ volatile(
    d9c2:	f04f 0220 	mov.w	r2, #32
    d9c6:	f3ef 8311 	mrs	r3, BASEPRI
    d9ca:	f382 8812 	msr	BASEPRI_MAX, r2
    d9ce:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
    d9d2:	6003      	str	r3, [r0, #0]
}
    d9d4:	4770      	bx	lr

0000d9d6 <BoardCriticalSectionEnd>:
	__asm__ volatile(
    d9d6:	6803      	ldr	r3, [r0, #0]
    d9d8:	f383 8811 	msr	BASEPRI, r3
    d9dc:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
    d9e0:	4770      	bx	lr

0000d9e2 <sx12xx_ev_tx_timed_out>:
	modem_release(&dev_data);
    d9e2:	f7f7 bf7d 	b.w	58e0 <modem_release.constprop.0>

0000d9e6 <SX1276CheckRfFrequency>:
}
    d9e6:	2001      	movs	r0, #1
    d9e8:	4770      	bx	lr

0000d9ea <z_log_msg_static_create.constprop.0>:
    d9ea:	2300      	movs	r3, #0
    d9ec:	f7f4 b8ee 	b.w	1bcc <z_impl_z_log_msg_static_create>

0000d9f0 <SX1276GetBoardTcxoWakeupTime>:
}
    d9f0:	2000      	movs	r0, #0
    d9f2:	4770      	bx	lr

0000d9f4 <SX1276SetAntSwLowPower>:
}
    d9f4:	4770      	bx	lr

0000d9f6 <SX1276SetBoardTcxo>:
}
    d9f6:	4770      	bx	lr

0000d9f8 <SX1276SetAntSw>:
void SX127xSetAntSw(uint8_t opMode)
    d9f8:	4770      	bx	lr

0000d9fa <SX1276Reset>:
{
    d9fa:	b508      	push	{r3, lr}
	gpio_pin_set_dt(&dev_config.reset, 1);
    d9fc:	2001      	movs	r0, #1
    d9fe:	f7f8 fa3d 	bl	5e7c <gpio_pin_set_dt.constprop.0.isra.0>
    da02:	2100      	movs	r1, #0
    da04:	2021      	movs	r0, #33	; 0x21
    da06:	f7fe f9c7 	bl	bd98 <z_impl_k_sleep>
	gpio_pin_set_dt(&dev_config.reset, 0);
    da0a:	2000      	movs	r0, #0
    da0c:	f7f8 fa36 	bl	5e7c <gpio_pin_set_dt.constprop.0.isra.0>
    da10:	20c5      	movs	r0, #197	; 0xc5
}
    da12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    da16:	2100      	movs	r1, #0
    da18:	f7fe b9be 	b.w	bd98 <z_impl_k_sleep>

0000da1c <SX1276ReadBuffer>:
{
    da1c:	b510      	push	{r4, lr}
    da1e:	4604      	mov	r4, r0
	ret = sx127x_read(addr, buffer, size);
    da20:	b2c0      	uxtb	r0, r0
    da22:	f7f8 faa7 	bl	5f74 <sx127x_read>
	if (ret < 0) {
    da26:	2800      	cmp	r0, #0
    da28:	da04      	bge.n	da34 <SX1276ReadBuffer+0x18>
    da2a:	4620      	mov	r0, r4
}
    da2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da30:	f7f8 ba0e 	b.w	5e50 <SX1276ReadBuffer.part.0>
    da34:	bd10      	pop	{r4, pc}

0000da36 <SX1276WriteBuffer>:
{
    da36:	b510      	push	{r4, lr}
    da38:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
    da3a:	b2c0      	uxtb	r0, r0
    da3c:	f7f8 fb32 	bl	60a4 <sx127x_write>
	if (ret < 0) {
    da40:	2800      	cmp	r0, #0
    da42:	da04      	bge.n	da4e <SX1276WriteBuffer+0x18>
    da44:	4620      	mov	r0, r4
}
    da46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da4a:	f7f8 b9eb 	b.w	5e24 <SX1276WriteBuffer.part.0>
    da4e:	bd10      	pop	{r4, pc}

0000da50 <SX1276GetDio1PinState>:
uint32_t SX127xGetDio1PinState(void)
    da50:	2000      	movs	r0, #0
    da52:	4770      	bx	lr

0000da54 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
    da54:	3801      	subs	r0, #1
    da56:	440a      	add	r2, r1
    da58:	4291      	cmp	r1, r2
    da5a:	d100      	bne.n	da5e <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
    da5c:	4770      	bx	lr
        *dst++ = *src++;
    da5e:	f811 3b01 	ldrb.w	r3, [r1], #1
    da62:	f800 3f01 	strb.w	r3, [r0, #1]!
    da66:	e7f7      	b.n	da58 <memcpy1+0x4>

0000da68 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
    da68:	b570      	push	{r4, r5, r6, lr}
    da6a:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
    da6c:	f7ff ff95 	bl	d99a <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
    da70:	2301      	movs	r3, #1
    da72:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
    da74:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
    da76:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
    da78:	f7f7 fea4 	bl	57c4 <RtcGetTimerElapsedTime>
    da7c:	4428      	add	r0, r5
    da7e:	4286      	cmp	r6, r0
    da80:	d203      	bcs.n	da8a <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    da82:	f7f7 fe9f 	bl	57c4 <RtcGetTimerElapsedTime>
    da86:	4405      	add	r5, r0
    da88:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
    da8a:	6820      	ldr	r0, [r4, #0]
}
    da8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
    da90:	f7f7 bea8 	b.w	57e4 <RtcSetAlarm>

0000da94 <TimerInit>:
    obj->Timestamp = 0;
    da94:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
    da96:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
    da9a:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
    da9e:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
    daa0:	6143      	str	r3, [r0, #20]
}
    daa2:	4770      	bx	lr

0000daa4 <TimerSetValue>:
{
    daa4:	b538      	push	{r3, r4, r5, lr}
    daa6:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
    daa8:	4608      	mov	r0, r1
    daaa:	f7ff ff88 	bl	d9be <RtcMs2Tick>
    daae:	4604      	mov	r4, r0
    TimerStop( obj );
    dab0:	4628      	mov	r0, r5
    dab2:	f7f8 fbef 	bl	6294 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
    dab6:	f7ff ff70 	bl	d99a <RtcGetMinimumTimeout>
    if( ticks < minValue )
    daba:	42a0      	cmp	r0, r4
    dabc:	bf38      	it	cc
    dabe:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
    dac0:	e9c5 0000 	strd	r0, r0, [r5]
}
    dac4:	bd38      	pop	{r3, r4, r5, pc}

0000dac6 <TimerGetCurrentTime>:
{
    dac6:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
    dac8:	f7ff ff65 	bl	d996 <RtcGetTimerValue>
}
    dacc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
    dad0:	f7ff bf76 	b.w	d9c0 <RtcTick2Ms>

0000dad4 <TimerGetElapsedTime>:
{
    dad4:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
    dad6:	4604      	mov	r4, r0
    dad8:	b150      	cbz	r0, daf0 <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
    dada:	f7ff ff5c 	bl	d996 <RtcGetTimerValue>
    dade:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
    dae0:	4620      	mov	r0, r4
    dae2:	f7ff ff6c 	bl	d9be <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
    dae6:	1a28      	subs	r0, r5, r0
}
    dae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
    daec:	f7ff bf68 	b.w	d9c0 <RtcTick2Ms>
}
    daf0:	bd38      	pop	{r3, r4, r5, pc}

0000daf2 <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
    daf2:	f7ff bf54 	b.w	d99e <DelayMsMcu>

0000daf6 <SX1276Write>:
{
    daf6:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
    daf8:	2201      	movs	r2, #1
{
    dafa:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
    dafe:	f10d 0107 	add.w	r1, sp, #7
    db02:	f7ff ff98 	bl	da36 <SX1276WriteBuffer>
}
    db06:	b003      	add	sp, #12
    db08:	f85d fb04 	ldr.w	pc, [sp], #4

0000db0c <SX1276Read>:
{
    db0c:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
    db0e:	2201      	movs	r2, #1
    db10:	f10d 0107 	add.w	r1, sp, #7
    db14:	f7ff ff82 	bl	da1c <SX1276ReadBuffer>
}
    db18:	f89d 0007 	ldrb.w	r0, [sp, #7]
    db1c:	b003      	add	sp, #12
    db1e:	f85d fb04 	ldr.w	pc, [sp], #4

0000db22 <SX1276SetOpMode>:
{
    db22:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
    db24:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
    db26:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
    db28:	b964      	cbnz	r4, db44 <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
    db2a:	f7ff ff63 	bl	d9f4 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    db2e:	2001      	movs	r0, #1
    db30:	f7ff ffec 	bl	db0c <SX1276Read>
    db34:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    db38:	4321      	orrs	r1, r4
    db3a:	2001      	movs	r0, #1
}
    db3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    db40:	f7ff bfd9 	b.w	daf6 <SX1276Write>
        SX1276SetBoardTcxo( true );
    db44:	f7ff ff57 	bl	d9f6 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
    db48:	2000      	movs	r0, #0
    db4a:	f7ff ff53 	bl	d9f4 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
    db4e:	4620      	mov	r0, r4
    db50:	f7ff ff52 	bl	d9f8 <SX1276SetAntSw>
    db54:	e7eb      	b.n	db2e <SX1276SetOpMode+0xc>

0000db56 <SX1276IsChannelFree>:
{
    db56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db58:	4616      	mov	r6, r2
    db5a:	461d      	mov	r5, r3
    db5c:	460c      	mov	r4, r1
    db5e:	4607      	mov	r7, r0
    SX1276SetSleep( );
    db60:	f7f8 ff16 	bl	6990 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
    db64:	2000      	movs	r0, #0
    db66:	f7f9 f949 	bl	6dfc <SX1276SetModem>
    SX1276SetChannel( freq );
    db6a:	4638      	mov	r0, r7
    db6c:	f7f8 fc54 	bl	6418 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
    db70:	4620      	mov	r0, r4
    db72:	f7f8 fbb9 	bl	62e8 <GetFskBandwidthRegValue>
    db76:	4604      	mov	r4, r0
    db78:	4601      	mov	r1, r0
    db7a:	2012      	movs	r0, #18
    db7c:	f7ff ffbb 	bl	daf6 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
    db80:	4621      	mov	r1, r4
    db82:	2013      	movs	r0, #19
    db84:	f7ff ffb7 	bl	daf6 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
    db88:	2005      	movs	r0, #5
    db8a:	f7ff ffca 	bl	db22 <SX1276SetOpMode>
    DelayMs( 1 );
    db8e:	2001      	movs	r0, #1
    db90:	f7ff ffaf 	bl	daf2 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
    db94:	f7ff ff97 	bl	dac6 <TimerGetCurrentTime>
    db98:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
    db9a:	4620      	mov	r0, r4
    db9c:	f7ff ff9a 	bl	dad4 <TimerGetElapsedTime>
    dba0:	42a8      	cmp	r0, r5
    dba2:	d304      	bcc.n	dbae <SX1276IsChannelFree+0x58>
    bool status = true;
    dba4:	2401      	movs	r4, #1
    SX1276SetSleep( );
    dba6:	f7f8 fef3 	bl	6990 <SX1276SetSleep>
}
    dbaa:	4620      	mov	r0, r4
    dbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
    dbae:	2000      	movs	r0, #0
    dbb0:	f7f9 f900 	bl	6db4 <SX1276ReadRssi>
        if( rssi > rssiThresh )
    dbb4:	42b0      	cmp	r0, r6
    dbb6:	ddf0      	ble.n	db9a <SX1276IsChannelFree+0x44>
            status = false;
    dbb8:	2400      	movs	r4, #0
    dbba:	e7f4      	b.n	dba6 <SX1276IsChannelFree+0x50>

0000dbbc <SX1276Random>:
{
    dbbc:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
    dbbe:	2001      	movs	r0, #1
    dbc0:	f7f9 f91c 	bl	6dfc <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    dbc4:	21ff      	movs	r1, #255	; 0xff
    dbc6:	2011      	movs	r0, #17
    dbc8:	f7ff ff95 	bl	daf6 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
    dbcc:	2005      	movs	r0, #5
    dbce:	f7ff ffa8 	bl	db22 <SX1276SetOpMode>
    dbd2:	2400      	movs	r4, #0
    uint32_t rnd = 0;
    dbd4:	4625      	mov	r5, r4
        DelayMs( 1 );
    dbd6:	2001      	movs	r0, #1
    dbd8:	f7ff ff8b 	bl	daf2 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
    dbdc:	202c      	movs	r0, #44	; 0x2c
    dbde:	f7ff ff95 	bl	db0c <SX1276Read>
    dbe2:	f000 0001 	and.w	r0, r0, #1
    dbe6:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
    dbe8:	3401      	adds	r4, #1
    dbea:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
    dbec:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
    dbf0:	d1f1      	bne.n	dbd6 <SX1276Random+0x1a>
    SX1276SetSleep( );
    dbf2:	f7f8 fecd 	bl	6990 <SX1276SetSleep>
}
    dbf6:	4628      	mov	r0, r5
    dbf8:	bd38      	pop	{r3, r4, r5, pc}

0000dbfa <SX1276GetWakeupTime>:
{
    dbfa:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
    dbfc:	f7ff fef8 	bl	d9f0 <SX1276GetBoardTcxoWakeupTime>
}
    dc00:	3001      	adds	r0, #1
    dc02:	bd08      	pop	{r3, pc}

0000dc04 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    dc04:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    dc06:	6843      	ldr	r3, [r0, #4]
    dc08:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    dc0a:	7a05      	ldrb	r5, [r0, #8]
    dc0c:	6844      	ldr	r4, [r0, #4]
    dc0e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    dc12:	42a3      	cmp	r3, r4
    dc14:	d302      	bcc.n	dc1c <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    dc16:	f06f 0001 	mvn.w	r0, #1
}
    dc1a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    dc1c:	795c      	ldrb	r4, [r3, #5]
    dc1e:	428c      	cmp	r4, r1
    dc20:	d001      	beq.n	dc26 <pinctrl_lookup_state+0x22>
		(*state)++;
    dc22:	3308      	adds	r3, #8
    dc24:	e7f0      	b.n	dc08 <pinctrl_lookup_state+0x4>
			return 0;
    dc26:	2000      	movs	r0, #0
    dc28:	e7f7      	b.n	dc1a <pinctrl_lookup_state+0x16>

0000dc2a <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    dc2a:	6902      	ldr	r2, [r0, #16]
{
    dc2c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    dc2e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    dc32:	e883 0003 	stmia.w	r3, {r0, r1}
}
    dc36:	2000      	movs	r0, #0
    dc38:	4770      	bx	lr

0000dc3a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    dc3a:	6843      	ldr	r3, [r0, #4]
    dc3c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    dc3e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    dc42:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    dc46:	4770      	bx	lr

0000dc48 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    dc48:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    dc4a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    dc4c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dc4e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    dc52:	b150      	cbz	r0, dc6a <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    dc54:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc56:	2000      	movs	r0, #0
    dc58:	7812      	ldrb	r2, [r2, #0]
    dc5a:	700a      	strb	r2, [r1, #0]
    dc5c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    dc60:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc64:	2201      	movs	r2, #1
    dc66:	601a      	str	r2, [r3, #0]
	return 0;
    dc68:	4770      	bx	lr
		return -1;
    dc6a:	f04f 30ff 	mov.w	r0, #4294967295
}
    dc6e:	4770      	bx	lr

0000dc70 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    dc70:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    dc72:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dc74:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    dc78:	b940      	cbnz	r0, dc8c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    dc7a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    dc7c:	079b      	lsls	r3, r3, #30
    dc7e:	d406      	bmi.n	dc8e <is_tx_ready.isra.0+0x1e>
    dc80:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    dc84:	3800      	subs	r0, #0
    dc86:	bf18      	it	ne
    dc88:	2001      	movne	r0, #1
    dc8a:	4770      	bx	lr
    dc8c:	2001      	movs	r0, #1
}
    dc8e:	4770      	bx	lr

0000dc90 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    dc90:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    dc92:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    dc94:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    dc98:	05c9      	lsls	r1, r1, #23
    dc9a:	d518      	bpl.n	dcce <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dc9c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    dca0:	b1a9      	cbz	r1, dcce <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    dca2:	f04f 0020 	mov.w	r0, #32
    dca6:	f3ef 8111 	mrs	r1, BASEPRI
    dcaa:	f380 8812 	msr	BASEPRI_MAX, r0
    dcae:	f3bf 8f6f 	isb	sy
    dcb2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    dcb6:	b130      	cbz	r0, dcc6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dcb8:	2000      	movs	r0, #0
    dcba:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    dcbe:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dcc2:	2001      	movs	r0, #1
    dcc4:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    dcc6:	f381 8811 	msr	BASEPRI, r1
    dcca:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    dcce:	6852      	ldr	r2, [r2, #4]
    dcd0:	06d2      	lsls	r2, r2, #27
    dcd2:	d515      	bpl.n	dd00 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    dcd4:	f04f 0120 	mov.w	r1, #32
    dcd8:	f3ef 8211 	mrs	r2, BASEPRI
    dcdc:	f381 8812 	msr	BASEPRI_MAX, r1
    dce0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dce4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    dce8:	b111      	cbz	r1, dcf0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    dcea:	2100      	movs	r1, #0
    dcec:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    dcf0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    dcf4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    dcf8:	f382 8811 	msr	BASEPRI, r2
    dcfc:	f3bf 8f6f 	isb	sy
}
    dd00:	4770      	bx	lr

0000dd02 <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
    dd02:	2200      	movs	r2, #0
    dd04:	2101      	movs	r1, #1
    dd06:	2004      	movs	r0, #4
    dd08:	f7f5 bd7e 	b.w	3808 <z_arm_irq_priority_set>

0000dd0c <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    dd0c:	b510      	push	{r4, lr}
	while (*count) {
    dd0e:	680b      	ldr	r3, [r1, #0]
    dd10:	b913      	cbnz	r3, dd18 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    dd12:	6013      	str	r3, [r2, #0]
	return NULL;
    dd14:	4618      	mov	r0, r3
    dd16:	e005      	b.n	dd24 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    dd18:	6803      	ldr	r3, [r0, #0]
    dd1a:	685c      	ldr	r4, [r3, #4]
    dd1c:	b11c      	cbz	r4, dd26 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    dd1e:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    dd20:	6803      	ldr	r3, [r0, #0]
    dd22:	6818      	ldr	r0, [r3, #0]
}
    dd24:	bd10      	pop	{r4, pc}
		++(*current);
    dd26:	3308      	adds	r3, #8
    dd28:	6003      	str	r3, [r0, #0]
		--(*count);
    dd2a:	680b      	ldr	r3, [r1, #0]
    dd2c:	3b01      	subs	r3, #1
    dd2e:	600b      	str	r3, [r1, #0]
    dd30:	e7ed      	b.n	dd0e <spi_context_get_next_buf.constprop.0+0x2>

0000dd32 <z_log_msg_static_create.constprop.0>:
    dd32:	2300      	movs	r3, #0
    dd34:	f7f3 bf4a 	b.w	1bcc <z_impl_z_log_msg_static_create>

0000dd38 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    dd38:	4603      	mov	r3, r0
    dd3a:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    dd3c:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    dd3e:	7919      	ldrb	r1, [r3, #4]
    dd40:	2301      	movs	r3, #1
    dd42:	fa03 f101 	lsl.w	r1, r3, r1
    dd46:	6903      	ldr	r3, [r0, #16]
    dd48:	681b      	ldr	r3, [r3, #0]
    dd4a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    dd4c:	bf18      	it	ne
    dd4e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    dd52:	b112      	cbz	r2, dd5a <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    dd54:	6883      	ldr	r3, [r0, #8]
    dd56:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    dd58:	4718      	bx	r3
    dd5a:	6883      	ldr	r3, [r0, #8]
    dd5c:	691b      	ldr	r3, [r3, #16]
    dd5e:	e7fb      	b.n	dd58 <gpio_pin_set_dt.isra.0+0x20>

0000dd60 <_spi_context_cs_control>:
{
    dd60:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    dd62:	6803      	ldr	r3, [r0, #0]
{
    dd64:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    dd66:	b1e3      	cbz	r3, dda2 <_spi_context_cs_control+0x42>
    dd68:	6898      	ldr	r0, [r3, #8]
    dd6a:	b1d0      	cbz	r0, dda2 <_spi_context_cs_control+0x42>
    dd6c:	6805      	ldr	r5, [r0, #0]
    dd6e:	b1c5      	cbz	r5, dda2 <_spi_context_cs_control+0x42>
		if (on) {
    dd70:	b149      	cbz	r1, dd86 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    dd72:	2101      	movs	r1, #1
    dd74:	f7ff ffe0 	bl	dd38 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    dd78:	6823      	ldr	r3, [r4, #0]
    dd7a:	689b      	ldr	r3, [r3, #8]
    dd7c:	6898      	ldr	r0, [r3, #8]
}
    dd7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    dd82:	f000 bd77 	b.w	e874 <z_impl_k_busy_wait>
			if (!force_off &&
    dd86:	b912      	cbnz	r2, dd8e <_spi_context_cs_control+0x2e>
    dd88:	889b      	ldrh	r3, [r3, #4]
    dd8a:	04db      	lsls	r3, r3, #19
    dd8c:	d409      	bmi.n	dda2 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    dd8e:	6880      	ldr	r0, [r0, #8]
    dd90:	f000 fd70 	bl	e874 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    dd94:	6823      	ldr	r3, [r4, #0]
    dd96:	2100      	movs	r1, #0
    dd98:	6898      	ldr	r0, [r3, #8]
}
    dd9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    dd9e:	f7ff bfcb 	b.w	dd38 <gpio_pin_set_dt.isra.0>
}
    dda2:	bd38      	pop	{r3, r4, r5, pc}

0000dda4 <spi_context_unlock_unconditionally>:
{
    dda4:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    dda6:	2201      	movs	r2, #1
    dda8:	2100      	movs	r1, #0
{
    ddaa:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    ddac:	f7ff ffd8 	bl	dd60 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    ddb0:	69a3      	ldr	r3, [r4, #24]
    ddb2:	b933      	cbnz	r3, ddc2 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    ddb4:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    ddb6:	f104 0010 	add.w	r0, r4, #16
}
    ddba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ddbe:	f7fd bb6b 	b.w	b498 <z_impl_k_sem_give>
    ddc2:	bd10      	pop	{r4, pc}

0000ddc4 <spi_nrfx_release>:
{
    ddc4:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    ddc6:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    ddc8:	6803      	ldr	r3, [r0, #0]
    ddca:	428b      	cmp	r3, r1
    ddcc:	d106      	bne.n	dddc <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    ddce:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
    ddd2:	b934      	cbnz	r4, dde2 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    ddd4:	f7ff ffe6 	bl	dda4 <spi_context_unlock_unconditionally>
	return 0;
    ddd8:	4620      	mov	r0, r4
}
    ddda:	bd10      	pop	{r4, pc}
		return -EINVAL;
    dddc:	f06f 0015 	mvn.w	r0, #21
    dde0:	e7fb      	b.n	ddda <spi_nrfx_release+0x16>
		return -EBUSY;
    dde2:	f06f 000f 	mvn.w	r0, #15
    dde6:	e7f8      	b.n	ddda <spi_nrfx_release+0x16>

0000dde8 <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
    dde8:	b538      	push	{r3, r4, r5, lr}
	_spi_context_cs_control(ctx, on, false);
    ddea:	2200      	movs	r2, #0
    ddec:	4604      	mov	r4, r0
    ddee:	460d      	mov	r5, r1
    ddf0:	4611      	mov	r1, r2
    ddf2:	f7ff ffb5 	bl	dd60 <_spi_context_cs_control>
	ctx->sync_status = status;
    ddf6:	6425      	str	r5, [r4, #64]	; 0x40
    ddf8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ddfc:	f7fd fb4c 	bl	b498 <z_impl_k_sem_give>
	dev_data->busy = false;
    de00:	2300      	movs	r3, #0
    de02:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
    de06:	bd38      	pop	{r3, r4, r5, pc}

0000de08 <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
    de08:	2200      	movs	r2, #0
    de0a:	2101      	movs	r1, #1
    de0c:	202f      	movs	r0, #47	; 0x2f
    de0e:	f7f5 bcfb 	b.w	3808 <z_arm_irq_priority_set>

0000de12 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    de12:	b510      	push	{r4, lr}
	while (*count) {
    de14:	680b      	ldr	r3, [r1, #0]
    de16:	b913      	cbnz	r3, de1e <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    de18:	6013      	str	r3, [r2, #0]
	return NULL;
    de1a:	4618      	mov	r0, r3
    de1c:	e005      	b.n	de2a <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    de1e:	6803      	ldr	r3, [r0, #0]
    de20:	685c      	ldr	r4, [r3, #4]
    de22:	b11c      	cbz	r4, de2c <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    de24:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    de26:	6803      	ldr	r3, [r0, #0]
    de28:	6818      	ldr	r0, [r3, #0]
}
    de2a:	bd10      	pop	{r4, pc}
		++(*current);
    de2c:	3308      	adds	r3, #8
    de2e:	6003      	str	r3, [r0, #0]
		--(*count);
    de30:	680b      	ldr	r3, [r1, #0]
    de32:	3b01      	subs	r3, #1
    de34:	600b      	str	r3, [r1, #0]
    de36:	e7ed      	b.n	de14 <spi_context_get_next_buf.constprop.0+0x2>

0000de38 <z_log_msg_static_create.constprop.0>:
    de38:	2300      	movs	r3, #0
    de3a:	f7f3 bec7 	b.w	1bcc <z_impl_z_log_msg_static_create>

0000de3e <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    de3e:	4603      	mov	r3, r0
    de40:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    de42:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    de44:	7919      	ldrb	r1, [r3, #4]
    de46:	2301      	movs	r3, #1
    de48:	fa03 f101 	lsl.w	r1, r3, r1
    de4c:	6903      	ldr	r3, [r0, #16]
    de4e:	681b      	ldr	r3, [r3, #0]
    de50:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    de52:	bf18      	it	ne
    de54:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    de58:	b112      	cbz	r2, de60 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    de5a:	6883      	ldr	r3, [r0, #8]
    de5c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    de5e:	4718      	bx	r3
    de60:	6883      	ldr	r3, [r0, #8]
    de62:	691b      	ldr	r3, [r3, #16]
    de64:	e7fb      	b.n	de5e <gpio_pin_set_dt.isra.0+0x20>

0000de66 <_spi_context_cs_control>:
{
    de66:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    de68:	6803      	ldr	r3, [r0, #0]
{
    de6a:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    de6c:	b1e3      	cbz	r3, dea8 <_spi_context_cs_control+0x42>
    de6e:	6898      	ldr	r0, [r3, #8]
    de70:	b1d0      	cbz	r0, dea8 <_spi_context_cs_control+0x42>
    de72:	6805      	ldr	r5, [r0, #0]
    de74:	b1c5      	cbz	r5, dea8 <_spi_context_cs_control+0x42>
		if (on) {
    de76:	b149      	cbz	r1, de8c <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    de78:	2101      	movs	r1, #1
    de7a:	f7ff ffe0 	bl	de3e <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    de7e:	6823      	ldr	r3, [r4, #0]
    de80:	689b      	ldr	r3, [r3, #8]
    de82:	6898      	ldr	r0, [r3, #8]
}
    de84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    de88:	f000 bcf4 	b.w	e874 <z_impl_k_busy_wait>
			if (!force_off &&
    de8c:	b912      	cbnz	r2, de94 <_spi_context_cs_control+0x2e>
    de8e:	889b      	ldrh	r3, [r3, #4]
    de90:	04db      	lsls	r3, r3, #19
    de92:	d409      	bmi.n	dea8 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    de94:	6880      	ldr	r0, [r0, #8]
    de96:	f000 fced 	bl	e874 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    de9a:	6823      	ldr	r3, [r4, #0]
    de9c:	2100      	movs	r1, #0
    de9e:	6898      	ldr	r0, [r3, #8]
}
    dea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    dea4:	f7ff bfcb 	b.w	de3e <gpio_pin_set_dt.isra.0>
}
    dea8:	bd38      	pop	{r3, r4, r5, pc}

0000deaa <spi_context_unlock_unconditionally>:
{
    deaa:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    deac:	2201      	movs	r2, #1
    deae:	2100      	movs	r1, #0
{
    deb0:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    deb2:	f7ff ffd8 	bl	de66 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    deb6:	69a3      	ldr	r3, [r4, #24]
    deb8:	b933      	cbnz	r3, dec8 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    deba:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    debc:	f104 0010 	add.w	r0, r4, #16
}
    dec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dec4:	f7fd bae8 	b.w	b498 <z_impl_k_sem_give>
    dec8:	bd10      	pop	{r4, pc}

0000deca <spi_nrfx_release>:
{
    deca:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    decc:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    dece:	6803      	ldr	r3, [r0, #0]
    ded0:	428b      	cmp	r3, r1
    ded2:	d106      	bne.n	dee2 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    ded4:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
    ded8:	b934      	cbnz	r4, dee8 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    deda:	f7ff ffe6 	bl	deaa <spi_context_unlock_unconditionally>
	return 0;
    dede:	4620      	mov	r0, r4
}
    dee0:	bd10      	pop	{r4, pc}
		return -EINVAL;
    dee2:	f06f 0015 	mvn.w	r0, #21
    dee6:	e7fb      	b.n	dee0 <spi_nrfx_release+0x16>
		return -EBUSY;
    dee8:	f06f 000f 	mvn.w	r0, #15
    deec:	e7f8      	b.n	dee0 <spi_nrfx_release+0x16>

0000deee <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
    deee:	b538      	push	{r3, r4, r5, lr}
	_spi_context_cs_control(ctx, on, false);
    def0:	2200      	movs	r2, #0
    def2:	4604      	mov	r4, r0
    def4:	460d      	mov	r5, r1
    def6:	4611      	mov	r1, r2
    def8:	f7ff ffb5 	bl	de66 <_spi_context_cs_control>
	ctx->sync_status = status;
    defc:	6425      	str	r5, [r4, #64]	; 0x40
    defe:	f104 0028 	add.w	r0, r4, #40	; 0x28
    df02:	f7fd fac9 	bl	b498 <z_impl_k_sem_give>
	dev_data->busy = false;
    df06:	2300      	movs	r3, #0
    df08:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
    df0c:	bd38      	pop	{r3, r4, r5, pc}

0000df0e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    df0e:	4770      	bx	lr

0000df10 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    df10:	f100 0350 	add.w	r3, r0, #80	; 0x50
    df14:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    df16:	b29b      	uxth	r3, r3
    df18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    df1c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    df20:	2200      	movs	r2, #0
    df22:	601a      	str	r2, [r3, #0]
    df24:	681b      	ldr	r3, [r3, #0]
}
    df26:	4770      	bx	lr

0000df28 <sys_clock_cycle_get_32>:
{
    df28:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    df2a:	f7fa fba3 	bl	8674 <z_nrf_rtc_timer_read>
}
    df2e:	bd08      	pop	{r3, pc}

0000df30 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    df30:	f7fe ba96 	b.w	c460 <nrf_cc3xx_platform_init_no_rng>

0000df34 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    df34:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    df36:	f7f5 fac5 	bl	34c4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    df3a:	f7f5 fb99 	bl	3670 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    df3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    df42:	f7fe ba8d 	b.w	c460 <nrf_cc3xx_platform_init_no_rng>

0000df46 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    df46:	4700      	bx	r0

0000df48 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    df48:	f000 bc94 	b.w	e874 <z_impl_k_busy_wait>

0000df4c <nrfx_clock_start>:
{
    df4c:	b508      	push	{r3, lr}
    switch (domain)
    df4e:	b110      	cbz	r0, df56 <nrfx_clock_start+0xa>
    df50:	2801      	cmp	r0, #1
    df52:	d02c      	beq.n	dfae <nrfx_clock_start+0x62>
}
    df54:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    df56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    df5a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    df5e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    df62:	03c8      	lsls	r0, r1, #15
    df64:	d40b      	bmi.n	df7e <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    df66:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    df6a:	07d9      	lsls	r1, r3, #31
    df6c:	d50f      	bpl.n	df8e <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    df6e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    df72:	079b      	lsls	r3, r3, #30
    df74:	d408      	bmi.n	df88 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    df76:	2302      	movs	r3, #2
    df78:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    df7c:	e7ea      	b.n	df54 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    df7e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    df82:	2b01      	cmp	r3, #1
    df84:	d004      	beq.n	df90 <nrfx_clock_start+0x44>
    df86:	b113      	cbz	r3, df8e <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    df88:	2000      	movs	r0, #0
    df8a:	f7fa fe75 	bl	8c78 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    df8e:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    df90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    df94:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df98:	2300      	movs	r3, #0
    df9a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    df9e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    dfa2:	2302      	movs	r3, #2
    dfa4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dfa8:	2301      	movs	r3, #1
    dfaa:	6093      	str	r3, [r2, #8]
}
    dfac:	e7d2      	b.n	df54 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dfae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dfb2:	2200      	movs	r2, #0
    dfb4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    dfb8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    dfbc:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dfc0:	6018      	str	r0, [r3, #0]
}
    dfc2:	e7c7      	b.n	df54 <nrfx_clock_start+0x8>

0000dfc4 <nrfx_clock_stop>:
    clock_stop(domain);
    dfc4:	f7fa be58 	b.w	8c78 <clock_stop>

0000dfc8 <nrf_gpio_reconfigure>:
{
    dfc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dfca:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dfcc:	a801      	add	r0, sp, #4
{
    dfce:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    dfd2:	4616      	mov	r6, r2
    dfd4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dfd6:	f7fa ff09 	bl	8dec <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    dfda:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    dfdc:	f1b6 0c00 	subs.w	ip, r6, #0
    dfe0:	bf18      	it	ne
    dfe2:	f04f 0c01 	movne.w	ip, #1
    dfe6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    dfea:	1e0b      	subs	r3, r1, #0
    dfec:	bf18      	it	ne
    dfee:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    dff0:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    dff2:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    dff6:	bf14      	ite	ne
    dff8:	f04f 0c0c 	movne.w	ip, #12
    dffc:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    e000:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    e002:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    e006:	bf14      	ite	ne
    e008:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    e00c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    e010:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    e012:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    e016:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    e01a:	bf14      	ite	ne
    e01c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    e020:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    e024:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    e028:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    e02c:	b101      	cbz	r1, e030 <nrf_gpio_reconfigure+0x68>
    e02e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    e030:	b10e      	cbz	r6, e036 <nrf_gpio_reconfigure+0x6e>
    e032:	7836      	ldrb	r6, [r6, #0]
    e034:	0076      	lsls	r6, r6, #1
    e036:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    e038:	b10d      	cbz	r5, e03e <nrf_gpio_reconfigure+0x76>
    e03a:	782d      	ldrb	r5, [r5, #0]
    e03c:	00ad      	lsls	r5, r5, #2
    e03e:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    e040:	b10c      	cbz	r4, e046 <nrf_gpio_reconfigure+0x7e>
    e042:	7824      	ldrb	r4, [r4, #0]
    e044:	0224      	lsls	r4, r4, #8
    e046:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    e048:	b10f      	cbz	r7, e04e <nrf_gpio_reconfigure+0x86>
    e04a:	783f      	ldrb	r7, [r7, #0]
    e04c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    e04e:	430c      	orrs	r4, r1
    e050:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    e052:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    e056:	b003      	add	sp, #12
    e058:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e05a <nrf_gpio_cfg_sense_set>:
{
    e05a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    e05c:	f10d 030f 	add.w	r3, sp, #15
    e060:	9301      	str	r3, [sp, #4]
    e062:	2300      	movs	r3, #0
{
    e064:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    e068:	9300      	str	r3, [sp, #0]
    e06a:	461a      	mov	r2, r3
    e06c:	4619      	mov	r1, r3
    e06e:	f7ff ffab 	bl	dfc8 <nrf_gpio_reconfigure>
}
    e072:	b005      	add	sp, #20
    e074:	f85d fb04 	ldr.w	pc, [sp], #4

0000e078 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e078:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    e07c:	681a      	ldr	r2, [r3, #0]
    e07e:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e080:	bf1f      	itttt	ne
    e082:	2200      	movne	r2, #0
    e084:	601a      	strne	r2, [r3, #0]
    e086:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e088:	2001      	movne	r0, #1
    e08a:	bf08      	it	eq
    e08c:	2000      	moveq	r0, #0
}
    e08e:	4770      	bx	lr

0000e090 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    e090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e094:	f44f 7260 	mov.w	r2, #896	; 0x380
    e098:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e09c:	4770      	bx	lr

0000e09e <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    e09e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e0a2:	f44f 7260 	mov.w	r2, #896	; 0x380
    e0a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    e0aa:	4770      	bx	lr

0000e0ac <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    e0ac:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    e0ae:	f7fb fa55 	bl	955c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    e0b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    e0b6:	f7fa be65 	b.w	8d84 <nrfx_clock_irq_handler>

0000e0ba <nrf_gpio_cfg_default>:
{
    e0ba:	b507      	push	{r0, r1, r2, lr}
    e0bc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e0be:	a801      	add	r0, sp, #4
    e0c0:	f7fb faa2 	bl	9608 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    e0c4:	9b01      	ldr	r3, [sp, #4]
    e0c6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e0ca:	2202      	movs	r2, #2
    e0cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    e0d0:	b003      	add	sp, #12
    e0d2:	f85d fb04 	ldr.w	pc, [sp], #4

0000e0d6 <nrf_gpio_pin_set>:
{
    e0d6:	b507      	push	{r0, r1, r2, lr}
    e0d8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e0da:	a801      	add	r0, sp, #4
    e0dc:	f7fb fa94 	bl	9608 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e0e0:	9a01      	ldr	r2, [sp, #4]
    e0e2:	2301      	movs	r3, #1
    e0e4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    e0e6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    e0ea:	b003      	add	sp, #12
    e0ec:	f85d fb04 	ldr.w	pc, [sp], #4

0000e0f0 <nrf_gpio_pin_clear>:
{
    e0f0:	b507      	push	{r0, r1, r2, lr}
    e0f2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e0f4:	a801      	add	r0, sp, #4
    e0f6:	f7fb fa87 	bl	9608 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    e0fa:	9a01      	ldr	r2, [sp, #4]
    e0fc:	2301      	movs	r3, #1
    e0fe:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    e100:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    e104:	b003      	add	sp, #12
    e106:	f85d fb04 	ldr.w	pc, [sp], #4

0000e10a <transfer_byte>:
{
    e10a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    e10c:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    e110:	698a      	ldr	r2, [r1, #24]
    e112:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    e114:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    e118:	6a0b      	ldr	r3, [r1, #32]
    e11a:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    e11c:	bf3e      	ittt	cc
    e11e:	694a      	ldrcc	r2, [r1, #20]
    e120:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    e124:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    e126:	6a0b      	ldr	r3, [r1, #32]
    if (p_cb->abort)
    e128:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    e12c:	690c      	ldr	r4, [r1, #16]
    ++p_cb->bytes_transferred;
    e12e:	1c5a      	adds	r2, r3, #1
    e130:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    e132:	3302      	adds	r3, #2
    if (p_cb->abort)
    e134:	b135      	cbz	r5, e144 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    e136:	42a3      	cmp	r3, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    e138:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    e13a:	bf38      	it	cc
    e13c:	610b      	strcc	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    e13e:	429c      	cmp	r4, r3
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    e140:	bf88      	it	hi
    e142:	618b      	strhi	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    e144:	690d      	ldr	r5, [r1, #16]
    e146:	429d      	cmp	r5, r3
    e148:	d905      	bls.n	e156 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    e14a:	68ca      	ldr	r2, [r1, #12]
    p_reg->TXD = data;
    e14c:	5cd3      	ldrb	r3, [r2, r3]
    e14e:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    e152:	2001      	movs	r0, #1
    e154:	e00a      	b.n	e16c <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    e156:	698c      	ldr	r4, [r1, #24]
    e158:	429c      	cmp	r4, r3
    e15a:	d901      	bls.n	e160 <transfer_byte+0x56>
    e15c:	7fcb      	ldrb	r3, [r1, #31]
    e15e:	e7f6      	b.n	e14e <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    e160:	42aa      	cmp	r2, r5
    e162:	d3f6      	bcc.n	e152 <transfer_byte+0x48>
    e164:	42a2      	cmp	r2, r4
    e166:	bf2c      	ite	cs
    e168:	2000      	movcs	r0, #0
    e16a:	2001      	movcc	r0, #1
}
    e16c:	b003      	add	sp, #12
    e16e:	bd30      	pop	{r4, r5, pc}

0000e170 <nrf_gpio_pin_set>:
{
    e170:	b507      	push	{r0, r1, r2, lr}
    e172:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e174:	a801      	add	r0, sp, #4
    e176:	f7fb fbd9 	bl	992c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e17a:	9a01      	ldr	r2, [sp, #4]
    e17c:	2301      	movs	r3, #1
    e17e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    e180:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    e184:	b003      	add	sp, #12
    e186:	f85d fb04 	ldr.w	pc, [sp], #4

0000e18a <nrf_gpio_pin_clear>:
{
    e18a:	b507      	push	{r0, r1, r2, lr}
    e18c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e18e:	a801      	add	r0, sp, #4
    e190:	f7fb fbcc 	bl	992c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    e194:	9a01      	ldr	r2, [sp, #4]
    e196:	2301      	movs	r3, #1
    e198:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    e19a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    e19e:	b003      	add	sp, #12
    e1a0:	f85d fb04 	ldr.w	pc, [sp], #4

0000e1a4 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    e1a4:	1c43      	adds	r3, r0, #1
{
    e1a6:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    e1a8:	d009      	beq.n	e1be <spim_pin_uninit+0x1a>
    nrf_gpio_cfg(
    e1aa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e1ac:	a801      	add	r0, sp, #4
    e1ae:	f7fb fbbd 	bl	992c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    e1b2:	9b01      	ldr	r3, [sp, #4]
    e1b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e1b8:	2202      	movs	r2, #2
    e1ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    e1be:	b003      	add	sp, #12
    e1c0:	f85d fb04 	ldr.w	pc, [sp], #4

0000e1c4 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
    e1c4:	7f83      	ldrb	r3, [r0, #30]
    e1c6:	075a      	lsls	r2, r3, #29
    e1c8:	d40b      	bmi.n	e1e2 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    e1ca:	7fc0      	ldrb	r0, [r0, #31]
    e1cc:	28ff      	cmp	r0, #255	; 0xff
    e1ce:	d008      	beq.n	e1e2 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
    e1d0:	079b      	lsls	r3, r3, #30
    e1d2:	bf58      	it	pl
    e1d4:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
    e1d8:	b909      	cbnz	r1, e1de <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
    e1da:	f7ff bfd6 	b.w	e18a <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    e1de:	f7ff bfc7 	b.w	e170 <nrf_gpio_pin_set>
}
    e1e2:	4770      	bx	lr

0000e1e4 <nrfx_usbd_consumer>:
{
    e1e4:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    e1e6:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    e1e8:	429c      	cmp	r4, r3
    e1ea:	d209      	bcs.n	e200 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    e1ec:	2500      	movs	r5, #0
    e1ee:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    e1f0:	6809      	ldr	r1, [r1, #0]
    e1f2:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    e1f4:	429a      	cmp	r2, r3
    e1f6:	d10c      	bne.n	e212 <nrfx_usbd_consumer+0x2e>
    e1f8:	1e20      	subs	r0, r4, #0
    e1fa:	bf18      	it	ne
    e1fc:	2001      	movne	r0, #1
}
    e1fe:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    e200:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    e202:	680d      	ldr	r5, [r1, #0]
    e204:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    e206:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    e208:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    e20a:	4418      	add	r0, r3
        p_transfer->size = size;
    e20c:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    e20e:	6008      	str	r0, [r1, #0]
    e210:	e7f0      	b.n	e1f4 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    e212:	2000      	movs	r0, #0
    e214:	e7f3      	b.n	e1fe <nrfx_usbd_consumer+0x1a>

0000e216 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    e216:	684b      	ldr	r3, [r1, #4]
    e218:	429a      	cmp	r2, r3
    e21a:	bf28      	it	cs
    e21c:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    e21e:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    e220:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    e224:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    e226:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    e228:	1a80      	subs	r0, r0, r2
    e22a:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    e22c:	4413      	add	r3, r2
}
    e22e:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    e230:	600b      	str	r3, [r1, #0]
}
    e232:	bf18      	it	ne
    e234:	2001      	movne	r0, #1
    e236:	4770      	bx	lr

0000e238 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    e238:	684b      	ldr	r3, [r1, #4]
    e23a:	429a      	cmp	r2, r3
    e23c:	bf28      	it	cs
    e23e:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    e240:	b162      	cbz	r2, e25c <nrfx_usbd_feeder_ram_zlp+0x24>
    e242:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    e244:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    e248:	684b      	ldr	r3, [r1, #4]
    e24a:	1a9b      	subs	r3, r3, r2
    e24c:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    e24e:	680b      	ldr	r3, [r1, #0]
}
    e250:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    e252:	4413      	add	r3, r2
    e254:	600b      	str	r3, [r1, #0]
}
    e256:	bf18      	it	ne
    e258:	2001      	movne	r0, #1
    e25a:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    e25c:	4613      	mov	r3, r2
    e25e:	e7f1      	b.n	e244 <nrfx_usbd_feeder_ram_zlp+0xc>

0000e260 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    e260:	43c3      	mvns	r3, r0
    e262:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    e266:	f000 000f 	and.w	r0, r0, #15
}
    e26a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    e26e:	4770      	bx	lr

0000e270 <ev_started_handler>:
}
    e270:	4770      	bx	lr

0000e272 <nrf_usbd_epin_dma_handler>:
{
    e272:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    e274:	f7fb fec6 	bl	a004 <usbd_dma_pending_clear>
{
    e278:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    e27a:	f7fb fdb9 	bl	9df0 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    e27e:	7b83      	ldrb	r3, [r0, #14]
    e280:	2b03      	cmp	r3, #3
    e282:	d10a      	bne.n	e29a <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    e284:	4608      	mov	r0, r1
    e286:	f7ff ffeb 	bl	e260 <ep2bit>
    e28a:	2301      	movs	r3, #1
    e28c:	fa03 f000 	lsl.w	r0, r3, r0
    e290:	43c0      	mvns	r0, r0
}
    e292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    e296:	f7fb bea5 	b.w	9fe4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    e29a:	6803      	ldr	r3, [r0, #0]
    e29c:	2b00      	cmp	r3, #0
    e29e:	d0f1      	beq.n	e284 <nrf_usbd_epin_dma_handler+0x12>
}
    e2a0:	bd08      	pop	{r3, pc}

0000e2a2 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    e2a2:	2087      	movs	r0, #135	; 0x87
    e2a4:	f7ff bfe5 	b.w	e272 <nrf_usbd_epin_dma_handler>

0000e2a8 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    e2a8:	2086      	movs	r0, #134	; 0x86
    e2aa:	f7ff bfe2 	b.w	e272 <nrf_usbd_epin_dma_handler>

0000e2ae <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    e2ae:	2085      	movs	r0, #133	; 0x85
    e2b0:	f7ff bfdf 	b.w	e272 <nrf_usbd_epin_dma_handler>

0000e2b4 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    e2b4:	2084      	movs	r0, #132	; 0x84
    e2b6:	f7ff bfdc 	b.w	e272 <nrf_usbd_epin_dma_handler>

0000e2ba <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    e2ba:	2083      	movs	r0, #131	; 0x83
    e2bc:	f7ff bfd9 	b.w	e272 <nrf_usbd_epin_dma_handler>

0000e2c0 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    e2c0:	2082      	movs	r0, #130	; 0x82
    e2c2:	f7ff bfd6 	b.w	e272 <nrf_usbd_epin_dma_handler>

0000e2c6 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    e2c6:	2081      	movs	r0, #129	; 0x81
    e2c8:	f7ff bfd3 	b.w	e272 <nrf_usbd_epin_dma_handler>

0000e2cc <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    e2cc:	f7fb beac 	b.w	a028 <nrf_usbd_ep0in_dma_handler>

0000e2d0 <nrfx_usbd_ep_max_packet_size_set>:
{
    e2d0:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    e2d2:	f7fb fd8d 	bl	9df0 <ep_state_access>
    p_state->max_packet_size = size;
    e2d6:	8181      	strh	r1, [r0, #12]
}
    e2d8:	bd08      	pop	{r3, pc}

0000e2da <nrfx_usbd_ep_status_get>:
{
    e2da:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    e2dc:	f7fb fd88 	bl	9df0 <ep_state_access>
	__asm__ volatile(
    e2e0:	f04f 0220 	mov.w	r2, #32
    e2e4:	f3ef 8311 	mrs	r3, BASEPRI
    e2e8:	f382 8812 	msr	BASEPRI_MAX, r2
    e2ec:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    e2f0:	6882      	ldr	r2, [r0, #8]
    e2f2:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    e2f4:	6802      	ldr	r2, [r0, #0]
    e2f6:	b92a      	cbnz	r2, e304 <nrfx_usbd_ep_status_get+0x2a>
    e2f8:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    e2fa:	f383 8811 	msr	BASEPRI, r3
    e2fe:	f3bf 8f6f 	isb	sy
}
    e302:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    e304:	2004      	movs	r0, #4
    e306:	e7f8      	b.n	e2fa <nrfx_usbd_ep_status_get+0x20>

0000e308 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    e308:	2007      	movs	r0, #7
    e30a:	f7fc b9f9 	b.w	a700 <nrf_usbd_epout_dma_handler>

0000e30e <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    e30e:	2006      	movs	r0, #6
    e310:	f7fc b9f6 	b.w	a700 <nrf_usbd_epout_dma_handler>

0000e314 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    e314:	2005      	movs	r0, #5
    e316:	f7fc b9f3 	b.w	a700 <nrf_usbd_epout_dma_handler>

0000e31a <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    e31a:	2004      	movs	r0, #4
    e31c:	f7fc b9f0 	b.w	a700 <nrf_usbd_epout_dma_handler>

0000e320 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    e320:	2003      	movs	r0, #3
    e322:	f7fc b9ed 	b.w	a700 <nrf_usbd_epout_dma_handler>

0000e326 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    e326:	2002      	movs	r0, #2
    e328:	f7fc b9ea 	b.w	a700 <nrf_usbd_epout_dma_handler>

0000e32c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    e32c:	2001      	movs	r0, #1
    e32e:	f7fc b9e7 	b.w	a700 <nrf_usbd_epout_dma_handler>

0000e332 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    e332:	f7fc badb 	b.w	a8ec <usbd_ep_abort>

0000e336 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    e336:	f7fc bcad 	b.w	ac94 <_DoInit>

0000e33a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    e33a:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    e33c:	f7ff fffb 	bl	e336 <SEGGER_RTT_Init>

	return 0;
}
    e340:	2000      	movs	r0, #0
    e342:	bd08      	pop	{r3, pc}

0000e344 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    e344:	4770      	bx	lr

0000e346 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    e346:	b140      	cbz	r0, e35a <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    e348:	68c3      	ldr	r3, [r0, #12]
    e34a:	7858      	ldrb	r0, [r3, #1]
    e34c:	f010 0001 	ands.w	r0, r0, #1
    e350:	bf1e      	ittt	ne
    e352:	7818      	ldrbne	r0, [r3, #0]
    e354:	fab0 f080 	clzne	r0, r0
    e358:	0940      	lsrne	r0, r0, #5
}
    e35a:	4770      	bx	lr

0000e35c <z_early_memset>:
	(void) memset(dst, c, n);
    e35c:	f7ff b9b4 	b.w	d6c8 <memset>

0000e360 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    e360:	f7ff b9a7 	b.w	d6b2 <memcpy>

0000e364 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    e364:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    e368:	4313      	orrs	r3, r2
    e36a:	f013 0303 	ands.w	r3, r3, #3
    e36e:	d10c      	bne.n	e38a <create_free_list+0x26>
	slab->free_list = NULL;
    e370:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    e372:	6881      	ldr	r1, [r0, #8]
    e374:	4299      	cmp	r1, r3
    e376:	d801      	bhi.n	e37c <create_free_list+0x18>
	return 0;
    e378:	2000      	movs	r0, #0
    e37a:	4770      	bx	lr
		*(char **)p = slab->free_list;
    e37c:	6941      	ldr	r1, [r0, #20]
    e37e:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    e380:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    e382:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    e384:	3301      	adds	r3, #1
		p += slab->block_size;
    e386:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    e388:	e7f3      	b.n	e372 <create_free_list+0xe>
		return -EINVAL;
    e38a:	f06f 0015 	mvn.w	r0, #21
}
    e38e:	4770      	bx	lr

0000e390 <k_mem_slab_init>:
{
    e390:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    e392:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    e396:	2300      	movs	r3, #0
	slab->buffer = buffer;
    e398:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    e39a:	6183      	str	r3, [r0, #24]
{
    e39c:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    e39e:	f7ff ffe1 	bl	e364 <create_free_list>
	if (rc < 0) {
    e3a2:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    e3a4:	bfa8      	it	ge
    e3a6:	e9c4 4400 	strdge	r4, r4, [r4]
}
    e3aa:	bd10      	pop	{r4, pc}

0000e3ac <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    e3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3ae:	4604      	mov	r4, r0
    e3b0:	460d      	mov	r5, r1
	__asm__ volatile(
    e3b2:	f04f 0320 	mov.w	r3, #32
    e3b6:	f3ef 8611 	mrs	r6, BASEPRI
    e3ba:	f383 8812 	msr	BASEPRI_MAX, r3
    e3be:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    e3c2:	6947      	ldr	r7, [r0, #20]
    e3c4:	b977      	cbnz	r7, e3e4 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    e3c6:	f000 f9ac 	bl	e722 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    e3ca:	b158      	cbz	r0, e3e4 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    e3cc:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    e3ce:	6142      	str	r2, [r0, #20]
    e3d0:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    e3d2:	f000 f947 	bl	e664 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    e3d6:	4631      	mov	r1, r6
    e3d8:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    e3dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    e3e0:	f7fd bbbe 	b.w	bb60 <z_reschedule>
	**(char ***) mem = slab->free_list;
    e3e4:	682b      	ldr	r3, [r5, #0]
    e3e6:	6962      	ldr	r2, [r4, #20]
    e3e8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    e3ea:	682b      	ldr	r3, [r5, #0]
    e3ec:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    e3ee:	69a3      	ldr	r3, [r4, #24]
    e3f0:	3b01      	subs	r3, #1
    e3f2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    e3f4:	f386 8811 	msr	BASEPRI, r6
    e3f8:	f3bf 8f6f 	isb	sy
}
    e3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e3fe <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e3fe:	f3ef 8005 	mrs	r0, IPSR
}
    e402:	3800      	subs	r0, #0
    e404:	bf18      	it	ne
    e406:	2001      	movne	r0, #1
    e408:	4770      	bx	lr

0000e40a <z_impl_k_thread_name_set>:
}
    e40a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    e40e:	4770      	bx	lr

0000e410 <k_thread_name_get>:
}
    e410:	2000      	movs	r0, #0
    e412:	4770      	bx	lr

0000e414 <z_impl_k_thread_start>:
	z_sched_start(thread);
    e414:	f7fd bbb6 	b.w	bb84 <z_sched_start>

0000e418 <z_pm_save_idle_exit>:
{
    e418:	b508      	push	{r3, lr}
	pm_system_resume();
    e41a:	f7f3 ff77 	bl	230c <pm_system_resume>
}
    e41e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    e422:	f7ff bd74 	b.w	df0e <sys_clock_idle_exit>

0000e426 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    e426:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e42a:	428b      	cmp	r3, r1
    e42c:	d001      	beq.n	e432 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    e42e:	f7fd bb51 	b.w	bad4 <z_set_prio>
}
    e432:	2000      	movs	r0, #0
    e434:	4770      	bx	lr

0000e436 <z_impl_k_mutex_init>:
{
    e436:	4603      	mov	r3, r0
	mutex->owner = NULL;
    e438:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    e43a:	e9c3 0002 	strd	r0, r0, [r3, #8]
    e43e:	e9c3 3300 	strd	r3, r3, [r3]
}
    e442:	4770      	bx	lr

0000e444 <queue_insert>:
{
    e444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e448:	4699      	mov	r9, r3
    e44a:	4604      	mov	r4, r0
    e44c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e450:	460d      	mov	r5, r1
    e452:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    e454:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    e458:	f04f 0220 	mov.w	r2, #32
    e45c:	f3ef 8711 	mrs	r7, BASEPRI
    e460:	f382 8812 	msr	BASEPRI_MAX, r2
    e464:	f3bf 8f6f 	isb	sy
	if (is_append) {
    e468:	b103      	cbz	r3, e46c <queue_insert+0x28>
	return list->tail;
    e46a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    e46c:	4630      	mov	r0, r6
    e46e:	f000 f958 	bl	e722 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    e472:	b158      	cbz	r0, e48c <queue_insert+0x48>
    e474:	2300      	movs	r3, #0
    e476:	67c3      	str	r3, [r0, #124]	; 0x7c
    e478:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    e47c:	f000 f8f2 	bl	e664 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    e480:	4630      	mov	r0, r6
    e482:	4639      	mov	r1, r7
    e484:	f7fd fb6c 	bl	bb60 <z_reschedule>
		return 0;
    e488:	2000      	movs	r0, #0
    e48a:	e00c      	b.n	e4a6 <queue_insert+0x62>
	if (alloc) {
    e48c:	f1b9 0f00 	cmp.w	r9, #0
    e490:	d01b      	beq.n	e4ca <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
    e492:	2108      	movs	r1, #8
    e494:	f7fd ffac 	bl	c3f0 <z_thread_aligned_alloc>
		if (anode == NULL) {
    e498:	b938      	cbnz	r0, e4aa <queue_insert+0x66>
	__asm__ volatile(
    e49a:	f387 8811 	msr	BASEPRI, r7
    e49e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    e4a2:	f06f 000b 	mvn.w	r0, #11
}
    e4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    e4aa:	2201      	movs	r2, #1
		anode->data = data;
    e4ac:	f8c0 8004 	str.w	r8, [r0, #4]
    e4b0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e4b2:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e4b4:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    e4b8:	b95d      	cbnz	r5, e4d2 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
    e4ba:	6822      	ldr	r2, [r4, #0]
    e4bc:	430a      	orrs	r2, r1
    e4be:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e4c0:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    e4c2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e4c4:	b96a      	cbnz	r2, e4e2 <queue_insert+0x9e>
	list->tail = node;
    e4c6:	6060      	str	r0, [r4, #4]
}
    e4c8:	e00b      	b.n	e4e2 <queue_insert+0x9e>
	node->next_and_flags = flags;
    e4ca:	f8c8 9000 	str.w	r9, [r8]
}
    e4ce:	4640      	mov	r0, r8
    e4d0:	e7ef      	b.n	e4b2 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e4d2:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    e4d4:	2a03      	cmp	r2, #3
    e4d6:	d810      	bhi.n	e4fa <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
    e4d8:	6001      	str	r1, [r0, #0]
	return list->tail;
    e4da:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    e4dc:	b939      	cbnz	r1, e4ee <queue_insert+0xaa>
	list->head = node;
    e4de:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    e4e2:	2104      	movs	r1, #4
    e4e4:	f104 0010 	add.w	r0, r4, #16
    e4e8:	f000 fb44 	bl	eb74 <z_handle_obj_poll_events>
    e4ec:	e7c8      	b.n	e480 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e4ee:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e4f0:	f002 0203 	and.w	r2, r2, #3
    e4f4:	4302      	orrs	r2, r0
    e4f6:	600a      	str	r2, [r1, #0]
    e4f8:	e7e5      	b.n	e4c6 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e4fa:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e4fe:	430a      	orrs	r2, r1
    e500:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e502:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e504:	f002 0203 	and.w	r2, r2, #3
    e508:	ea40 0302 	orr.w	r3, r0, r2
    e50c:	602b      	str	r3, [r5, #0]
}
    e50e:	e7e8      	b.n	e4e2 <queue_insert+0x9e>

0000e510 <z_queue_node_peek>:
{
    e510:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    e512:	4604      	mov	r4, r0
    e514:	b130      	cbz	r0, e524 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e516:	6802      	ldr	r2, [r0, #0]
    e518:	0793      	lsls	r3, r2, #30
    e51a:	d003      	beq.n	e524 <z_queue_node_peek+0x14>
		ret = anode->data;
    e51c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    e51e:	b109      	cbz	r1, e524 <z_queue_node_peek+0x14>
			k_free(anode);
    e520:	f000 fb36 	bl	eb90 <k_free>
}
    e524:	4620      	mov	r0, r4
    e526:	bd10      	pop	{r4, pc}

0000e528 <k_queue_append>:
{
    e528:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    e52a:	2301      	movs	r3, #1
    e52c:	9300      	str	r3, [sp, #0]
    e52e:	2300      	movs	r3, #0
{
    e530:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    e532:	4619      	mov	r1, r3
    e534:	f7ff ff86 	bl	e444 <queue_insert>
}
    e538:	b003      	add	sp, #12
    e53a:	f85d fb04 	ldr.w	pc, [sp], #4

0000e53e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    e53e:	b15a      	cbz	r2, e558 <z_impl_k_sem_init+0x1a>
    e540:	428a      	cmp	r2, r1
    e542:	d309      	bcc.n	e558 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    e544:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    e548:	e9c0 1202 	strd	r1, r2, [r0, #8]
    e54c:	e9c0 0000 	strd	r0, r0, [r0]
    e550:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    e554:	2000      	movs	r0, #0
    e556:	4770      	bx	lr
		return -EINVAL;
    e558:	f06f 0015 	mvn.w	r0, #21
}
    e55c:	4770      	bx	lr

0000e55e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    e55e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    e560:	2301      	movs	r3, #1
    e562:	408b      	lsls	r3, r1
    e564:	ea22 0303 	bic.w	r3, r2, r3
    e568:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    e56a:	fa22 f001 	lsr.w	r0, r2, r1
}
    e56e:	f000 0001 	and.w	r0, r0, #1
    e572:	4770      	bx	lr

0000e574 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    e574:	b120      	cbz	r0, e580 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    e576:	2200      	movs	r2, #0
    e578:	4611      	mov	r1, r2
    e57a:	3088      	adds	r0, #136	; 0x88
    e57c:	f000 b92b 	b.w	e7d6 <z_sched_wake>
}
    e580:	4770      	bx	lr

0000e582 <k_work_init>:
{
    e582:	b538      	push	{r3, r4, r5, lr}
    e584:	4604      	mov	r4, r0
    e586:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e588:	2210      	movs	r2, #16
    e58a:	2100      	movs	r1, #0
    e58c:	f7ff f89c 	bl	d6c8 <memset>
    e590:	6065      	str	r5, [r4, #4]
}
    e592:	bd38      	pop	{r3, r4, r5, pc}

0000e594 <z_work_submit_to_queue>:
{
    e594:	b513      	push	{r0, r1, r4, lr}
    e596:	9001      	str	r0, [sp, #4]
    e598:	4608      	mov	r0, r1
	__asm__ volatile(
    e59a:	f04f 0320 	mov.w	r3, #32
    e59e:	f3ef 8411 	mrs	r4, BASEPRI
    e5a2:	f383 8812 	msr	BASEPRI_MAX, r3
    e5a6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    e5aa:	a901      	add	r1, sp, #4
    e5ac:	f7fd f89a 	bl	b6e4 <submit_to_queue_locked>
	__asm__ volatile(
    e5b0:	f384 8811 	msr	BASEPRI, r4
    e5b4:	f3bf 8f6f 	isb	sy
}
    e5b8:	b002      	add	sp, #8
    e5ba:	bd10      	pop	{r4, pc}

0000e5bc <k_work_submit_to_queue>:
{
    e5bc:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    e5be:	f7ff ffe9 	bl	e594 <z_work_submit_to_queue>
	if (ret > 0) {
    e5c2:	1e04      	subs	r4, r0, #0
    e5c4:	dd09      	ble.n	e5da <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    e5c6:	f04f 0320 	mov.w	r3, #32
    e5ca:	f3ef 8011 	mrs	r0, BASEPRI
    e5ce:	f383 8812 	msr	BASEPRI_MAX, r3
    e5d2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e5d6:	f000 f8d8 	bl	e78a <z_reschedule_irqlock>
}
    e5da:	4620      	mov	r0, r4
    e5dc:	bd10      	pop	{r4, pc}

0000e5de <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    e5de:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    e5e2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e5e4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e5e6:	2300      	movs	r3, #0
	node->prev = NULL;
    e5e8:	e9c0 3300 	strd	r3, r3, [r0]
}
    e5ec:	4770      	bx	lr

0000e5ee <unpend_thread_no_timeout>:
{
    e5ee:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    e5f0:	f7ff fff5 	bl	e5de <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e5f4:	7b43      	ldrb	r3, [r0, #13]
    e5f6:	f023 0302 	bic.w	r3, r3, #2
    e5fa:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    e5fc:	2300      	movs	r3, #0
    e5fe:	6083      	str	r3, [r0, #8]
}
    e600:	bd08      	pop	{r3, pc}

0000e602 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    e602:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    e606:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    e60a:	4283      	cmp	r3, r0
		return b2 - b1;
    e60c:	bf14      	ite	ne
    e60e:	1ac0      	subne	r0, r0, r3
	return 0;
    e610:	2000      	moveq	r0, #0
}
    e612:	4770      	bx	lr

0000e614 <add_to_waitq_locked>:
{
    e614:	b538      	push	{r3, r4, r5, lr}
    e616:	4604      	mov	r4, r0
    e618:	460d      	mov	r5, r1
	unready_thread(thread);
    e61a:	f7fd f9dd 	bl	b9d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    e61e:	7b63      	ldrb	r3, [r4, #13]
    e620:	f043 0302 	orr.w	r3, r3, #2
    e624:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    e626:	b1e5      	cbz	r5, e662 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    e628:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    e62a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e62c:	429d      	cmp	r5, r3
    e62e:	d109      	bne.n	e644 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    e630:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    e632:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    e636:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e638:	606c      	str	r4, [r5, #4]
}
    e63a:	e012      	b.n	e662 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    e63c:	686a      	ldr	r2, [r5, #4]
    e63e:	4293      	cmp	r3, r2
    e640:	d0f6      	beq.n	e630 <add_to_waitq_locked+0x1c>
    e642:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e644:	2b00      	cmp	r3, #0
    e646:	d0f3      	beq.n	e630 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    e648:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    e64c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    e650:	428a      	cmp	r2, r1
    e652:	d0f3      	beq.n	e63c <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e654:	4291      	cmp	r1, r2
    e656:	ddf1      	ble.n	e63c <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    e658:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    e65a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    e65e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    e660:	605c      	str	r4, [r3, #4]
}
    e662:	bd38      	pop	{r3, r4, r5, pc}

0000e664 <z_ready_thread>:
{
    e664:	b510      	push	{r4, lr}
    e666:	f04f 0320 	mov.w	r3, #32
    e66a:	f3ef 8411 	mrs	r4, BASEPRI
    e66e:	f383 8812 	msr	BASEPRI_MAX, r3
    e672:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    e676:	f7fd f97b 	bl	b970 <ready_thread>
	__asm__ volatile(
    e67a:	f384 8811 	msr	BASEPRI, r4
    e67e:	f3bf 8f6f 	isb	sy
}
    e682:	bd10      	pop	{r4, pc}

0000e684 <z_unpend_thread_no_timeout>:
{
    e684:	b508      	push	{r3, lr}
	__asm__ volatile(
    e686:	f04f 0220 	mov.w	r2, #32
    e68a:	f3ef 8111 	mrs	r1, BASEPRI
    e68e:	f382 8812 	msr	BASEPRI_MAX, r2
    e692:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    e696:	6883      	ldr	r3, [r0, #8]
    e698:	b10b      	cbz	r3, e69e <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    e69a:	f7ff ffa8 	bl	e5ee <unpend_thread_no_timeout>
	__asm__ volatile(
    e69e:	f381 8811 	msr	BASEPRI, r1
    e6a2:	f3bf 8f6f 	isb	sy
}
    e6a6:	bd08      	pop	{r3, pc}

0000e6a8 <z_sched_wake_thread>:
{
    e6a8:	b538      	push	{r3, r4, r5, lr}
    e6aa:	4604      	mov	r4, r0
	__asm__ volatile(
    e6ac:	f04f 0320 	mov.w	r3, #32
    e6b0:	f3ef 8511 	mrs	r5, BASEPRI
    e6b4:	f383 8812 	msr	BASEPRI_MAX, r3
    e6b8:	f3bf 8f6f 	isb	sy
		if (!killed) {
    e6bc:	7b43      	ldrb	r3, [r0, #13]
    e6be:	f013 0f28 	tst.w	r3, #40	; 0x28
    e6c2:	d10b      	bne.n	e6dc <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    e6c4:	6883      	ldr	r3, [r0, #8]
    e6c6:	b10b      	cbz	r3, e6cc <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    e6c8:	f7ff ff91 	bl	e5ee <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e6cc:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    e6ce:	b951      	cbnz	r1, e6e6 <z_sched_wake_thread+0x3e>
    e6d0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e6d4:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    e6d6:	4620      	mov	r0, r4
    e6d8:	f7fd f94a 	bl	b970 <ready_thread>
	__asm__ volatile(
    e6dc:	f385 8811 	msr	BASEPRI, r5
    e6e0:	f3bf 8f6f 	isb	sy
}
    e6e4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    e6e6:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    e6ea:	e7f3      	b.n	e6d4 <z_sched_wake_thread+0x2c>

0000e6ec <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    e6ec:	2101      	movs	r1, #1
    e6ee:	3818      	subs	r0, #24
    e6f0:	f7ff bfda 	b.w	e6a8 <z_sched_wake_thread>

0000e6f4 <z_unpend1_no_timeout>:
{
    e6f4:	b508      	push	{r3, lr}
    e6f6:	4603      	mov	r3, r0
	__asm__ volatile(
    e6f8:	f04f 0220 	mov.w	r2, #32
    e6fc:	f3ef 8111 	mrs	r1, BASEPRI
    e700:	f382 8812 	msr	BASEPRI_MAX, r2
    e704:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e708:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e70a:	4283      	cmp	r3, r0
    e70c:	d007      	beq.n	e71e <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    e70e:	b108      	cbz	r0, e714 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    e710:	f7ff ff6d 	bl	e5ee <unpend_thread_no_timeout>
	__asm__ volatile(
    e714:	f381 8811 	msr	BASEPRI, r1
    e718:	f3bf 8f6f 	isb	sy
}
    e71c:	bd08      	pop	{r3, pc}
    e71e:	2000      	movs	r0, #0
    e720:	e7f8      	b.n	e714 <z_unpend1_no_timeout+0x20>

0000e722 <z_unpend_first_thread>:
{
    e722:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    e724:	f04f 0320 	mov.w	r3, #32
    e728:	f3ef 8511 	mrs	r5, BASEPRI
    e72c:	f383 8812 	msr	BASEPRI_MAX, r3
    e730:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e734:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e736:	42a0      	cmp	r0, r4
    e738:	d00d      	beq.n	e756 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    e73a:	b134      	cbz	r4, e74a <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    e73c:	4620      	mov	r0, r4
    e73e:	f7ff ff56 	bl	e5ee <unpend_thread_no_timeout>
    e742:	f104 0018 	add.w	r0, r4, #24
    e746:	f000 f869 	bl	e81c <z_abort_timeout>
	__asm__ volatile(
    e74a:	f385 8811 	msr	BASEPRI, r5
    e74e:	f3bf 8f6f 	isb	sy
}
    e752:	4620      	mov	r0, r4
    e754:	bd38      	pop	{r3, r4, r5, pc}
    e756:	2400      	movs	r4, #0
    e758:	e7f7      	b.n	e74a <z_unpend_first_thread+0x28>

0000e75a <z_unpend_thread>:
{
    e75a:	b510      	push	{r4, lr}
    e75c:	4601      	mov	r1, r0
	__asm__ volatile(
    e75e:	f04f 0320 	mov.w	r3, #32
    e762:	f3ef 8411 	mrs	r4, BASEPRI
    e766:	f383 8812 	msr	BASEPRI_MAX, r3
    e76a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    e76e:	6883      	ldr	r3, [r0, #8]
    e770:	b10b      	cbz	r3, e776 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    e772:	f7ff ff3c 	bl	e5ee <unpend_thread_no_timeout>
	__asm__ volatile(
    e776:	f384 8811 	msr	BASEPRI, r4
    e77a:	f3bf 8f6f 	isb	sy
}
    e77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e782:	f101 0018 	add.w	r0, r1, #24
    e786:	f000 b849 	b.w	e81c <z_abort_timeout>

0000e78a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e78a:	4603      	mov	r3, r0
    e78c:	b920      	cbnz	r0, e798 <z_reschedule_irqlock+0xe>
    e78e:	f3ef 8205 	mrs	r2, IPSR
    e792:	b90a      	cbnz	r2, e798 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    e794:	f7f5 b870 	b.w	3878 <arch_swap>
    e798:	f383 8811 	msr	BASEPRI, r3
    e79c:	f3bf 8f6f 	isb	sy
}
    e7a0:	4770      	bx	lr

0000e7a2 <z_reschedule_unlocked>:
	__asm__ volatile(
    e7a2:	f04f 0320 	mov.w	r3, #32
    e7a6:	f3ef 8011 	mrs	r0, BASEPRI
    e7aa:	f383 8812 	msr	BASEPRI_MAX, r3
    e7ae:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e7b2:	f7ff bfea 	b.w	e78a <z_reschedule_irqlock>

0000e7b6 <z_unpend_all>:
{
    e7b6:	b538      	push	{r3, r4, r5, lr}
    e7b8:	4605      	mov	r5, r0
	int need_sched = 0;
    e7ba:	2000      	movs	r0, #0
	return list->head == list;
    e7bc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e7be:	42a5      	cmp	r5, r4
    e7c0:	d000      	beq.n	e7c4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e7c2:	b904      	cbnz	r4, e7c6 <z_unpend_all+0x10>
}
    e7c4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    e7c6:	4620      	mov	r0, r4
    e7c8:	f7ff ffc7 	bl	e75a <z_unpend_thread>
		z_ready_thread(thread);
    e7cc:	4620      	mov	r0, r4
    e7ce:	f7ff ff49 	bl	e664 <z_ready_thread>
		need_sched = 1;
    e7d2:	2001      	movs	r0, #1
    e7d4:	e7f2      	b.n	e7bc <z_unpend_all+0x6>

0000e7d6 <z_sched_wake>:
{
    e7d6:	b538      	push	{r3, r4, r5, lr}
    e7d8:	f04f 0320 	mov.w	r3, #32
    e7dc:	f3ef 8511 	mrs	r5, BASEPRI
    e7e0:	f383 8812 	msr	BASEPRI_MAX, r3
    e7e4:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e7e8:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e7ea:	42a0      	cmp	r0, r4
    e7ec:	d012      	beq.n	e814 <z_sched_wake+0x3e>
		if (thread != NULL) {
    e7ee:	b19c      	cbz	r4, e818 <z_sched_wake+0x42>
    e7f0:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
    e7f2:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    e7f4:	4620      	mov	r0, r4
    e7f6:	f7ff fefa 	bl	e5ee <unpend_thread_no_timeout>
    e7fa:	f104 0018 	add.w	r0, r4, #24
    e7fe:	f000 f80d 	bl	e81c <z_abort_timeout>
			ready_thread(thread);
    e802:	4620      	mov	r0, r4
    e804:	f7fd f8b4 	bl	b970 <ready_thread>
			ret = true;
    e808:	2001      	movs	r0, #1
	__asm__ volatile(
    e80a:	f385 8811 	msr	BASEPRI, r5
    e80e:	f3bf 8f6f 	isb	sy
}
    e812:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    e814:	2000      	movs	r0, #0
    e816:	e7f8      	b.n	e80a <z_sched_wake+0x34>
    e818:	4620      	mov	r0, r4
    e81a:	e7f6      	b.n	e80a <z_sched_wake+0x34>

0000e81c <z_abort_timeout>:
{
    e81c:	b510      	push	{r4, lr}
	__asm__ volatile(
    e81e:	f04f 0220 	mov.w	r2, #32
    e822:	f3ef 8411 	mrs	r4, BASEPRI
    e826:	f382 8812 	msr	BASEPRI_MAX, r2
    e82a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    e82e:	6803      	ldr	r3, [r0, #0]
    e830:	b13b      	cbz	r3, e842 <z_abort_timeout+0x26>
			remove_timeout(to);
    e832:	f7fd fba1 	bl	bf78 <remove_timeout>
			ret = 0;
    e836:	2000      	movs	r0, #0
	__asm__ volatile(
    e838:	f384 8811 	msr	BASEPRI, r4
    e83c:	f3bf 8f6f 	isb	sy
}
    e840:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    e842:	f06f 0015 	mvn.w	r0, #21
    e846:	e7f7      	b.n	e838 <z_abort_timeout+0x1c>

0000e848 <z_get_next_timeout_expiry>:
{
    e848:	b510      	push	{r4, lr}
	__asm__ volatile(
    e84a:	f04f 0320 	mov.w	r3, #32
    e84e:	f3ef 8411 	mrs	r4, BASEPRI
    e852:	f383 8812 	msr	BASEPRI_MAX, r3
    e856:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    e85a:	f7fd fb6d 	bl	bf38 <next_timeout>
	__asm__ volatile(
    e85e:	f384 8811 	msr	BASEPRI, r4
    e862:	f3bf 8f6f 	isb	sy
}
    e866:	bd10      	pop	{r4, pc}

0000e868 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    e868:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    e86a:	f7fd fc81 	bl	c170 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    e86e:	bd08      	pop	{r3, pc}

0000e870 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    e870:	f7fd bc7e 	b.w	c170 <sys_clock_tick_get>

0000e874 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    e874:	b108      	cbz	r0, e87a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    e876:	f7f5 bd95 	b.w	43a4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    e87a:	4770      	bx	lr

0000e87c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e87c:	f1b1 3fff 	cmp.w	r1, #4294967295
    e880:	bf08      	it	eq
    e882:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    e886:	b538      	push	{r3, r4, r5, lr}
    e888:	460c      	mov	r4, r1
    e88a:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e88c:	d014      	beq.n	e8b8 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e88e:	4308      	orrs	r0, r1
    e890:	d103      	bne.n	e89a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    e892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    e896:	f7fd bc6b 	b.w	c170 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    e89a:	f06f 0001 	mvn.w	r0, #1
    e89e:	1b40      	subs	r0, r0, r5
    e8a0:	f04f 33ff 	mov.w	r3, #4294967295
    e8a4:	eb63 0101 	sbc.w	r1, r3, r1
    e8a8:	2900      	cmp	r1, #0
    e8aa:	da04      	bge.n	e8b6 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    e8ac:	f7fd fc60 	bl	c170 <sys_clock_tick_get>
    e8b0:	1940      	adds	r0, r0, r5
    e8b2:	eb41 0104 	adc.w	r1, r1, r4
}
    e8b6:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    e8b8:	f04f 30ff 	mov.w	r0, #4294967295
    e8bc:	4601      	mov	r1, r0
    e8be:	e7fa      	b.n	e8b6 <sys_clock_timeout_end_calc+0x3a>

0000e8c0 <k_timer_init>:
	timer->status = 0U;
    e8c0:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    e8c2:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    e8c6:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    e8ca:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    e8ce:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    e8d2:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    e8d4:	6343      	str	r3, [r0, #52]	; 0x34
}
    e8d6:	4770      	bx	lr

0000e8d8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    e8d8:	b510      	push	{r4, lr}
    e8da:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    e8dc:	f7ff ff9e 	bl	e81c <z_abort_timeout>

	if (inactive) {
    e8e0:	b9b0      	cbnz	r0, e910 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    e8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e8e4:	b10b      	cbz	r3, e8ea <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    e8e6:	4620      	mov	r0, r4
    e8e8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    e8ea:	f104 0018 	add.w	r0, r4, #24
    e8ee:	f7ff ff01 	bl	e6f4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    e8f2:	b168      	cbz	r0, e910 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    e8f4:	f7ff feb6 	bl	e664 <z_ready_thread>
	__asm__ volatile(
    e8f8:	f04f 0320 	mov.w	r3, #32
    e8fc:	f3ef 8011 	mrs	r0, BASEPRI
    e900:	f383 8812 	msr	BASEPRI_MAX, r3
    e904:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    e908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e90c:	f7ff bf3d 	b.w	e78a <z_reschedule_irqlock>
    e910:	bd10      	pop	{r4, pc}

0000e912 <add_event>:
{
    e912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e914:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    e916:	e9d0 1300 	ldrd	r1, r3, [r0]
    e91a:	4288      	cmp	r0, r1
    e91c:	4604      	mov	r4, r0
    e91e:	d105      	bne.n	e92c <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
    e920:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
    e922:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
    e926:	601d      	str	r5, [r3, #0]
	list->tail = node;
    e928:	6065      	str	r5, [r4, #4]
    e92a:	e01d      	b.n	e968 <add_event+0x56>
	if ((pending == NULL) ||
    e92c:	2b00      	cmp	r3, #0
    e92e:	d0f7      	beq.n	e920 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
    e930:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    e932:	b100      	cbz	r0, e936 <add_event+0x24>
    e934:	3860      	subs	r0, #96	; 0x60
    e936:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
    e93a:	4639      	mov	r1, r7
    e93c:	f7ff fe61 	bl	e602 <z_sched_prio_cmp>
	if ((pending == NULL) ||
    e940:	2800      	cmp	r0, #0
    e942:	dced      	bgt.n	e920 <add_event+0xe>
	return list->head == list;
    e944:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e946:	42b4      	cmp	r4, r6
    e948:	d0ea      	beq.n	e920 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    e94a:	2e00      	cmp	r6, #0
    e94c:	d0e8      	beq.n	e920 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
    e94e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    e950:	b101      	cbz	r1, e954 <add_event+0x42>
    e952:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
    e954:	4638      	mov	r0, r7
    e956:	f7ff fe54 	bl	e602 <z_sched_prio_cmp>
    e95a:	2800      	cmp	r0, #0
    e95c:	dd05      	ble.n	e96a <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
    e95e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    e960:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
    e964:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e966:	6075      	str	r5, [r6, #4]
}
    e968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    e96a:	6863      	ldr	r3, [r4, #4]
    e96c:	429e      	cmp	r6, r3
    e96e:	d0d7      	beq.n	e920 <add_event+0xe>
    e970:	6836      	ldr	r6, [r6, #0]
    e972:	e7ea      	b.n	e94a <add_event+0x38>

0000e974 <register_events>:
{
    e974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    e978:	2500      	movs	r5, #0
{
    e97a:	468b      	mov	fp, r1
    e97c:	4614      	mov	r4, r2
    e97e:	461f      	mov	r7, r3
    e980:	4682      	mov	sl, r0
	int events_registered = 0;
    e982:	462e      	mov	r6, r5
	event->poller = NULL;
    e984:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
    e986:	455d      	cmp	r5, fp
    e988:	db02      	blt.n	e990 <register_events+0x1c>
}
    e98a:	4630      	mov	r0, r6
    e98c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e990:	f04f 0320 	mov.w	r3, #32
    e994:	f3ef 8911 	mrs	r9, BASEPRI
    e998:	f383 8812 	msr	BASEPRI_MAX, r3
    e99c:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    e9a0:	f89a 300d 	ldrb.w	r3, [sl, #13]
    e9a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e9a8:	3b01      	subs	r3, #1
    e9aa:	2b07      	cmp	r3, #7
    e9ac:	d80f      	bhi.n	e9ce <register_events+0x5a>
    e9ae:	e8df f003 	tbb	[pc, r3]
    e9b2:	041e      	.short	0x041e
    e9b4:	0e0e0a0e 	.word	0x0e0e0a0e
    e9b8:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
    e9ba:	f8da 3010 	ldr.w	r3, [sl, #16]
    e9be:	689b      	ldr	r3, [r3, #8]
    e9c0:	b12b      	cbz	r3, e9ce <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
    e9c2:	2302      	movs	r3, #2
    e9c4:	e020      	b.n	ea08 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
    e9c6:	f8da 3010 	ldr.w	r3, [sl, #16]
    e9ca:	681b      	ldr	r3, [r3, #0]
    e9cc:	bb8b      	cbnz	r3, ea32 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
    e9ce:	bb47      	cbnz	r7, ea22 <register_events+0xae>
    e9d0:	7823      	ldrb	r3, [r4, #0]
    e9d2:	b333      	cbz	r3, ea22 <register_events+0xae>
	switch (event->type) {
    e9d4:	f89a 300d 	ldrb.w	r3, [sl, #13]
    e9d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e9dc:	3b01      	subs	r3, #1
    e9de:	2b07      	cmp	r3, #7
    e9e0:	d830      	bhi.n	ea44 <register_events+0xd0>
    e9e2:	e8df f003 	tbb	[pc, r3]
    e9e6:	2833      	.short	0x2833
    e9e8:	2f2f282f 	.word	0x2f2f282f
    e9ec:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
    e9ee:	f8da 3010 	ldr.w	r3, [sl, #16]
    e9f2:	689b      	ldr	r3, [r3, #8]
    e9f4:	2b00      	cmp	r3, #0
    e9f6:	d0ea      	beq.n	e9ce <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
    e9f8:	2301      	movs	r3, #1
    e9fa:	e005      	b.n	ea08 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
    e9fc:	f8da 3010 	ldr.w	r3, [sl, #16]
    ea00:	6a1b      	ldr	r3, [r3, #32]
    ea02:	2b00      	cmp	r3, #0
    ea04:	d0e3      	beq.n	e9ce <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
    ea06:	2310      	movs	r3, #16
	event->state |= state;
    ea08:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
    ea0c:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
    ea10:	f3c2 3186 	ubfx	r1, r2, #14, #7
    ea14:	430b      	orrs	r3, r1
    ea16:	f363 3294 	bfi	r2, r3, #14, #7
    ea1a:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
    ea1e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    ea22:	f389 8811 	msr	BASEPRI, r9
    ea26:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    ea2a:	3501      	adds	r5, #1
    ea2c:	f10a 0a14 	add.w	sl, sl, #20
    ea30:	e7a9      	b.n	e986 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
    ea32:	2304      	movs	r3, #4
    ea34:	e7e8      	b.n	ea08 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
    ea36:	f8da 0010 	ldr.w	r0, [sl, #16]
    ea3a:	4622      	mov	r2, r4
    ea3c:	4651      	mov	r1, sl
    ea3e:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
    ea40:	f7ff ff67 	bl	e912 <add_event>
	event->poller = poller;
    ea44:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
    ea48:	3601      	adds	r6, #1
    ea4a:	e7ea      	b.n	ea22 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
    ea4c:	f8da 0010 	ldr.w	r0, [sl, #16]
    ea50:	4622      	mov	r2, r4
    ea52:	4651      	mov	r1, sl
    ea54:	e7f4      	b.n	ea40 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
    ea56:	f8da 0010 	ldr.w	r0, [sl, #16]
    ea5a:	4622      	mov	r2, r4
    ea5c:	4651      	mov	r1, sl
    ea5e:	3024      	adds	r0, #36	; 0x24
    ea60:	e7ee      	b.n	ea40 <register_events+0xcc>

0000ea62 <signal_poll_event>:
{
    ea62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    ea66:	6884      	ldr	r4, [r0, #8]
{
    ea68:	4605      	mov	r5, r0
    ea6a:	460e      	mov	r6, r1
	if (poller != NULL) {
    ea6c:	b144      	cbz	r4, ea80 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    ea6e:	7863      	ldrb	r3, [r4, #1]
    ea70:	2b01      	cmp	r3, #1
    ea72:	d12e      	bne.n	ead2 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
    ea74:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    ea78:	f013 0302 	ands.w	r3, r3, #2
    ea7c:	d10a      	bne.n	ea94 <signal_poll_event+0x32>
		poller->is_polling = false;
    ea7e:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    ea80:	68eb      	ldr	r3, [r5, #12]
    ea82:	f3c3 3286 	ubfx	r2, r3, #14, #7
    ea86:	4316      	orrs	r6, r2
	event->poller = NULL;
    ea88:	2000      	movs	r0, #0
	event->state |= state;
    ea8a:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
    ea8e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    ea90:	60eb      	str	r3, [r5, #12]
	return retcode;
    ea92:	e03e      	b.n	eb12 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
    ea94:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    ea98:	f1b3 3fff 	cmp.w	r3, #4294967295
    ea9c:	bf08      	it	eq
    ea9e:	f112 0f02 	cmneq.w	r2, #2
    eaa2:	d032      	beq.n	eb0a <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    eaa4:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    eaa8:	4640      	mov	r0, r8
    eaaa:	f7ff fe56 	bl	e75a <z_unpend_thread>
	arch_thread_return_value_set(thread,
    eaae:	2e08      	cmp	r6, #8
    eab0:	bf0c      	ite	eq
    eab2:	f06f 0303 	mvneq.w	r3, #3
    eab6:	2300      	movne	r3, #0
    eab8:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    eaba:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    eabe:	06db      	lsls	r3, r3, #27
    eac0:	d109      	bne.n	ead6 <signal_poll_event+0x74>
    eac2:	f854 7c48 	ldr.w	r7, [r4, #-72]
    eac6:	b937      	cbnz	r7, ead6 <signal_poll_event+0x74>
	z_ready_thread(thread);
    eac8:	4640      	mov	r0, r8
    eaca:	f7ff fdcb 	bl	e664 <z_ready_thread>
		poller->is_polling = false;
    eace:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    ead0:	e7d6      	b.n	ea80 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    ead2:	2b02      	cmp	r3, #2
    ead4:	d001      	beq.n	eada <signal_poll_event+0x78>
		poller->is_polling = false;
    ead6:	2300      	movs	r3, #0
    ead8:	e7d1      	b.n	ea7e <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    eada:	7823      	ldrb	r3, [r4, #0]
    eadc:	2b00      	cmp	r3, #0
    eade:	d0cf      	beq.n	ea80 <signal_poll_event+0x1e>
    eae0:	f854 7c04 	ldr.w	r7, [r4, #-4]
    eae4:	2f00      	cmp	r7, #0
    eae6:	d0f2      	beq.n	eace <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    eae8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    eaec:	f1a4 0914 	sub.w	r9, r4, #20
    eaf0:	f104 0014 	add.w	r0, r4, #20
    eaf4:	f7ff fe92 	bl	e81c <z_abort_timeout>
		twork->poll_result = 0;
    eaf8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
    eafc:	4649      	mov	r1, r9
    eafe:	4638      	mov	r0, r7
    eb00:	f7ff fd48 	bl	e594 <z_work_submit_to_queue>
		poller->is_polling = false;
    eb04:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    eb08:	e7ba      	b.n	ea80 <signal_poll_event+0x1e>
		poller->is_polling = false;
    eb0a:	2300      	movs	r3, #0
    eb0c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    eb0e:	f06f 000a 	mvn.w	r0, #10
}
    eb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000eb16 <clear_event_registrations>:
	while (num_events--) {
    eb16:	2314      	movs	r3, #20
{
    eb18:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb1a:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    eb1e:	2400      	movs	r4, #0
	switch (event->type) {
    eb20:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
    eb24:	b901      	cbnz	r1, eb28 <clear_event_registrations+0x12>
}
    eb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
    eb28:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
    eb2c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
    eb30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    eb34:	2b08      	cmp	r3, #8
    eb36:	f1a0 0714 	sub.w	r7, r0, #20
    eb3a:	d80c      	bhi.n	eb56 <clear_event_registrations+0x40>
    eb3c:	fa26 f303 	lsr.w	r3, r6, r3
    eb40:	07db      	lsls	r3, r3, #31
    eb42:	d508      	bpl.n	eb56 <clear_event_registrations+0x40>
	return node->next != NULL;
    eb44:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
    eb48:	b12b      	cbz	r3, eb56 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
    eb4a:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
    eb4e:	602b      	str	r3, [r5, #0]
	next->prev = prev;
    eb50:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    eb52:	e940 4405 	strd	r4, r4, [r0, #-20]
    eb56:	f382 8811 	msr	BASEPRI, r2
    eb5a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    eb5e:	f04f 0320 	mov.w	r3, #32
    eb62:	f3ef 8211 	mrs	r2, BASEPRI
    eb66:	f383 8812 	msr	BASEPRI_MAX, r3
    eb6a:	f3bf 8f6f 	isb	sy
	return k;
    eb6e:	3901      	subs	r1, #1
    eb70:	4638      	mov	r0, r7
    eb72:	e7d7      	b.n	eb24 <clear_event_registrations+0xe>

0000eb74 <z_handle_obj_poll_events>:
{
    eb74:	4603      	mov	r3, r0
	return list->head == list;
    eb76:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    eb78:	4283      	cmp	r3, r0
    eb7a:	d008      	beq.n	eb8e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    eb7c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    eb80:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    eb82:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    eb84:	2300      	movs	r3, #0
	node->prev = NULL;
    eb86:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    eb8a:	f7ff bf6a 	b.w	ea62 <signal_poll_event>
}
    eb8e:	4770      	bx	lr

0000eb90 <k_free>:
	if (ptr != NULL) {
    eb90:	b120      	cbz	r0, eb9c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    eb92:	1f01      	subs	r1, r0, #4
    eb94:	f850 0c04 	ldr.w	r0, [r0, #-4]
    eb98:	f000 b856 	b.w	ec48 <k_heap_free>
}
    eb9c:	4770      	bx	lr

0000eb9e <k_heap_init>:
{
    eb9e:	b410      	push	{r4}
    eba0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    eba4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    eba8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    ebaa:	f7fe b865 	b.w	cc78 <sys_heap_init>

0000ebae <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    ebae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebb2:	b085      	sub	sp, #20
    ebb4:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    ebb8:	4607      	mov	r7, r0
    ebba:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    ebbc:	4650      	mov	r0, sl
    ebbe:	4621      	mov	r1, r4
{
    ebc0:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    ebc2:	f7ff fe5b 	bl	e87c <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    ebc6:	f1b4 3fff 	cmp.w	r4, #4294967295
    ebca:	bf08      	it	eq
    ebcc:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    ebd0:	4605      	mov	r5, r0
    ebd2:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    ebd4:	bf04      	itt	eq
    ebd6:	f04f 35ff 	moveq.w	r5, #4294967295
    ebda:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    ebde:	f107 0a14 	add.w	sl, r7, #20
    ebe2:	f04f 0320 	mov.w	r3, #32
    ebe6:	f3ef 8411 	mrs	r4, BASEPRI
    ebea:	f383 8812 	msr	BASEPRI_MAX, r3
    ebee:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    ebf2:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    ebf6:	464a      	mov	r2, r9
    ebf8:	4641      	mov	r1, r8
    ebfa:	4638      	mov	r0, r7
    ebfc:	f7fd ffd5 	bl	cbaa <sys_heap_aligned_alloc>
    ec00:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    ec02:	f7fd fab5 	bl	c170 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    ec06:	9b03      	ldr	r3, [sp, #12]
    ec08:	b13b      	cbz	r3, ec1a <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    ec0a:	f384 8811 	msr	BASEPRI, r4
    ec0e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    ec12:	4618      	mov	r0, r3
    ec14:	b005      	add	sp, #20
    ec16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    ec1a:	1a28      	subs	r0, r5, r0
    ec1c:	eb66 0101 	sbc.w	r1, r6, r1
    ec20:	2801      	cmp	r0, #1
    ec22:	f171 0200 	sbcs.w	r2, r1, #0
    ec26:	dbf0      	blt.n	ec0a <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    ec28:	e9cd 0100 	strd	r0, r1, [sp]
    ec2c:	465a      	mov	r2, fp
    ec2e:	4621      	mov	r1, r4
    ec30:	4650      	mov	r0, sl
    ec32:	f7fc ff31 	bl	ba98 <z_pend_curr>
	__asm__ volatile(
    ec36:	f04f 0320 	mov.w	r3, #32
    ec3a:	f3ef 8411 	mrs	r4, BASEPRI
    ec3e:	f383 8812 	msr	BASEPRI_MAX, r3
    ec42:	f3bf 8f6f 	isb	sy
    ec46:	e7d6      	b.n	ebf6 <k_heap_aligned_alloc+0x48>

0000ec48 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    ec48:	b538      	push	{r3, r4, r5, lr}
    ec4a:	4604      	mov	r4, r0
    ec4c:	f04f 0320 	mov.w	r3, #32
    ec50:	f3ef 8511 	mrs	r5, BASEPRI
    ec54:	f383 8812 	msr	BASEPRI_MAX, r3
    ec58:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    ec5c:	f7fd ff6d 	bl	cb3a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    ec60:	f104 000c 	add.w	r0, r4, #12
    ec64:	f7ff fda7 	bl	e7b6 <z_unpend_all>
    ec68:	b130      	cbz	r0, ec78 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    ec6a:	4629      	mov	r1, r5
    ec6c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    ec70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    ec74:	f7fc bf74 	b.w	bb60 <z_reschedule>
	__asm__ volatile(
    ec78:	f385 8811 	msr	BASEPRI, r5
    ec7c:	f3bf 8f6f 	isb	sy
}
    ec80:	bd38      	pop	{r3, r4, r5, pc}

0000ec82 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    ec82:	4770      	bx	lr
