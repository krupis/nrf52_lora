
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	70 3d 00 20 45 44 00 00 cd d3 00 00 19 44 00 00     p=. ED.......D..
  10:	19 44 00 00 19 44 00 00 19 44 00 00 00 00 00 00     .D...D...D......
	...
  2c:	81 3d 00 00 19 44 00 00 00 00 00 00 39 3d 00 00     .=...D......9=..
  3c:	19 44 00 00                                         .D..

00000040 <_irq_vector_table>:
  40:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..
  50:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..
  60:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..
  70:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..
  80:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..
  90:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..
  a0:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..
  b0:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..
  c0:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..
  d0:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..
  e0:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..
  f0:	fd 3d 00 00 fd 3d 00 00 fd 3d 00 00 fd 3d 00 00     .=...=...=...=..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <__data_size>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdb>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295
     208:	d204      	bcs.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295
     234:	d204      	bcs.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x153>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295
     280:	d204      	bcs.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x157>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295
     2ac:	d204      	bcs.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <__data_size+0x12>
     2d4:	b916      	cbnz	r6, 2dc <__data_size+0xc>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <__data_size+0x6>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <__data_size+0x20>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <__data_size+0x2c>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <__data_size+0x2e>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295
     350:	d204      	bcs.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295
     37c:	d204      	bcs.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     39c:	d106      	bne.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <__data_size+0x2e>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <__data_size+0x2e>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>

000003d4 <lora_receive_cb>:



void lora_receive_cb(const struct device *dev, uint8_t *data, uint16_t size,
		     int16_t rssi, int8_t snr)
{
     3d4:	b5b0      	push	{r4, r5, r7, lr}
     3d6:	b086      	sub	sp, #24
	static int cnt;

	ARG_UNUSED(dev);
	ARG_UNUSED(size);

	LOG_INF("Received data: %s (RSSI:%ddBm, SNR:%ddBm)",
     3d8:	466d      	mov	r5, sp
{
     3da:	af00      	add	r7, sp, #0
	LOG_INF("Received data: %s (RSSI:%ddBm, SNR:%ddBm)",
     3dc:	b08a      	sub	sp, #40	; 0x28
{
     3de:	4604      	mov	r4, r0
	LOG_INF("Received data: %s (RSSI:%ddBm, SNR:%ddBm)",
     3e0:	466a      	mov	r2, sp
     3e2:	61d3      	str	r3, [r2, #28]
     3e4:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
     3e8:	6213      	str	r3, [r2, #32]
     3ea:	4815      	ldr	r0, [pc, #84]	; (440 <CONFIG_FLASH_SIZE+0x40>)
     3ec:	f44f 7300 	mov.w	r3, #512	; 0x200
     3f0:	8493      	strh	r3, [r2, #36]	; 0x24
     3f2:	4b14      	ldr	r3, [pc, #80]	; (444 <CONFIG_FLASH_SIZE+0x44>)
     3f4:	e9c2 0105 	strd	r0, r1, [r2, #20]
     3f8:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     3fc:	2300      	movs	r3, #0
     3fe:	4812      	ldr	r0, [pc, #72]	; (448 <CONFIG_FLASH_SIZE+0x48>)
     400:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
     404:	f001 fbde 	bl	1bc4 <z_impl_z_log_msg_static_create>
		data, rssi, snr);

	/* Stop receiving after 10 packets */
	if (++cnt == 10) {
     408:	4a10      	ldr	r2, [pc, #64]	; (44c <CONFIG_FLASH_SIZE+0x4c>)
     40a:	6813      	ldr	r3, [r2, #0]
     40c:	3301      	adds	r3, #1
     40e:	2b0a      	cmp	r3, #10
     410:	46ad      	mov	sp, r5
     412:	6013      	str	r3, [r2, #0]
     414:	d110      	bne.n	438 <CONFIG_FLASH_SIZE+0x38>
		LOG_INF("Stopping packet receptions");
     416:	4b0e      	ldr	r3, [pc, #56]	; (450 <CONFIG_FLASH_SIZE+0x50>)
     418:	617b      	str	r3, [r7, #20]
     41a:	2302      	movs	r3, #2
     41c:	613b      	str	r3, [r7, #16]
     41e:	480a      	ldr	r0, [pc, #40]	; (448 <CONFIG_FLASH_SIZE+0x48>)
     420:	2300      	movs	r3, #0
     422:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     426:	f107 0210 	add.w	r2, r7, #16
     42a:	f001 fbcb 	bl	1bc4 <z_impl_z_log_msg_static_create>
static inline int lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->recv_async(dev, cb);
     42e:	68a3      	ldr	r3, [r4, #8]
     430:	2100      	movs	r1, #0
     432:	691b      	ldr	r3, [r3, #16]
     434:	4620      	mov	r0, r4
     436:	4798      	blx	r3
		lora_recv_async(dev, NULL);
	}
}
     438:	3718      	adds	r7, #24
     43a:	46bd      	mov	sp, r7
     43c:	bdb0      	pop	{r4, r5, r7, pc}
     43e:	bf00      	nop
     440:	0000f0d9 	.word	0x0000f0d9
     444:	01000005 	.word	0x01000005
     448:	0000eb2c 	.word	0x0000eb2c
     44c:	20000ce0 	.word	0x20000ce0
     450:	0000f103 	.word	0x0000f103

00000454 <Initialize_LoRa>:
bool Initialize_LoRa(bool mode){
     454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     458:	4607      	mov	r7, r0
     45a:	b08a      	sub	sp, #40	; 0x28
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     45c:	4e22      	ldr	r6, [pc, #136]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     45e:	4630      	mov	r0, r6
     460:	f00d fcf2 	bl	de48 <z_device_is_ready>
     464:	2502      	movs	r5, #2
	if (!device_is_ready(lora_dev)) {
     466:	4604      	mov	r4, r0
     468:	b970      	cbnz	r0, 488 <Initialize_LoRa+0x34>
		LOG_ERR("LoRa device is not ready\n");
     46a:	4b20      	ldr	r3, [pc, #128]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     46c:	e9cd 5308 	strd	r5, r3, [sp, #32]
     470:	4603      	mov	r3, r0
     472:	481f      	ldr	r0, [pc, #124]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     474:	aa08      	add	r2, sp, #32
     476:	f44f 5182 	mov.w	r1, #4160	; 0x1040
        return 0;
     47a:	2400      	movs	r4, #0
     47c:	f001 fba2 	bl	1bc4 <z_impl_z_log_msg_static_create>
}
     480:	4620      	mov	r0, r4
     482:	b00a      	add	sp, #40	; 0x28
     484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("LoRa device is ready\n");
     488:	4b1a      	ldr	r3, [pc, #104]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     48a:	e9cd 5308 	strd	r5, r3, [sp, #32]
     48e:	4818      	ldr	r0, [pc, #96]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     490:	2300      	movs	r3, #0
     492:	aa08      	add	r2, sp, #32
     494:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     498:	f001 fb94 	bl	1bc4 <z_impl_z_log_msg_static_create>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     49c:	2100      	movs	r1, #0
     49e:	f641 109a 	movw	r0, #6554	; 0x199a
     4a2:	f00b f90d 	bl	b6c0 <z_impl_k_sleep>
	config.preamble_len = 8;
     4a6:	2308      	movs	r3, #8
     4a8:	f8ad 3008 	strh.w	r3, [sp, #8]
	config.frequency = 433000000;
     4ac:	4b12      	ldr	r3, [pc, #72]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     4ae:	9300      	str	r3, [sp, #0]
	config.bandwidth = BW_125_KHZ;
     4b0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
     4b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	config.coding_rate = CR_4_5;
     4b8:	2301      	movs	r3, #1
     4ba:	f88d 3006 	strb.w	r3, [sp, #6]
	config.tx_power = 4;
     4be:	2304      	movs	r3, #4
     4c0:	f88d 300a 	strb.w	r3, [sp, #10]
	config.iq_inverted = false;
     4c4:	f04f 0800 	mov.w	r8, #0
	return api->config(dev, config);
     4c8:	68b3      	ldr	r3, [r6, #8]
     4ca:	f8ad 800c 	strh.w	r8, [sp, #12]
	config.tx = mode;
     4ce:	f88d 700b 	strb.w	r7, [sp, #11]
     4d2:	681b      	ldr	r3, [r3, #0]
     4d4:	4669      	mov	r1, sp
     4d6:	4630      	mov	r0, r6
     4d8:	4798      	blx	r3
	if (ret < 0) {
     4da:	4540      	cmp	r0, r8
     4dc:	dad0      	bge.n	480 <Initialize_LoRa+0x2c>
		LOG_ERR("LoRa config failed\n");
     4de:	4b07      	ldr	r3, [pc, #28]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     4e0:	e9cd 5308 	strd	r5, r3, [sp, #32]
     4e4:	4643      	mov	r3, r8
     4e6:	e7c4      	b.n	472 <Initialize_LoRa+0x1e>
     4e8:	0000e90c 	.word	0x0000e90c
     4ec:	0000f11e 	.word	0x0000f11e
     4f0:	0000eb2c 	.word	0x0000eb2c
     4f4:	0000f138 	.word	0x0000f138
     4f8:	19cf0e40 	.word	0x19cf0e40
     4fc:	0000f14e 	.word	0x0000f14e

00000500 <Setup_LoRa_receive>:

void Setup_LoRa_receive()
{
     500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_INF("Asynchronous reception");
     502:	4b0c      	ldr	r3, [pc, #48]	; (534 <Setup_LoRa_receive+0x34>)
     504:	9305      	str	r3, [sp, #20]
     506:	2302      	movs	r3, #2
     508:	9304      	str	r3, [sp, #16]
     50a:	480b      	ldr	r0, [pc, #44]	; (538 <Setup_LoRa_receive+0x38>)
     50c:	aa04      	add	r2, sp, #16
     50e:	2300      	movs	r3, #0
     510:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     514:	f001 fb56 	bl	1bc4 <z_impl_z_log_msg_static_create>
	return api->recv_async(dev, cb);
     518:	4808      	ldr	r0, [pc, #32]	; (53c <Setup_LoRa_receive+0x3c>)
     51a:	4909      	ldr	r1, [pc, #36]	; (540 <Setup_LoRa_receive+0x40>)
     51c:	6883      	ldr	r3, [r0, #8]
     51e:	691b      	ldr	r3, [r3, #16]
     520:	4798      	blx	r3
     522:	f04f 30ff 	mov.w	r0, #4294967295
     526:	f04f 31ff 	mov.w	r1, #4294967295
	lora_recv_async(lora_dev, lora_receive_cb);
	k_sleep(K_FOREVER);
     52a:	b007      	add	sp, #28
     52c:	f85d eb04 	ldr.w	lr, [sp], #4
     530:	f00b b8c6 	b.w	b6c0 <z_impl_k_sleep>
     534:	0000f162 	.word	0x0000f162
     538:	0000eb2c 	.word	0x0000eb2c
     53c:	0000e90c 	.word	0x0000e90c
     540:	000003d5 	.word	0x000003d5

00000544 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     548:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     54a:	0784      	lsls	r4, r0, #30
{
     54c:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     54e:	f002 0304 	and.w	r3, r2, #4
     552:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     554:	f3c2 03c2 	ubfx	r3, r2, #3, #3
     558:	f103 0301 	add.w	r3, r3, #1
     55c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
     560:	9203      	str	r2, [sp, #12]
     562:	4605      	mov	r5, r0
     564:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     566:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
     568:	f040 81be 	bne.w	8e8 <CONFIG_ISR_STACK_SIZE+0xe8>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     56c:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     56e:	b130      	cbz	r0, 57e <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     570:	2907      	cmp	r1, #7
     572:	d809      	bhi.n	588 <cbvprintf_package+0x44>
		return -ENOSPC;
     574:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     578:	b011      	add	sp, #68	; 0x44
     57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     57e:	f001 0607 	and.w	r6, r1, #7
     582:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     584:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
     588:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     58a:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
     58e:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
     590:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     594:	f04f 33ff 	mov.w	r3, #4294967295
     598:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     59a:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     59e:	464f      	mov	r7, r9
	bool parsing = false;
     5a0:	46cb      	mov	fp, r9
	size = sizeof(char *);
     5a2:	4653      	mov	r3, sl
			if (buf0 != NULL) {
     5a4:	b10d      	cbz	r5, 5aa <cbvprintf_package+0x66>
				*(const char **)buf = s;
     5a6:	9a00      	ldr	r2, [sp, #0]
     5a8:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     5aa:	9805      	ldr	r0, [sp, #20]
     5ac:	2800      	cmp	r0, #0
     5ae:	f300 80eb 	bgt.w	788 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     5b2:	489a      	ldr	r0, [pc, #616]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     5b4:	9a00      	ldr	r2, [sp, #0]
     5b6:	4282      	cmp	r2, r0
     5b8:	d303      	bcc.n	5c2 <cbvprintf_package+0x7e>
     5ba:	4899      	ldr	r0, [pc, #612]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     5bc:	4282      	cmp	r2, r0
     5be:	f0c0 80e3 	bcc.w	788 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     5c2:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     5c4:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     5c8:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     5ca:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     5ce:	f100 8106 	bmi.w	7de <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     5d2:	2f0f      	cmp	r7, #15
     5d4:	f200 80b4 	bhi.w	740 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     5d8:	2d00      	cmp	r5, #0
     5da:	f000 8108 	beq.w	7ee <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
     5de:	f107 0240 	add.w	r2, r7, #64	; 0x40
     5e2:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
     5e6:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     5e8:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     5ec:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
     5f0:	9804      	ldr	r0, [sp, #16]
     5f2:	3001      	adds	r0, #1
     5f4:	9004      	str	r0, [sp, #16]
     5f6:	e0ea      	b.n	7ce <cbvprintf_package+0x28a>
			switch (*fmt) {
     5f8:	287a      	cmp	r0, #122	; 0x7a
     5fa:	d860      	bhi.n	6be <cbvprintf_package+0x17a>
     5fc:	284b      	cmp	r0, #75	; 0x4b
     5fe:	d80e      	bhi.n	61e <cbvprintf_package+0xda>
     600:	2847      	cmp	r0, #71	; 0x47
     602:	d85c      	bhi.n	6be <cbvprintf_package+0x17a>
     604:	2829      	cmp	r0, #41	; 0x29
     606:	d82f      	bhi.n	668 <cbvprintf_package+0x124>
     608:	2825      	cmp	r0, #37	; 0x25
     60a:	d055      	beq.n	6b8 <cbvprintf_package+0x174>
     60c:	d857      	bhi.n	6be <cbvprintf_package+0x17a>
     60e:	2820      	cmp	r0, #32
     610:	d07d      	beq.n	70e <cbvprintf_package+0x1ca>
     612:	3823      	subs	r0, #35	; 0x23
     614:	f1d0 0b00 	rsbs	fp, r0, #0
     618:	eb4b 0b00 	adc.w	fp, fp, r0
     61c:	e077      	b.n	70e <cbvprintf_package+0x1ca>
     61e:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     622:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     626:	d84a      	bhi.n	6be <cbvprintf_package+0x17a>
     628:	e8df f00c 	tbb	[pc, ip]
     62c:	49494971 	.word	0x49494971
     630:	49494949 	.word	0x49494949
     634:	49494949 	.word	0x49494949
     638:	4949494c 	.word	0x4949494c
     63c:	49494949 	.word	0x49494949
     640:	4c495a49 	.word	0x4c495a49
     644:	5a5a5a4c 	.word	0x5a5a5a4c
     648:	496e4c71 	.word	0x496e4c71
     64c:	4c184971 	.word	0x4c184971
     650:	83494918 	.word	0x83494918
     654:	49494c80 	.word	0x49494c80
     658:	494c      	.short	0x494c
     65a:	80          	.byte	0x80
     65b:	00          	.byte	0x00
     65c:	2000      	movs	r0, #0
     65e:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
     662:	f04f 0a04 	mov.w	sl, #4
     666:	e039      	b.n	6dc <cbvprintf_package+0x198>
			switch (*fmt) {
     668:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     66c:	fa5f fc8c 	uxtb.w	ip, ip
     670:	2201      	movs	r2, #1
     672:	fa02 fc0c 	lsl.w	ip, r2, ip
     676:	ea1c 0f0e 	tst.w	ip, lr
     67a:	d148      	bne.n	70e <cbvprintf_package+0x1ca>
     67c:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
     680:	d12e      	bne.n	6e0 <cbvprintf_package+0x19c>
     682:	ea1c 0b02 	ands.w	fp, ip, r2
     686:	d042      	beq.n	70e <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
     688:	3c01      	subs	r4, #1
     68a:	4454      	add	r4, sl
     68c:	f1ca 0c00 	rsb	ip, sl, #0
     690:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     694:	2d00      	cmp	r5, #0
     696:	d061      	beq.n	75c <cbvprintf_package+0x218>
     698:	eba3 0c05 	sub.w	ip, r3, r5
     69c:	44a4      	add	ip, r4
     69e:	45b4      	cmp	ip, r6
     6a0:	f63f af68 	bhi.w	574 <cbvprintf_package+0x30>
		if (is_str_arg) {
     6a4:	2800      	cmp	r0, #0
     6a6:	d168      	bne.n	77a <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     6a8:	2b04      	cmp	r3, #4
     6aa:	d147      	bne.n	73c <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
     6ac:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
     6b0:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     6b2:	3404      	adds	r4, #4
     6b4:	2304      	movs	r3, #4
     6b6:	e02a      	b.n	70e <cbvprintf_package+0x1ca>
				arg_idx--;
     6b8:	9a01      	ldr	r2, [sp, #4]
     6ba:	3a01      	subs	r2, #1
     6bc:	9201      	str	r2, [sp, #4]
				parsing = false;
     6be:	f04f 0b00 	mov.w	fp, #0
				continue;
     6c2:	e024      	b.n	70e <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
     6c4:	f811 0c01 	ldrb.w	r0, [r1, #-1]
     6c8:	286c      	cmp	r0, #108	; 0x6c
     6ca:	d134      	bne.n	736 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
     6cc:	f811 3c02 	ldrb.w	r3, [r1, #-2]
     6d0:	2000      	movs	r0, #0
     6d2:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
     6d4:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
     6d6:	d1c4      	bne.n	662 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
     6d8:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
     6dc:	4653      	mov	r3, sl
     6de:	e7d3      	b.n	688 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
     6e0:	f108 0807 	add.w	r8, r8, #7
     6e4:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
     6e8:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
     6ea:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
     6ee:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
     6f2:	b135      	cbz	r5, 702 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
     6f4:	9806      	ldr	r0, [sp, #24]
     6f6:	4420      	add	r0, r4
     6f8:	42b0      	cmp	r0, r6
     6fa:	f63f af3b 	bhi.w	574 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
     6fe:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
     702:	3408      	adds	r4, #8
				parsing = false;
     704:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
     708:	f04f 0a08 	mov.w	sl, #8
     70c:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
     70e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     712:	2800      	cmp	r0, #0
     714:	d078      	beq.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
			if (!parsing) {
     716:	f1bb 0f00 	cmp.w	fp, #0
     71a:	f47f af6d 	bne.w	5f8 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
     71e:	2825      	cmp	r0, #37	; 0x25
     720:	d1f5      	bne.n	70e <cbvprintf_package+0x1ca>
					arg_idx++;
     722:	9b01      	ldr	r3, [sp, #4]
     724:	3301      	adds	r3, #1
     726:	9301      	str	r3, [sp, #4]
					parsing = true;
     728:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
     72c:	f04f 0a04 	mov.w	sl, #4
     730:	e7ec      	b.n	70c <cbvprintf_package+0x1c8>
			switch (*fmt) {
     732:	4658      	mov	r0, fp
     734:	e793      	b.n	65e <cbvprintf_package+0x11a>
     736:	2000      	movs	r0, #0
				parsing = false;
     738:	4683      	mov	fp, r0
     73a:	e7a5      	b.n	688 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
     73c:	2b08      	cmp	r3, #8
     73e:	d002      	beq.n	746 <cbvprintf_package+0x202>
					return -EINVAL;
     740:	f06f 0015 	mvn.w	r0, #21
     744:	e718      	b.n	578 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
     746:	f108 0807 	add.w	r8, r8, #7
     74a:	f028 0807 	bic.w	r8, r8, #7
     74e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
     752:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
     756:	3408      	adds	r4, #8
     758:	2308      	movs	r3, #8
     75a:	e7d8      	b.n	70e <cbvprintf_package+0x1ca>
		if (is_str_arg) {
     75c:	b968      	cbnz	r0, 77a <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     75e:	2b04      	cmp	r3, #4
     760:	d102      	bne.n	768 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
     762:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
     766:	e7a4      	b.n	6b2 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
     768:	2b08      	cmp	r3, #8
     76a:	d1e9      	bne.n	740 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
     76c:	f108 0807 	add.w	r8, r8, #7
     770:	f028 0807 	bic.w	r8, r8, #7
     774:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
     778:	e7ed      	b.n	756 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     77a:	9a05      	ldr	r2, [sp, #20]
     77c:	3a01      	subs	r2, #1
     77e:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
     780:	f858 2b04 	ldr.w	r2, [r8], #4
     784:	9200      	str	r2, [sp, #0]
     786:	e70d      	b.n	5a4 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
     788:	9a03      	ldr	r2, [sp, #12]
     78a:	0790      	lsls	r0, r2, #30
     78c:	d520      	bpl.n	7d0 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     78e:	eba4 0e05 	sub.w	lr, r4, r5
     792:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     796:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     79a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     79e:	d2cf      	bcs.n	740 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     7a0:	2f0f      	cmp	r7, #15
     7a2:	d8cd      	bhi.n	740 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     7a4:	b1f5      	cbz	r5, 7e4 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
     7a6:	f107 0240 	add.w	r2, r7, #64	; 0x40
     7aa:	eb0d 0e02 	add.w	lr, sp, r2
     7ae:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
     7b0:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     7b2:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     7b6:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
     7ba:	f1bc 0f00 	cmp.w	ip, #0
     7be:	f43f af17 	beq.w	5f0 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     7c2:	f060 007f 	orn	r0, r0, #127	; 0x7f
     7c6:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
     7ca:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
     7ce:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
     7d0:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
     7d4:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
     7d6:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
     7d8:	f64f 7eda 	movw	lr, #65498	; 0xffda
     7dc:	e797      	b.n	70e <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7de:	f04f 0c00 	mov.w	ip, #0
     7e2:	e7da      	b.n	79a <cbvprintf_package+0x256>
				} else if (is_ro) {
     7e4:	f1bc 0f00 	cmp.w	ip, #0
     7e8:	d001      	beq.n	7ee <cbvprintf_package+0x2aa>
					len += 1;
     7ea:	3601      	adds	r6, #1
     7ec:	e7ef      	b.n	7ce <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
     7ee:	9802      	ldr	r0, [sp, #8]
					len += 2;
     7f0:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
     7f2:	2800      	cmp	r0, #0
     7f4:	d1eb      	bne.n	7ce <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
     7f6:	9800      	ldr	r0, [sp, #0]
     7f8:	e9cd 3106 	strd	r3, r1, [sp, #24]
     7fc:	f00c fdf0 	bl	d3e0 <strlen>
     800:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
     804:	4406      	add	r6, r0
     806:	e7e2      	b.n	7ce <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
     808:	1b63      	subs	r3, r4, r5
     80a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     80e:	d297      	bcs.n	740 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
     810:	b945      	cbnz	r5, 824 <CONFIG_ISR_STACK_SIZE+0x24>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     812:	f1a6 0408 	sub.w	r4, r6, #8
     816:	18e0      	adds	r0, r4, r3
     818:	e6ae      	b.n	578 <cbvprintf_package+0x34>
     81a:	bf00      	nop
     81c:	0000e7e4 	.word	0x0000e7e4
     820:	000102c0 	.word	0x000102c0
	if (rws_pos_en) {
     824:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
     826:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     828:	089b      	lsrs	r3, r3, #2
     82a:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     82c:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
     830:	b1c2      	cbz	r2, 864 <CONFIG_ISR_STACK_SIZE+0x64>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     832:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     834:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
     838:	f1b9 0f00 	cmp.w	r9, #0
     83c:	d005      	beq.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
     83e:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     840:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
     842:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
     846:	4297      	cmp	r7, r2
     848:	d10e      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
		if (BUF_OFFSET + 1 + size > len) {
     84a:	f1c5 0301 	rsb	r3, r5, #1
     84e:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
     852:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
     856:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
     858:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
     85c:	4557      	cmp	r7, sl
     85e:	d112      	bne.n	886 <CONFIG_ISR_STACK_SIZE+0x86>
	return BUF_OFFSET;
     860:	1b60      	subs	r0, r4, r5
     862:	e689      	b.n	578 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     864:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
     866:	e7e5      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     868:	f810 3b01 	ldrb.w	r3, [r0], #1
     86c:	0619      	lsls	r1, r3, #24
     86e:	d508      	bpl.n	882 <CONFIG_ISR_STACK_SIZE+0x82>
			if (BUF_OFFSET + 1 > len) {
     870:	eb04 0e0c 	add.w	lr, r4, ip
     874:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     87a:	f63f ae7b 	bhi.w	574 <cbvprintf_package+0x30>
			*buf++ = pos;
     87e:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
     882:	3201      	adds	r2, #1
     884:	e7df      	b.n	846 <CONFIG_ISR_STACK_SIZE+0x46>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     886:	f1b9 0f00 	cmp.w	r9, #0
     88a:	d003      	beq.n	894 <CONFIG_ISR_STACK_SIZE+0x94>
     88c:	f998 2000 	ldrsb.w	r2, [r8]
     890:	2a00      	cmp	r2, #0
     892:	db17      	blt.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
		if (rws_pos_en) {
     894:	9b02      	ldr	r3, [sp, #8]
     896:	b1d3      	cbz	r3, 8ce <CONFIG_ISR_STACK_SIZE+0xce>
			*buf++ = str_ptr_arg[i];
     898:	f81a 200b 	ldrb.w	r2, [sl, fp]
     89c:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
     8a0:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
     8a2:	9b01      	ldr	r3, [sp, #4]
     8a4:	1898      	adds	r0, r3, r2
     8a6:	4420      	add	r0, r4
     8a8:	42b0      	cmp	r0, r6
     8aa:	f63f ae63 	bhi.w	574 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
     8ae:	f898 0000 	ldrb.w	r0, [r8]
     8b2:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
     8b6:	9900      	ldr	r1, [sp, #0]
     8b8:	9203      	str	r2, [sp, #12]
     8ba:	4620      	mov	r0, r4
     8bc:	f00c fda0 	bl	d400 <memcpy>
		buf += size;
     8c0:	9a03      	ldr	r2, [sp, #12]
     8c2:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     8c4:	f10a 0a01 	add.w	sl, sl, #1
     8c8:	f108 0801 	add.w	r8, r8, #1
     8cc:	e7c6      	b.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     8ce:	f898 2000 	ldrb.w	r2, [r8]
     8d2:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
     8d6:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     8d8:	9b02      	ldr	r3, [sp, #8]
     8da:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     8de:	9800      	ldr	r0, [sp, #0]
     8e0:	f00c fd7e 	bl	d3e0 <strlen>
     8e4:	1c42      	adds	r2, r0, #1
     8e6:	e7dc      	b.n	8a2 <CONFIG_ISR_STACK_SIZE+0xa2>
		return -EFAULT;
     8e8:	f06f 000d 	mvn.w	r0, #13
     8ec:	e644      	b.n	578 <cbvprintf_package+0x34>
     8ee:	bf00      	nop

000008f0 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8f4:	b095      	sub	sp, #84	; 0x54
     8f6:	af00      	add	r7, sp, #0
     8f8:	4604      	mov	r4, r0
     8fa:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
     8fe:	61bb      	str	r3, [r7, #24]
     900:	f3cb 03c0 	ubfx	r3, fp, #3, #1
     904:	627a      	str	r2, [r7, #36]	; 0x24
     906:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     908:	6239      	str	r1, [r7, #32]
     90a:	b951      	cbnz	r1, 922 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
     90c:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
     90e:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
     910:	7880      	ldrb	r0, [r0, #2]
     912:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     916:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
     918:	6a3b      	ldr	r3, [r7, #32]
     91a:	429e      	cmp	r6, r3
     91c:	d81a      	bhi.n	954 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
     91e:	1b03      	subs	r3, r0, r4
     920:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     922:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     926:	78e3      	ldrb	r3, [r4, #3]
     928:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
     92a:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
     92c:	f1ba 0f00 	cmp.w	sl, #0
     930:	d002      	beq.n	938 <cbprintf_package_convert+0x48>
     932:	f01b 0f01 	tst.w	fp, #1
     936:	d117      	bne.n	968 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
     938:	697b      	ldr	r3, [r7, #20]
     93a:	bb5b      	cbnz	r3, 994 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
     93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     93e:	b11b      	cbz	r3, 948 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
     940:	69ba      	ldr	r2, [r7, #24]
     942:	6a39      	ldr	r1, [r7, #32]
     944:	4620      	mov	r0, r4
     946:	4798      	blx	r3
		}

		return in_len;
     948:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     94a:	4628      	mov	r0, r5
     94c:	3754      	adds	r7, #84	; 0x54
     94e:	46bd      	mov	sp, r7
     950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
     954:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
     956:	4628      	mov	r0, r5
     958:	f00c fd42 	bl	d3e0 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
     95c:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
     95e:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
     960:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
     962:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
     964:	623b      	str	r3, [r7, #32]
     966:	e7d7      	b.n	918 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
     968:	f894 8000 	ldrb.w	r8, [r4]
     96c:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     96e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
     972:	ea4f 0288 	mov.w	r2, r8, lsl #2
     976:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
     978:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
     97c:	2b00      	cmp	r3, #0
     97e:	f040 8101 	bne.w	b84 <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
     982:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
     984:	46c1      	mov	r9, r8
     986:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
     98a:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
     98c:	454b      	cmp	r3, r9
     98e:	d14e      	bne.n	a2e <cbprintf_package_convert+0x13e>
     990:	44d0      	add	r8, sl
     992:	e013      	b.n	9bc <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
     994:	f01b 0f02 	tst.w	fp, #2
     998:	d0d0      	beq.n	93c <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
     99a:	f894 8000 	ldrb.w	r8, [r4]
     99e:	ea4f 0388 	mov.w	r3, r8, lsl #2
     9a2:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     9a4:	6863      	ldr	r3, [r4, #4]
     9a6:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
     9aa:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
     9ae:	2b00      	cmp	r3, #0
     9b0:	d178      	bne.n	aa4 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
     9b2:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     9b4:	f1ba 0f00 	cmp.w	sl, #0
     9b8:	d14e      	bne.n	a58 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
     9ba:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
     9bc:	f01b 0f05 	tst.w	fp, #5
     9c0:	bf0c      	ite	eq
     9c2:	2302      	moveq	r3, #2
     9c4:	2301      	movne	r3, #1
     9c6:	627b      	str	r3, [r7, #36]	; 0x24
     9c8:	697b      	ldr	r3, [r7, #20]
     9ca:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     9ce:	f00b 0302 	and.w	r3, fp, #2
     9d2:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
     9d4:	45d0      	cmp	r8, sl
     9d6:	d0b8      	beq.n	94a <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
     9d8:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
     9dc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
     9e0:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
     9e4:	4bac      	ldr	r3, [pc, #688]	; (c98 <cbprintf_package_convert+0x3a8>)
     9e6:	4599      	cmp	r9, r3
     9e8:	d302      	bcc.n	9f0 <cbprintf_package_convert+0x100>
     9ea:	4bac      	ldr	r3, [pc, #688]	; (c9c <cbprintf_package_convert+0x3ac>)
     9ec:	4599      	cmp	r9, r3
     9ee:	d339      	bcc.n	a64 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     9f0:	693b      	ldr	r3, [r7, #16]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d043      	beq.n	a7e <cbprintf_package_convert+0x18e>
     9f6:	69f8      	ldr	r0, [r7, #28]
     9f8:	f00b fc0f 	bl	c21a <is_ptr>
     9fc:	2800      	cmp	r0, #0
     9fe:	d03e      	beq.n	a7e <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     a00:	46e9      	mov	r9, sp
     a02:	b08a      	sub	sp, #40	; 0x28
     a04:	466a      	mov	r2, sp
     a06:	4ba6      	ldr	r3, [pc, #664]	; (ca0 <cbprintf_package_convert+0x3b0>)
     a08:	6153      	str	r3, [r2, #20]
     a0a:	69fb      	ldr	r3, [r7, #28]
     a0c:	e9c2 3106 	strd	r3, r1, [r2, #24]
     a10:	f44f 7300 	mov.w	r3, #512	; 0x200
     a14:	8413      	strh	r3, [r2, #32]
     a16:	4ba3      	ldr	r3, [pc, #652]	; (ca4 <cbprintf_package_convert+0x3b4>)
     a18:	f842 3f10 	str.w	r3, [r2, #16]!
     a1c:	48a2      	ldr	r0, [pc, #648]	; (ca8 <cbprintf_package_convert+0x3b8>)
     a1e:	2300      	movs	r3, #0
     a20:	f44f 5112 	mov.w	r1, #9344	; 0x2480
     a24:	f001 f8ce 	bl	1bc4 <z_impl_z_log_msg_static_create>
				out_len -= 2;
     a28:	3d02      	subs	r5, #2
     a2a:	46cd      	mov	sp, r9
				continue;
     a2c:	e7d2      	b.n	9d4 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
     a2e:	f819 2b01 	ldrb.w	r2, [r9], #1
     a32:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     a34:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
     a38:	f00c fcd2 	bl	d3e0 <strlen>
				if (strl && strl_cnt < strl_len) {
     a3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
     a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     a40:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     a42:	b13a      	cbz	r2, a54 <cbprintf_package_convert+0x164>
     a44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
     a48:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
     a4a:	bf3e      	ittt	cc
     a4c:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
     a4e:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
     a52:	3601      	addcc	r6, #1
				out_len += len;
     a54:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
     a56:	e799      	b.n	98c <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     a58:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
     a5c:	bf1c      	itt	ne
     a5e:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
     a60:	44d0      	addne	r8, sl
     a62:	e7ab      	b.n	9bc <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     a64:	693b      	ldr	r3, [r7, #16]
     a66:	b123      	cbz	r3, a72 <cbprintf_package_convert+0x182>
     a68:	69f8      	ldr	r0, [r7, #28]
     a6a:	f00b fbd6 	bl	c21a <is_ptr>
     a6e:	2800      	cmp	r0, #0
     a70:	d1c6      	bne.n	a00 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     a72:	f01b 0f01 	tst.w	fp, #1
     a76:	d105      	bne.n	a84 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
     a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a7a:	1aed      	subs	r5, r5, r3
     a7c:	e7aa      	b.n	9d4 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     a7e:	6a3b      	ldr	r3, [r7, #32]
     a80:	2b00      	cmp	r3, #0
     a82:	d0a7      	beq.n	9d4 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
     a84:	4648      	mov	r0, r9
     a86:	f00c fcab 	bl	d3e0 <strlen>
				if (strl && strl_cnt < strl_len) {
     a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     a8c:	b143      	cbz	r3, aa0 <cbprintf_package_convert+0x1b0>
     a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     a92:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
     a94:	bf3f      	itttt	cc
     a96:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
     a98:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
     a9a:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
     a9e:	3601      	addcc	r6, #1
				out_len += (len - 1);
     aa0:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
     aa2:	e797      	b.n	9d4 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     aa4:	f1ba 0f00 	cmp.w	sl, #0
     aa8:	d071      	beq.n	b8e <cbprintf_package_convert+0x29e>
     aaa:	f01b 0604 	ands.w	r6, fp, #4
     aae:	d071      	beq.n	b94 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
     ab0:	46d1      	mov	r9, sl
		scpy_cnt = 0;
     ab2:	2600      	movs	r6, #0
		dst = keep_str_pos;
     ab4:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
     ab8:	4652      	mov	r2, sl
     aba:	4641      	mov	r1, r8
     abc:	f00c fca0 	bl	d400 <memcpy>
	str_pos += ros_nbr;
     ac0:	697b      	ldr	r3, [r7, #20]
     ac2:	005b      	lsls	r3, r3, #1
     ac4:	60bb      	str	r3, [r7, #8]
     ac6:	697b      	ldr	r3, [r7, #20]
     ac8:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
     aca:	eb08 0343 	add.w	r3, r8, r3, lsl #1
     ace:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     ad0:	f00b 0302 	and.w	r3, fp, #2
     ad4:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
     ad6:	697b      	ldr	r3, [r7, #20]
     ad8:	4598      	cmp	r8, r3
     ada:	d15d      	bne.n	b98 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
     adc:	7823      	ldrb	r3, [r4, #0]
     ade:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     ae0:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     ae2:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     ae6:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     aea:	bf0c      	ite	eq
     aec:	ea4f 0159 	moveq.w	r1, r9, lsr #1
     af0:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     af2:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     af6:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     af8:	f040 809d 	bne.w	c36 <cbprintf_package_convert+0x346>
     afc:	f01b 0f04 	tst.w	fp, #4
     b00:	bf14      	ite	ne
     b02:	4648      	movne	r0, r9
     b04:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     b06:	f894 b002 	ldrb.w	fp, [r4, #2]
     b0a:	f894 8003 	ldrb.w	r8, [r4, #3]
     b0e:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
     b10:	7062      	strb	r2, [r4, #1]
     b12:	70a0      	strb	r0, [r4, #2]
     b14:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
     b16:	69ba      	ldr	r2, [r7, #24]
     b18:	68f9      	ldr	r1, [r7, #12]
     b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b1c:	4620      	mov	r0, r4
     b1e:	4798      	blx	r3
	if (rv < 0) {
     b20:	1e05      	subs	r5, r0, #0
     b22:	f6ff af12 	blt.w	94a <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
     b26:	69fb      	ldr	r3, [r7, #28]
     b28:	7023      	strb	r3, [r4, #0]
     b2a:	693b      	ldr	r3, [r7, #16]
     b2c:	7063      	strb	r3, [r4, #1]
     b2e:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     b32:	69ba      	ldr	r2, [r7, #24]
     b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
     b36:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     b3a:	4649      	mov	r1, r9
     b3c:	f107 0040 	add.w	r0, r7, #64	; 0x40
     b40:	4798      	blx	r3
	if (rv < 0) {
     b42:	f1b0 0800 	subs.w	r8, r0, #0
     b46:	f2c0 80a3 	blt.w	c90 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     b4a:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
     b4c:	69ba      	ldr	r2, [r7, #24]
     b4e:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     b50:	eba3 010a 	sub.w	r1, r3, sl
     b54:	68fb      	ldr	r3, [r7, #12]
     b56:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
     b58:	68bb      	ldr	r3, [r7, #8]
     b5a:	1ac9      	subs	r1, r1, r3
     b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b5e:	4798      	blx	r3
	if (rv < 0) {
     b60:	2800      	cmp	r0, #0
     b62:	f2c0 8097 	blt.w	c94 <cbprintf_package_convert+0x3a4>
	out_len += rv;
     b66:	44a8      	add	r8, r5
	out_len += rv;
     b68:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     b6c:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
     b70:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     b74:	45b3      	cmp	fp, r6
     b76:	d360      	bcc.n	c3a <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
     b78:	2100      	movs	r1, #0
     b7a:	69ba      	ldr	r2, [r7, #24]
     b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b7e:	4608      	mov	r0, r1
     b80:	4798      	blx	r3
	return out_len;
     b82:	e6e2      	b.n	94a <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
     b84:	f04f 0900 	mov.w	r9, #0
     b88:	f107 0030 	add.w	r0, r7, #48	; 0x30
     b8c:	e794      	b.n	ab8 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
     b8e:	4656      	mov	r6, sl
		keep_cnt = 0;
     b90:	46d1      	mov	r9, sl
     b92:	e795      	b.n	ac0 <cbprintf_package_convert+0x1d0>
     b94:	46b1      	mov	r9, r6
     b96:	e793      	b.n	ac0 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
     b98:	f818 1b02 	ldrb.w	r1, [r8], #2
     b9c:	4a3e      	ldr	r2, [pc, #248]	; (c98 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
     b9e:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
     ba2:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
     ba6:	4293      	cmp	r3, r2
     ba8:	d302      	bcc.n	bb0 <cbprintf_package_convert+0x2c0>
     baa:	4a3c      	ldr	r2, [pc, #240]	; (c9c <cbprintf_package_convert+0x3ac>)
     bac:	4293      	cmp	r3, r2
     bae:	d31c      	bcc.n	bea <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     bb0:	693b      	ldr	r3, [r7, #16]
     bb2:	b123      	cbz	r3, bbe <cbprintf_package_convert+0x2ce>
     bb4:	69f8      	ldr	r0, [r7, #28]
     bb6:	f00b fb30 	bl	c21a <is_ptr>
     bba:	2800      	cmp	r0, #0
     bbc:	d18b      	bne.n	ad6 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	b9f3      	cbnz	r3, c00 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
     bc2:	f109 0228 	add.w	r2, r9, #40	; 0x28
     bc6:	f107 0028 	add.w	r0, r7, #40	; 0x28
     bca:	4402      	add	r2, r0
     bcc:	f109 0301 	add.w	r3, r9, #1
     bd0:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
     bd4:	f107 0250 	add.w	r2, r7, #80	; 0x50
     bd8:	fa52 f383 	uxtab	r3, r2, r3
     bdc:	f109 0902 	add.w	r9, r9, #2
     be0:	fa5f f989 	uxtb.w	r9, r9
     be4:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
     be8:	e775      	b.n	ad6 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     bea:	693b      	ldr	r3, [r7, #16]
     bec:	b12b      	cbz	r3, bfa <cbprintf_package_convert+0x30a>
     bee:	69f8      	ldr	r0, [r7, #28]
     bf0:	f00b fb13 	bl	c21a <is_ptr>
     bf4:	2800      	cmp	r0, #0
     bf6:	f47f af6e 	bne.w	ad6 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     bfa:	f01b 0f01 	tst.w	fp, #1
     bfe:	d009      	beq.n	c14 <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
     c00:	f106 0228 	add.w	r2, r6, #40	; 0x28
     c04:	f107 0128 	add.w	r1, r7, #40	; 0x28
     c08:	1c73      	adds	r3, r6, #1
     c0a:	1856      	adds	r6, r2, r1
     c0c:	f806 5c20 	strb.w	r5, [r6, #-32]
     c10:	b2de      	uxtb	r6, r3
     c12:	e760      	b.n	ad6 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     c14:	f01b 0f04 	tst.w	fp, #4
     c18:	f43f af5d 	beq.w	ad6 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
     c1c:	f109 0228 	add.w	r2, r9, #40	; 0x28
     c20:	f107 0128 	add.w	r1, r7, #40	; 0x28
     c24:	f109 0301 	add.w	r3, r9, #1
     c28:	eb02 0901 	add.w	r9, r2, r1
     c2c:	f809 5c10 	strb.w	r5, [r9, #-16]
     c30:	fa5f f983 	uxtb.w	r9, r3
     c34:	e74f      	b.n	ad6 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     c36:	2000      	movs	r0, #0
     c38:	e765      	b.n	b06 <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
     c3a:	f81b 300a 	ldrb.w	r3, [fp, sl]
     c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
     c42:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     c48:	b1fb      	cbz	r3, c8a <cbprintf_package_convert+0x39a>
     c4a:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
     c4e:	69ba      	ldr	r2, [r7, #24]
     c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c52:	2101      	movs	r1, #1
     c54:	f107 002f 	add.w	r0, r7, #47	; 0x2f
     c58:	4798      	blx	r3
		if (rv < 0) {
     c5a:	2800      	cmp	r0, #0
     c5c:	db1a      	blt.n	c94 <cbprintf_package_convert+0x3a4>
		out_len += rv;
     c5e:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
     c60:	f1b8 0f00 	cmp.w	r8, #0
     c64:	d106      	bne.n	c74 <cbprintf_package_convert+0x384>
     c66:	4648      	mov	r0, r9
     c68:	f00c fbba 	bl	d3e0 <strlen>
     c6c:	f100 0801 	add.w	r8, r0, #1
     c70:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
     c74:	69ba      	ldr	r2, [r7, #24]
     c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c78:	4641      	mov	r1, r8
     c7a:	4648      	mov	r0, r9
     c7c:	4798      	blx	r3
		if (rv < 0) {
     c7e:	2800      	cmp	r0, #0
     c80:	db08      	blt.n	c94 <cbprintf_package_convert+0x3a4>
		out_len += rv;
     c82:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     c84:	f10b 0b01 	add.w	fp, fp, #1
     c88:	e774      	b.n	b74 <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
     c8a:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
     c8e:	e7de      	b.n	c4e <cbprintf_package_convert+0x35e>
     c90:	4645      	mov	r5, r8
     c92:	e65a      	b.n	94a <cbprintf_package_convert+0x5a>
     c94:	4605      	mov	r5, r0
     c96:	e658      	b.n	94a <cbprintf_package_convert+0x5a>
     c98:	0000e7e4 	.word	0x0000e7e4
     c9c:	000102c0 	.word	0x000102c0
     ca0:	0000f183 	.word	0x0000f183
     ca4:	01000004 	.word	0x01000004
     ca8:	0000eafc 	.word	0x0000eafc

00000cac <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
     cac:	4b01      	ldr	r3, [pc, #4]	; (cb4 <__printk_hook_install+0x8>)
     cae:	6018      	str	r0, [r3, #0]
}
     cb0:	4770      	bx	lr
     cb2:	bf00      	nop
     cb4:	200000b0 	.word	0x200000b0

00000cb8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     cb8:	b530      	push	{r4, r5, lr}
     cba:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
     cbc:	2500      	movs	r5, #0
     cbe:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
     cc2:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     cc4:	9500      	str	r5, [sp, #0]
     cc6:	a903      	add	r1, sp, #12
     cc8:	4805      	ldr	r0, [pc, #20]	; (ce0 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
     cca:	9505      	str	r5, [sp, #20]
     ccc:	f000 f918 	bl	f00 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     cd0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
     cd4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     cd6:	bfb8      	it	lt
     cd8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     cda:	b007      	add	sp, #28
     cdc:	bd30      	pop	{r4, r5, pc}
     cde:	bf00      	nop
     ce0:	0000c269 	.word	0x0000c269

00000ce4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     ce8:	8b05      	ldrh	r5, [r0, #24]
{
     cea:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     cec:	0728      	lsls	r0, r5, #28
{
     cee:	4690      	mov	r8, r2
	if (processing) {
     cf0:	d411      	bmi.n	d16 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     cf2:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cf4:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     cf8:	f040 80cd 	bne.w	e96 <process_event+0x1b2>
			evt = process_recheck(mgr);
     cfc:	4620      	mov	r0, r4
     cfe:	f00b fcca 	bl	c696 <process_recheck>
		}

		if (evt == EVT_NOP) {
     d02:	b178      	cbz	r0, d24 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     d04:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d06:	8b21      	ldrh	r1, [r4, #24]
     d08:	2804      	cmp	r0, #4
     d0a:	d811      	bhi.n	d30 <process_event+0x4c>
     d0c:	e8df f000 	tbb	[pc, r0]
     d10:	856d10c3 	.word	0x856d10c3
     d14:	95          	.byte	0x95
     d15:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     d16:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     d18:	bf0c      	ite	eq
     d1a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     d1e:	f045 0520 	orrne.w	r5, r5, #32
     d22:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d24:	f388 8811 	msr	BASEPRI, r8
     d28:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d30:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d34:	45aa      	cmp	sl, r5
     d36:	f000 80a6 	beq.w	e86 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     d3a:	2700      	movs	r7, #0
     d3c:	46b9      	mov	r9, r7
     d3e:	463e      	mov	r6, r7
     d40:	68a3      	ldr	r3, [r4, #8]
     d42:	2b00      	cmp	r3, #0
     d44:	f000 80bd 	beq.w	ec2 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d48:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     d4c:	8321      	strh	r1, [r4, #24]
     d4e:	f388 8811 	msr	BASEPRI, r8
     d52:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     d56:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     d58:	2900      	cmp	r1, #0
     d5a:	f000 80bb 	beq.w	ed4 <process_event+0x1f0>
	return node->next;
     d5e:	680d      	ldr	r5, [r1, #0]
     d60:	2900      	cmp	r1, #0
     d62:	f000 80b7 	beq.w	ed4 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     d66:	f8d1 8004 	ldr.w	r8, [r1, #4]
     d6a:	4633      	mov	r3, r6
     d6c:	4652      	mov	r2, sl
     d6e:	4620      	mov	r0, r4
     d70:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     d72:	2d00      	cmp	r5, #0
     d74:	d076      	beq.n	e64 <process_event+0x180>
     d76:	682b      	ldr	r3, [r5, #0]
     d78:	4629      	mov	r1, r5
     d7a:	461d      	mov	r5, r3
     d7c:	e7f0      	b.n	d60 <process_event+0x7c>
     d7e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     d82:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     d84:	2a01      	cmp	r2, #1
     d86:	d81b      	bhi.n	dc0 <process_event+0xdc>
	list->head = NULL;
     d88:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d8a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     d8e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     d90:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d92:	b289      	uxth	r1, r1
	list->tail = NULL;
     d94:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     d98:	d109      	bne.n	dae <process_event+0xca>
     d9a:	463b      	mov	r3, r7
     d9c:	e003      	b.n	da6 <process_event+0xc2>
				mgr->refs += 1U;
     d9e:	8b62      	ldrh	r2, [r4, #26]
     da0:	3201      	adds	r2, #1
     da2:	8362      	strh	r2, [r4, #26]
	return node->next;
     da4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     da6:	2b00      	cmp	r3, #0
     da8:	d1f9      	bne.n	d9e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     daa:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     dae:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     db0:	4620      	mov	r0, r4
     db2:	f00b fc70 	bl	c696 <process_recheck>
     db6:	2800      	cmp	r0, #0
     db8:	d07b      	beq.n	eb2 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     dba:	f041 0120 	orr.w	r1, r1, #32
     dbe:	e077      	b.n	eb0 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     dc0:	2b04      	cmp	r3, #4
     dc2:	d10a      	bne.n	dda <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dc4:	f021 0107 	bic.w	r1, r1, #7
     dc8:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     dca:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     dcc:	4620      	mov	r0, r4
     dce:	f00b fc62 	bl	c696 <process_recheck>
     dd2:	b110      	cbz	r0, dda <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     dd4:	f041 0120 	orr.w	r1, r1, #32
     dd8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     dda:	8b21      	ldrh	r1, [r4, #24]
     ddc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     de0:	45aa      	cmp	sl, r5
     de2:	d050      	beq.n	e86 <process_event+0x1a2>
     de4:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     de6:	46b9      	mov	r9, r7
     de8:	e7aa      	b.n	d40 <process_event+0x5c>
			transit = mgr->transitions->start;
     dea:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dec:	f021 0107 	bic.w	r1, r1, #7
     df0:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     df4:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     df6:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     dfa:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     dfc:	d12d      	bne.n	e5a <process_event+0x176>
		    || (transit != NULL)) {
     dfe:	f1b9 0f00 	cmp.w	r9, #0
     e02:	d040      	beq.n	e86 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     e04:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     e08:	8321      	strh	r1, [r4, #24]
     e0a:	f388 8811 	msr	BASEPRI, r8
     e0e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     e12:	493a      	ldr	r1, [pc, #232]	; (efc <process_event+0x218>)
     e14:	4620      	mov	r0, r4
     e16:	47c8      	blx	r9
     e18:	e029      	b.n	e6e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e1a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     e1e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e20:	f041 0104 	orr.w	r1, r1, #4
     e24:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     e26:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     e28:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     e2c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     e2e:	d0e6      	beq.n	dfe <process_event+0x11a>
     e30:	2700      	movs	r7, #0
		res = 0;
     e32:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e34:	f04f 0a04 	mov.w	sl, #4
     e38:	e782      	b.n	d40 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e3a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     e3e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e40:	f041 0105 	orr.w	r1, r1, #5
     e44:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     e46:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     e48:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     e4c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     e4e:	d0d6      	beq.n	dfe <process_event+0x11a>
     e50:	2700      	movs	r7, #0
		res = 0;
     e52:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e54:	f04f 0a05 	mov.w	sl, #5
     e58:	e772      	b.n	d40 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     e5a:	2700      	movs	r7, #0
		res = 0;
     e5c:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e5e:	f04f 0a06 	mov.w	sl, #6
     e62:	e76d      	b.n	d40 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e64:	462b      	mov	r3, r5
     e66:	e787      	b.n	d78 <process_event+0x94>
			if (transit != NULL) {
     e68:	f1b9 0f00 	cmp.w	r9, #0
     e6c:	d1d1      	bne.n	e12 <process_event+0x12e>
	__asm__ volatile(
     e6e:	f04f 0320 	mov.w	r3, #32
     e72:	f3ef 8811 	mrs	r8, BASEPRI
     e76:	f383 8812 	msr	BASEPRI_MAX, r3
     e7a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     e7e:	8b23      	ldrh	r3, [r4, #24]
     e80:	f023 0308 	bic.w	r3, r3, #8
     e84:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     e86:	8b25      	ldrh	r5, [r4, #24]
     e88:	06ea      	lsls	r2, r5, #27
     e8a:	d52e      	bpl.n	eea <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     e8c:	f025 0310 	bic.w	r3, r5, #16
     e90:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     e92:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     e96:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     e98:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     e9a:	2e00      	cmp	r6, #0
     e9c:	f6bf af6f 	bge.w	d7e <process_event+0x9a>
	list->head = NULL;
     ea0:	2300      	movs	r3, #0
		*clients = mgr->clients;
     ea2:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     ea4:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ea8:	f021 0107 	bic.w	r1, r1, #7
     eac:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     eb0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     eb2:	8b21      	ldrh	r1, [r4, #24]
     eb4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     eb8:	45aa      	cmp	sl, r5
     eba:	f04f 0900 	mov.w	r9, #0
     ebe:	f47f af3f 	bne.w	d40 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     ec2:	2f00      	cmp	r7, #0
     ec4:	d09b      	beq.n	dfe <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     ec6:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     eca:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     ecc:	f388 8811 	msr	BASEPRI, r8
     ed0:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     ed4:	2f00      	cmp	r7, #0
     ed6:	d0c7      	beq.n	e68 <process_event+0x184>
	return node->next;
     ed8:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     eda:	4639      	mov	r1, r7
     edc:	4633      	mov	r3, r6
     ede:	4652      	mov	r2, sl
     ee0:	4620      	mov	r0, r4
     ee2:	f00b fc04 	bl	c6ee <notify_one>
	list->head = node;
     ee6:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     ee8:	e7f4      	b.n	ed4 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     eea:	06ab      	lsls	r3, r5, #26
     eec:	f57f af1a 	bpl.w	d24 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     ef0:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     ef4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     ef6:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     efa:	e6ff      	b.n	cfc <process_event+0x18>
     efc:	0000c71b 	.word	0x0000c71b

00000f00 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f04:	4681      	mov	r9, r0
     f06:	b095      	sub	sp, #84	; 0x54
     f08:	468b      	mov	fp, r1
     f0a:	4617      	mov	r7, r2
     f0c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     f0e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     f10:	7838      	ldrb	r0, [r7, #0]
     f12:	b908      	cbnz	r0, f18 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     f14:	4628      	mov	r0, r5
     f16:	e358      	b.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
			OUTC(*fp++);
     f18:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     f1a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     f1c:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     f1e:	d006      	beq.n	f2e <z_cbvprintf_impl+0x2e>
			OUTC('%');
     f20:	4659      	mov	r1, fp
     f22:	47c8      	blx	r9
     f24:	2800      	cmp	r0, #0
     f26:	f2c0 8350 	blt.w	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
     f2a:	3501      	adds	r5, #1
		if (bps == NULL) {
     f2c:	e1fb      	b.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
		} state = {
     f2e:	2218      	movs	r2, #24
     f30:	2100      	movs	r1, #0
     f32:	a80e      	add	r0, sp, #56	; 0x38
     f34:	f00c fa6f 	bl	d416 <memset>
	if (*sp == '%') {
     f38:	787b      	ldrb	r3, [r7, #1]
     f3a:	2b25      	cmp	r3, #37	; 0x25
     f3c:	d07d      	beq.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
     f3e:	2300      	movs	r3, #0
     f40:	1c78      	adds	r0, r7, #1
     f42:	4698      	mov	r8, r3
     f44:	469e      	mov	lr, r3
     f46:	469c      	mov	ip, r3
     f48:	461e      	mov	r6, r3
     f4a:	4601      	mov	r1, r0
		switch (*sp) {
     f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
     f50:	2a2b      	cmp	r2, #43	; 0x2b
     f52:	f000 80a1 	beq.w	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     f56:	f200 8098 	bhi.w	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
     f5a:	2a20      	cmp	r2, #32
     f5c:	f000 809f 	beq.w	109e <CONFIG_FPROTECT_BLOCK_SIZE+0x9e>
     f60:	2a23      	cmp	r2, #35	; 0x23
     f62:	f000 809f 	beq.w	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
     f66:	b12b      	cbz	r3, f74 <z_cbvprintf_impl+0x74>
     f68:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     f70:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     f74:	f1b8 0f00 	cmp.w	r8, #0
     f78:	d005      	beq.n	f86 <z_cbvprintf_impl+0x86>
     f7a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     f7e:	f043 0320 	orr.w	r3, r3, #32
     f82:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     f86:	f1be 0f00 	cmp.w	lr, #0
     f8a:	d005      	beq.n	f98 <z_cbvprintf_impl+0x98>
     f8c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     f90:	f043 0310 	orr.w	r3, r3, #16
     f94:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     f98:	f1bc 0f00 	cmp.w	ip, #0
     f9c:	d005      	beq.n	faa <z_cbvprintf_impl+0xaa>
     f9e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     fa2:	f043 0308 	orr.w	r3, r3, #8
     fa6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     faa:	b12e      	cbz	r6, fb8 <z_cbvprintf_impl+0xb8>
     fac:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     fb0:	f043 0304 	orr.w	r3, r3, #4
     fb4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     fb8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     fbc:	f003 0044 	and.w	r0, r3, #68	; 0x44
     fc0:	2844      	cmp	r0, #68	; 0x44
     fc2:	d103      	bne.n	fcc <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     fc4:	f36f 1386 	bfc	r3, #6, #1
     fc8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     fcc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     fd0:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     fd6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     fda:	d17f      	bne.n	10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>
		conv->width_star = true;
     fdc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     fe0:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     fe4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     fe6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     fea:	781a      	ldrb	r2, [r3, #0]
     fec:	2a2e      	cmp	r2, #46	; 0x2e
     fee:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     ff2:	bf0c      	ite	eq
     ff4:	2101      	moveq	r1, #1
     ff6:	2100      	movne	r1, #0
     ff8:	f361 0241 	bfi	r2, r1, #1, #1
     ffc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    1000:	d178      	bne.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
	if (*sp == '*') {
    1002:	785a      	ldrb	r2, [r3, #1]
    1004:	2a2a      	cmp	r2, #42	; 0x2a
    1006:	d06e      	beq.n	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
	++sp;
    1008:	3301      	adds	r3, #1
	size_t val = 0;
    100a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    100c:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1010:	4619      	mov	r1, r3
    1012:	f811 0b01 	ldrb.w	r0, [r1], #1
    1016:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    101a:	2e09      	cmp	r6, #9
    101c:	f240 8095 	bls.w	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
	conv->unsupported |= ((conv->prec_value < 0)
    1020:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    1024:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    1026:	f3c1 0040 	ubfx	r0, r1, #1, #1
    102a:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    102e:	460a      	mov	r2, r1
    1030:	f360 0241 	bfi	r2, r0, #1, #1
    1034:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1038:	e05c      	b.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
		conv->specifier = *sp++;
    103a:	1cba      	adds	r2, r7, #2
    103c:	9203      	str	r2, [sp, #12]
    103e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    1042:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1046:	07da      	lsls	r2, r3, #31
    1048:	f140 812e 	bpl.w	12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>
			width = va_arg(ap, int);
    104c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1050:	f1b8 0f00 	cmp.w	r8, #0
    1054:	da07      	bge.n	1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
				conv->flag_dash = true;
    1056:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    105a:	f042 0204 	orr.w	r2, r2, #4
    105e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    1062:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    1066:	075e      	lsls	r6, r3, #29
    1068:	f140 8127 	bpl.w	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
			int arg = va_arg(ap, int);
    106c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1070:	f1ba 0f00 	cmp.w	sl, #0
    1074:	f280 8126 	bge.w	12c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c4>
				conv->prec_present = false;
    1078:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    107c:	f36f 0341 	bfc	r3, #1, #1
    1080:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    1084:	f04f 3aff 	mov.w	sl, #4294967295
    1088:	e11c      	b.n	12c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c4>
		switch (*sp) {
    108a:	2a2d      	cmp	r2, #45	; 0x2d
    108c:	d00d      	beq.n	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
    108e:	2a30      	cmp	r2, #48	; 0x30
    1090:	f47f af69 	bne.w	f66 <z_cbvprintf_impl+0x66>
    1094:	2301      	movs	r3, #1
	} while (loop);
    1096:	e758      	b.n	f4a <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    1098:	f04f 0c01 	mov.w	ip, #1
    109c:	e755      	b.n	f4a <z_cbvprintf_impl+0x4a>
    109e:	f04f 0e01 	mov.w	lr, #1
    10a2:	e752      	b.n	f4a <z_cbvprintf_impl+0x4a>
    10a4:	f04f 0801 	mov.w	r8, #1
    10a8:	e74f      	b.n	f4a <z_cbvprintf_impl+0x4a>
    10aa:	2601      	movs	r6, #1
    10ac:	e74d      	b.n	f4a <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    10ae:	fb0e 6202 	mla	r2, lr, r2, r6
    10b2:	3a30      	subs	r2, #48	; 0x30
    10b4:	4603      	mov	r3, r0
    10b6:	4618      	mov	r0, r3
    10b8:	f810 6b01 	ldrb.w	r6, [r0], #1
    10bc:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    10c0:	f1bc 0f09 	cmp.w	ip, #9
    10c4:	d9f3      	bls.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
	if (sp != wp) {
    10c6:	4299      	cmp	r1, r3
    10c8:	d08f      	beq.n	fea <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    10ca:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    10ce:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    10d0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    10d2:	f362 0141 	bfi	r1, r2, #1, #1
    10d6:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    10da:	e786      	b.n	fea <z_cbvprintf_impl+0xea>
    10dc:	460b      	mov	r3, r1
	size_t val = 0;
    10de:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    10e0:	f04f 0e0a 	mov.w	lr, #10
    10e4:	e7e7      	b.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
		conv->prec_star = true;
    10e6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    10ea:	f042 0204 	orr.w	r2, r2, #4
    10ee:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    10f2:	3302      	adds	r3, #2
	switch (*sp) {
    10f4:	781a      	ldrb	r2, [r3, #0]
    10f6:	2a6c      	cmp	r2, #108	; 0x6c
    10f8:	d047      	beq.n	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    10fa:	d82b      	bhi.n	1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    10fc:	2a68      	cmp	r2, #104	; 0x68
    10fe:	d031      	beq.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
    1100:	2a6a      	cmp	r2, #106	; 0x6a
    1102:	d04b      	beq.n	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
    1104:	2a4c      	cmp	r2, #76	; 0x4c
    1106:	d051      	beq.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
	conv->specifier = *sp++;
    1108:	461a      	mov	r2, r3
    110a:	f812 3b01 	ldrb.w	r3, [r2], #1
    110e:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    1110:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    1112:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    1116:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    111a:	f200 80be 	bhi.w	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
    111e:	2b6d      	cmp	r3, #109	; 0x6d
    1120:	d851      	bhi.n	11c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c6>
    1122:	2b69      	cmp	r3, #105	; 0x69
    1124:	f200 80b9 	bhi.w	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
    1128:	2b57      	cmp	r3, #87	; 0x57
    112a:	d867      	bhi.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
    112c:	2b41      	cmp	r3, #65	; 0x41
    112e:	d003      	beq.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    1130:	3b45      	subs	r3, #69	; 0x45
    1132:	2b02      	cmp	r3, #2
    1134:	f200 80b1 	bhi.w	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
		conv->specifier_cat = SPECIFIER_FP;
    1138:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    113c:	2204      	movs	r2, #4
    113e:	f362 0302 	bfi	r3, r2, #0, #3
    1142:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    1146:	2301      	movs	r3, #1
			break;
    1148:	e073      	b.n	1232 <CONFIG_FPROTECT_BLOCK_SIZE+0x232>
		val = 10U * val + *sp++ - '0';
    114a:	fb0c 0202 	mla	r2, ip, r2, r0
    114e:	3a30      	subs	r2, #48	; 0x30
    1150:	460b      	mov	r3, r1
    1152:	e75d      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
	switch (*sp) {
    1154:	2a74      	cmp	r2, #116	; 0x74
    1156:	d025      	beq.n	11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
    1158:	2a7a      	cmp	r2, #122	; 0x7a
    115a:	d1d5      	bne.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
		conv->length_mod = LENGTH_Z;
    115c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1160:	2106      	movs	r1, #6
    1162:	e00c      	b.n	117e <CONFIG_FPROTECT_BLOCK_SIZE+0x17e>
		if (*++sp == 'h') {
    1164:	785a      	ldrb	r2, [r3, #1]
    1166:	2a68      	cmp	r2, #104	; 0x68
    1168:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    116c:	d106      	bne.n	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
			conv->length_mod = LENGTH_HH;
    116e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1170:	f361 02c6 	bfi	r2, r1, #3, #4
    1174:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    1178:	3302      	adds	r3, #2
    117a:	e7c5      	b.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
			conv->length_mod = LENGTH_H;
    117c:	2102      	movs	r1, #2
    117e:	f361 02c6 	bfi	r2, r1, #3, #4
    1182:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    1186:	3301      	adds	r3, #1
    1188:	e7be      	b.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
		if (*++sp == 'l') {
    118a:	785a      	ldrb	r2, [r3, #1]
    118c:	2a6c      	cmp	r2, #108	; 0x6c
    118e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1192:	d101      	bne.n	1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>
			conv->length_mod = LENGTH_LL;
    1194:	2104      	movs	r1, #4
    1196:	e7eb      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
			conv->length_mod = LENGTH_L;
    1198:	2103      	movs	r1, #3
    119a:	e7f0      	b.n	117e <CONFIG_FPROTECT_BLOCK_SIZE+0x17e>
		conv->length_mod = LENGTH_J;
    119c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    11a0:	2105      	movs	r1, #5
    11a2:	e7ec      	b.n	117e <CONFIG_FPROTECT_BLOCK_SIZE+0x17e>
		conv->length_mod = LENGTH_T;
    11a4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    11a8:	2107      	movs	r1, #7
    11aa:	e7e8      	b.n	117e <CONFIG_FPROTECT_BLOCK_SIZE+0x17e>
		conv->unsupported = true;
    11ac:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    11b0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    11b4:	f022 0202 	bic.w	r2, r2, #2
    11b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    11bc:	f042 0202 	orr.w	r2, r2, #2
    11c0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    11c4:	e7df      	b.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
	switch (conv->specifier) {
    11c6:	3b6e      	subs	r3, #110	; 0x6e
    11c8:	b2d9      	uxtb	r1, r3
    11ca:	2301      	movs	r3, #1
    11cc:	408b      	lsls	r3, r1
    11ce:	f240 4182 	movw	r1, #1154	; 0x482
    11d2:	420b      	tst	r3, r1
    11d4:	d137      	bne.n	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
    11d6:	f013 0f24 	tst.w	r3, #36	; 0x24
    11da:	d151      	bne.n	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
    11dc:	07d8      	lsls	r0, r3, #31
    11de:	d55c      	bpl.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
		conv->specifier_cat = SPECIFIER_PTR;
    11e0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    11e4:	2103      	movs	r1, #3
    11e6:	f361 0302 	bfi	r3, r1, #0, #3
    11ea:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    11ee:	f002 0378 	and.w	r3, r2, #120	; 0x78
    11f2:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    11f6:	424b      	negs	r3, r1
    11f8:	414b      	adcs	r3, r1
    11fa:	e01a      	b.n	1232 <CONFIG_FPROTECT_BLOCK_SIZE+0x232>
	switch (conv->specifier) {
    11fc:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    1200:	b2c9      	uxtb	r1, r1
    1202:	2001      	movs	r0, #1
    1204:	fa00 f101 	lsl.w	r1, r0, r1
    1208:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    120c:	d194      	bne.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    120e:	f640 0601 	movw	r6, #2049	; 0x801
    1212:	4231      	tst	r1, r6
    1214:	d11d      	bne.n	1252 <CONFIG_FPROTECT_BLOCK_SIZE+0x252>
    1216:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    121a:	d03e      	beq.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    121c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1220:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1224:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1228:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    122a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    122e:	d034      	beq.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
	bool unsupported = false;
    1230:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    1232:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1236:	f3c2 0140 	ubfx	r1, r2, #1, #1
    123a:	430b      	orrs	r3, r1
    123c:	f363 0241 	bfi	r2, r3, #1, #1
    1240:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1244:	e6fd      	b.n	1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
		conv->specifier_cat = SPECIFIER_UINT;
    1246:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    124a:	2102      	movs	r1, #2
    124c:	f361 0302 	bfi	r3, r1, #0, #3
    1250:	e7e8      	b.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    1252:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    1256:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    1258:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    125c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1260:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1262:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    1266:	bf02      	ittt	eq
    1268:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    126c:	f041 0101 	orreq.w	r1, r1, #1
    1270:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    1274:	2b63      	cmp	r3, #99	; 0x63
    1276:	d1db      	bne.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1278:	1e13      	subs	r3, r2, #0
    127a:	bf18      	it	ne
    127c:	2301      	movne	r3, #1
    127e:	e7d8      	b.n	1232 <CONFIG_FPROTECT_BLOCK_SIZE+0x232>
		conv->specifier_cat = SPECIFIER_PTR;
    1280:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1284:	2103      	movs	r1, #3
    1286:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    128a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    128e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    1292:	bf14      	ite	ne
    1294:	2301      	movne	r3, #1
    1296:	2300      	moveq	r3, #0
    1298:	e7cb      	b.n	1232 <CONFIG_FPROTECT_BLOCK_SIZE+0x232>
		conv->invalid = true;
    129a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    129e:	f043 0301 	orr.w	r3, r3, #1
    12a2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    12a6:	e7c3      	b.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
		} else if (conv->width_present) {
    12a8:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    12ac:	2a00      	cmp	r2, #0
			width = conv->width_value;
    12ae:	bfb4      	ite	lt
    12b0:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    12b4:	f04f 38ff 	movge.w	r8, #4294967295
    12b8:	e6d5      	b.n	1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
		} else if (conv->prec_present) {
    12ba:	0798      	lsls	r0, r3, #30
    12bc:	f57f aee2 	bpl.w	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
			precision = conv->prec_value;
    12c0:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    12c4:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    12c8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    12ca:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    12ce:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    12d2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    12d6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    12d8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    12dc:	d133      	bne.n	1346 <CONFIG_FPROTECT_BLOCK_SIZE+0x346>
			switch (length_mod) {
    12de:	1ecb      	subs	r3, r1, #3
    12e0:	2b04      	cmp	r3, #4
    12e2:	d804      	bhi.n	12ee <CONFIG_FPROTECT_BLOCK_SIZE+0x2ee>
    12e4:	e8df f003 	tbb	[pc, r3]
    12e8:	21464621 	.word	0x21464621
    12ec:	21          	.byte	0x21
    12ed:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    12ee:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    12f0:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    12f2:	ea4f 72e3 	mov.w	r2, r3, asr #31
    12f6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    12fa:	d11c      	bne.n	1336 <CONFIG_FPROTECT_BLOCK_SIZE+0x336>
				value->sint = (signed char)value->sint;
    12fc:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    1300:	17da      	asrs	r2, r3, #31
    1302:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    1306:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1308:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    130c:	f013 0603 	ands.w	r6, r3, #3
    1310:	d050      	beq.n	13b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b4>
			OUTS(sp, fp);
    1312:	9b03      	ldr	r3, [sp, #12]
    1314:	463a      	mov	r2, r7
    1316:	4659      	mov	r1, fp
    1318:	4648      	mov	r0, r9
    131a:	f00b fb2b 	bl	c974 <outs>
    131e:	2800      	cmp	r0, #0
    1320:	f2c0 8153 	blt.w	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    1324:	4405      	add	r5, r0
			continue;
    1326:	9f03      	ldr	r7, [sp, #12]
    1328:	e5f2      	b.n	f10 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    132a:	f854 3b04 	ldr.w	r3, [r4], #4
    132e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1330:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    1334:	e7e8      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
			} else if (length_mod == LENGTH_H) {
    1336:	2902      	cmp	r1, #2
    1338:	d1e5      	bne.n	1306 <CONFIG_FPROTECT_BLOCK_SIZE+0x306>
				value->sint = (short)value->sint;
    133a:	b21a      	sxth	r2, r3
    133c:	f343 33c0 	sbfx	r3, r3, #15, #1
    1340:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1344:	e7df      	b.n	1306 <CONFIG_FPROTECT_BLOCK_SIZE+0x306>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1346:	2b02      	cmp	r3, #2
    1348:	d124      	bne.n	1394 <CONFIG_FPROTECT_BLOCK_SIZE+0x394>
			switch (length_mod) {
    134a:	1ecb      	subs	r3, r1, #3
    134c:	2b04      	cmp	r3, #4
    134e:	d804      	bhi.n	135a <CONFIG_FPROTECT_BLOCK_SIZE+0x35a>
    1350:	e8df f003 	tbb	[pc, r3]
    1354:	18101018 	.word	0x18101018
    1358:	18          	.byte	0x18
    1359:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    135a:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    135c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1360:	f04f 0200 	mov.w	r2, #0
    1364:	d014      	beq.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
			} else if (length_mod == LENGTH_H) {
    1366:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1368:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    136c:	d1cc      	bne.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
				value->uint = (unsigned short)value->uint;
    136e:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1370:	930e      	str	r3, [sp, #56]	; 0x38
    1372:	e7c9      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
					(uint_value_type)va_arg(ap,
    1374:	3407      	adds	r4, #7
    1376:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    137a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    137e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1382:	e7c1      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
					(uint_value_type)va_arg(ap, size_t);
    1384:	f854 3b04 	ldr.w	r3, [r4], #4
    1388:	930e      	str	r3, [sp, #56]	; 0x38
    138a:	2300      	movs	r3, #0
    138c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    138e:	e7bb      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
				value->uint = (unsigned char)value->uint;
    1390:	b2db      	uxtb	r3, r3
    1392:	e7cd      	b.n	1330 <CONFIG_FPROTECT_BLOCK_SIZE+0x330>
		} else if (specifier_cat == SPECIFIER_FP) {
    1394:	2b04      	cmp	r3, #4
    1396:	d108      	bne.n	13aa <CONFIG_FPROTECT_BLOCK_SIZE+0x3aa>
					(sint_value_type)va_arg(ap, long long);
    1398:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    139a:	f024 0407 	bic.w	r4, r4, #7
    139e:	e9d4 2300 	ldrd	r2, r3, [r4]
    13a2:	3408      	adds	r4, #8
    13a4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    13a8:	e7ae      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
		} else if (specifier_cat == SPECIFIER_PTR) {
    13aa:	2b03      	cmp	r3, #3
    13ac:	d1ac      	bne.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
			value->ptr = va_arg(ap, void *);
    13ae:	f854 3b04 	ldr.w	r3, [r4], #4
    13b2:	e7dd      	b.n	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
		switch (conv->specifier) {
    13b4:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    13b8:	2878      	cmp	r0, #120	; 0x78
    13ba:	d8b4      	bhi.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
    13bc:	2862      	cmp	r0, #98	; 0x62
    13be:	d81c      	bhi.n	13fa <CONFIG_FPROTECT_BLOCK_SIZE+0x3fa>
    13c0:	2825      	cmp	r0, #37	; 0x25
    13c2:	f43f adad 	beq.w	f20 <z_cbvprintf_impl+0x20>
    13c6:	2858      	cmp	r0, #88	; 0x58
    13c8:	d1ad      	bne.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
			bps = encode_uint(value->uint, conv, buf, bpe);
    13ca:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    13ce:	9300      	str	r3, [sp, #0]
    13d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    13d4:	ab08      	add	r3, sp, #32
    13d6:	aa10      	add	r2, sp, #64	; 0x40
    13d8:	f00b fa86 	bl	c8e8 <encode_uint>
			if (precision >= 0) {
    13dc:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    13e0:	4607      	mov	r7, r0
			if (precision >= 0) {
    13e2:	f280 809a 	bge.w	151a <CONFIG_FPROTECT_BLOCK_SIZE+0x51a>
		if (bps == NULL) {
    13e6:	2f00      	cmp	r7, #0
    13e8:	d09d      	beq.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
		size_t nj_len = (bpe - bps);
    13ea:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    13ee:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    13f0:	2e00      	cmp	r6, #0
    13f2:	f000 80c1 	beq.w	1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>
			nj_len += 1U;
    13f6:	3001      	adds	r0, #1
    13f8:	e0be      	b.n	1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>
		switch (conv->specifier) {
    13fa:	3863      	subs	r0, #99	; 0x63
    13fc:	2815      	cmp	r0, #21
    13fe:	d892      	bhi.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
    1400:	a201      	add	r2, pc, #4	; (adr r2, 1408 <CONFIG_FPROTECT_BLOCK_SIZE+0x408>)
    1402:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1406:	bf00      	nop
    1408:	000014dd 	.word	0x000014dd
    140c:	000014ef 	.word	0x000014ef
    1410:	00001327 	.word	0x00001327
    1414:	00001327 	.word	0x00001327
    1418:	00001327 	.word	0x00001327
    141c:	00001327 	.word	0x00001327
    1420:	000014ef 	.word	0x000014ef
    1424:	00001327 	.word	0x00001327
    1428:	00001327 	.word	0x00001327
    142c:	00001327 	.word	0x00001327
    1430:	00001327 	.word	0x00001327
    1434:	0000157d 	.word	0x0000157d
    1438:	00001515 	.word	0x00001515
    143c:	0000153b 	.word	0x0000153b
    1440:	00001327 	.word	0x00001327
    1444:	00001327 	.word	0x00001327
    1448:	00001461 	.word	0x00001461
    144c:	00001327 	.word	0x00001327
    1450:	00001515 	.word	0x00001515
    1454:	00001327 	.word	0x00001327
    1458:	00001327 	.word	0x00001327
    145c:	00001515 	.word	0x00001515
			if (precision >= 0) {
    1460:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    1464:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    1466:	db35      	blt.n	14d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d4>
				len = strnlen(bps, precision);
    1468:	4651      	mov	r1, sl
    146a:	4638      	mov	r0, r7
    146c:	f00b ffbf 	bl	d3ee <strnlen>
			bpe = bps + len;
    1470:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    1474:	2f00      	cmp	r7, #0
    1476:	f43f af56 	beq.w	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
		char sign = 0;
    147a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    147c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1480:	f013 0210 	ands.w	r2, r3, #16
    1484:	9205      	str	r2, [sp, #20]
    1486:	f000 8093 	beq.w	15b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b0>
			nj_len += 2U;
    148a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    148c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    148e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1490:	bf48      	it	mi
    1492:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    1494:	9204      	str	r2, [sp, #16]
    1496:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1498:	bf48      	it	mi
    149a:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    149c:	f1b8 0f00 	cmp.w	r8, #0
    14a0:	f340 80a0 	ble.w	15e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e4>
			if (!conv->flag_dash) {
    14a4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    14a8:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    14ac:	f3c2 0380 	ubfx	r3, r2, #2, #1
    14b0:	0750      	lsls	r0, r2, #29
    14b2:	9306      	str	r3, [sp, #24]
    14b4:	f100 8096 	bmi.w	15e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e4>
				if (conv->flag_zero) {
    14b8:	0651      	lsls	r1, r2, #25
    14ba:	f140 8089 	bpl.w	15d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d0>
					if (sign != 0) {
    14be:	b13e      	cbz	r6, 14d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d0>
						OUTC(sign);
    14c0:	4659      	mov	r1, fp
    14c2:	4630      	mov	r0, r6
    14c4:	47c8      	blx	r9
    14c6:	2800      	cmp	r0, #0
    14c8:	db7f      	blt.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    14ca:	9b06      	ldr	r3, [sp, #24]
    14cc:	3501      	adds	r5, #1
    14ce:	461e      	mov	r6, r3
					pad = '0';
    14d0:	2230      	movs	r2, #48	; 0x30
    14d2:	e07e      	b.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
				len = strlen(bps);
    14d4:	4638      	mov	r0, r7
    14d6:	f00b ff83 	bl	d3e0 <strlen>
    14da:	e7c9      	b.n	1470 <CONFIG_FPROTECT_BLOCK_SIZE+0x470>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    14dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    14de:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    14e2:	2600      	movs	r6, #0
			bps = buf;
    14e4:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    14e6:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    14ea:	2001      	movs	r0, #1
    14ec:	e7c6      	b.n	147c <CONFIG_FPROTECT_BLOCK_SIZE+0x47c>
			if (conv->flag_plus) {
    14ee:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    14f0:	bf5c      	itt	pl
    14f2:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    14f6:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    14f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    14fc:	bf48      	it	mi
    14fe:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1500:	2b00      	cmp	r3, #0
    1502:	f6bf af62 	bge.w	13ca <CONFIG_FPROTECT_BLOCK_SIZE+0x3ca>
				value->uint = (uint_value_type)-sint;
    1506:	4252      	negs	r2, r2
    1508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    150c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1510:	262d      	movs	r6, #45	; 0x2d
    1512:	e75a      	b.n	13ca <CONFIG_FPROTECT_BLOCK_SIZE+0x3ca>
		switch (conv->specifier) {
    1514:	2600      	movs	r6, #0
    1516:	e758      	b.n	13ca <CONFIG_FPROTECT_BLOCK_SIZE+0x3ca>
		char sign = 0;
    1518:	2600      	movs	r6, #0
				conv->flag_zero = false;
    151a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    151e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1522:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    1524:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1528:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    152a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    152e:	f67f af5a 	bls.w	13e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e6>
					conv->pad0_value = precision - (int)len;
    1532:	ebaa 0303 	sub.w	r3, sl, r3
    1536:	9311      	str	r3, [sp, #68]	; 0x44
    1538:	e755      	b.n	13e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e6>
			if (value->ptr != NULL) {
    153a:	980e      	ldr	r0, [sp, #56]	; 0x38
    153c:	b390      	cbz	r0, 15a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    153e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1542:	9300      	str	r3, [sp, #0]
    1544:	aa10      	add	r2, sp, #64	; 0x40
    1546:	ab08      	add	r3, sp, #32
    1548:	2100      	movs	r1, #0
    154a:	f00b f9cd 	bl	c8e8 <encode_uint>
				conv->altform_0c = true;
    154e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    1552:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1556:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    155a:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    155e:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1562:	4607      	mov	r7, r0
				conv->altform_0c = true;
    1564:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1568:	dad6      	bge.n	1518 <CONFIG_FPROTECT_BLOCK_SIZE+0x518>
		if (bps == NULL) {
    156a:	2800      	cmp	r0, #0
    156c:	f43f aedb 	beq.w	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
		size_t nj_len = (bpe - bps);
    1570:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1574:	1a18      	subs	r0, r3, r0
		char sign = 0;
    1576:	2600      	movs	r6, #0
    1578:	469a      	mov	sl, r3
    157a:	e77f      	b.n	147c <CONFIG_FPROTECT_BLOCK_SIZE+0x47c>
				store_count(conv, value->ptr, count);
    157c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    157e:	2907      	cmp	r1, #7
    1580:	f63f aed1 	bhi.w	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
    1584:	e8df f001 	tbb	[pc, r1]
    1588:	0c06040c 	.word	0x0c06040c
    158c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1590:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1592:	e6c8      	b.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
		*(short *)dp = (short)count;
    1594:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    1596:	e6c6      	b.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
		*(intmax_t *)dp = (intmax_t)count;
    1598:	17ea      	asrs	r2, r5, #31
    159a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    159e:	e6c2      	b.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    15a0:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    15a2:	e6c0      	b.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
    15a4:	4f2e      	ldr	r7, [pc, #184]	; (1660 <CONFIG_FPROTECT_BLOCK_SIZE+0x660>)
		char sign = 0;
    15a6:	4606      	mov	r6, r0
			bpe = bps + 5;
    15a8:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    15ac:	2005      	movs	r0, #5
    15ae:	e765      	b.n	147c <CONFIG_FPROTECT_BLOCK_SIZE+0x47c>
		} else if (conv->altform_0) {
    15b0:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    15b2:	bf48      	it	mi
    15b4:	3001      	addmi	r0, #1
    15b6:	e769      	b.n	148c <CONFIG_FPROTECT_BLOCK_SIZE+0x48c>
    15b8:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    15ba:	4610      	mov	r0, r2
    15bc:	9206      	str	r2, [sp, #24]
    15be:	4659      	mov	r1, fp
    15c0:	47c8      	blx	r9
    15c2:	2800      	cmp	r0, #0
    15c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    15c8:	da04      	bge.n	15d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d4>
#undef OUTS
#undef OUTC
}
    15ca:	b015      	add	sp, #84	; 0x54
    15cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    15d0:	2220      	movs	r2, #32
					pad = '0';
    15d2:	4643      	mov	r3, r8
				while (width-- > 0) {
    15d4:	4619      	mov	r1, r3
    15d6:	2900      	cmp	r1, #0
    15d8:	f103 33ff 	add.w	r3, r3, #4294967295
    15dc:	dcec      	bgt.n	15b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b8>
    15de:	4445      	add	r5, r8
    15e0:	1a6d      	subs	r5, r5, r1
    15e2:	4698      	mov	r8, r3
		if (sign != 0) {
    15e4:	b12e      	cbz	r6, 15f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5f2>
			OUTC(sign);
    15e6:	4659      	mov	r1, fp
    15e8:	4630      	mov	r0, r6
    15ea:	47c8      	blx	r9
    15ec:	2800      	cmp	r0, #0
    15ee:	dbec      	blt.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    15f0:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    15f2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    15f6:	06da      	lsls	r2, r3, #27
    15f8:	d401      	bmi.n	15fe <CONFIG_FPROTECT_BLOCK_SIZE+0x5fe>
    15fa:	071b      	lsls	r3, r3, #28
    15fc:	d505      	bpl.n	160a <CONFIG_FPROTECT_BLOCK_SIZE+0x60a>
				OUTC('0');
    15fe:	4659      	mov	r1, fp
    1600:	2030      	movs	r0, #48	; 0x30
    1602:	47c8      	blx	r9
    1604:	2800      	cmp	r0, #0
    1606:	dbe0      	blt.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    1608:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    160a:	9b05      	ldr	r3, [sp, #20]
    160c:	b133      	cbz	r3, 161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
				OUTC(conv->specifier);
    160e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1612:	4659      	mov	r1, fp
    1614:	47c8      	blx	r9
    1616:	2800      	cmp	r0, #0
    1618:	dbd7      	blt.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    161a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    161c:	9e04      	ldr	r6, [sp, #16]
    161e:	442e      	add	r6, r5
    1620:	e005      	b.n	162e <CONFIG_FPROTECT_BLOCK_SIZE+0x62e>
				OUTC('0');
    1622:	4659      	mov	r1, fp
    1624:	2030      	movs	r0, #48	; 0x30
    1626:	47c8      	blx	r9
    1628:	2800      	cmp	r0, #0
    162a:	dbce      	blt.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    162c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    162e:	1b73      	subs	r3, r6, r5
    1630:	2b00      	cmp	r3, #0
    1632:	dcf6      	bgt.n	1622 <CONFIG_FPROTECT_BLOCK_SIZE+0x622>
			OUTS(bps, bpe);
    1634:	4653      	mov	r3, sl
    1636:	463a      	mov	r2, r7
    1638:	4659      	mov	r1, fp
    163a:	4648      	mov	r0, r9
    163c:	f00b f99a 	bl	c974 <outs>
    1640:	2800      	cmp	r0, #0
    1642:	dbc2      	blt.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    1644:	4405      	add	r5, r0
		while (width > 0) {
    1646:	44a8      	add	r8, r5
    1648:	eba8 0305 	sub.w	r3, r8, r5
    164c:	2b00      	cmp	r3, #0
    164e:	f77f ae6a 	ble.w	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
			OUTC(' ');
    1652:	4659      	mov	r1, fp
    1654:	2020      	movs	r0, #32
    1656:	47c8      	blx	r9
    1658:	2800      	cmp	r0, #0
    165a:	dbb6      	blt.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    165c:	3501      	adds	r5, #1
			--width;
    165e:	e7f3      	b.n	1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>
    1660:	0000f237 	.word	0x0000f237

00001664 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1664:	b508      	push	{r3, lr}
    1666:	4604      	mov	r4, r0
	__asm__ volatile(
    1668:	f04f 0220 	mov.w	r2, #32
    166c:	f3ef 8311 	mrs	r3, BASEPRI
    1670:	f382 8812 	msr	BASEPRI_MAX, r2
    1674:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    1678:	f007 f908 	bl	888c <sys_clock_disable>
	}

	sys_arch_reboot(type);
    167c:	4620      	mov	r0, r4
    167e:	f003 f845 	bl	470c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1682:	4803      	ldr	r0, [pc, #12]	; (1690 <sys_reboot+0x2c>)
    1684:	f00a fe03 	bl	c28e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1688:	f002 fa54 	bl	3b34 <arch_cpu_idle>
    168c:	e7fc      	b.n	1688 <sys_reboot+0x24>
    168e:	bf00      	nop
    1690:	0000f23d 	.word	0x0000f23d

00001694 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1694:	f007 b942 	b.w	891c <SystemInit>

00001698 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    1698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    169c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 16f8 <activate_foreach_backend+0x60>
{
    16a0:	4604      	mov	r4, r0
	while (mask_cpy) {
    16a2:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    16a4:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    16a8:	b914      	cbnz	r4, 16b0 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    16aa:	4638      	mov	r0, r7
    16ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    16b0:	fa94 f5a4 	rbit	r5, r4
    16b4:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    16b8:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    16bc:	012e      	lsls	r6, r5, #4
    16be:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    16c2:	ea6f 0a03 	mvn.w	sl, r3
    16c6:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    16ca:	7b2b      	ldrb	r3, [r5, #12]
    16cc:	2b00      	cmp	r3, #0
    16ce:	d0eb      	beq.n	16a8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    16d0:	f858 3006 	ldr.w	r3, [r8, r6]
    16d4:	691b      	ldr	r3, [r3, #16]
    16d6:	b94b      	cbnz	r3, 16ec <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    16d8:	4446      	add	r6, r8
			log_backend_enable(backend,
    16da:	2204      	movs	r2, #4
    16dc:	6873      	ldr	r3, [r6, #4]
    16de:	4628      	mov	r0, r5
    16e0:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    16e2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    16e6:	f000 fa59 	bl	1b9c <log_backend_enable>
    16ea:	e7dd      	b.n	16a8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    16ec:	4628      	mov	r0, r5
    16ee:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    16f0:	2800      	cmp	r0, #0
    16f2:	d1d9      	bne.n	16a8 <activate_foreach_backend+0x10>
    16f4:	e7f0      	b.n	16d8 <activate_foreach_backend+0x40>
    16f6:	bf00      	nop
    16f8:	0000eb9c 	.word	0x0000eb9c

000016fc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    16fc:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    16fe:	4910      	ldr	r1, [pc, #64]	; (1740 <enable_logger+0x44>)
    1700:	4810      	ldr	r0, [pc, #64]	; (1744 <enable_logger+0x48>)
{
    1702:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1704:	2200      	movs	r2, #0
    1706:	f00c fe87 	bl	e418 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    170a:	4d0f      	ldr	r5, [pc, #60]	; (1748 <enable_logger+0x4c>)
    170c:	490f      	ldr	r1, [pc, #60]	; (174c <enable_logger+0x50>)
    170e:	2200      	movs	r2, #0
    1710:	2300      	movs	r3, #0
    1712:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1716:	2400      	movs	r4, #0
    1718:	230e      	movs	r3, #14
    171a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    171e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1722:	4b0b      	ldr	r3, [pc, #44]	; (1750 <enable_logger+0x54>)
    1724:	9400      	str	r4, [sp, #0]
    1726:	f44f 7240 	mov.w	r2, #768	; 0x300
    172a:	4628      	mov	r0, r5
    172c:	f009 f9aa 	bl	aa84 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1730:	4908      	ldr	r1, [pc, #32]	; (1754 <enable_logger+0x58>)
    1732:	4628      	mov	r0, r5
    1734:	f00c fbea 	bl	df0c <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1738:	4620      	mov	r0, r4
    173a:	b009      	add	sp, #36	; 0x24
    173c:	bd30      	pop	{r4, r5, pc}
    173e:	bf00      	nop
    1740:	00001759 	.word	0x00001759
    1744:	20000988 	.word	0x20000988
    1748:	20000500 	.word	0x20000500
    174c:	20002530 	.word	0x20002530
    1750:	00001a49 	.word	0x00001a49
    1754:	0000f266 	.word	0x0000f266

00001758 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1758:	4801      	ldr	r0, [pc, #4]	; (1760 <log_process_thread_timer_expiry_fn+0x8>)
    175a:	f009 bb21 	b.w	ada0 <z_impl_k_sem_give>
    175e:	bf00      	nop
    1760:	200003e0 	.word	0x200003e0

00001764 <z_log_init>:
{
    1764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1768:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    176a:	481f      	ldr	r0, [pc, #124]	; (17e8 <z_log_init+0x84>)
{
    176c:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    176e:	f00b fc29 	bl	cfc4 <atomic_inc>
    1772:	4606      	mov	r6, r0
    1774:	2800      	cmp	r0, #0
    1776:	d030      	beq.n	17da <z_log_init+0x76>
	uint32_t mask = 0;
    1778:	2500      	movs	r5, #0
}
    177a:	4628      	mov	r0, r5
    177c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    1780:	7b23      	ldrb	r3, [r4, #12]
    1782:	b173      	cbz	r3, 17a2 <z_log_init+0x3e>
	if (backend->api->init) {
    1784:	6823      	ldr	r3, [r4, #0]
    1786:	68db      	ldr	r3, [r3, #12]
    1788:	b10b      	cbz	r3, 178e <z_log_init+0x2a>
		backend->api->init(backend);
    178a:	4620      	mov	r0, r4
    178c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    178e:	6823      	ldr	r3, [r4, #0]
    1790:	691b      	ldr	r3, [r3, #16]
    1792:	b9d3      	cbnz	r3, 17ca <z_log_init+0x66>
				log_backend_enable(backend,
    1794:	6863      	ldr	r3, [r4, #4]
    1796:	2204      	movs	r2, #4
    1798:	6819      	ldr	r1, [r3, #0]
    179a:	4620      	mov	r0, r4
    179c:	f000 f9fe 	bl	1b9c <log_backend_enable>
			i++;
    17a0:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    17a2:	3410      	adds	r4, #16
    17a4:	454c      	cmp	r4, r9
    17a6:	d3eb      	bcc.n	1780 <z_log_init+0x1c>
	if (blocking) {
    17a8:	f1b8 0f00 	cmp.w	r8, #0
    17ac:	d0e5      	beq.n	177a <z_log_init+0x16>
		while (mask) {
    17ae:	2d00      	cmp	r5, #0
    17b0:	d0e2      	beq.n	1778 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    17b2:	4628      	mov	r0, r5
    17b4:	f7ff ff70 	bl	1698 <activate_foreach_backend>
    17b8:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    17ba:	2f00      	cmp	r7, #0
    17bc:	d0f7      	beq.n	17ae <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    17be:	2100      	movs	r1, #0
    17c0:	f44f 70a4 	mov.w	r0, #328	; 0x148
    17c4:	f009 ff7c 	bl	b6c0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    17c8:	e7f1      	b.n	17ae <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    17ca:	4620      	mov	r0, r4
    17cc:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    17ce:	2800      	cmp	r0, #0
    17d0:	d0e0      	beq.n	1794 <z_log_init+0x30>
				mask |= BIT(i);
    17d2:	fa0a f306 	lsl.w	r3, sl, r6
    17d6:	431d      	orrs	r5, r3
    17d8:	e7e2      	b.n	17a0 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    17da:	4c04      	ldr	r4, [pc, #16]	; (17ec <z_log_init+0x88>)
    17dc:	f8df 9010 	ldr.w	r9, [pc, #16]	; 17f0 <z_log_init+0x8c>
	uint32_t mask = 0;
    17e0:	4605      	mov	r5, r0
				mask |= BIT(i);
    17e2:	f04f 0a01 	mov.w	sl, #1
    17e6:	e7dd      	b.n	17a4 <z_log_init+0x40>
    17e8:	20000cf4 	.word	0x20000cf4
    17ec:	0000eb9c 	.word	0x0000eb9c
    17f0:	0000ebac 	.word	0x0000ebac

000017f4 <log_format_func_t_get>:
}
    17f4:	4b01      	ldr	r3, [pc, #4]	; (17fc <log_format_func_t_get+0x8>)
    17f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    17fa:	4770      	bx	lr
    17fc:	0000ebdc 	.word	0x0000ebdc

00001800 <log_set_timestamp_func>:
{
    1800:	b508      	push	{r3, lr}
    1802:	4603      	mov	r3, r0
    1804:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    1806:	b12b      	cbz	r3, 1814 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    1808:	4a04      	ldr	r2, [pc, #16]	; (181c <log_set_timestamp_func+0x1c>)
    180a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    180c:	f000 fc78 	bl	2100 <log_output_timestamp_freq_set>
	return 0;
    1810:	2000      	movs	r0, #0
}
    1812:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1814:	f06f 0015 	mvn.w	r0, #21
    1818:	e7fb      	b.n	1812 <log_set_timestamp_func+0x12>
    181a:	bf00      	nop
    181c:	200000b4 	.word	0x200000b4

00001820 <z_log_notify_backend_enabled>:
{
    1820:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1822:	4c04      	ldr	r4, [pc, #16]	; (1834 <z_log_notify_backend_enabled+0x14>)
    1824:	7823      	ldrb	r3, [r4, #0]
    1826:	b913      	cbnz	r3, 182e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    1828:	4803      	ldr	r0, [pc, #12]	; (1838 <z_log_notify_backend_enabled+0x18>)
    182a:	f009 fab9 	bl	ada0 <z_impl_k_sem_give>
	backend_attached = true;
    182e:	2301      	movs	r3, #1
    1830:	7023      	strb	r3, [r4, #0]
}
    1832:	bd10      	pop	{r4, pc}
    1834:	2000240c 	.word	0x2000240c
    1838:	200003e0 	.word	0x200003e0

0000183c <z_log_dropped>:
{
    183c:	b510      	push	{r4, lr}
    183e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    1840:	4808      	ldr	r0, [pc, #32]	; (1864 <z_log_dropped+0x28>)
    1842:	f00b fbbf 	bl	cfc4 <atomic_inc>
	if (buffered) {
    1846:	b15c      	cbz	r4, 1860 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1848:	f3bf 8f5b 	dmb	ish
    184c:	4b06      	ldr	r3, [pc, #24]	; (1868 <z_log_dropped+0x2c>)
    184e:	e853 1f00 	ldrex	r1, [r3]
    1852:	3901      	subs	r1, #1
    1854:	e843 1200 	strex	r2, r1, [r3]
    1858:	2a00      	cmp	r2, #0
    185a:	d1f8      	bne.n	184e <z_log_dropped+0x12>
    185c:	f3bf 8f5b 	dmb	ish
}
    1860:	bd10      	pop	{r4, pc}
    1862:	bf00      	nop
    1864:	20000cec 	.word	0x20000cec
    1868:	20000cf0 	.word	0x20000cf0

0000186c <z_log_dropped_read_and_clear>:
}
    186c:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    186e:	4b06      	ldr	r3, [pc, #24]	; (1888 <z_log_dropped_read_and_clear+0x1c>)
    1870:	f3bf 8f5b 	dmb	ish
    1874:	4601      	mov	r1, r0
    1876:	e853 0f00 	ldrex	r0, [r3]
    187a:	e843 1200 	strex	r2, r1, [r3]
    187e:	2a00      	cmp	r2, #0
    1880:	d1f9      	bne.n	1876 <z_log_dropped_read_and_clear+0xa>
    1882:	f3bf 8f5b 	dmb	ish
    1886:	4770      	bx	lr
    1888:	20000cec 	.word	0x20000cec

0000188c <dropped_notify>:
{
    188c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    188e:	f7ff ffed 	bl	186c <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1892:	4c08      	ldr	r4, [pc, #32]	; (18b4 <dropped_notify+0x28>)
    1894:	4e08      	ldr	r6, [pc, #32]	; (18b8 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    1896:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1898:	42b4      	cmp	r4, r6
    189a:	d300      	bcc.n	189e <dropped_notify+0x12>
}
    189c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    189e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    18a0:	795b      	ldrb	r3, [r3, #5]
    18a2:	b12b      	cbz	r3, 18b0 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    18a4:	6823      	ldr	r3, [r4, #0]
    18a6:	685b      	ldr	r3, [r3, #4]
    18a8:	b113      	cbz	r3, 18b0 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    18aa:	4629      	mov	r1, r5
    18ac:	4620      	mov	r0, r4
    18ae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18b0:	3410      	adds	r4, #16
    18b2:	e7f1      	b.n	1898 <dropped_notify+0xc>
    18b4:	0000eb9c 	.word	0x0000eb9c
    18b8:	0000ebac 	.word	0x0000ebac

000018bc <z_log_msg_init>:
{
    18bc:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    18be:	4c04      	ldr	r4, [pc, #16]	; (18d0 <z_log_msg_init+0x14>)
    18c0:	4904      	ldr	r1, [pc, #16]	; (18d4 <z_log_msg_init+0x18>)
    18c2:	4620      	mov	r0, r4
    18c4:	f00b fa0f 	bl	cce6 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    18c8:	4b03      	ldr	r3, [pc, #12]	; (18d8 <z_log_msg_init+0x1c>)
    18ca:	601c      	str	r4, [r3, #0]
}
    18cc:	bd10      	pop	{r4, pc}
    18ce:	bf00      	nop
    18d0:	200002e0 	.word	0x200002e0
    18d4:	0000ebc8 	.word	0x0000ebc8
    18d8:	20000ce4 	.word	0x20000ce4

000018dc <log_core_init>:
	panic_mode = false;
    18dc:	4a08      	ldr	r2, [pc, #32]	; (1900 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    18de:	4809      	ldr	r0, [pc, #36]	; (1904 <log_core_init+0x28>)
{
    18e0:	b508      	push	{r3, lr}
	panic_mode = false;
    18e2:	2300      	movs	r3, #0
    18e4:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    18e6:	4a08      	ldr	r2, [pc, #32]	; (1908 <log_core_init+0x2c>)
    18e8:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    18ea:	4a08      	ldr	r2, [pc, #32]	; (190c <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    18ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    18f0:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    18f2:	f7ff ff85 	bl	1800 <log_set_timestamp_func>
}
    18f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    18fa:	f7ff bfdf 	b.w	18bc <z_log_msg_init>
    18fe:	bf00      	nop
    1900:	2000240d 	.word	0x2000240d
    1904:	0000cfc1 	.word	0x0000cfc1
    1908:	20000cec 	.word	0x20000cec
    190c:	20000cf0 	.word	0x20000cf0

00001910 <z_log_msg_alloc>:
{
    1910:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    1912:	2200      	movs	r2, #0
    1914:	4801      	ldr	r0, [pc, #4]	; (191c <z_log_msg_alloc+0xc>)
    1916:	2300      	movs	r3, #0
    1918:	f00b ba06 	b.w	cd28 <mpsc_pbuf_alloc>
    191c:	200002e0 	.word	0x200002e0

00001920 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1920:	4801      	ldr	r0, [pc, #4]	; (1928 <z_log_msg_local_claim+0x8>)
    1922:	f00b ba9f 	b.w	ce64 <mpsc_pbuf_claim>
    1926:	bf00      	nop
    1928:	200002e0 	.word	0x200002e0

0000192c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    192c:	4b02      	ldr	r3, [pc, #8]	; (1938 <z_log_msg_free+0xc>)
{
    192e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    1930:	6818      	ldr	r0, [r3, #0]
    1932:	f00b bae9 	b.w	cf08 <mpsc_pbuf_free>
    1936:	bf00      	nop
    1938:	20000ce4 	.word	0x20000ce4

0000193c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    193c:	4801      	ldr	r0, [pc, #4]	; (1944 <z_log_msg_pending+0x8>)
    193e:	f00b bb1f 	b.w	cf80 <mpsc_pbuf_is_pending>
    1942:	bf00      	nop
    1944:	200002e0 	.word	0x200002e0

00001948 <z_impl_log_process>:
{
    1948:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    194a:	4b28      	ldr	r3, [pc, #160]	; (19ec <z_impl_log_process+0xa4>)
    194c:	7818      	ldrb	r0, [r3, #0]
    194e:	2800      	cmp	r0, #0
    1950:	d04b      	beq.n	19ea <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    1952:	f7ff ffe5 	bl	1920 <z_log_msg_local_claim>
	if (msg) {
    1956:	4605      	mov	r5, r0
    1958:	b190      	cbz	r0, 1980 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    195a:	f3bf 8f5b 	dmb	ish
    195e:	4b24      	ldr	r3, [pc, #144]	; (19f0 <z_impl_log_process+0xa8>)
    1960:	e853 1f00 	ldrex	r1, [r3]
    1964:	3901      	subs	r1, #1
    1966:	e843 1200 	strex	r2, r1, [r3]
    196a:	2a00      	cmp	r2, #0
    196c:	d1f8      	bne.n	1960 <z_impl_log_process+0x18>
    196e:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1972:	4c20      	ldr	r4, [pc, #128]	; (19f4 <z_impl_log_process+0xac>)
    1974:	4e20      	ldr	r6, [pc, #128]	; (19f8 <z_impl_log_process+0xb0>)
    1976:	42b4      	cmp	r4, r6
    1978:	d32d      	bcc.n	19d6 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    197a:	4628      	mov	r0, r5
    197c:	f7ff ffd6 	bl	192c <z_log_msg_free>
	return dropped_cnt > 0;
    1980:	4b1e      	ldr	r3, [pc, #120]	; (19fc <z_impl_log_process+0xb4>)
    1982:	4c1f      	ldr	r4, [pc, #124]	; (1a00 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    1984:	681b      	ldr	r3, [r3, #0]
    1986:	2b00      	cmp	r3, #0
    1988:	dd19      	ble.n	19be <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    198a:	f00c fd1d 	bl	e3c8 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    198e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1992:	fba0 0302 	umull	r0, r3, r0, r2
    1996:	fb02 3101 	mla	r1, r2, r1, r3
    199a:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    199c:	e9d4 2000 	ldrd	r2, r0, [r4]
    19a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    19a4:	1a9b      	subs	r3, r3, r2
    19a6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    19aa:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    19ae:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    19b2:	4293      	cmp	r3, r2
    19b4:	f171 0100 	sbcs.w	r1, r1, #0
    19b8:	d301      	bcc.n	19be <z_impl_log_process+0x76>
				dropped_notify();
    19ba:	f7ff ff67 	bl	188c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    19be:	e9d4 3200 	ldrd	r3, r2, [r4]
    19c2:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    19c6:	f142 0200 	adc.w	r2, r2, #0
    19ca:	e9c4 3200 	strd	r3, r2, [r4]
}
    19ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    19d2:	f7ff bfb3 	b.w	193c <z_log_msg_pending>
	return backend->cb->active;
    19d6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    19d8:	795b      	ldrb	r3, [r3, #5]
    19da:	b123      	cbz	r3, 19e6 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    19dc:	6823      	ldr	r3, [r4, #0]
    19de:	4629      	mov	r1, r5
    19e0:	681b      	ldr	r3, [r3, #0]
    19e2:	4620      	mov	r0, r4
    19e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    19e6:	3410      	adds	r4, #16
    19e8:	e7c5      	b.n	1976 <z_impl_log_process+0x2e>
}
    19ea:	bd70      	pop	{r4, r5, r6, pc}
    19ec:	2000240c 	.word	0x2000240c
    19f0:	20000cf0 	.word	0x20000cf0
    19f4:	0000eb9c 	.word	0x0000eb9c
    19f8:	0000ebac 	.word	0x0000ebac
    19fc:	20000cec 	.word	0x20000cec
    1a00:	20000980 	.word	0x20000980

00001a04 <z_impl_log_panic>:
{
    1a04:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    1a06:	4d0d      	ldr	r5, [pc, #52]	; (1a3c <z_impl_log_panic+0x38>)
    1a08:	7829      	ldrb	r1, [r5, #0]
    1a0a:	b961      	cbnz	r1, 1a26 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    1a0c:	2001      	movs	r0, #1
    1a0e:	f7ff fea9 	bl	1764 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1a12:	4c0b      	ldr	r4, [pc, #44]	; (1a40 <z_impl_log_panic+0x3c>)
    1a14:	4e0b      	ldr	r6, [pc, #44]	; (1a44 <z_impl_log_panic+0x40>)
    1a16:	42b4      	cmp	r4, r6
    1a18:	d306      	bcc.n	1a28 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1a1a:	f7ff ff95 	bl	1948 <z_impl_log_process>
		while (log_process() == true) {
    1a1e:	2800      	cmp	r0, #0
    1a20:	d1fb      	bne.n	1a1a <z_impl_log_panic+0x16>
	panic_mode = true;
    1a22:	2301      	movs	r3, #1
    1a24:	702b      	strb	r3, [r5, #0]
}
    1a26:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    1a28:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1a2a:	795b      	ldrb	r3, [r3, #5]
    1a2c:	b11b      	cbz	r3, 1a36 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    1a2e:	6823      	ldr	r3, [r4, #0]
    1a30:	4620      	mov	r0, r4
    1a32:	689b      	ldr	r3, [r3, #8]
    1a34:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1a36:	3410      	adds	r4, #16
    1a38:	e7ed      	b.n	1a16 <z_impl_log_panic+0x12>
    1a3a:	bf00      	nop
    1a3c:	2000240d 	.word	0x2000240d
    1a40:	0000eb9c 	.word	0x0000eb9c
    1a44:	0000ebac 	.word	0x0000ebac

00001a48 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    1a48:	2100      	movs	r1, #0
{
    1a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1a4e:	4608      	mov	r0, r1
    1a50:	f7ff fe88 	bl	1764 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1a54:	4604      	mov	r4, r0
    1a56:	b348      	cbz	r0, 1aac <log_process_thread_func+0x64>
    1a58:	f240 6867 	movw	r8, #1639	; 0x667
    1a5c:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    1a60:	f009 fe62 	bl	b728 <z_impl_z_current_get>
	proc_tid = process_tid;
    1a64:	4b1a      	ldr	r3, [pc, #104]	; (1ad0 <log_process_thread_func+0x88>)
    1a66:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1a68:	b130      	cbz	r0, 1a78 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1a6a:	4b1a      	ldr	r3, [pc, #104]	; (1ad4 <log_process_thread_func+0x8c>)
	    process_tid &&
    1a6c:	681b      	ldr	r3, [r3, #0]
    1a6e:	2b09      	cmp	r3, #9
    1a70:	dd02      	ble.n	1a78 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    1a72:	4819      	ldr	r0, [pc, #100]	; (1ad8 <log_process_thread_func+0x90>)
    1a74:	f009 f994 	bl	ada0 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1a78:	4f18      	ldr	r7, [pc, #96]	; (1adc <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    1a7a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1ad8 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1a7e:	2500      	movs	r5, #0
		if (activate_mask) {
    1a80:	b144      	cbz	r4, 1a94 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    1a82:	4620      	mov	r0, r4
    1a84:	f7ff fe08 	bl	1698 <activate_foreach_backend>
			if (!activate_mask) {
    1a88:	4604      	mov	r4, r0
    1a8a:	b918      	cbnz	r0, 1a94 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    1a8c:	f04f 38ff 	mov.w	r8, #4294967295
    1a90:	f04f 39ff 	mov.w	r9, #4294967295
    1a94:	f7ff ff58 	bl	1948 <z_impl_log_process>
		if (log_process() == false) {
    1a98:	4606      	mov	r6, r0
    1a9a:	b928      	cbnz	r0, 1aa8 <log_process_thread_func+0x60>
			if (processed_any) {
    1a9c:	b9b5      	cbnz	r5, 1acc <log_process_thread_func+0x84>
    1a9e:	4642      	mov	r2, r8
    1aa0:	464b      	mov	r3, r9
    1aa2:	4650      	mov	r0, sl
    1aa4:	f009 f9a2 	bl	adec <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1aa8:	4635      	mov	r5, r6
    1aaa:	e7e9      	b.n	1a80 <log_process_thread_func+0x38>
    1aac:	f04f 38ff 	mov.w	r8, #4294967295
    1ab0:	f04f 39ff 	mov.w	r9, #4294967295
    1ab4:	e7d4      	b.n	1a60 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    1ab6:	682b      	ldr	r3, [r5, #0]
    1ab8:	699b      	ldr	r3, [r3, #24]
    1aba:	b11b      	cbz	r3, 1ac4 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    1abc:	2200      	movs	r2, #0
    1abe:	4611      	mov	r1, r2
    1ac0:	4628      	mov	r0, r5
    1ac2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1ac4:	3510      	adds	r5, #16
    1ac6:	42bd      	cmp	r5, r7
    1ac8:	d3f5      	bcc.n	1ab6 <log_process_thread_func+0x6e>
    1aca:	e7e8      	b.n	1a9e <log_process_thread_func+0x56>
    1acc:	4d04      	ldr	r5, [pc, #16]	; (1ae0 <log_process_thread_func+0x98>)
    1ace:	e7fa      	b.n	1ac6 <log_process_thread_func+0x7e>
    1ad0:	20000ce8 	.word	0x20000ce8
    1ad4:	20000cf0 	.word	0x20000cf0
    1ad8:	200003e0 	.word	0x200003e0
    1adc:	0000ebac 	.word	0x0000ebac
    1ae0:	0000eb9c 	.word	0x0000eb9c

00001ae4 <z_log_msg_post_finalize>:
{
    1ae4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    1ae6:	4818      	ldr	r0, [pc, #96]	; (1b48 <z_log_msg_post_finalize+0x64>)
    1ae8:	f00b fa6c 	bl	cfc4 <atomic_inc>
	if (panic_mode) {
    1aec:	4b17      	ldr	r3, [pc, #92]	; (1b4c <z_log_msg_post_finalize+0x68>)
    1aee:	781b      	ldrb	r3, [r3, #0]
    1af0:	b17b      	cbz	r3, 1b12 <z_log_msg_post_finalize+0x2e>
    1af2:	f04f 0320 	mov.w	r3, #32
    1af6:	f3ef 8411 	mrs	r4, BASEPRI
    1afa:	f383 8812 	msr	BASEPRI_MAX, r3
    1afe:	f3bf 8f6f 	isb	sy
    1b02:	f7ff ff21 	bl	1948 <z_impl_log_process>
	__asm__ volatile(
    1b06:	f384 8811 	msr	BASEPRI, r4
    1b0a:	f3bf 8f6f 	isb	sy
}
    1b0e:	b002      	add	sp, #8
    1b10:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    1b12:	4b0f      	ldr	r3, [pc, #60]	; (1b50 <z_log_msg_post_finalize+0x6c>)
    1b14:	681b      	ldr	r3, [r3, #0]
    1b16:	2b00      	cmp	r3, #0
    1b18:	d0f9      	beq.n	1b0e <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    1b1a:	b950      	cbnz	r0, 1b32 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    1b1c:	2200      	movs	r2, #0
    1b1e:	2300      	movs	r3, #0
    1b20:	e9cd 2300 	strd	r2, r3, [sp]
    1b24:	480b      	ldr	r0, [pc, #44]	; (1b54 <z_log_msg_post_finalize+0x70>)
    1b26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1b2a:	2300      	movs	r3, #0
    1b2c:	f00a f840 	bl	bbb0 <z_impl_k_timer_start>
    1b30:	e7ed      	b.n	1b0e <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1b32:	280a      	cmp	r0, #10
    1b34:	d1eb      	bne.n	1b0e <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    1b36:	4807      	ldr	r0, [pc, #28]	; (1b54 <z_log_msg_post_finalize+0x70>)
    1b38:	f00c fc7a 	bl	e430 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1b3c:	4806      	ldr	r0, [pc, #24]	; (1b58 <z_log_msg_post_finalize+0x74>)
}
    1b3e:	b002      	add	sp, #8
    1b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b44:	f009 b92c 	b.w	ada0 <z_impl_k_sem_give>
    1b48:	20000cf0 	.word	0x20000cf0
    1b4c:	2000240d 	.word	0x2000240d
    1b50:	20000ce8 	.word	0x20000ce8
    1b54:	20000988 	.word	0x20000988
    1b58:	200003e0 	.word	0x200003e0

00001b5c <z_log_msg_commit>:
{
    1b5c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1b5e:	4b06      	ldr	r3, [pc, #24]	; (1b78 <z_log_msg_commit+0x1c>)
    1b60:	681b      	ldr	r3, [r3, #0]
{
    1b62:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1b64:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    1b66:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1b68:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    1b6a:	4804      	ldr	r0, [pc, #16]	; (1b7c <z_log_msg_commit+0x20>)
    1b6c:	f00b f95a 	bl	ce24 <mpsc_pbuf_commit>
}
    1b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1b74:	f7ff bfb6 	b.w	1ae4 <z_log_msg_post_finalize>
    1b78:	200000b4 	.word	0x200000b4
    1b7c:	200002e0 	.word	0x200002e0

00001b80 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1b80:	4a04      	ldr	r2, [pc, #16]	; (1b94 <log_source_name_get+0x14>)
    1b82:	4b05      	ldr	r3, [pc, #20]	; (1b98 <log_source_name_get+0x18>)
    1b84:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    1b86:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    1b8a:	bf34      	ite	cc
    1b8c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    1b90:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    1b92:	4770      	bx	lr
    1b94:	0000eadc 	.word	0x0000eadc
    1b98:	0000eb9c 	.word	0x0000eb9c

00001b9c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1b9c:	4b08      	ldr	r3, [pc, #32]	; (1bc0 <log_backend_enable+0x24>)
    1b9e:	1ac3      	subs	r3, r0, r3
{
    1ba0:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    1ba2:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    1ba4:	6844      	ldr	r4, [r0, #4]
    1ba6:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    1ba8:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    1baa:	6843      	ldr	r3, [r0, #4]
    1bac:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    1bae:	6843      	ldr	r3, [r0, #4]
    1bb0:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1bb2:	6843      	ldr	r3, [r0, #4]
    1bb4:	2201      	movs	r2, #1
    1bb6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    1bb8:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    1bba:	f7ff be31 	b.w	1820 <z_log_notify_backend_enabled>
    1bbe:	bf00      	nop
    1bc0:	0000eb9c 	.word	0x0000eb9c

00001bc4 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    1bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bc8:	b08f      	sub	sp, #60	; 0x3c
    1bca:	af04      	add	r7, sp, #16
    1bcc:	f3c1 284a 	ubfx	r8, r1, #9, #11
    1bd0:	60b8      	str	r0, [r7, #8]
    1bd2:	460d      	mov	r5, r1
    1bd4:	4691      	mov	r9, r2
    1bd6:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    1bd8:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    1bda:	f1b8 0f00 	cmp.w	r8, #0
    1bde:	d063      	beq.n	1ca8 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    1be0:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    1be2:	f107 0314 	add.w	r3, r7, #20
    1be6:	f04f 0b04 	mov.w	fp, #4
    1bea:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    1bee:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    1bf2:	e9c7 6607 	strd	r6, r6, [r7, #28]
    1bf6:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    1bf8:	9301      	str	r3, [sp, #4]
    1bfa:	f8cd b008 	str.w	fp, [sp, #8]
    1bfe:	f8cd a000 	str.w	sl, [sp]
    1c02:	f107 031c 	add.w	r3, r7, #28
    1c06:	68f9      	ldr	r1, [r7, #12]
    1c08:	4632      	mov	r2, r6
    1c0a:	4648      	mov	r0, r9
    1c0c:	f7fe fe70 	bl	8f0 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    1c10:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    1c14:	4603      	mov	r3, r0
    1c16:	d31c      	bcc.n	1c52 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    1c18:	466c      	mov	r4, sp
    1c1a:	b08a      	sub	sp, #40	; 0x28
    1c1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    1c20:	ab04      	add	r3, sp, #16
    1c22:	4826      	ldr	r0, [pc, #152]	; (1cbc <z_impl_z_log_msg_static_create+0xf8>)
    1c24:	e9c3 0105 	strd	r0, r1, [r3, #20]
    1c28:	f240 71ff 	movw	r1, #2047	; 0x7ff
    1c2c:	61d9      	str	r1, [r3, #28]
    1c2e:	461a      	mov	r2, r3
    1c30:	f44f 7100 	mov.w	r1, #512	; 0x200
    1c34:	8419      	strh	r1, [r3, #32]
    1c36:	4b22      	ldr	r3, [pc, #136]	; (1cc0 <z_impl_z_log_msg_static_create+0xfc>)
    1c38:	f842 3f10 	str.w	r3, [r2, #16]!
    1c3c:	4821      	ldr	r0, [pc, #132]	; (1cc4 <z_impl_z_log_msg_static_create+0x100>)
    1c3e:	4633      	mov	r3, r6
    1c40:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    1c44:	f7ff ffbe 	bl	1bc4 <z_impl_z_log_msg_static_create>
    1c48:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    1c4a:	372c      	adds	r7, #44	; 0x2c
    1c4c:	46bd      	mov	sp, r7
    1c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    1c52:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    1c56:	f104 0017 	add.w	r0, r4, #23
    1c5a:	4418      	add	r0, r3
    1c5c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1c60:	0880      	lsrs	r0, r0, #2
    1c62:	603b      	str	r3, [r7, #0]
    1c64:	f7ff fe54 	bl	1910 <z_log_msg_alloc>
    1c68:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    1c6c:	4604      	mov	r4, r0
    1c6e:	b190      	cbz	r0, 1c96 <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    1c70:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    1c72:	4a15      	ldr	r2, [pc, #84]	; (1cc8 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    1c74:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    1c78:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    1c7c:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    1c80:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    1c82:	e9cd a300 	strd	sl, r3, [sp]
    1c86:	f8cd b008 	str.w	fp, [sp, #8]
    1c8a:	68f9      	ldr	r1, [r7, #12]
    1c8c:	f107 031c 	add.w	r3, r7, #28
    1c90:	4648      	mov	r0, r9
    1c92:	f7fe fe2d 	bl	8f0 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    1c96:	f368 2553 	bfi	r5, r8, #9, #11
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	68b9      	ldr	r1, [r7, #8]
    1c9e:	462a      	mov	r2, r5
    1ca0:	4620      	mov	r0, r4
    1ca2:	f00b f9c5 	bl	d030 <z_log_msg_finalize>
    1ca6:	e7d0      	b.n	1c4a <z_impl_z_log_msg_static_create+0x86>
    1ca8:	f104 0017 	add.w	r0, r4, #23
    1cac:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1cb0:	0880      	lsrs	r0, r0, #2
    1cb2:	f7ff fe2d 	bl	1910 <z_log_msg_alloc>
    1cb6:	4604      	mov	r4, r0
    1cb8:	e7ed      	b.n	1c96 <z_impl_z_log_msg_static_create+0xd2>
    1cba:	bf00      	nop
    1cbc:	0000f27b 	.word	0x0000f27b
    1cc0:	01000004 	.word	0x01000004
    1cc4:	0000eb14 	.word	0x0000eb14
    1cc8:	0000d005 	.word	0x0000d005

00001ccc <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cd0:	b087      	sub	sp, #28
    1cd2:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    1cd6:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    1cda:	4604      	mov	r4, r0
    1cdc:	460f      	mov	r7, r1
    1cde:	4693      	mov	fp, r2
    1ce0:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    1ce2:	b3a6      	cbz	r6, 1d4e <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    1ce4:	2110      	movs	r1, #16
    1ce6:	f8cd 9000 	str.w	r9, [sp]
    1cea:	4633      	mov	r3, r6
    1cec:	4652      	mov	r2, sl
    1cee:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1cf0:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    1cf4:	f7fe fc26 	bl	544 <cbvprintf_package>
    1cf8:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    1cfa:	f105 0017 	add.w	r0, r5, #23
    1cfe:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    1d00:	4b14      	ldr	r3, [pc, #80]	; (1d54 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    1d02:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    1d04:	f004 0407 	and.w	r4, r4, #7
    1d08:	f00b 0b07 	and.w	fp, fp, #7
    1d0c:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    1d0e:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    1d12:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    1d16:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    1d1a:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    1d1c:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    1d1e:	f7ff fdf7 	bl	1910 <z_log_msg_alloc>
	struct log_msg_desc desc =
    1d22:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    1d26:	4605      	mov	r5, r0
    1d28:	b140      	cbz	r0, 1d3c <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1d2a:	b13e      	cbz	r6, 1d3c <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    1d2c:	9903      	ldr	r1, [sp, #12]
    1d2e:	f8cd 9000 	str.w	r9, [sp]
    1d32:	4633      	mov	r3, r6
    1d34:	4652      	mov	r2, sl
    1d36:	3010      	adds	r0, #16
    1d38:	f7fe fc04 	bl	544 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    1d3c:	4643      	mov	r3, r8
    1d3e:	4622      	mov	r2, r4
    1d40:	4639      	mov	r1, r7
    1d42:	4628      	mov	r0, r5
	}
}
    1d44:	b007      	add	sp, #28
    1d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    1d4a:	f00b b971 	b.w	d030 <z_log_msg_finalize>
		plen = 0;
    1d4e:	4631      	mov	r1, r6
    1d50:	e7d3      	b.n	1cfa <z_impl_z_log_msg_runtime_vcreate+0x2e>
    1d52:	bf00      	nop
    1d54:	000ffe00 	.word	0x000ffe00

00001d58 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1d58:	b40e      	push	{r1, r2, r3}
    1d5a:	b503      	push	{r0, r1, lr}
    1d5c:	ab03      	add	r3, sp, #12
    1d5e:	4601      	mov	r1, r0
    1d60:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1d64:	4804      	ldr	r0, [pc, #16]	; (1d78 <print_formatted+0x20>)
	va_start(args, fmt);
    1d66:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1d68:	f00b f988 	bl	d07c <cbvprintf>
	va_end(args);

	return length;
}
    1d6c:	b002      	add	sp, #8
    1d6e:	f85d eb04 	ldr.w	lr, [sp], #4
    1d72:	b003      	add	sp, #12
    1d74:	4770      	bx	lr
    1d76:	bf00      	nop
    1d78:	0000d0a5 	.word	0x0000d0a5

00001d7c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1d7c:	06ca      	lsls	r2, r1, #27
    1d7e:	d405      	bmi.n	1d8c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1d80:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    1d82:	bf4c      	ite	mi
    1d84:	4902      	ldrmi	r1, [pc, #8]	; (1d90 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    1d86:	4903      	ldrpl	r1, [pc, #12]	; (1d94 <newline_print+0x18>)
    1d88:	f7ff bfe6 	b.w	1d58 <print_formatted>
	}
}
    1d8c:	4770      	bx	lr
    1d8e:	bf00      	nop
    1d90:	0000f2bb 	.word	0x0000f2bb
    1d94:	0000f2ba 	.word	0x0000f2ba

00001d98 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    1d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d9c:	b089      	sub	sp, #36	; 0x24
    1d9e:	469b      	mov	fp, r3
    1da0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1da4:	9304      	str	r3, [sp, #16]
    1da6:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    1daa:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    1dac:	9b04      	ldr	r3, [sp, #16]
{
    1dae:	9206      	str	r2, [sp, #24]
    1db0:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    1db4:	4604      	mov	r4, r0
    1db6:	460d      	mov	r5, r1
	if (!raw_string) {
    1db8:	2b00      	cmp	r3, #0
    1dba:	f000 8087 	beq.w	1ecc <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1dbe:	f006 0308 	and.w	r3, r6, #8
    1dc2:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    1dc4:	f00b f91c 	bl	d000 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1dc8:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    1dcc:	4602      	mov	r2, r0
    1dce:	2800      	cmp	r0, #0
    1dd0:	d04b      	beq.n	1e6a <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    1dd2:	4986      	ldr	r1, [pc, #536]	; (1fec <log_output_process+0x254>)
    1dd4:	4620      	mov	r0, r4
    1dd6:	f7ff ffbf 	bl	1d58 <print_formatted>
    1dda:	4680      	mov	r8, r0
	if (stamp) {
    1ddc:	f1ba 0f00 	cmp.w	sl, #0
    1de0:	d008      	beq.n	1df4 <log_output_process+0x5c>
	if (!format) {
    1de2:	f016 0f44 	tst.w	r6, #68	; 0x44
    1de6:	d142      	bne.n	1e6e <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1de8:	4981      	ldr	r1, [pc, #516]	; (1ff0 <log_output_process+0x258>)
    1dea:	462a      	mov	r2, r5
    1dec:	4620      	mov	r0, r4
    1dee:	f7ff ffb3 	bl	1d58 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1df2:	4480      	add	r8, r0
	if (color) {
    1df4:	f006 0301 	and.w	r3, r6, #1
    1df8:	b15b      	cbz	r3, 1e12 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    1dfa:	4b7e      	ldr	r3, [pc, #504]	; (1ff4 <log_output_process+0x25c>)
    1dfc:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    1dfe:	497e      	ldr	r1, [pc, #504]	; (1ff8 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    1e00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    1e04:	4b7d      	ldr	r3, [pc, #500]	; (1ffc <log_output_process+0x264>)
    1e06:	4620      	mov	r0, r4
    1e08:	2a00      	cmp	r2, #0
    1e0a:	bf08      	it	eq
    1e0c:	461a      	moveq	r2, r3
    1e0e:	f7ff ffa3 	bl	1d58 <print_formatted>
	if (level_on) {
    1e12:	f006 0308 	and.w	r3, r6, #8
    1e16:	2b00      	cmp	r3, #0
    1e18:	d055      	beq.n	1ec6 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    1e1a:	4b79      	ldr	r3, [pc, #484]	; (2000 <log_output_process+0x268>)
    1e1c:	9a04      	ldr	r2, [sp, #16]
    1e1e:	4979      	ldr	r1, [pc, #484]	; (2004 <log_output_process+0x26c>)
    1e20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1e24:	4620      	mov	r0, r4
    1e26:	f7ff ff97 	bl	1d58 <print_formatted>
    1e2a:	4605      	mov	r5, r0
	if (domain) {
    1e2c:	9b06      	ldr	r3, [sp, #24]
    1e2e:	b12b      	cbz	r3, 1e3c <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    1e30:	4975      	ldr	r1, [pc, #468]	; (2008 <log_output_process+0x270>)
    1e32:	461a      	mov	r2, r3
    1e34:	4620      	mov	r0, r4
    1e36:	f7ff ff8f 	bl	1d58 <print_formatted>
    1e3a:	4405      	add	r5, r0
	if (source) {
    1e3c:	f1bb 0f00 	cmp.w	fp, #0
    1e40:	d005      	beq.n	1e4e <log_output_process+0xb6>
		total += print_formatted(output,
    1e42:	4972      	ldr	r1, [pc, #456]	; (200c <log_output_process+0x274>)
    1e44:	465a      	mov	r2, fp
    1e46:	4620      	mov	r0, r4
    1e48:	f7ff ff86 	bl	1d58 <print_formatted>
    1e4c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    1e4e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    1e50:	f1b9 0f00 	cmp.w	r9, #0
    1e54:	d149      	bne.n	1eea <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    1e56:	2f00      	cmp	r7, #0
    1e58:	d14f      	bne.n	1efa <log_output_process+0x162>
	if (color) {
    1e5a:	07f3      	lsls	r3, r6, #31
    1e5c:	f100 80c0 	bmi.w	1fe0 <log_output_process+0x248>
	newline_print(output, flags);
    1e60:	4631      	mov	r1, r6
    1e62:	4620      	mov	r0, r4
    1e64:	f7ff ff8a 	bl	1d7c <newline_print>
}
    1e68:	e0b4      	b.n	1fd4 <log_output_process+0x23c>
	uint32_t length = 0U;
    1e6a:	4680      	mov	r8, r0
    1e6c:	e7b6      	b.n	1ddc <log_output_process+0x44>
	} else if (freq != 0U) {
    1e6e:	4b68      	ldr	r3, [pc, #416]	; (2010 <log_output_process+0x278>)
    1e70:	6818      	ldr	r0, [r3, #0]
    1e72:	2800      	cmp	r0, #0
    1e74:	d0bd      	beq.n	1df2 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    1e76:	4b67      	ldr	r3, [pc, #412]	; (2014 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    1e78:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1e7c:	681b      	ldr	r3, [r3, #0]
    1e7e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    1e82:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1e86:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    1e8a:	fb00 5513 	mls	r5, r0, r3, r5
    1e8e:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    1e92:	fb0e f505 	mul.w	r5, lr, r5
    1e96:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    1e9a:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1e9c:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    1ea0:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1ea4:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    1ea8:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1eac:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    1eb0:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1eb2:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    1eb6:	4958      	ldr	r1, [pc, #352]	; (2018 <log_output_process+0x280>)
    1eb8:	e9cd c501 	strd	ip, r5, [sp, #4]
    1ebc:	4652      	mov	r2, sl
    1ebe:	4620      	mov	r0, r4
    1ec0:	f7ff ff4a 	bl	1d58 <print_formatted>
    1ec4:	e795      	b.n	1df2 <log_output_process+0x5a>
	int total = 0;
    1ec6:	f006 0508 	and.w	r5, r6, #8
    1eca:	e7af      	b.n	1e2c <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1ecc:	f1bb 0f01 	cmp.w	fp, #1
    1ed0:	d106      	bne.n	1ee0 <log_output_process+0x148>
	if (package) {
    1ed2:	f1b9 0f00 	cmp.w	r9, #0
    1ed6:	d164      	bne.n	1fa2 <log_output_process+0x20a>
	if (data_len) {
    1ed8:	2f00      	cmp	r7, #0
    1eda:	d07b      	beq.n	1fd4 <log_output_process+0x23c>
		prefix_offset = 0;
    1edc:	2500      	movs	r5, #0
    1ede:	e00c      	b.n	1efa <log_output_process+0x162>
	if (package) {
    1ee0:	f1b9 0f00 	cmp.w	r9, #0
    1ee4:	d0f8      	beq.n	1ed8 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1ee6:	484d      	ldr	r0, [pc, #308]	; (201c <log_output_process+0x284>)
    1ee8:	e05c      	b.n	1fa4 <log_output_process+0x20c>
		cb = out_func;
    1eea:	484d      	ldr	r0, [pc, #308]	; (2020 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1eec:	494d      	ldr	r1, [pc, #308]	; (2024 <log_output_process+0x28c>)
    1eee:	464b      	mov	r3, r9
    1ef0:	4622      	mov	r2, r4
    1ef2:	f00a f961 	bl	c1b8 <cbpprintf_external>
	if (data_len) {
    1ef6:	2f00      	cmp	r7, #0
    1ef8:	d068      	beq.n	1fcc <log_output_process+0x234>
		print_formatted(output, " ");
    1efa:	f8df 912c 	ldr.w	r9, [pc, #300]	; 2028 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    1efe:	f8df a12c 	ldr.w	sl, [pc, #300]	; 202c <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1f02:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    1f04:	4631      	mov	r1, r6
    1f06:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1f08:	46b8      	mov	r8, r7
    1f0a:	bf28      	it	cs
    1f0c:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    1f10:	f7ff ff34 	bl	1d7c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    1f14:	f04f 0b00 	mov.w	fp, #0
    1f18:	455d      	cmp	r5, fp
    1f1a:	dc45      	bgt.n	1fa8 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    1f1c:	9b05      	ldr	r3, [sp, #20]
    1f1e:	4651      	mov	r1, sl
    1f20:	781a      	ldrb	r2, [r3, #0]
    1f22:	4620      	mov	r0, r4
    1f24:	f7ff ff18 	bl	1d58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f28:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    1f2c:	f01b 0f07 	tst.w	fp, #7
    1f30:	d103      	bne.n	1f3a <log_output_process+0x1a2>
			print_formatted(output, " ");
    1f32:	4649      	mov	r1, r9
    1f34:	4620      	mov	r0, r4
    1f36:	f7ff ff0f 	bl	1d58 <print_formatted>
		if (i < length) {
    1f3a:	45d8      	cmp	r8, fp
    1f3c:	d93b      	bls.n	1fb6 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    1f3e:	9b05      	ldr	r3, [sp, #20]
    1f40:	4651      	mov	r1, sl
    1f42:	f813 200b 	ldrb.w	r2, [r3, fp]
    1f46:	4620      	mov	r0, r4
    1f48:	f7ff ff06 	bl	1d58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f4c:	f10b 0b01 	add.w	fp, fp, #1
    1f50:	f1bb 0f10 	cmp.w	fp, #16
    1f54:	d1ea      	bne.n	1f2c <log_output_process+0x194>
	print_formatted(output, "|");
    1f56:	4936      	ldr	r1, [pc, #216]	; (2030 <log_output_process+0x298>)
    1f58:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f5a:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    1f5e:	f7ff fefb 	bl	1d58 <print_formatted>
		if (i < length) {
    1f62:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    1f64:	9b05      	ldr	r3, [sp, #20]
    1f66:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    1f68:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    1f6c:	295f      	cmp	r1, #95	; 0x5f
    1f6e:	bf28      	it	cs
    1f70:	222e      	movcs	r2, #46	; 0x2e
    1f72:	4930      	ldr	r1, [pc, #192]	; (2034 <log_output_process+0x29c>)
    1f74:	4620      	mov	r0, r4
    1f76:	f7ff feef 	bl	1d58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f7a:	f10b 0b01 	add.w	fp, fp, #1
    1f7e:	f1bb 0f10 	cmp.w	fp, #16
    1f82:	d01d      	beq.n	1fc0 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    1f84:	f01b 0f07 	tst.w	fp, #7
    1f88:	d103      	bne.n	1f92 <log_output_process+0x1fa>
			print_formatted(output, " ");
    1f8a:	4649      	mov	r1, r9
    1f8c:	4620      	mov	r0, r4
    1f8e:	f7ff fee3 	bl	1d58 <print_formatted>
		if (i < length) {
    1f92:	45d8      	cmp	r8, fp
    1f94:	465a      	mov	r2, fp
    1f96:	d8e5      	bhi.n	1f64 <log_output_process+0x1cc>
			print_formatted(output, " ");
    1f98:	4649      	mov	r1, r9
    1f9a:	4620      	mov	r0, r4
    1f9c:	f7ff fedc 	bl	1d58 <print_formatted>
    1fa0:	e7eb      	b.n	1f7a <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1fa2:	481f      	ldr	r0, [pc, #124]	; (2020 <log_output_process+0x288>)
		prefix_offset = 0;
    1fa4:	9d04      	ldr	r5, [sp, #16]
    1fa6:	e7a1      	b.n	1eec <log_output_process+0x154>
		print_formatted(output, " ");
    1fa8:	4649      	mov	r1, r9
    1faa:	4620      	mov	r0, r4
    1fac:	f7ff fed4 	bl	1d58 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1fb0:	f10b 0b01 	add.w	fp, fp, #1
    1fb4:	e7b0      	b.n	1f18 <log_output_process+0x180>
			print_formatted(output, "   ");
    1fb6:	4920      	ldr	r1, [pc, #128]	; (2038 <log_output_process+0x2a0>)
    1fb8:	4620      	mov	r0, r4
    1fba:	f7ff fecd 	bl	1d58 <print_formatted>
    1fbe:	e7c5      	b.n	1f4c <log_output_process+0x1b4>
		data += length;
    1fc0:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    1fc2:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    1fc6:	4443      	add	r3, r8
    1fc8:	9305      	str	r3, [sp, #20]
	} while (len);
    1fca:	d19a      	bne.n	1f02 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    1fcc:	9b04      	ldr	r3, [sp, #16]
    1fce:	2b00      	cmp	r3, #0
    1fd0:	f47f af43 	bne.w	1e5a <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    1fd4:	4620      	mov	r0, r4
}
    1fd6:	b009      	add	sp, #36	; 0x24
    1fd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    1fdc:	f00b b855 	b.w	d08a <log_output_flush>
		print_formatted(output, "%s", log_color);
    1fe0:	4a06      	ldr	r2, [pc, #24]	; (1ffc <log_output_process+0x264>)
    1fe2:	4905      	ldr	r1, [pc, #20]	; (1ff8 <log_output_process+0x260>)
    1fe4:	4620      	mov	r0, r4
    1fe6:	f7ff feb7 	bl	1d58 <print_formatted>
}
    1fea:	e739      	b.n	1e60 <log_output_process+0xc8>
    1fec:	0000f2c2 	.word	0x0000f2c2
    1ff0:	0000f2c6 	.word	0x0000f2c6
    1ff4:	0000ebec 	.word	0x0000ebec
    1ff8:	00010069 	.word	0x00010069
    1ffc:	0000f2bd 	.word	0x0000f2bd
    2000:	0000ec00 	.word	0x0000ec00
    2004:	0000f2eb 	.word	0x0000f2eb
    2008:	0000f2f1 	.word	0x0000f2f1
    200c:	0000f2f5 	.word	0x0000f2f5
    2010:	20000cfc 	.word	0x20000cfc
    2014:	20000cf8 	.word	0x20000cf8
    2018:	0000f2cf 	.word	0x0000f2cf
    201c:	0000d0db 	.word	0x0000d0db
    2020:	0000d0a5 	.word	0x0000d0a5
    2024:	0000d07d 	.word	0x0000d07d
    2028:	0000f302 	.word	0x0000f302
    202c:	0000f2fa 	.word	0x0000f2fa
    2030:	0000f304 	.word	0x0000f304
    2034:	0000f306 	.word	0x0000f306
    2038:	0000f300 	.word	0x0000f300

0000203c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    2040:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    2042:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    2044:	688e      	ldr	r6, [r1, #8]
    2046:	b086      	sub	sp, #24
    2048:	4605      	mov	r5, r0
    204a:	460c      	mov	r4, r1
    204c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    204e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    2052:	b15b      	cbz	r3, 206c <log_output_msg_process+0x30>
    2054:	4a13      	ldr	r2, [pc, #76]	; (20a4 <log_output_msg_process+0x68>)
    2056:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    2058:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    205c:	2900      	cmp	r1, #0
    205e:	db1f      	blt.n	20a0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    2060:	7820      	ldrb	r0, [r4, #0]
    2062:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    2066:	f7ff fd8b 	bl	1b80 <log_source_name_get>
    206a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    206c:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    206e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    2070:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2074:	9700      	str	r7, [sp, #0]
    2076:	f3c2 224a 	ubfx	r2, r2, #9, #11
    207a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    207c:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    2080:	f3c0 100b 	ubfx	r0, r0, #4, #12
    2084:	bf08      	it	eq
    2086:	2100      	moveq	r1, #0
    2088:	e9cd 0803 	strd	r0, r8, [sp, #12]
    208c:	e9cd 1401 	strd	r1, r4, [sp, #4]
    2090:	2200      	movs	r2, #0
    2092:	4631      	mov	r1, r6
    2094:	4628      	mov	r0, r5
    2096:	f7ff fe7f 	bl	1d98 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    209a:	b006      	add	sp, #24
    209c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    20a0:	2300      	movs	r3, #0
    20a2:	e7e3      	b.n	206c <log_output_msg_process+0x30>
    20a4:	0000eadc 	.word	0x0000eadc

000020a8 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    20a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20aa:	f242 730f 	movw	r3, #9999	; 0x270f
    20ae:	428b      	cmp	r3, r1
    20b0:	bf28      	it	cs
    20b2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    20b4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20b6:	4a0f      	ldr	r2, [pc, #60]	; (20f4 <log_output_dropped_process+0x4c>)
{
    20b8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20ba:	2105      	movs	r1, #5
    20bc:	4668      	mov	r0, sp
    20be:	f00a f8f3 	bl	c2a8 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    20c2:	6863      	ldr	r3, [r4, #4]
    20c4:	490c      	ldr	r1, [pc, #48]	; (20f8 <log_output_dropped_process+0x50>)
    20c6:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20c8:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    20ca:	220b      	movs	r2, #11
    20cc:	4628      	mov	r0, r5
    20ce:	f00a ffc8 	bl	d062 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    20d2:	6863      	ldr	r3, [r4, #4]
    20d4:	4632      	mov	r2, r6
    20d6:	4669      	mov	r1, sp
    20d8:	4628      	mov	r0, r5
    20da:	685b      	ldr	r3, [r3, #4]
    20dc:	f00a ffc1 	bl	d062 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    20e0:	6863      	ldr	r3, [r4, #4]
    20e2:	4906      	ldr	r1, [pc, #24]	; (20fc <log_output_dropped_process+0x54>)
    20e4:	685b      	ldr	r3, [r3, #4]
    20e6:	221b      	movs	r2, #27
    20e8:	4628      	mov	r0, r5
    20ea:	f00a ffba 	bl	d062 <buffer_write>
		     output->control_block->ctx);
}
    20ee:	b002      	add	sp, #8
    20f0:	bd70      	pop	{r4, r5, r6, pc}
    20f2:	bf00      	nop
    20f4:	0000fe03 	.word	0x0000fe03
    20f8:	0000f325 	.word	0x0000f325
    20fc:	0000f309 	.word	0x0000f309

00002100 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2100:	4a07      	ldr	r2, [pc, #28]	; (2120 <log_output_timestamp_freq_set+0x20>)
    2102:	2100      	movs	r1, #0
    2104:	2301      	movs	r3, #1
    2106:	4290      	cmp	r0, r2
    2108:	d806      	bhi.n	2118 <log_output_timestamp_freq_set+0x18>
    210a:	4a06      	ldr	r2, [pc, #24]	; (2124 <log_output_timestamp_freq_set+0x24>)
    210c:	b901      	cbnz	r1, 2110 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    210e:	2301      	movs	r3, #1
    2110:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2112:	4b05      	ldr	r3, [pc, #20]	; (2128 <log_output_timestamp_freq_set+0x28>)
    2114:	6018      	str	r0, [r3, #0]
}
    2116:	4770      	bx	lr
		frequency /= 2U;
    2118:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    211a:	005b      	lsls	r3, r3, #1
    211c:	2101      	movs	r1, #1
    211e:	e7f2      	b.n	2106 <log_output_timestamp_freq_set+0x6>
    2120:	000f4240 	.word	0x000f4240
    2124:	20000cf8 	.word	0x20000cf8
    2128:	20000cfc 	.word	0x20000cfc

0000212c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    212c:	4b01      	ldr	r3, [pc, #4]	; (2134 <format_set+0x8>)
	return 0;
}
    212e:	2000      	movs	r0, #0
	log_format_current = log_type;
    2130:	6019      	str	r1, [r3, #0]
}
    2132:	4770      	bx	lr
    2134:	20000d14 	.word	0x20000d14

00002138 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    2138:	4b02      	ldr	r3, [pc, #8]	; (2144 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    213a:	4803      	ldr	r0, [pc, #12]	; (2148 <panic+0x10>)
    213c:	2201      	movs	r2, #1
    213e:	701a      	strb	r2, [r3, #0]
    2140:	f00a bfa3 	b.w	d08a <log_output_flush>
    2144:	2000240f 	.word	0x2000240f
    2148:	0000ec30 	.word	0x0000ec30

0000214c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    214c:	4801      	ldr	r0, [pc, #4]	; (2154 <dropped+0x8>)
    214e:	f7ff bfab 	b.w	20a8 <log_output_dropped_process>
    2152:	bf00      	nop
    2154:	0000ec30 	.word	0x0000ec30

00002158 <process>:
{
    2158:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    215a:	4b06      	ldr	r3, [pc, #24]	; (2174 <process+0x1c>)
    215c:	6818      	ldr	r0, [r3, #0]
{
    215e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2160:	f7ff fb48 	bl	17f4 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    2164:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2166:	4603      	mov	r3, r0
}
    2168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    216c:	4802      	ldr	r0, [pc, #8]	; (2178 <process+0x20>)
    216e:	220f      	movs	r2, #15
    2170:	4718      	bx	r3
    2172:	bf00      	nop
    2174:	20000d14 	.word	0x20000d14
    2178:	0000ec30 	.word	0x0000ec30

0000217c <char_out>:
{
    217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    217e:	4f07      	ldr	r7, [pc, #28]	; (219c <char_out+0x20>)
    2180:	460d      	mov	r5, r1
    2182:	4604      	mov	r4, r0
    2184:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    2186:	42b4      	cmp	r4, r6
    2188:	d101      	bne.n	218e <char_out+0x12>
}
    218a:	4628      	mov	r0, r5
    218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    218e:	f814 1b01 	ldrb.w	r1, [r4], #1
    2192:	68bb      	ldr	r3, [r7, #8]
    2194:	4801      	ldr	r0, [pc, #4]	; (219c <char_out+0x20>)
    2196:	685b      	ldr	r3, [r3, #4]
    2198:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    219a:	e7f4      	b.n	2186 <char_out+0xa>
    219c:	0000e8c4 	.word	0x0000e8c4

000021a0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    21a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21a4:	4605      	mov	r5, r0
	__asm__ volatile(
    21a6:	f04f 0320 	mov.w	r3, #32
    21aa:	f3ef 8611 	mrs	r6, BASEPRI
    21ae:	f383 8812 	msr	BASEPRI_MAX, r3
    21b2:	f3bf 8f6f 	isb	sy
	return list->head;
    21b6:	4b0e      	ldr	r3, [pc, #56]	; (21f0 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    21b8:	4f0e      	ldr	r7, [pc, #56]	; (21f4 <pm_state_notify+0x54>)
    21ba:	681c      	ldr	r4, [r3, #0]
    21bc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 21f8 <pm_state_notify+0x58>
    21c0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    21c4:	b92c      	cbnz	r4, 21d2 <pm_state_notify+0x32>
	__asm__ volatile(
    21c6:	f386 8811 	msr	BASEPRI, r6
    21ca:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    21ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    21d2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    21d6:	2d00      	cmp	r5, #0
    21d8:	bf18      	it	ne
    21da:	4613      	movne	r3, r2
		if (callback) {
    21dc:	b12b      	cbz	r3, 21ea <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    21de:	f898 2010 	ldrb.w	r2, [r8, #16]
    21e2:	fb09 f202 	mul.w	r2, r9, r2
    21e6:	5cb8      	ldrb	r0, [r7, r2]
    21e8:	4798      	blx	r3
	return node->next;
    21ea:	6824      	ldr	r4, [r4, #0]
    21ec:	e7ea      	b.n	21c4 <pm_state_notify+0x24>
    21ee:	bf00      	nop
    21f0:	20000d30 	.word	0x20000d30
    21f4:	20000d24 	.word	0x20000d24
    21f8:	200021f8 	.word	0x200021f8

000021fc <pm_system_resume>:

void pm_system_resume(void)
{
    21fc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    21fe:	4b19      	ldr	r3, [pc, #100]	; (2264 <pm_system_resume+0x68>)
    2200:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2202:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2206:	f004 031f 	and.w	r3, r4, #31
    220a:	2201      	movs	r2, #1
    220c:	409a      	lsls	r2, r3
    220e:	4b16      	ldr	r3, [pc, #88]	; (2268 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2210:	0961      	lsrs	r1, r4, #5
    2212:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2216:	43d0      	mvns	r0, r2
    2218:	e853 1f00 	ldrex	r1, [r3]
    221c:	ea01 0500 	and.w	r5, r1, r0
    2220:	e843 5600 	strex	r6, r5, [r3]
    2224:	2e00      	cmp	r6, #0
    2226:	d1f7      	bne.n	2218 <pm_system_resume+0x1c>
    2228:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    222c:	420a      	tst	r2, r1
    222e:	d013      	beq.n	2258 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2230:	4b0e      	ldr	r3, [pc, #56]	; (226c <pm_system_resume+0x70>)
    2232:	4d0f      	ldr	r5, [pc, #60]	; (2270 <pm_system_resume+0x74>)
    2234:	b18b      	cbz	r3, 225a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2236:	230c      	movs	r3, #12
    2238:	4363      	muls	r3, r4
    223a:	18ea      	adds	r2, r5, r3
    223c:	5ce8      	ldrb	r0, [r5, r3]
    223e:	7851      	ldrb	r1, [r2, #1]
    2240:	f00b f901 	bl	d446 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2244:	2000      	movs	r0, #0
    2246:	f7ff ffab 	bl	21a0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    224a:	230c      	movs	r3, #12
    224c:	435c      	muls	r4, r3
    224e:	192a      	adds	r2, r5, r4
    2250:	2300      	movs	r3, #0
    2252:	512b      	str	r3, [r5, r4]
    2254:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2258:	bd70      	pop	{r4, r5, r6, pc}
    225a:	f383 8811 	msr	BASEPRI, r3
    225e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2262:	e7ef      	b.n	2244 <pm_system_resume+0x48>
    2264:	200021f8 	.word	0x200021f8
    2268:	20000d38 	.word	0x20000d38
    226c:	0000d447 	.word	0x0000d447
    2270:	20000d24 	.word	0x20000d24

00002274 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2278:	4b35      	ldr	r3, [pc, #212]	; (2350 <pm_system_suspend+0xdc>)
{
    227a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    227c:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    227e:	f04f 0320 	mov.w	r3, #32
    2282:	f3ef 8811 	mrs	r8, BASEPRI
    2286:	f383 8812 	msr	BASEPRI_MAX, r3
    228a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    228e:	240c      	movs	r4, #12
    2290:	4b30      	ldr	r3, [pc, #192]	; (2354 <pm_system_suspend+0xe0>)
    2292:	4e31      	ldr	r6, [pc, #196]	; (2358 <pm_system_suspend+0xe4>)
    2294:	436c      	muls	r4, r5
    2296:	191a      	adds	r2, r3, r4
    2298:	5d19      	ldrb	r1, [r3, r4]
    229a:	2900      	cmp	r1, #0
    229c:	d04c      	beq.n	2338 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    229e:	ca07      	ldmia	r2, {r0, r1, r2}
    22a0:	eb06 0c04 	add.w	ip, r6, r4
    22a4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    22a8:	2200      	movs	r2, #0
    22aa:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    22ac:	f388 8811 	msr	BASEPRI, r8
    22b0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    22b4:	230c      	movs	r3, #12
    22b6:	436b      	muls	r3, r5
    22b8:	18f2      	adds	r2, r6, r3
    22ba:	5cf0      	ldrb	r0, [r6, r3]
    22bc:	2800      	cmp	r0, #0
    22be:	d039      	beq.n	2334 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    22c0:	1c7b      	adds	r3, r7, #1
    22c2:	d010      	beq.n	22e6 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    22c4:	f8d2 c008 	ldr.w	ip, [r2, #8]
    22c8:	4c24      	ldr	r4, [pc, #144]	; (235c <pm_system_suspend+0xe8>)
    22ca:	4a25      	ldr	r2, [pc, #148]	; (2360 <pm_system_suspend+0xec>)
    22cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    22d0:	2100      	movs	r1, #0
    22d2:	fbec 4100 	umlal	r4, r1, ip, r0
    22d6:	2300      	movs	r3, #0
    22d8:	4620      	mov	r0, r4
    22da:	f7fd ff11 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    22de:	2101      	movs	r1, #1
    22e0:	1a38      	subs	r0, r7, r0
    22e2:	f006 fa97 	bl	8814 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    22e6:	f009 f931 	bl	b54c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    22ea:	2001      	movs	r0, #1
    22ec:	f7ff ff58 	bl	21a0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    22f0:	f3bf 8f5b 	dmb	ish
    22f4:	4b1b      	ldr	r3, [pc, #108]	; (2364 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    22f6:	096a      	lsrs	r2, r5, #5
    22f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    22fc:	f005 011f 	and.w	r1, r5, #31
    2300:	2201      	movs	r2, #1
    2302:	408a      	lsls	r2, r1
    2304:	e853 0f00 	ldrex	r0, [r3]
    2308:	4310      	orrs	r0, r2
    230a:	e843 0100 	strex	r1, r0, [r3]
    230e:	2900      	cmp	r1, #0
    2310:	d1f8      	bne.n	2304 <pm_system_suspend+0x90>
    2312:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2316:	4b14      	ldr	r3, [pc, #80]	; (2368 <pm_system_suspend+0xf4>)
    2318:	b13b      	cbz	r3, 232a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    231a:	230c      	movs	r3, #12
    231c:	fb03 f005 	mul.w	r0, r3, r5
    2320:	1833      	adds	r3, r6, r0
    2322:	5c30      	ldrb	r0, [r6, r0]
    2324:	7859      	ldrb	r1, [r3, #1]
    2326:	f00b f882 	bl	d42e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    232a:	f7ff ff67 	bl	21fc <pm_system_resume>
	k_sched_unlock();
    232e:	f009 f921 	bl	b574 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    2332:	2001      	movs	r0, #1
}
    2334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    2338:	4601      	mov	r1, r0
    233a:	4628      	mov	r0, r5
    233c:	f000 f816 	bl	236c <pm_policy_next_state>
		if (info != NULL) {
    2340:	2800      	cmp	r0, #0
    2342:	d0b3      	beq.n	22ac <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    2344:	c807      	ldmia	r0, {r0, r1, r2}
    2346:	4434      	add	r4, r6
    2348:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    234c:	e7ae      	b.n	22ac <pm_system_suspend+0x38>
    234e:	bf00      	nop
    2350:	200021f8 	.word	0x200021f8
    2354:	20000d18 	.word	0x20000d18
    2358:	20000d24 	.word	0x20000d24
    235c:	000f423f 	.word	0x000f423f
    2360:	000f4240 	.word	0x000f4240
    2364:	20000d38 	.word	0x20000d38
    2368:	0000d42f 	.word	0x0000d42f

0000236c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    236c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2370:	b085      	sub	sp, #20
    2372:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2374:	a903      	add	r1, sp, #12
    2376:	f000 f843 	bl	2400 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    237a:	4b1e      	ldr	r3, [pc, #120]	; (23f4 <pm_policy_next_state+0x88>)
    237c:	9d03      	ldr	r5, [sp, #12]
    237e:	f8d3 a000 	ldr.w	sl, [r3]
    2382:	f8df 8074 	ldr.w	r8, [pc, #116]	; 23f8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2386:	1e43      	subs	r3, r0, #1
    2388:	b21b      	sxth	r3, r3
    238a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    238e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2390:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2394:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2398:	f04f 0b00 	mov.w	fp, #0
    239c:	b924      	cbnz	r4, 23a8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    239e:	46a1      	mov	r9, r4
}
    23a0:	4648      	mov	r0, r9
    23a2:	b005      	add	sp, #20
    23a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23a8:	6868      	ldr	r0, [r5, #4]
    23aa:	4a14      	ldr	r2, [pc, #80]	; (23fc <pm_policy_next_state+0x90>)
    23ac:	46c4      	mov	ip, r8
    23ae:	4659      	mov	r1, fp
    23b0:	fbe0 c107 	umlal	ip, r1, r0, r7
    23b4:	2300      	movs	r3, #0
    23b6:	4660      	mov	r0, ip
    23b8:	f7fd fea2 	bl	100 <__aeabi_uldivmod>
    23bc:	9001      	str	r0, [sp, #4]
    23be:	68a8      	ldr	r0, [r5, #8]
    23c0:	4a0e      	ldr	r2, [pc, #56]	; (23fc <pm_policy_next_state+0x90>)
    23c2:	46c4      	mov	ip, r8
    23c4:	4659      	mov	r1, fp
    23c6:	fbe0 c107 	umlal	ip, r1, r0, r7
    23ca:	2300      	movs	r3, #0
    23cc:	4660      	mov	r0, ip
    23ce:	f7fd fe97 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    23d2:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    23d6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    23d8:	d001      	beq.n	23de <pm_policy_next_state+0x72>
    23da:	4582      	cmp	sl, r0
    23dc:	d905      	bls.n	23ea <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    23de:	1c73      	adds	r3, r6, #1
    23e0:	d0de      	beq.n	23a0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    23e2:	9b01      	ldr	r3, [sp, #4]
    23e4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    23e6:	42b0      	cmp	r0, r6
    23e8:	d9da      	bls.n	23a0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    23ea:	3c01      	subs	r4, #1
    23ec:	b2a4      	uxth	r4, r4
    23ee:	3d0c      	subs	r5, #12
    23f0:	e7d4      	b.n	239c <pm_policy_next_state+0x30>
    23f2:	bf00      	nop
    23f4:	200000b8 	.word	0x200000b8
    23f8:	000f423f 	.word	0x000f423f
    23fc:	000f4240 	.word	0x000f4240

00002400 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2400:	b908      	cbnz	r0, 2406 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2402:	4b02      	ldr	r3, [pc, #8]	; (240c <pm_state_cpu_get_all+0xc>)
    2404:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2406:	2000      	movs	r0, #0
    2408:	4770      	bx	lr
    240a:	bf00      	nop
    240c:	0000ec40 	.word	0x0000ec40

00002410 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    2410:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2412:	4b0c      	ldr	r3, [pc, #48]	; (2444 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2414:	4e0c      	ldr	r6, [pc, #48]	; (2448 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2416:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2418:	4b0c      	ldr	r3, [pc, #48]	; (244c <class_handler+0x3c>)
    241a:	42b3      	cmp	r3, r6
    241c:	d303      	bcc.n	2426 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    241e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2422:	bcf0      	pop	{r4, r5, r6, r7}
    2424:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    2426:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2428:	42bd      	cmp	r5, r7
    242a:	d309      	bcc.n	2440 <class_handler+0x30>
		if (iface->class_handler &&
    242c:	691c      	ldr	r4, [r3, #16]
    242e:	b13c      	cbz	r4, 2440 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    2430:	f895 c002 	ldrb.w	ip, [r5, #2]
    2434:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    2436:	45ac      	cmp	ip, r5
    2438:	d102      	bne.n	2440 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    243a:	4623      	mov	r3, r4
}
    243c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    243e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2440:	3324      	adds	r3, #36	; 0x24
    2442:	e7ea      	b.n	241a <class_handler+0xa>
    2444:	20000d3c 	.word	0x20000d3c
    2448:	200004fc 	.word	0x200004fc
    244c:	200004d8 	.word	0x200004d8

00002450 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    2450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2454:	4c13      	ldr	r4, [pc, #76]	; (24a4 <custom_handler+0x54>)
    2456:	f8df 8050 	ldr.w	r8, [pc, #80]	; 24a8 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    245a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 24ac <custom_handler+0x5c>
{
    245e:	4605      	mov	r5, r0
    2460:	460e      	mov	r6, r1
    2462:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2464:	4544      	cmp	r4, r8
    2466:	d303      	bcc.n	2470 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    2468:	f06f 0085 	mvn.w	r0, #133	; 0x85
    246c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    2470:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2472:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    2476:	429a      	cmp	r2, r3
    2478:	d312      	bcc.n	24a0 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    247a:	69a3      	ldr	r3, [r4, #24]
    247c:	b183      	cbz	r3, 24a0 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    247e:	7890      	ldrb	r0, [r2, #2]
    2480:	7929      	ldrb	r1, [r5, #4]
    2482:	4288      	cmp	r0, r1
    2484:	d105      	bne.n	2492 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    2486:	463a      	mov	r2, r7
    2488:	4631      	mov	r1, r6
    248a:	4628      	mov	r0, r5
}
    248c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    2490:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    2492:	7952      	ldrb	r2, [r2, #5]
    2494:	2a01      	cmp	r2, #1
    2496:	d103      	bne.n	24a0 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    2498:	463a      	mov	r2, r7
    249a:	4631      	mov	r1, r6
    249c:	4628      	mov	r0, r5
    249e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    24a0:	3424      	adds	r4, #36	; 0x24
    24a2:	e7df      	b.n	2464 <custom_handler+0x14>
    24a4:	200004d8 	.word	0x200004d8
    24a8:	200004fc 	.word	0x200004fc
    24ac:	20000d3c 	.word	0x20000d3c

000024b0 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    24b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    24b4:	4c0b      	ldr	r4, [pc, #44]	; (24e4 <vendor_handler+0x34>)
    24b6:	f8df 8030 	ldr.w	r8, [pc, #48]	; 24e8 <vendor_handler+0x38>
{
    24ba:	4605      	mov	r5, r0
    24bc:	460e      	mov	r6, r1
    24be:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    24c0:	4544      	cmp	r4, r8
    24c2:	d302      	bcc.n	24ca <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    24c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    24c8:	e009      	b.n	24de <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    24ca:	6963      	ldr	r3, [r4, #20]
    24cc:	b90b      	cbnz	r3, 24d2 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    24ce:	3424      	adds	r4, #36	; 0x24
    24d0:	e7f6      	b.n	24c0 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    24d2:	463a      	mov	r2, r7
    24d4:	4631      	mov	r1, r6
    24d6:	4628      	mov	r0, r5
    24d8:	4798      	blx	r3
    24da:	2800      	cmp	r0, #0
    24dc:	d1f7      	bne.n	24ce <vendor_handler+0x1e>
}
    24de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24e2:	bf00      	nop
    24e4:	200004d8 	.word	0x200004d8
    24e8:	200004fc 	.word	0x200004fc

000024ec <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    24ec:	4802      	ldr	r0, [pc, #8]	; (24f8 <usb_reset_alt_setting+0xc>)
    24ee:	2208      	movs	r2, #8
    24f0:	2100      	movs	r1, #0
    24f2:	f00a bf90 	b.w	d416 <memset>
    24f6:	bf00      	nop
    24f8:	20000df7 	.word	0x20000df7

000024fc <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    24fc:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    24fe:	4b0b      	ldr	r3, [pc, #44]	; (252c <is_ep_valid.part.0+0x30>)
    2500:	4c0b      	ldr	r4, [pc, #44]	; (2530 <is_ep_valid.part.0+0x34>)
    2502:	42a3      	cmp	r3, r4
    2504:	d301      	bcc.n	250a <is_ep_valid.part.0+0xe>
	return false;
    2506:	2000      	movs	r0, #0
}
    2508:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    250a:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    250c:	7f1e      	ldrb	r6, [r3, #28]
    250e:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    2510:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2512:	b2d5      	uxtb	r5, r2
    2514:	42ae      	cmp	r6, r5
    2516:	d801      	bhi.n	251c <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2518:	3324      	adds	r3, #36	; 0x24
    251a:	e7f2      	b.n	2502 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    251c:	3201      	adds	r2, #1
    251e:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    2522:	4285      	cmp	r5, r0
    2524:	d1f5      	bne.n	2512 <is_ep_valid.part.0+0x16>
		return true;
    2526:	2001      	movs	r0, #1
    2528:	e7ee      	b.n	2508 <is_ep_valid.part.0+0xc>
    252a:	bf00      	nop
    252c:	200004d8 	.word	0x200004d8
    2530:	200004fc 	.word	0x200004fc

00002534 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    2534:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    2536:	4809      	ldr	r0, [pc, #36]	; (255c <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    2538:	7803      	ldrb	r3, [r0, #0]
    253a:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    253e:	330a      	adds	r3, #10
    2540:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    2544:	b13b      	cbz	r3, 2556 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    2546:	f100 0208 	add.w	r2, r0, #8
    254a:	f100 0110 	add.w	r1, r0, #16
    254e:	4798      	blx	r3
    2550:	43c0      	mvns	r0, r0
    2552:	0fc0      	lsrs	r0, r0, #31
}
    2554:	bd08      	pop	{r3, pc}
		return false;
    2556:	4618      	mov	r0, r3
    2558:	e7fc      	b.n	2554 <usb_handle_request.constprop.0+0x20>
    255a:	bf00      	nop
    255c:	20000d3c 	.word	0x20000d3c

00002560 <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
    2560:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    2562:	4b07      	ldr	r3, [pc, #28]	; (2580 <usb_device_init.part.0+0x20>)
    2564:	9305      	str	r3, [sp, #20]
    2566:	4807      	ldr	r0, [pc, #28]	; (2584 <usb_device_init.part.0+0x24>)
    2568:	2302      	movs	r3, #2
    256a:	aa04      	add	r2, sp, #16
    256c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2570:	9304      	str	r3, [sp, #16]
    2572:	f00a fdc1 	bl	d0f8 <z_log_msg_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    2576:	f04f 30ff 	mov.w	r0, #4294967295
    257a:	b007      	add	sp, #28
    257c:	f85d fb04 	ldr.w	pc, [sp], #4
    2580:	0000f36e 	.word	0x0000f36e
    2584:	0000eb84 	.word	0x0000eb84

00002588 <get_ep_bm_from_addr.part.0>:
static uint32_t get_ep_bm_from_addr(uint8_t ep)
    2588:	b580      	push	{r7, lr}
    258a:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
    258c:	b088      	sub	sp, #32
    258e:	466a      	mov	r2, sp
    2590:	4b06      	ldr	r3, [pc, #24]	; (25ac <get_ep_bm_from_addr.part.0+0x24>)
    2592:	e9c2 3005 	strd	r3, r0, [r2, #20]
    2596:	2303      	movs	r3, #3
    2598:	f842 3f10 	str.w	r3, [r2, #16]!
    259c:	4804      	ldr	r0, [pc, #16]	; (25b0 <get_ep_bm_from_addr.part.0+0x28>)
    259e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    25a2:	f00a fda9 	bl	d0f8 <z_log_msg_static_create.constprop.0>
}
    25a6:	2000      	movs	r0, #0
    25a8:	46bd      	mov	sp, r7
    25aa:	bd80      	pop	{r7, pc}
    25ac:	0000f393 	.word	0x0000f393
    25b0:	0000eb84 	.word	0x0000eb84

000025b4 <disable_endpoint>:
{
    25b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25b6:	af00      	add	r7, sp, #0
    25b8:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
    25ba:	f00a ff64 	bl	d486 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    25be:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_disable(ep_addr);
    25c2:	4604      	mov	r4, r0
	if (ret == -EALREADY) {
    25c4:	d11a      	bne.n	25fc <disable_endpoint+0x48>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_addr);
    25c6:	466c      	mov	r4, sp
    25c8:	b088      	sub	sp, #32
    25ca:	466a      	mov	r2, sp
    25cc:	4b15      	ldr	r3, [pc, #84]	; (2624 <disable_endpoint+0x70>)
    25ce:	4816      	ldr	r0, [pc, #88]	; (2628 <disable_endpoint+0x74>)
    25d0:	e9c2 3505 	strd	r3, r5, [r2, #20]
    25d4:	2303      	movs	r3, #3
    25d6:	f842 3f10 	str.w	r3, [r2, #16]!
    25da:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    25de:	f00a fd8b 	bl	d0f8 <z_log_msg_static_create.constprop.0>
    25e2:	46a5      	mov	sp, r4
	ep_bm = get_ep_bm_from_addr(ep_addr);
    25e4:	4628      	mov	r0, r5
    25e6:	f00a fd8a 	bl	d0fe <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    25ea:	4a10      	ldr	r2, [pc, #64]	; (262c <disable_endpoint+0x78>)
    25ec:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    25f0:	ea23 0300 	bic.w	r3, r3, r0
    25f4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    25f8:	2400      	movs	r4, #0
    25fa:	e010      	b.n	261e <disable_endpoint+0x6a>
	} else if (ret) {
    25fc:	2800      	cmp	r0, #0
    25fe:	d0f1      	beq.n	25e4 <disable_endpoint+0x30>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
    2600:	466e      	mov	r6, sp
    2602:	b088      	sub	sp, #32
    2604:	466a      	mov	r2, sp
    2606:	4b0a      	ldr	r3, [pc, #40]	; (2630 <disable_endpoint+0x7c>)
    2608:	4807      	ldr	r0, [pc, #28]	; (2628 <disable_endpoint+0x74>)
    260a:	e9c2 3505 	strd	r3, r5, [r2, #20]
    260e:	2303      	movs	r3, #3
    2610:	f842 3f10 	str.w	r3, [r2, #16]!
    2614:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2618:	f00a fd6e 	bl	d0f8 <z_log_msg_static_create.constprop.0>
    261c:	46b5      	mov	sp, r6
}
    261e:	4620      	mov	r0, r4
    2620:	46bd      	mov	sp, r7
    2622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2624:	0000f3ae 	.word	0x0000f3ae
    2628:	0000eb84 	.word	0x0000eb84
    262c:	20000d3c 	.word	0x20000d3c
    2630:	0000f3cf 	.word	0x0000f3cf

00002634 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    2634:	2804      	cmp	r0, #4
{
    2636:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    263a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 26d8 <forward_status_cb+0xa4>
    263e:	4604      	mov	r4, r0
    2640:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    2642:	d015      	beq.n	2670 <forward_status_cb+0x3c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2644:	2801      	cmp	r0, #1
    2646:	d12f      	bne.n	26a8 <forward_status_cb+0x74>
		if (usb_dev.configured) {
    2648:	f8df 8090 	ldr.w	r8, [pc, #144]	; 26dc <forward_status_cb+0xa8>
    264c:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    2650:	b353      	cbz	r3, 26a8 <forward_status_cb+0x74>
			usb_cancel_transfers();
    2652:	f000 ff51 	bl	34f8 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2656:	4d22      	ldr	r5, [pc, #136]	; (26e0 <forward_status_cb+0xac>)
    2658:	454d      	cmp	r5, r9
    265a:	d222      	bcs.n	26a2 <forward_status_cb+0x6e>
		ep_data = cfg_data->endpoint;
    265c:	6a2a      	ldr	r2, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    265e:	f04f 0a00 	mov.w	sl, #0
    2662:	7f2b      	ldrb	r3, [r5, #28]
    2664:	fa5f f68a 	uxtb.w	r6, sl
    2668:	42b3      	cmp	r3, r6
    266a:	d804      	bhi.n	2676 <forward_status_cb+0x42>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    266c:	3524      	adds	r5, #36	; 0x24
    266e:	e7f3      	b.n	2658 <forward_status_cb+0x24>
		usb_reset_alt_setting();
    2670:	f7ff ff3c 	bl	24ec <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2674:	e7e8      	b.n	2648 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    2676:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
    267a:	9201      	str	r2, [sp, #4]
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    267c:	7930      	ldrb	r0, [r6, #4]
    267e:	f00a ff02 	bl	d486 <usb_dc_ep_disable>
    2682:	4683      	mov	fp, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    2684:	7930      	ldrb	r0, [r6, #4]
    2686:	f00a fd3a 	bl	d0fe <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    268a:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    268e:	9a01      	ldr	r2, [sp, #4]
	usb_dev.ep_bm &= ~ep_bm;
    2690:	ea23 0300 	bic.w	r3, r3, r0
			if (ret < 0) {
    2694:	f1bb 0f00 	cmp.w	fp, #0
	usb_dev.ep_bm &= ~ep_bm;
    2698:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    269c:	f10a 0a01 	add.w	sl, sl, #1
    26a0:	dadf      	bge.n	2662 <forward_status_cb+0x2e>
			usb_dev.configured = false;
    26a2:	2300      	movs	r3, #0
    26a4:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    26a8:	4d0d      	ldr	r5, [pc, #52]	; (26e0 <forward_status_cb+0xac>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    26aa:	454d      	cmp	r5, r9
    26ac:	d308      	bcc.n	26c0 <forward_status_cb+0x8c>
	if (usb_dev.user_status_callback) {
    26ae:	4b0b      	ldr	r3, [pc, #44]	; (26dc <forward_status_cb+0xa8>)
    26b0:	6a1b      	ldr	r3, [r3, #32]
    26b2:	b16b      	cbz	r3, 26d0 <forward_status_cb+0x9c>
		usb_dev.user_status_callback(status, param);
    26b4:	4639      	mov	r1, r7
    26b6:	4620      	mov	r0, r4
}
    26b8:	b003      	add	sp, #12
    26ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    26be:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    26c0:	68eb      	ldr	r3, [r5, #12]
    26c2:	b11b      	cbz	r3, 26cc <forward_status_cb+0x98>
			cfg_data->cb_usb_status(cfg_data, status, param);
    26c4:	463a      	mov	r2, r7
    26c6:	4621      	mov	r1, r4
    26c8:	4628      	mov	r0, r5
    26ca:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    26cc:	3524      	adds	r5, #36	; 0x24
    26ce:	e7ec      	b.n	26aa <forward_status_cb+0x76>
}
    26d0:	b003      	add	sp, #12
    26d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26d6:	bf00      	nop
    26d8:	200004fc 	.word	0x200004fc
    26dc:	20000d3c 	.word	0x20000d3c
    26e0:	200004d8 	.word	0x200004d8

000026e4 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    26e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26e6:	b083      	sub	sp, #12
	uint8_t ep = setup->wIndex;
    26e8:	b2c4      	uxtb	r4, r0
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    26ea:	af00      	add	r7, sp, #0
	if (USB_EP_GET_IDX(ep) == 0) {
    26ec:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    26ee:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    26f0:	71fc      	strb	r4, [r7, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    26f2:	d007      	beq.n	2704 <usb_halt_endpoint_req.isra.0+0x20>
    26f4:	4620      	mov	r0, r4
    26f6:	f7ff ff01 	bl	24fc <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    26fa:	b1e8      	cbz	r0, 2738 <usb_halt_endpoint_req.isra.0+0x54>
	return (usb_dev.configuration != 0);
    26fc:	4b1c      	ldr	r3, [pc, #112]	; (2770 <usb_halt_endpoint_req.isra.0+0x8c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    26fe:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    2702:	b1c8      	cbz	r0, 2738 <usb_halt_endpoint_req.isra.0+0x54>
		if (halt) {
    2704:	4e1a      	ldr	r6, [pc, #104]	; (2770 <usb_halt_endpoint_req.isra.0+0x8c>)
    2706:	b1d5      	cbz	r5, 273e <usb_halt_endpoint_req.isra.0+0x5a>
			LOG_INF("Set halt ep 0x%02x", ep);
    2708:	466d      	mov	r5, sp
    270a:	b088      	sub	sp, #32
    270c:	466a      	mov	r2, sp
    270e:	4b19      	ldr	r3, [pc, #100]	; (2774 <usb_halt_endpoint_req.isra.0+0x90>)
    2710:	4819      	ldr	r0, [pc, #100]	; (2778 <usb_halt_endpoint_req.isra.0+0x94>)
    2712:	e9c2 3405 	strd	r3, r4, [r2, #20]
    2716:	2303      	movs	r3, #3
    2718:	f842 3f10 	str.w	r3, [r2, #16]!
    271c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    2720:	f00a fcea 	bl	d0f8 <z_log_msg_static_create.constprop.0>
    2724:	46ad      	mov	sp, r5
			usb_dc_ep_set_stall(ep);
    2726:	79f8      	ldrb	r0, [r7, #7]
    2728:	f002 fcfe 	bl	5128 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    272c:	69f3      	ldr	r3, [r6, #28]
    272e:	b113      	cbz	r3, 2736 <usb_halt_endpoint_req.isra.0+0x52>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    2730:	1df9      	adds	r1, r7, #7
    2732:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2734:	4798      	blx	r3
		return true;
    2736:	2001      	movs	r0, #1
}
    2738:	370c      	adds	r7, #12
    273a:	46bd      	mov	sp, r7
    273c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
    273e:	466d      	mov	r5, sp
    2740:	b088      	sub	sp, #32
    2742:	466a      	mov	r2, sp
    2744:	4b0d      	ldr	r3, [pc, #52]	; (277c <usb_halt_endpoint_req.isra.0+0x98>)
    2746:	480c      	ldr	r0, [pc, #48]	; (2778 <usb_halt_endpoint_req.isra.0+0x94>)
    2748:	e9c2 3405 	strd	r3, r4, [r2, #20]
    274c:	2303      	movs	r3, #3
    274e:	f842 3f10 	str.w	r3, [r2, #16]!
    2752:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    2756:	f00a fccf 	bl	d0f8 <z_log_msg_static_create.constprop.0>
    275a:	46ad      	mov	sp, r5
			usb_dc_ep_clear_stall(ep);
    275c:	79f8      	ldrb	r0, [r7, #7]
    275e:	f002 fd1d 	bl	519c <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    2762:	69f3      	ldr	r3, [r6, #28]
    2764:	2b00      	cmp	r3, #0
    2766:	d0e6      	beq.n	2736 <usb_halt_endpoint_req.isra.0+0x52>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2768:	1df9      	adds	r1, r7, #7
    276a:	2009      	movs	r0, #9
    276c:	e7e2      	b.n	2734 <usb_halt_endpoint_req.isra.0+0x50>
    276e:	bf00      	nop
    2770:	20000d3c 	.word	0x20000d3c
    2774:	0000f3f1 	.word	0x0000f3f1
    2778:	0000eb84 	.word	0x0000eb84
    277c:	0000f404 	.word	0x0000f404

00002780 <set_endpoint>:
{
    2780:	b5f0      	push	{r4, r5, r6, r7, lr}
    2782:	b083      	sub	sp, #12
    2784:	af00      	add	r7, sp, #0
    2786:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2788:	7880      	ldrb	r0, [r0, #2]
    278a:	7038      	strb	r0, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    278c:	7923      	ldrb	r3, [r4, #4]
    278e:	7962      	ldrb	r2, [r4, #5]
	if (ep_bm & usb_dev.ep_bm) {
    2790:	4d36      	ldr	r5, [pc, #216]	; (286c <set_endpoint+0xec>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    2792:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2796:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2798:	78e3      	ldrb	r3, [r4, #3]
    279a:	f003 0303 	and.w	r3, r3, #3
    279e:	713b      	strb	r3, [r7, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    27a0:	f00a fcad 	bl	d0fe <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    27a4:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    27a8:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    27aa:	4606      	mov	r6, r0
	if (ep_bm & usb_dev.ep_bm) {
    27ac:	d00c      	beq.n	27c8 <set_endpoint+0x48>
		reset_endpoint(ep_desc);
    27ae:	78a4      	ldrb	r4, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    27b0:	4620      	mov	r0, r4
    27b2:	f000 fe83 	bl	34bc <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    27b6:	4620      	mov	r0, r4
    27b8:	f7ff fefc 	bl	25b4 <disable_endpoint>
		if (!k_is_in_isr()) {
    27bc:	f00b fba0 	bl	df00 <k_is_in_isr>
    27c0:	b910      	cbnz	r0, 27c8 <set_endpoint+0x48>
	return z_impl_k_usleep(us);
    27c2:	2096      	movs	r0, #150	; 0x96
    27c4:	f008 ff96 	bl	b6f4 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    27c8:	4638      	mov	r0, r7
    27ca:	f002 fc79 	bl	50c0 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    27ce:	f110 0f78 	cmn.w	r0, #120	; 0x78
    27d2:	783b      	ldrb	r3, [r7, #0]
    27d4:	d12d      	bne.n	2832 <set_endpoint+0xb2>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
    27d6:	466c      	mov	r4, sp
    27d8:	b088      	sub	sp, #32
    27da:	466a      	mov	r2, sp
    27dc:	4924      	ldr	r1, [pc, #144]	; (2870 <set_endpoint+0xf0>)
    27de:	4825      	ldr	r0, [pc, #148]	; (2874 <set_endpoint+0xf4>)
    27e0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    27e4:	2303      	movs	r3, #3
    27e6:	f842 3f10 	str.w	r3, [r2, #16]!
    27ea:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    27ee:	f00a fc83 	bl	d0f8 <z_log_msg_static_create.constprop.0>
    27f2:	46a5      	mov	sp, r4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    27f4:	7838      	ldrb	r0, [r7, #0]
    27f6:	f002 fd0d 	bl	5214 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    27fa:	f110 0f78 	cmn.w	r0, #120	; 0x78
    27fe:	d12d      	bne.n	285c <set_endpoint+0xdc>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
    2800:	466c      	mov	r4, sp
    2802:	b088      	sub	sp, #32
    2804:	783b      	ldrb	r3, [r7, #0]
    2806:	466a      	mov	r2, sp
    2808:	491b      	ldr	r1, [pc, #108]	; (2878 <set_endpoint+0xf8>)
    280a:	481a      	ldr	r0, [pc, #104]	; (2874 <set_endpoint+0xf4>)
    280c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2810:	2303      	movs	r3, #3
    2812:	f842 3f10 	str.w	r3, [r2, #16]!
    2816:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    281a:	f00a fc6d 	bl	d0f8 <z_log_msg_static_create.constprop.0>
    281e:	46a5      	mov	sp, r4
	usb_dev.ep_bm |= ep_bm;
    2820:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	usb_dev.configured = true;
    2824:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    2826:	4333      	orrs	r3, r6
	usb_dev.configured = true;
    2828:	f885 00b9 	strb.w	r0, [r5, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    282c:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	return true;
    2830:	e011      	b.n	2856 <set_endpoint+0xd6>
	} else if (ret) {
    2832:	2800      	cmp	r0, #0
    2834:	d0de      	beq.n	27f4 <set_endpoint+0x74>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    2836:	466c      	mov	r4, sp
    2838:	b088      	sub	sp, #32
    283a:	466a      	mov	r2, sp
    283c:	490f      	ldr	r1, [pc, #60]	; (287c <set_endpoint+0xfc>)
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    283e:	480d      	ldr	r0, [pc, #52]	; (2874 <set_endpoint+0xf4>)
    2840:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2844:	2303      	movs	r3, #3
    2846:	f842 3f10 	str.w	r3, [r2, #16]!
    284a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    284e:	f00a fc53 	bl	d0f8 <z_log_msg_static_create.constprop.0>
		return false;
    2852:	2000      	movs	r0, #0
    2854:	46a5      	mov	sp, r4
}
    2856:	370c      	adds	r7, #12
    2858:	46bd      	mov	sp, r7
    285a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (ret) {
    285c:	2800      	cmp	r0, #0
    285e:	d0df      	beq.n	2820 <set_endpoint+0xa0>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    2860:	466c      	mov	r4, sp
    2862:	b088      	sub	sp, #32
    2864:	783b      	ldrb	r3, [r7, #0]
    2866:	466a      	mov	r2, sp
    2868:	4905      	ldr	r1, [pc, #20]	; (2880 <set_endpoint+0x100>)
    286a:	e7e8      	b.n	283e <set_endpoint+0xbe>
    286c:	20000d3c 	.word	0x20000d3c
    2870:	0000f419 	.word	0x0000f419
    2874:	0000eb84 	.word	0x0000eb84
    2878:	0000f460 	.word	0x0000f460
    287c:	0000f43c 	.word	0x0000f43c
    2880:	0000f480 	.word	0x0000f480

00002884 <usb_handle_standard_request>:
{
    2884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    2888:	4ea3      	ldr	r6, [pc, #652]	; (2b18 <usb_handle_standard_request+0x294>)
    288a:	69b3      	ldr	r3, [r6, #24]
{
    288c:	4604      	mov	r4, r0
    288e:	460f      	mov	r7, r1
    2890:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    2892:	b9fb      	cbnz	r3, 28d4 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    2894:	7823      	ldrb	r3, [r4, #0]
    2896:	f003 031f 	and.w	r3, r3, #31
    289a:	2b01      	cmp	r3, #1
    289c:	f000 809d 	beq.w	29da <usb_handle_standard_request+0x156>
    28a0:	2b02      	cmp	r3, #2
    28a2:	f000 8104 	beq.w	2aae <usb_handle_standard_request+0x22a>
    28a6:	bb33      	cbnz	r3, 28f6 <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    28a8:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    28ac:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    28ae:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    28b0:	2800      	cmp	r0, #0
    28b2:	da34      	bge.n	291e <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    28b4:	2906      	cmp	r1, #6
    28b6:	d012      	beq.n	28de <usb_handle_standard_request+0x5a>
    28b8:	2908      	cmp	r1, #8
    28ba:	d02b      	beq.n	2914 <usb_handle_standard_request+0x90>
    28bc:	b9d9      	cbnz	r1, 28f6 <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    28be:	2301      	movs	r3, #1
    28c0:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    28c2:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    28c4:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    28c8:	005b      	lsls	r3, r3, #1
    28ca:	f043 0301 	orr.w	r3, r3, #1
    28ce:	7013      	strb	r3, [r2, #0]
		*len = 2;
    28d0:	2302      	movs	r3, #2
    28d2:	e12a      	b.n	2b2a <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    28d4:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    28d6:	2800      	cmp	r0, #0
    28d8:	d1dc      	bne.n	2894 <usb_handle_standard_request+0x10>
		return 0;
    28da:	2000      	movs	r0, #0
    28dc:	e00d      	b.n	28fa <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    28de:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    28e0:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    28e2:	1f01      	subs	r1, r0, #4
    28e4:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    28e6:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    28e8:	d905      	bls.n	28f6 <usb_handle_standard_request+0x72>
    28ea:	2807      	cmp	r0, #7
    28ec:	d803      	bhi.n	28f6 <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    28ee:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    28f0:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    28f2:	780c      	ldrb	r4, [r1, #0]
    28f4:	b91c      	cbnz	r4, 28fe <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    28f6:	f06f 0015 	mvn.w	r0, #21
}
    28fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    28fe:	784e      	ldrb	r6, [r1, #1]
    2900:	4566      	cmp	r6, ip
    2902:	d103      	bne.n	290c <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    2904:	429a      	cmp	r2, r3
    2906:	f000 810b 	beq.w	2b20 <usb_handle_standard_request+0x29c>
			cur_index++;
    290a:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    290c:	4421      	add	r1, r4
    290e:	e7f0      	b.n	28f2 <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    2910:	780b      	ldrb	r3, [r1, #0]
    2912:	e10a      	b.n	2b2a <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
    2914:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2918:	7013      	strb	r3, [r2, #0]
				*len = 1;
    291a:	2301      	movs	r3, #1
    291c:	e105      	b.n	2b2a <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
    291e:	3901      	subs	r1, #1
    2920:	2908      	cmp	r1, #8
    2922:	d8e8      	bhi.n	28f6 <usb_handle_standard_request+0x72>
    2924:	a301      	add	r3, pc, #4	; (adr r3, 292c <usb_handle_standard_request+0xa8>)
    2926:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    292a:	bf00      	nop
    292c:	000029c5 	.word	0x000029c5
    2930:	000028f7 	.word	0x000028f7
    2934:	000029d3 	.word	0x000029d3
    2938:	000028f7 	.word	0x000028f7
    293c:	00002951 	.word	0x00002951
    2940:	000028f7 	.word	0x000028f7
    2944:	000028f7 	.word	0x000028f7
    2948:	000028f7 	.word	0x000028f7
    294c:	0000295d 	.word	0x0000295d
			return !usb_dc_set_address(setup->wValue);
    2950:	78a0      	ldrb	r0, [r4, #2]
    2952:	f002 fb71 	bl	5038 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    2956:	2800      	cmp	r0, #0
    2958:	d0bf      	beq.n	28da <usb_handle_standard_request+0x56>
    295a:	e7cc      	b.n	28f6 <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    295c:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    295e:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    2960:	bb63      	cbnz	r3, 29bc <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    2962:	f7ff fdc3 	bl	24ec <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2966:	8863      	ldrh	r3, [r4, #2]
    2968:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    296c:	69f3      	ldr	r3, [r6, #28]
    296e:	2b00      	cmp	r3, #0
    2970:	d0b3      	beq.n	28da <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2972:	496a      	ldr	r1, [pc, #424]	; (2b1c <usb_handle_standard_request+0x298>)
    2974:	2003      	movs	r0, #3
    2976:	4798      	blx	r3
    2978:	e7af      	b.n	28da <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    297a:	786b      	ldrb	r3, [r5, #1]
    297c:	2b04      	cmp	r3, #4
    297e:	d010      	beq.n	29a2 <usb_handle_standard_request+0x11e>
    2980:	2b05      	cmp	r3, #5
    2982:	d011      	beq.n	29a8 <usb_handle_standard_request+0x124>
    2984:	2b02      	cmp	r3, #2
    2986:	d104      	bne.n	2992 <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2988:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    298a:	8863      	ldrh	r3, [r4, #2]
				found = true;
    298c:	42bb      	cmp	r3, r7
    298e:	bf08      	it	eq
    2990:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    2992:	782b      	ldrb	r3, [r5, #0]
    2994:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    2996:	782b      	ldrb	r3, [r5, #0]
    2998:	2b00      	cmp	r3, #0
    299a:	d1ee      	bne.n	297a <usb_handle_standard_request+0xf6>
	if (found) {
    299c:	2800      	cmp	r0, #0
    299e:	d0aa      	beq.n	28f6 <usb_handle_standard_request+0x72>
    29a0:	e7df      	b.n	2962 <usb_handle_standard_request+0xde>
			cur_alt_setting =
    29a2:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    29a6:	e7f4      	b.n	2992 <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    29a8:	8863      	ldrh	r3, [r4, #2]
    29aa:	42bb      	cmp	r3, r7
    29ac:	d1f1      	bne.n	2992 <usb_handle_standard_request+0x10e>
    29ae:	f1b8 0f00 	cmp.w	r8, #0
    29b2:	d1ee      	bne.n	2992 <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    29b4:	4628      	mov	r0, r5
    29b6:	f7ff fee3 	bl	2780 <set_endpoint>
			break;
    29ba:	e7ea      	b.n	2992 <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    29bc:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    29be:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    29c0:	46b8      	mov	r8, r7
    29c2:	e7e8      	b.n	2996 <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    29c4:	8863      	ldrh	r3, [r4, #2]
    29c6:	2b01      	cmp	r3, #1
    29c8:	d195      	bne.n	28f6 <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    29ca:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    29cc:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    29d0:	e783      	b.n	28da <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    29d2:	8863      	ldrh	r3, [r4, #2]
    29d4:	2b01      	cmp	r3, #1
    29d6:	d18e      	bne.n	28f6 <usb_handle_standard_request+0x72>
    29d8:	e7f8      	b.n	29cc <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    29da:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    29de:	f8d5 c000 	ldr.w	ip, [r5]
    29e2:	2b00      	cmp	r3, #0
    29e4:	d087      	beq.n	28f6 <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    29e6:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    29e8:	88a3      	ldrh	r3, [r4, #4]
    29ea:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    29ee:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    29f0:	7810      	ldrb	r0, [r2, #0]
    29f2:	2800      	cmp	r0, #0
    29f4:	f43f af7f 	beq.w	28f6 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    29f8:	7851      	ldrb	r1, [r2, #1]
    29fa:	2902      	cmp	r1, #2
    29fc:	d104      	bne.n	2a08 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
    29fe:	f892 8004 	ldrb.w	r8, [r2, #4]
    2a02:	45f0      	cmp	r8, lr
    2a04:	f200 8093 	bhi.w	2b2e <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
    2a08:	4402      	add	r2, r0
    2a0a:	e7f1      	b.n	29f0 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    2a0c:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    2a10:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    2a14:	6039      	str	r1, [r7, #0]
			return true;
    2a16:	e760      	b.n	28da <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    2a18:	4415      	add	r5, r2
    2a1a:	e094      	b.n	2b46 <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    2a1c:	2a0b      	cmp	r2, #11
    2a1e:	f47f af6a 	bne.w	28f6 <usb_handle_standard_request+0x72>
	bool ret = false;
    2a22:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    2a24:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2a28:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    2a2a:	46ba      	mov	sl, r7
    2a2c:	e006      	b.n	2a3c <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
    2a2e:	786b      	ldrb	r3, [r5, #1]
    2a30:	2b04      	cmp	r3, #4
    2a32:	d00f      	beq.n	2a54 <usb_handle_standard_request+0x1d0>
    2a34:	2b05      	cmp	r3, #5
    2a36:	d021      	beq.n	2a7c <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
    2a38:	782b      	ldrb	r3, [r5, #0]
    2a3a:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    2a3c:	782b      	ldrb	r3, [r5, #0]
    2a3e:	2b00      	cmp	r3, #0
    2a40:	d1f5      	bne.n	2a2e <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
    2a42:	69f3      	ldr	r3, [r6, #28]
    2a44:	b113      	cbz	r3, 2a4c <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    2a46:	4651      	mov	r1, sl
    2a48:	2007      	movs	r0, #7
    2a4a:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    2a4c:	2f00      	cmp	r7, #0
    2a4e:	f47f af44 	bne.w	28da <usb_handle_standard_request+0x56>
    2a52:	e750      	b.n	28f6 <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2a54:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    2a58:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2a5a:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    2a5e:	4598      	cmp	r8, r3
    2a60:	d1ea      	bne.n	2a38 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
    2a62:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2a64:	4599      	cmp	r9, r3
    2a66:	d1e7      	bne.n	2a38 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2a68:	f1b8 0f07 	cmp.w	r8, #7
    2a6c:	d81c      	bhi.n	2aa8 <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
    2a6e:	eb06 0308 	add.w	r3, r6, r8
		return true;
    2a72:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    2a74:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    2a78:	2701      	movs	r7, #1
    2a7a:	e7dd      	b.n	2a38 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
    2a7c:	88a3      	ldrh	r3, [r4, #4]
    2a7e:	4543      	cmp	r3, r8
    2a80:	d1da      	bne.n	2a38 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
    2a82:	78a3      	ldrb	r3, [r4, #2]
    2a84:	454b      	cmp	r3, r9
    2a86:	d00a      	beq.n	2a9e <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
    2a88:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2a8a:	4638      	mov	r0, r7
    2a8c:	f000 fd16 	bl	34bc <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    2a90:	4638      	mov	r0, r7
    2a92:	f7ff fd8f 	bl	25b4 <disable_endpoint>
    2a96:	fab0 f780 	clz	r7, r0
    2a9a:	097f      	lsrs	r7, r7, #5
    2a9c:	e7cc      	b.n	2a38 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
    2a9e:	4628      	mov	r0, r5
    2aa0:	f7ff fe6e 	bl	2780 <set_endpoint>
    2aa4:	4607      	mov	r7, r0
    2aa6:	e7c7      	b.n	2a38 <usb_handle_standard_request+0x1b4>
    2aa8:	46aa      	mov	sl, r5
	return false;
    2aaa:	2700      	movs	r7, #0
    2aac:	e7c4      	b.n	2a38 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
    2aae:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2ab2:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2ab4:	2a00      	cmp	r2, #0
    2ab6:	da18      	bge.n	2aea <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    2ab8:	2b00      	cmp	r3, #0
    2aba:	f47f af1c 	bne.w	28f6 <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    2abe:	7924      	ldrb	r4, [r4, #4]
    2ac0:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    2ac2:	0663      	lsls	r3, r4, #25
    2ac4:	d00a      	beq.n	2adc <usb_handle_standard_request+0x258>
    2ac6:	4620      	mov	r0, r4
    2ac8:	f7ff fd18 	bl	24fc <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2acc:	2800      	cmp	r0, #0
    2ace:	f43f af12 	beq.w	28f6 <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2ad2:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	f43f af0d 	beq.w	28f6 <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    2adc:	4629      	mov	r1, r5
    2ade:	4620      	mov	r0, r4
    2ae0:	f002 fb7c 	bl	51dc <usb_dc_ep_is_stalled>
		data[1] = 0U;
    2ae4:	2300      	movs	r3, #0
    2ae6:	706b      	strb	r3, [r5, #1]
    2ae8:	e6f2      	b.n	28d0 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    2aea:	2b01      	cmp	r3, #1
    2aec:	d008      	beq.n	2b00 <usb_handle_standard_request+0x27c>
    2aee:	2b03      	cmp	r3, #3
    2af0:	f47f af01 	bne.w	28f6 <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    2af4:	8863      	ldrh	r3, [r4, #2]
    2af6:	2b00      	cmp	r3, #0
    2af8:	f47f aefd 	bne.w	28f6 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    2afc:	2101      	movs	r1, #1
    2afe:	e003      	b.n	2b08 <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    2b00:	8861      	ldrh	r1, [r4, #2]
    2b02:	2900      	cmp	r1, #0
    2b04:	f47f aef7 	bne.w	28f6 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    2b08:	88a0      	ldrh	r0, [r4, #4]
    2b0a:	f7ff fdeb 	bl	26e4 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    2b0e:	2800      	cmp	r0, #0
    2b10:	f47f aee3 	bne.w	28da <usb_handle_standard_request+0x56>
    2b14:	e6ef      	b.n	28f6 <usb_handle_standard_request+0x72>
    2b16:	bf00      	nop
    2b18:	20000d3c 	.word	0x20000d3c
    2b1c:	20000df6 	.word	0x20000df6
		if (type == USB_DESC_CONFIGURATION) {
    2b20:	2802      	cmp	r0, #2
		*data = p;
    2b22:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    2b24:	f47f aef4 	bne.w	2910 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    2b28:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    2b2a:	603b      	str	r3, [r7, #0]
		return true;
    2b2c:	e6d5      	b.n	28da <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    2b2e:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    2b32:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2b34:	2800      	cmp	r0, #0
    2b36:	f6bf af71 	bge.w	2a1c <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
    2b3a:	2a00      	cmp	r2, #0
    2b3c:	f43f af66 	beq.w	2a0c <usb_handle_standard_request+0x188>
    2b40:	2a0a      	cmp	r2, #10
    2b42:	f47f aed8 	bne.w	28f6 <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    2b46:	782a      	ldrb	r2, [r5, #0]
    2b48:	2a00      	cmp	r2, #0
    2b4a:	f43f aed4 	beq.w	28f6 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    2b4e:	7869      	ldrb	r1, [r5, #1]
    2b50:	2904      	cmp	r1, #4
    2b52:	f47f af61 	bne.w	2a18 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2b56:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    2b58:	428b      	cmp	r3, r1
    2b5a:	f47f af5d 	bne.w	2a18 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2b5e:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    2b60:	bf96      	itet	ls
    2b62:	199b      	addls	r3, r3, r6
	return 0;
    2b64:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    2b66:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    2b6a:	f88c 3000 	strb.w	r3, [ip]
    2b6e:	e6d4      	b.n	291a <usb_handle_standard_request+0x96>

00002b70 <usb_write>:
{
    2b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b74:	b083      	sub	sp, #12
    2b76:	af00      	add	r7, sp, #0
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    2b78:	4e14      	ldr	r6, [pc, #80]	; (2bcc <usb_write+0x5c>)
{
    2b7a:	6079      	str	r1, [r7, #4]
    2b7c:	4604      	mov	r4, r0
    2b7e:	4690      	mov	r8, r2
    2b80:	4699      	mov	r9, r3
    2b82:	2504      	movs	r5, #4
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    2b84:	f04f 0a03 	mov.w	sl, #3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    2b88:	6879      	ldr	r1, [r7, #4]
    2b8a:	464b      	mov	r3, r9
    2b8c:	4642      	mov	r2, r8
    2b8e:	4620      	mov	r0, r4
    2b90:	f002 fb6a 	bl	5268 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    2b94:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    2b98:	4683      	mov	fp, r0
		if (ret == -EAGAIN) {
    2b9a:	d112      	bne.n	2bc2 <usb_write+0x52>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    2b9c:	f8c7 d000 	str.w	sp, [r7]
    2ba0:	b088      	sub	sp, #32
    2ba2:	466a      	mov	r2, sp
    2ba4:	480a      	ldr	r0, [pc, #40]	; (2bd0 <usb_write+0x60>)
    2ba6:	e9c2 6405 	strd	r6, r4, [r2, #20]
    2baa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    2bae:	f842 af10 	str.w	sl, [r2, #16]!
    2bb2:	f00a faa1 	bl	d0f8 <z_log_msg_static_create.constprop.0>
    2bb6:	f8d7 d000 	ldr.w	sp, [r7]
	z_impl_k_yield();
    2bba:	f008 fcff 	bl	b5bc <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    2bbe:	3d01      	subs	r5, #1
    2bc0:	d1e2      	bne.n	2b88 <usb_write+0x18>
}
    2bc2:	4658      	mov	r0, fp
    2bc4:	370c      	adds	r7, #12
    2bc6:	46bd      	mov	sp, r7
    2bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bcc:	0000f4a1 	.word	0x0000f4a1
    2bd0:	0000eb84 	.word	0x0000eb84

00002bd4 <usb_data_to_host>:
{
    2bd4:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    2bd6:	4c13      	ldr	r4, [pc, #76]	; (2c24 <usb_data_to_host+0x50>)
    2bd8:	7d23      	ldrb	r3, [r4, #20]
    2bda:	b9cb      	cbnz	r3, 2c10 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    2bdc:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2bde:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    2be0:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2be2:	ab01      	add	r3, sp, #4
    2be4:	2080      	movs	r0, #128	; 0x80
    2be6:	f7ff ffc3 	bl	2b70 <usb_write>
		usb_dev.data_buf += chunk;
    2bea:	9a01      	ldr	r2, [sp, #4]
    2bec:	68a3      	ldr	r3, [r4, #8]
    2bee:	4413      	add	r3, r2
    2bf0:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2bf2:	68e3      	ldr	r3, [r4, #12]
    2bf4:	1a9b      	subs	r3, r3, r2
    2bf6:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    2bf8:	b943      	cbnz	r3, 2c0c <usb_data_to_host+0x38>
    2bfa:	b13a      	cbz	r2, 2c0c <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2bfc:	6923      	ldr	r3, [r4, #16]
    2bfe:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    2c00:	429a      	cmp	r2, r3
    2c02:	dd03      	ble.n	2c0c <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    2c04:	069b      	lsls	r3, r3, #26
    2c06:	d101      	bne.n	2c0c <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    2c08:	2301      	movs	r3, #1
    2c0a:	7523      	strb	r3, [r4, #20]
}
    2c0c:	b002      	add	sp, #8
    2c0e:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    2c10:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2c12:	461a      	mov	r2, r3
    2c14:	4619      	mov	r1, r3
    2c16:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    2c18:	7523      	strb	r3, [r4, #20]
}
    2c1a:	b002      	add	sp, #8
    2c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2c20:	f002 bb22 	b.w	5268 <usb_dc_ep_write>
    2c24:	20000d3c 	.word	0x20000d3c

00002c28 <usb_handle_control_transfer>:
{
    2c28:	b570      	push	{r4, r5, r6, lr}
    2c2a:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
    2c2c:	2300      	movs	r3, #0
{
    2c2e:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    2c30:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    2c32:	4606      	mov	r6, r0
    2c34:	2800      	cmp	r0, #0
    2c36:	d167      	bne.n	2d08 <usb_handle_control_transfer+0xe0>
    2c38:	2900      	cmp	r1, #0
    2c3a:	d13f      	bne.n	2cbc <usb_handle_control_transfer+0x94>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    2c3c:	2208      	movs	r2, #8
    2c3e:	460b      	mov	r3, r1
    2c40:	eb0d 0102 	add.w	r1, sp, r2
    2c44:	f00a fc38 	bl	d4b8 <usb_dc_ep_read>
    2c48:	2800      	cmp	r0, #0
    2c4a:	da04      	bge.n	2c56 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2c4c:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2c4e:	f002 fa6b 	bl	5128 <usb_dc_ep_set_stall>
}
    2c52:	b00a      	add	sp, #40	; 0x28
    2c54:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    2c56:	4c31      	ldr	r4, [pc, #196]	; (2d1c <usb_handle_control_transfer+0xf4>)
    2c58:	9a02      	ldr	r2, [sp, #8]
    2c5a:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2c5c:	9a03      	ldr	r2, [sp, #12]
    2c5e:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    2c60:	f104 0238 	add.w	r2, r4, #56	; 0x38
    2c64:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    2c66:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    2c6a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    2c6e:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    2c70:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    2c72:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    2c76:	db14      	blt.n	2ca2 <usb_handle_control_transfer+0x7a>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    2c78:	2b80      	cmp	r3, #128	; 0x80
    2c7a:	d90e      	bls.n	2c9a <usb_handle_control_transfer+0x72>
				LOG_ERR("Request buffer too small");
    2c7c:	4b28      	ldr	r3, [pc, #160]	; (2d20 <usb_handle_control_transfer+0xf8>)
    2c7e:	4829      	ldr	r0, [pc, #164]	; (2d24 <usb_handle_control_transfer+0xfc>)
    2c80:	9309      	str	r3, [sp, #36]	; 0x24
    2c82:	aa08      	add	r2, sp, #32
    2c84:	2302      	movs	r3, #2
    2c86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c8a:	9308      	str	r3, [sp, #32]
    2c8c:	f00a fa34 	bl	d0f8 <z_log_msg_static_create.constprop.0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2c90:	2080      	movs	r0, #128	; 0x80
    2c92:	f002 fa49 	bl	5128 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2c96:	4628      	mov	r0, r5
    2c98:	e7d9      	b.n	2c4e <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    2c9a:	b113      	cbz	r3, 2ca2 <usb_handle_control_transfer+0x7a>
				usb_dev.data_buf_residue = setup->wLength;
    2c9c:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    2ca0:	e7d7      	b.n	2c52 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    2ca2:	f7ff fc47 	bl	2534 <usb_handle_request.constprop.0>
    2ca6:	2800      	cmp	r0, #0
    2ca8:	d0d0      	beq.n	2c4c <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    2caa:	88e2      	ldrh	r2, [r4, #6]
    2cac:	6923      	ldr	r3, [r4, #16]
    2cae:	429a      	cmp	r2, r3
    2cb0:	bfd4      	ite	le
    2cb2:	60e2      	strle	r2, [r4, #12]
    2cb4:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    2cb6:	f7ff ff8d 	bl	2bd4 <usb_data_to_host>
    2cba:	e7ca      	b.n	2c52 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    2cbc:	4c17      	ldr	r4, [pc, #92]	; (2d1c <usb_handle_control_transfer+0xf4>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2cbe:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    2cc2:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2cc4:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    2cc6:	dc05      	bgt.n	2cd4 <usb_handle_control_transfer+0xac>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2cc8:	4602      	mov	r2, r0
    2cca:	f00a fbf5 	bl	d4b8 <usb_dc_ep_read>
    2cce:	2800      	cmp	r0, #0
    2cd0:	dabf      	bge.n	2c52 <usb_handle_control_transfer+0x2a>
    2cd2:	e7bb      	b.n	2c4c <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2cd4:	f00a fbf0 	bl	d4b8 <usb_dc_ep_read>
    2cd8:	2800      	cmp	r0, #0
    2cda:	da04      	bge.n	2ce6 <usb_handle_control_transfer+0xbe>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2cdc:	2080      	movs	r0, #128	; 0x80
    2cde:	f002 fa23 	bl	5128 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2ce2:	4630      	mov	r0, r6
    2ce4:	e7b3      	b.n	2c4e <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    2ce6:	9a01      	ldr	r2, [sp, #4]
    2ce8:	68a3      	ldr	r3, [r4, #8]
    2cea:	4413      	add	r3, r2
    2cec:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2cee:	68e3      	ldr	r3, [r4, #12]
    2cf0:	1a9b      	subs	r3, r3, r2
    2cf2:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    2cf4:	2b00      	cmp	r3, #0
    2cf6:	d1ac      	bne.n	2c52 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    2cf8:	f104 0338 	add.w	r3, r4, #56	; 0x38
    2cfc:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    2cfe:	f7ff fc19 	bl	2534 <usb_handle_request.constprop.0>
    2d02:	2800      	cmp	r0, #0
    2d04:	d1d7      	bne.n	2cb6 <usb_handle_control_transfer+0x8e>
    2d06:	e7a1      	b.n	2c4c <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    2d08:	2880      	cmp	r0, #128	; 0x80
    2d0a:	d1a2      	bne.n	2c52 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2d0c:	4b03      	ldr	r3, [pc, #12]	; (2d1c <usb_handle_control_transfer+0xf4>)
    2d0e:	68da      	ldr	r2, [r3, #12]
    2d10:	2a00      	cmp	r2, #0
    2d12:	d1d0      	bne.n	2cb6 <usb_handle_control_transfer+0x8e>
    2d14:	7d1b      	ldrb	r3, [r3, #20]
    2d16:	2b00      	cmp	r3, #0
    2d18:	d1cd      	bne.n	2cb6 <usb_handle_control_transfer+0x8e>
    2d1a:	e79a      	b.n	2c52 <usb_handle_control_transfer+0x2a>
    2d1c:	20000d3c 	.word	0x20000d3c
    2d20:	0000f4c8 	.word	0x0000f4c8
    2d24:	0000eb84 	.word	0x0000eb84

00002d28 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    2d28:	4b05      	ldr	r3, [pc, #20]	; (2d40 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    2d2a:	4a06      	ldr	r2, [pc, #24]	; (2d44 <usb_set_config+0x1c>)
    2d2c:	629a      	str	r2, [r3, #40]	; 0x28
    2d2e:	4a06      	ldr	r2, [pc, #24]	; (2d48 <usb_set_config+0x20>)
    2d30:	62da      	str	r2, [r3, #44]	; 0x2c
    2d32:	4a06      	ldr	r2, [pc, #24]	; (2d4c <usb_set_config+0x24>)
    2d34:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    2d36:	4a06      	ldr	r2, [pc, #24]	; (2d50 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    2d38:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    2d3a:	619a      	str	r2, [r3, #24]
}
    2d3c:	2000      	movs	r0, #0
    2d3e:	4770      	bx	lr
    2d40:	20000d3c 	.word	0x20000d3c
    2d44:	00002885 	.word	0x00002885
    2d48:	00002411 	.word	0x00002411
    2d4c:	000024b1 	.word	0x000024b1
    2d50:	00002451 	.word	0x00002451

00002d54 <usb_device_init>:
{
    2d54:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    2d56:	4b09      	ldr	r3, [pc, #36]	; (2d7c <usb_device_init+0x28>)
    2d58:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    2d5c:	b954      	cbnz	r4, 2d74 <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    2d5e:	f000 f8e7 	bl	2f30 <usb_get_device_descriptor>
	if (!device_descriptor) {
    2d62:	b918      	cbnz	r0, 2d6c <usb_device_init+0x18>
}
    2d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2d68:	f7ff bbfa 	b.w	2560 <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    2d6c:	f7ff ffdc 	bl	2d28 <usb_set_config>
	return 0;
    2d70:	4620      	mov	r0, r4
}
    2d72:	bd10      	pop	{r4, pc}
		return -EALREADY;
    2d74:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2d78:	e7fb      	b.n	2d72 <usb_device_init+0x1e>
    2d7a:	bf00      	nop
    2d7c:	20000d3c 	.word	0x20000d3c

00002d80 <usb_enable>:
{
    2d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d84:	4604      	mov	r4, r0
    2d86:	b086      	sub	sp, #24
	if (usb_dev.enabled == true) {
    2d88:	4d3f      	ldr	r5, [pc, #252]	; (2e88 <usb_enable+0x108>)
	return z_impl_k_mutex_lock(mutex, timeout);
    2d8a:	4840      	ldr	r0, [pc, #256]	; (2e8c <usb_enable+0x10c>)
    2d8c:	f04f 32ff 	mov.w	r2, #4294967295
    2d90:	f04f 33ff 	mov.w	r3, #4294967295
    2d94:	f007 ff1a 	bl	abcc <z_impl_k_mutex_lock>
    2d98:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    2d9c:	b196      	cbz	r6, 2dc4 <usb_enable+0x44>
		LOG_WRN("USB device support already enabled");
    2d9e:	4b3c      	ldr	r3, [pc, #240]	; (2e90 <usb_enable+0x110>)
    2da0:	9305      	str	r3, [sp, #20]
    2da2:	483c      	ldr	r0, [pc, #240]	; (2e94 <usb_enable+0x114>)
    2da4:	2302      	movs	r3, #2
    2da6:	aa04      	add	r2, sp, #16
    2da8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		ret = -EALREADY;
    2dac:	f06f 0477 	mvn.w	r4, #119	; 0x77
		LOG_WRN("USB device support already enabled");
    2db0:	9304      	str	r3, [sp, #16]
    2db2:	f00a f9a1 	bl	d0f8 <z_log_msg_static_create.constprop.0>
	return z_impl_k_mutex_unlock(mutex);
    2db6:	4835      	ldr	r0, [pc, #212]	; (2e8c <usb_enable+0x10c>)
    2db8:	f007 ff82 	bl	acc0 <z_impl_k_mutex_unlock>
}
    2dbc:	4620      	mov	r0, r4
    2dbe:	b006      	add	sp, #24
    2dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	usb_dev.status_callback = cb;
    2dc4:	4834      	ldr	r0, [pc, #208]	; (2e98 <usb_enable+0x118>)
	usb_dev.user_status_callback = status_cb;
    2dc6:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    2dc8:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    2dca:	f002 fbc1 	bl	5550 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    2dce:	f002 f901 	bl	4fd4 <usb_dc_attach>
	if (ret < 0) {
    2dd2:	1e04      	subs	r4, r0, #0
    2dd4:	dbef      	blt.n	2db6 <usb_enable+0x36>
	ret = usb_transfer_init();
    2dd6:	f000 fbb3 	bl	3540 <usb_transfer_init>
	if (ret < 0) {
    2dda:	1e04      	subs	r4, r0, #0
    2ddc:	dbeb      	blt.n	2db6 <usb_enable+0x36>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2dde:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    2de0:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2de2:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    2de6:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    2dea:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2dee:	f002 f967 	bl	50c0 <usb_dc_ep_configure>
	if (ret < 0) {
    2df2:	1e04      	subs	r4, r0, #0
    2df4:	dbdf      	blt.n	2db6 <usb_enable+0x36>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2df6:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    2df8:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2dfa:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2dfe:	f002 f95f 	bl	50c0 <usb_dc_ep_configure>
	if (ret < 0) {
    2e02:	1e04      	subs	r4, r0, #0
    2e04:	dbd7      	blt.n	2db6 <usb_enable+0x36>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2e06:	4925      	ldr	r1, [pc, #148]	; (2e9c <usb_enable+0x11c>)
    2e08:	4630      	mov	r0, r6
    2e0a:	f002 fb8d 	bl	5528 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2e0e:	1e04      	subs	r4, r0, #0
    2e10:	dbd1      	blt.n	2db6 <usb_enable+0x36>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2e12:	4922      	ldr	r1, [pc, #136]	; (2e9c <usb_enable+0x11c>)
    2e14:	4638      	mov	r0, r7
    2e16:	f002 fb87 	bl	5528 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2e1a:	1e04      	subs	r4, r0, #0
    2e1c:	dbcb      	blt.n	2db6 <usb_enable+0x36>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2e1e:	4c20      	ldr	r4, [pc, #128]	; (2ea0 <usb_enable+0x120>)
    2e20:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2ea4 <usb_enable+0x124>
    2e24:	4544      	cmp	r4, r8
    2e26:	d31a      	bcc.n	2e5e <usb_enable+0xde>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2e28:	2000      	movs	r0, #0
    2e2a:	f002 f9f3 	bl	5214 <usb_dc_ep_enable>
	if (ret < 0) {
    2e2e:	1e04      	subs	r4, r0, #0
    2e30:	dbc1      	blt.n	2db6 <usb_enable+0x36>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2e32:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2e36:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2e38:	f043 0301 	orr.w	r3, r3, #1
    2e3c:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2e40:	f002 f9e8 	bl	5214 <usb_dc_ep_enable>
	if (ret < 0) {
    2e44:	1e04      	subs	r4, r0, #0
    2e46:	dbb6      	blt.n	2db6 <usb_enable+0x36>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    2e48:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2e50:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    2e54:	2301      	movs	r3, #1
    2e56:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    2e5a:	2400      	movs	r4, #0
    2e5c:	e7ab      	b.n	2db6 <usb_enable+0x36>
		ep_data = cfg_data->endpoint;
    2e5e:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2e60:	2600      	movs	r6, #0
    2e62:	7f22      	ldrb	r2, [r4, #28]
    2e64:	b2f3      	uxtb	r3, r6
    2e66:	429a      	cmp	r2, r3
    2e68:	d801      	bhi.n	2e6e <usb_enable+0xee>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2e6a:	3424      	adds	r4, #36	; 0x24
    2e6c:	e7da      	b.n	2e24 <usb_enable+0xa4>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    2e6e:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    2e72:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    2e76:	7910      	ldrb	r0, [r2, #4]
    2e78:	f002 fb56 	bl	5528 <usb_dc_ep_set_callback>
    2e7c:	3601      	adds	r6, #1
    2e7e:	2800      	cmp	r0, #0
    2e80:	d0ef      	beq.n	2e62 <usb_enable+0xe2>
    2e82:	f04f 34ff 	mov.w	r4, #4294967295
    2e86:	e796      	b.n	2db6 <usb_enable+0x36>
    2e88:	20000d3c 	.word	0x20000d3c
    2e8c:	200003cc 	.word	0x200003cc
    2e90:	0000f4e1 	.word	0x0000f4e1
    2e94:	0000eb84 	.word	0x0000eb84
    2e98:	00002635 	.word	0x00002635
    2e9c:	00002c29 	.word	0x00002c29
    2ea0:	200004d8 	.word	0x200004d8
    2ea4:	200004fc 	.word	0x200004fc

00002ea8 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2ea8:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2eaa:	4b1f      	ldr	r3, [pc, #124]	; (2f28 <usb_update_sn_string_descriptor+0x80>)
{
    2eac:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2eae:	aa05      	add	r2, sp, #20
    2eb0:	f103 0510 	add.w	r5, r3, #16
    2eb4:	6818      	ldr	r0, [r3, #0]
    2eb6:	6859      	ldr	r1, [r3, #4]
    2eb8:	4614      	mov	r4, r2
    2eba:	c403      	stmia	r4!, {r0, r1}
    2ebc:	3308      	adds	r3, #8
    2ebe:	42ab      	cmp	r3, r5
    2ec0:	4622      	mov	r2, r4
    2ec2:	d1f7      	bne.n	2eb4 <usb_update_sn_string_descriptor+0xc>
    2ec4:	781b      	ldrb	r3, [r3, #0]
    2ec6:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    2ec8:	2210      	movs	r2, #16
    2eca:	2100      	movs	r1, #0
    2ecc:	a801      	add	r0, sp, #4
    2ece:	f00a faa2 	bl	d416 <memset>
	memset(sn, 0, sizeof(sn));
    2ed2:	2212      	movs	r2, #18
    2ed4:	2100      	movs	r1, #0
    2ed6:	4815      	ldr	r0, [pc, #84]	; (2f2c <usb_update_sn_string_descriptor+0x84>)
    2ed8:	f00a fa9d 	bl	d416 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2edc:	2110      	movs	r1, #16
    2ede:	a801      	add	r0, sp, #4
    2ee0:	f00a fbdd 	bl	d69e <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2ee4:	2800      	cmp	r0, #0
    2ee6:	dd1b      	ble.n	2f20 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    2ee8:	2808      	cmp	r0, #8
    2eea:	bfb8      	it	lt
    2eec:	2008      	movlt	r0, #8
    2eee:	3809      	subs	r0, #9
    2ef0:	ab01      	add	r3, sp, #4
    2ef2:	490e      	ldr	r1, [pc, #56]	; (2f2c <usb_update_sn_string_descriptor+0x84>)
    2ef4:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    2ef6:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2ef8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2efc:	ac0a      	add	r4, sp, #40	; 0x28
    2efe:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2f02:	f003 030f 	and.w	r3, r3, #15
    2f06:	3328      	adds	r3, #40	; 0x28
    2f08:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    2f0a:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2f0c:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2f10:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2f14:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    2f16:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2f18:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    2f1a:	f101 0102 	add.w	r1, r1, #2
    2f1e:	d1eb      	bne.n	2ef8 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2f20:	4802      	ldr	r0, [pc, #8]	; (2f2c <usb_update_sn_string_descriptor+0x84>)
    2f22:	b00b      	add	sp, #44	; 0x2c
    2f24:	bd30      	pop	{r4, r5, pc}
    2f26:	bf00      	nop
    2f28:	0000f50f 	.word	0x0000f50f
    2f2c:	20002410 	.word	0x20002410

00002f30 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    2f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f34:	4c83      	ldr	r4, [pc, #524]	; (3144 <CONFIG_USB_DEVICE_VID+0x161>)
    2f36:	b08b      	sub	sp, #44	; 0x2c
    2f38:	af00      	add	r7, sp, #0
	uint8_t str_descr_idx = 0U;
    2f3a:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    2f3c:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    2f40:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    2f42:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2f44:	46b0      	mov	r8, r6
	while (head->bLength != 0U) {
    2f46:	7823      	ldrb	r3, [r4, #0]
    2f48:	b943      	cbnz	r3, 2f5c <usb_get_device_descriptor+0x2c>
	if ((head + 1) != __usb_descriptor_end) {
    2f4a:	4b7f      	ldr	r3, [pc, #508]	; (3148 <CONFIG_USB_DEVICE_VID+0x165>)
    2f4c:	3402      	adds	r4, #2
    2f4e:	429c      	cmp	r4, r3
    2f50:	d1f3      	bne.n	2f3a <usb_get_device_descriptor+0xa>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    2f52:	487c      	ldr	r0, [pc, #496]	; (3144 <CONFIG_USB_DEVICE_VID+0x161>)
}
    2f54:	372c      	adds	r7, #44	; 0x2c
    2f56:	46bd      	mov	sp, r7
    2f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    2f5c:	7863      	ldrb	r3, [r4, #1]
    2f5e:	2b05      	cmp	r3, #5
    2f60:	d805      	bhi.n	2f6e <usb_get_device_descriptor+0x3e>
    2f62:	e8df f003 	tbb	[pc, r3]
    2f66:	04a6      	.short	0x04a6
    2f68:	3f07a603 	.word	0x3f07a603
    2f6c:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    2f6e:	7823      	ldrb	r3, [r4, #0]
    2f70:	441c      	add	r4, r3
    2f72:	e7e8      	b.n	2f46 <usb_get_device_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    2f74:	78e3      	ldrb	r3, [r4, #3]
    2f76:	2b00      	cmp	r3, #0
    2f78:	d1f9      	bne.n	2f6e <usb_get_device_descriptor+0x3e>
			if (if_descr->bInterfaceNumber == 0U) {
    2f7a:	78a3      	ldrb	r3, [r4, #2]
    2f7c:	b343      	cbz	r3, 2fd0 <usb_get_device_descriptor+0xa0>
			numof_ifaces++;
    2f7e:	f10a 0a01 	add.w	sl, sl, #1
    2f82:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    2f86:	e7f2      	b.n	2f6e <usb_get_device_descriptor+0x3e>
		if (cfg_data->interface_descriptor == iface) {
    2f88:	686a      	ldr	r2, [r5, #4]
    2f8a:	4294      	cmp	r4, r2
    2f8c:	d023      	beq.n	2fd6 <usb_get_device_descriptor+0xa6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2f8e:	3524      	adds	r5, #36	; 0x24
    2f90:	429d      	cmp	r5, r3
    2f92:	d3f9      	bcc.n	2f88 <usb_get_device_descriptor+0x58>
					LOG_ERR("There is no usb_cfg_data "
    2f94:	466d      	mov	r5, sp
    2f96:	b088      	sub	sp, #32
    2f98:	466a      	mov	r2, sp
    2f9a:	4b6c      	ldr	r3, [pc, #432]	; (314c <CONFIG_USB_DEVICE_VID+0x169>)
    2f9c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    2fa0:	2303      	movs	r3, #3
    2fa2:	f842 3f10 	str.w	r3, [r2, #16]!
    2fa6:	486a      	ldr	r0, [pc, #424]	; (3150 <CONFIG_USB_DEVICE_VID+0x16d>)
    2fa8:	2300      	movs	r3, #0
    2faa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2fae:	f7fe fe09 	bl	1bc4 <z_impl_z_log_msg_static_create>
    2fb2:	46ad      	mov	sp, r5
		LOG_ERR("Failed to fixup USB descriptor");
    2fb4:	4b67      	ldr	r3, [pc, #412]	; (3154 <CONFIG_USB_DEVICE_VID+0x171>)
    2fb6:	627b      	str	r3, [r7, #36]	; 0x24
    2fb8:	2302      	movs	r3, #2
    2fba:	623b      	str	r3, [r7, #32]
    2fbc:	4864      	ldr	r0, [pc, #400]	; (3150 <CONFIG_USB_DEVICE_VID+0x16d>)
    2fbe:	2300      	movs	r3, #0
    2fc0:	f107 0220 	add.w	r2, r7, #32
    2fc4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2fc8:	f7fe fdfc 	bl	1bc4 <z_impl_z_log_msg_static_create>
		return NULL;
    2fcc:	2000      	movs	r0, #0
    2fce:	e7c1      	b.n	2f54 <usb_get_device_descriptor+0x24>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2fd0:	4d61      	ldr	r5, [pc, #388]	; (3158 <CONFIG_USB_DEVICE_VID+0x175>)
    2fd2:	4b62      	ldr	r3, [pc, #392]	; (315c <CONFIG_USB_DEVICE_VID+0x179>)
    2fd4:	e7dc      	b.n	2f90 <usb_get_device_descriptor+0x60>
				if (cfg_data->interface_config) {
    2fd6:	68ab      	ldr	r3, [r5, #8]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d0d0      	beq.n	2f7e <usb_get_device_descriptor+0x4e>
					cfg_data->interface_config(head,
    2fdc:	4651      	mov	r1, sl
    2fde:	4620      	mov	r0, r4
    2fe0:	4798      	blx	r3
    2fe2:	e7cc      	b.n	2f7e <usb_get_device_descriptor+0x4e>
			if (!cfg_data) {
    2fe4:	2d00      	cmp	r5, #0
    2fe6:	d162      	bne.n	30ae <CONFIG_USB_DEVICE_VID+0xcb>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    2fe8:	4b5d      	ldr	r3, [pc, #372]	; (3160 <CONFIG_USB_DEVICE_VID+0x17d>)
				LOG_ERR("Failed to validate endpoints");
    2fea:	627b      	str	r3, [r7, #36]	; 0x24
    2fec:	2302      	movs	r3, #2
    2fee:	623b      	str	r3, [r7, #32]
    2ff0:	4857      	ldr	r0, [pc, #348]	; (3150 <CONFIG_USB_DEVICE_VID+0x16d>)
    2ff2:	2300      	movs	r3, #0
    2ff4:	f107 0220 	add.w	r2, r7, #32
    2ff8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ffc:	f7fe fde2 	bl	1bc4 <z_impl_z_log_msg_static_create>
				return -1;
    3000:	e7d8      	b.n	2fb4 <usb_get_device_descriptor+0x84>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    3002:	6a29      	ldr	r1, [r5, #32]
    3004:	78a0      	ldrb	r0, [r4, #2]
    3006:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    300a:	790b      	ldrb	r3, [r1, #4]
    300c:	4298      	cmp	r0, r3
    300e:	d005      	beq.n	301c <CONFIG_USB_DEVICE_VID+0x39>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    3010:	3201      	adds	r2, #1
    3012:	7f2b      	ldrb	r3, [r5, #28]
    3014:	429a      	cmp	r2, r3
    3016:	d3f4      	bcc.n	3002 <CONFIG_USB_DEVICE_VID+0x1f>
				LOG_ERR("Failed to validate endpoints");
    3018:	4b52      	ldr	r3, [pc, #328]	; (3164 <CONFIG_USB_DEVICE_VID+0x181>)
    301a:	e7e6      	b.n	2fea <CONFIG_USB_DEVICE_VID+0x7>
    301c:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    3020:	78e0      	ldrb	r0, [r4, #3]
    3022:	f000 0003 	and.w	r0, r0, #3
    3026:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    3028:	7920      	ldrb	r0, [r4, #4]
    302a:	f894 c005 	ldrb.w	ip, [r4, #5]
    302e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    3032:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    3034:	f994 0002 	ldrsb.w	r0, [r4, #2]
    3038:	2800      	cmp	r0, #0
    303a:	fa5f f389 	uxtb.w	r3, r9
    303e:	da28      	bge.n	3092 <CONFIG_USB_DEVICE_VID+0xaf>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    3040:	f109 0010 	add.w	r0, r9, #16
    3044:	f04f 0c01 	mov.w	ip, #1
    3048:	fa0c f000 	lsl.w	r0, ip, r0
    304c:	ea10 0f0b 	tst.w	r0, fp
    3050:	d127      	bne.n	30a2 <CONFIG_USB_DEVICE_VID+0xbf>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    3052:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    3056:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    3058:	f107 0010 	add.w	r0, r7, #16
    305c:	e9c7 3101 	strd	r3, r1, [r7, #4]
    3060:	60fa      	str	r2, [r7, #12]
    3062:	f001 fffb 	bl	505c <usb_dc_ep_check_cap>
    3066:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    306a:	687b      	ldr	r3, [r7, #4]
    306c:	b9c8      	cbnz	r0, 30a2 <CONFIG_USB_DEVICE_VID+0xbf>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    306e:	7c3a      	ldrb	r2, [r7, #16]
    3070:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    3072:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    3076:	bf18      	it	ne
    3078:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    307a:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
    307c:	bf18      	it	ne
    307e:	b2db      	uxtbne	r3, r3
    3080:	f04f 0201 	mov.w	r2, #1
    3084:	bf14      	ite	ne
    3086:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
    3088:	fa02 f209 	lsleq.w	r2, r2, r9
    308c:	ea4b 0b02 	orr.w	fp, fp, r2
				return 0;
    3090:	e76d      	b.n	2f6e <usb_get_device_descriptor+0x3e>
				if ((*requested_ep & (1U << (idx)))) {
    3092:	2001      	movs	r0, #1
    3094:	fa00 f009 	lsl.w	r0, r0, r9
    3098:	ea10 0f0b 	tst.w	r0, fp
    309c:	d101      	bne.n	30a2 <CONFIG_USB_DEVICE_VID+0xbf>
    309e:	4618      	mov	r0, r3
    30a0:	e7d9      	b.n	3056 <CONFIG_USB_DEVICE_VID+0x73>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    30a2:	f109 0901 	add.w	r9, r9, #1
    30a6:	f1b9 0f10 	cmp.w	r9, #16
    30aa:	d1b9      	bne.n	3020 <CONFIG_USB_DEVICE_VID+0x3d>
    30ac:	e7b0      	b.n	3010 <CONFIG_USB_DEVICE_VID+0x2d>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    30ae:	2200      	movs	r2, #0
    30b0:	e7af      	b.n	3012 <CONFIG_USB_DEVICE_VID+0x2f>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    30b2:	2e03      	cmp	r6, #3
    30b4:	d12a      	bne.n	310c <CONFIG_USB_DEVICE_VID+0x129>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    30b6:	f7ff fef7 	bl	2ea8 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    30ba:	4681      	mov	r9, r0
    30bc:	b1a8      	cbz	r0, 30ea <CONFIG_USB_DEVICE_VID+0x107>
	runtime_sn_len = strlen(runtime_sn);
    30be:	f00a f98f 	bl	d3e0 <strlen>
	if (!runtime_sn_len) {
    30c2:	60f8      	str	r0, [r7, #12]
    30c4:	b188      	cbz	r0, 30ea <CONFIG_USB_DEVICE_VID+0x107>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    30c6:	4828      	ldr	r0, [pc, #160]	; (3168 <CONFIG_USB_DEVICE_VID+0x185>)
    30c8:	f00a f98a 	bl	d3e0 <strlen>
	if (runtime_sn_len != default_sn_len) {
    30cc:	68fa      	ldr	r2, [r7, #12]
    30ce:	4282      	cmp	r2, r0
    30d0:	d017      	beq.n	3102 <CONFIG_USB_DEVICE_VID+0x11f>
		LOG_ERR("the new SN descriptor doesn't have the same "
    30d2:	4b26      	ldr	r3, [pc, #152]	; (316c <CONFIG_USB_DEVICE_VID+0x189>)
    30d4:	627b      	str	r3, [r7, #36]	; 0x24
    30d6:	2302      	movs	r3, #2
    30d8:	623b      	str	r3, [r7, #32]
    30da:	481d      	ldr	r0, [pc, #116]	; (3150 <CONFIG_USB_DEVICE_VID+0x16d>)
    30dc:	2300      	movs	r3, #0
    30de:	f107 0220 	add.w	r2, r7, #32
    30e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    30e6:	f7fe fd6d 	bl	1bc4 <z_impl_z_log_msg_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    30ea:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    30ec:	f06f 0102 	mvn.w	r1, #2
    30f0:	18e2      	adds	r2, r4, r3
    30f2:	1b09      	subs	r1, r1, r4
    30f4:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    30f8:	42d1      	cmn	r1, r2
    30fa:	d50e      	bpl.n	311a <CONFIG_USB_DEVICE_VID+0x137>
			str_descr_idx += 1U;
    30fc:	3601      	adds	r6, #1
    30fe:	b2f6      	uxtb	r6, r6
			break;
    3100:	e735      	b.n	2f6e <usb_get_device_descriptor+0x3e>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    3102:	4649      	mov	r1, r9
    3104:	1ca0      	adds	r0, r4, #2
    3106:	f00a f97b 	bl	d400 <memcpy>
			if (str_descr_idx) {
    310a:	e7ee      	b.n	30ea <CONFIG_USB_DEVICE_VID+0x107>
    310c:	2e00      	cmp	r6, #0
    310e:	d1ec      	bne.n	30ea <CONFIG_USB_DEVICE_VID+0x107>
				if (!cfg_descr) {
    3110:	f1b8 0f00 	cmp.w	r8, #0
    3114:	d10a      	bne.n	312c <CONFIG_USB_DEVICE_VID+0x149>
					LOG_ERR("Incomplete device descriptor");
    3116:	4b16      	ldr	r3, [pc, #88]	; (3170 <CONFIG_USB_DEVICE_VID+0x18d>)
    3118:	e767      	b.n	2fea <CONFIG_USB_DEVICE_VID+0x7>
		buf[i] = 0U;
    311a:	f04f 0000 	mov.w	r0, #0
    311e:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    3122:	f813 0901 	ldrb.w	r0, [r3], #-1
    3126:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    312a:	e7e5      	b.n	30f8 <CONFIG_USB_DEVICE_VID+0x115>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    312c:	eba4 0308 	sub.w	r3, r4, r8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    3130:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    3134:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3138:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    313c:	f888 a004 	strb.w	sl, [r8, #4]
    3140:	e7dc      	b.n	30fc <CONFIG_USB_DEVICE_VID+0x119>
    3142:	bf00      	nop
    3144:	20000410 	.word	0x20000410
    3148:	200004d7 	.word	0x200004d7
    314c:	0000f520 	.word	0x0000f520
    3150:	0000eb7c 	.word	0x0000eb7c
    3154:	0000f606 	.word	0x0000f606
    3158:	200004d8 	.word	0x200004d8
    315c:	200004fc 	.word	0x200004fc
    3160:	0000f540 	.word	0x0000f540
    3164:	0000f581 	.word	0x0000f581
    3168:	0000f50f 	.word	0x0000f50f
    316c:	0000f59e 	.word	0x0000f59e
    3170:	0000f5e9 	.word	0x0000f5e9

00003174 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    3174:	b510      	push	{r4, lr}
    3176:	4b09      	ldr	r3, [pc, #36]	; (319c <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3178:	2100      	movs	r1, #0
    317a:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    317c:	781c      	ldrb	r4, [r3, #0]
    317e:	4284      	cmp	r4, r0
    3180:	d105      	bne.n	318e <usb_ep_get_transfer+0x1a>
    3182:	685c      	ldr	r4, [r3, #4]
    3184:	b11c      	cbz	r4, 318e <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    3186:	2348      	movs	r3, #72	; 0x48
    3188:	fb03 2001 	mla	r0, r3, r1, r2
		}
	}

	return NULL;
}
    318c:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    318e:	3101      	adds	r1, #1
    3190:	2904      	cmp	r1, #4
    3192:	f103 0348 	add.w	r3, r3, #72	; 0x48
    3196:	d1f1      	bne.n	317c <usb_ep_get_transfer+0x8>
	return NULL;
    3198:	2000      	movs	r0, #0
    319a:	e7f7      	b.n	318c <usb_ep_get_transfer+0x18>
    319c:	20000e04 	.word	0x20000e04

000031a0 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    31a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    31a4:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    31a6:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    31aa:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
    31ae:	3310      	adds	r3, #16
{
    31b0:	af00      	add	r7, sp, #0
    31b2:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    31b4:	d111      	bne.n	31da <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    31b6:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    31b8:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
    31bc:	f013 0602 	ands.w	r6, r3, #2
    31c0:	d04e      	beq.n	3260 <usb_transfer_work+0xc0>
		if (!trans->bsize) {
    31c2:	bb0a      	cbnz	r2, 3208 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    31c4:	f013 0304 	ands.w	r3, r3, #4
    31c8:	d104      	bne.n	31d4 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    31ca:	461a      	mov	r2, r3
    31cc:	4619      	mov	r1, r3
    31ce:	4628      	mov	r0, r5
    31d0:	f7ff fcce 	bl	2b70 <usb_write>
			}
			trans->status = 0;
    31d4:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    31d6:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    31da:	f854 3c30 	ldr.w	r3, [r4, #-48]
    31de:	3310      	adds	r3, #16
    31e0:	d00e      	beq.n	3200 <usb_transfer_work+0x60>
    31e2:	f854 6c20 	ldr.w	r6, [r4, #-32]
    31e6:	b15e      	cbz	r6, 3200 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    31e8:	f854 8c24 	ldr.w	r8, [r4, #-36]
		void *priv = trans->priv;
    31ec:	f854 9c1c 	ldr.w	r9, [r4, #-28]

		if (k_is_in_isr()) {
    31f0:	f00a fe86 	bl	df00 <k_is_in_isr>
    31f4:	2800      	cmp	r0, #0
    31f6:	d06f      	beq.n	32d8 <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    31f8:	483d      	ldr	r0, [pc, #244]	; (32f0 <usb_transfer_work+0x150>)
    31fa:	4621      	mov	r1, r4
    31fc:	f00a ff7e 	bl	e0fc <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    3200:	370c      	adds	r7, #12
    3202:	46bd      	mov	sp, r7
    3204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    3208:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    320c:	1d3b      	adds	r3, r7, #4
    320e:	4628      	mov	r0, r5
    3210:	f7ff fcae 	bl	2b70 <usb_write>
		if (ret) {
    3214:	b198      	cbz	r0, 323e <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    3216:	466e      	mov	r6, sp
    3218:	b088      	sub	sp, #32
    321a:	466a      	mov	r2, sp
    321c:	4b35      	ldr	r3, [pc, #212]	; (32f4 <usb_transfer_work+0x154>)
    321e:	61d5      	str	r5, [r2, #28]
    3220:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3224:	2304      	movs	r3, #4
    3226:	f842 3f10 	str.w	r3, [r2, #16]!
    322a:	4833      	ldr	r0, [pc, #204]	; (32f8 <usb_transfer_work+0x158>)
    322c:	2300      	movs	r3, #0
    322e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    3232:	f7fe fcc7 	bl	1bc4 <z_impl_z_log_msg_static_create>
    3236:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    3238:	f06f 0315 	mvn.w	r3, #21
    323c:	e7cb      	b.n	31d6 <usb_transfer_work+0x36>
		trans->buffer += bytes;
    323e:	687a      	ldr	r2, [r7, #4]
    3240:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    3244:	4413      	add	r3, r2
    3246:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    324a:	f854 3c28 	ldr.w	r3, [r4, #-40]
    324e:	1a9b      	subs	r3, r3, r2
    3250:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    3254:	f854 3c24 	ldr.w	r3, [r4, #-36]
    3258:	4413      	add	r3, r2
    325a:	f844 3c24 	str.w	r3, [r4, #-36]
    325e:	e7bc      	b.n	31da <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    3260:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    3264:	1d3b      	adds	r3, r7, #4
    3266:	4628      	mov	r0, r5
    3268:	f002 f8a0 	bl	53ac <usb_dc_ep_read_wait>
		if (ret) {
    326c:	b188      	cbz	r0, 3292 <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    326e:	46e8      	mov	r8, sp
    3270:	b088      	sub	sp, #32
    3272:	466a      	mov	r2, sp
    3274:	4b1f      	ldr	r3, [pc, #124]	; (32f4 <usb_transfer_work+0x154>)
    3276:	61d5      	str	r5, [r2, #28]
    3278:	e9c2 3005 	strd	r3, r0, [r2, #20]
    327c:	2304      	movs	r3, #4
    327e:	f842 3f10 	str.w	r3, [r2, #16]!
    3282:	481d      	ldr	r0, [pc, #116]	; (32f8 <usb_transfer_work+0x158>)
    3284:	4633      	mov	r3, r6
    3286:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    328a:	f7fe fc9b 	bl	1bc4 <z_impl_z_log_msg_static_create>
    328e:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    3290:	e7d2      	b.n	3238 <usb_transfer_work+0x98>
		trans->buffer += bytes;
    3292:	687e      	ldr	r6, [r7, #4]
    3294:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    3298:	4433      	add	r3, r6
    329a:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    329e:	f854 3c28 	ldr.w	r3, [r4, #-40]
    32a2:	1b9b      	subs	r3, r3, r6
    32a4:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    32a8:	f854 3c24 	ldr.w	r3, [r4, #-36]
    32ac:	4433      	add	r3, r6
    32ae:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    32b2:	2e00      	cmp	r6, #0
    32b4:	d08e      	beq.n	31d4 <usb_transfer_work+0x34>
    32b6:	4628      	mov	r0, r5
    32b8:	f002 f950 	bl	555c <usb_dc_ep_mps>
    32bc:	fbb6 f3f0 	udiv	r3, r6, r0
    32c0:	fb03 6610 	mls	r6, r3, r0, r6
    32c4:	2e00      	cmp	r6, #0
    32c6:	d185      	bne.n	31d4 <usb_transfer_work+0x34>
    32c8:	f854 3c28 	ldr.w	r3, [r4, #-40]
    32cc:	2b00      	cmp	r3, #0
    32ce:	d081      	beq.n	31d4 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    32d0:	4628      	mov	r0, r5
    32d2:	f002 f8d1 	bl	5478 <usb_dc_ep_read_continue>
    32d6:	e780      	b.n	31da <usb_transfer_work+0x3a>
		trans->cb = NULL;
    32d8:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
    32dc:	f1a4 0018 	sub.w	r0, r4, #24
    32e0:	f007 fd5e 	bl	ada0 <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    32e4:	464a      	mov	r2, r9
    32e6:	4641      	mov	r1, r8
    32e8:	4628      	mov	r0, r5
    32ea:	47b0      	blx	r6
    32ec:	e788      	b.n	3200 <usb_transfer_work+0x60>
    32ee:	bf00      	nop
    32f0:	200009c0 	.word	0x200009c0
    32f4:	0000f634 	.word	0x0000f634
    32f8:	0000eb94 	.word	0x0000eb94

000032fc <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    32fc:	b570      	push	{r4, r5, r6, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    32fe:	1e4b      	subs	r3, r1, #1
    3300:	2b01      	cmp	r3, #1
{
    3302:	b088      	sub	sp, #32
    3304:	4606      	mov	r6, r0
    3306:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    3308:	d818      	bhi.n	333c <usb_transfer_ep_callback+0x40>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    330a:	f7ff ff33 	bl	3174 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    330e:	4604      	mov	r4, r0
    3310:	b9b0      	cbnz	r0, 3340 <usb_transfer_ep_callback+0x44>
		if (status == USB_DC_EP_DATA_OUT) {
    3312:	2d01      	cmp	r5, #1
    3314:	d112      	bne.n	333c <usb_transfer_ep_callback+0x40>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    3316:	ab01      	add	r3, sp, #4
    3318:	2201      	movs	r2, #1
    331a:	a902      	add	r1, sp, #8
    331c:	4630      	mov	r0, r6
    331e:	f002 f845 	bl	53ac <usb_dc_ep_read_wait>
			} while (bytes);
    3322:	9b01      	ldr	r3, [sp, #4]
    3324:	2b00      	cmp	r3, #0
    3326:	d1f6      	bne.n	3316 <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
    3328:	4a0f      	ldr	r2, [pc, #60]	; (3368 <usb_transfer_ep_callback+0x6c>)
    332a:	9207      	str	r2, [sp, #28]
    332c:	2202      	movs	r2, #2
    332e:	9206      	str	r2, [sp, #24]
    3330:	480e      	ldr	r0, [pc, #56]	; (336c <usb_transfer_ep_callback+0x70>)
    3332:	aa06      	add	r2, sp, #24
    3334:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3338:	f7fe fc44 	bl	1bc4 <z_impl_z_log_msg_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    333c:	b008      	add	sp, #32
    333e:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    3340:	f00a fdde 	bl	df00 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3344:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    3348:	b108      	cbz	r0, 334e <usb_transfer_ep_callback+0x52>
    334a:	2d01      	cmp	r5, #1
    334c:	d105      	bne.n	335a <usb_transfer_ep_callback+0x5e>
		usb_transfer_work(&trans->work);
    334e:	4608      	mov	r0, r1
}
    3350:	b008      	add	sp, #32
    3352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    3356:	f7ff bf23 	b.w	31a0 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    335a:	4805      	ldr	r0, [pc, #20]	; (3370 <usb_transfer_ep_callback+0x74>)
}
    335c:	b008      	add	sp, #32
    335e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3362:	f00a becb 	b.w	e0fc <k_work_submit_to_queue>
    3366:	bf00      	nop
    3368:	0000f651 	.word	0x0000f651
    336c:	0000eb94 	.word	0x0000eb94
    3370:	200009c0 	.word	0x200009c0

00003374 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    3374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3378:	b08b      	sub	sp, #44	; 0x2c
    337a:	af00      	add	r7, sp, #0
    337c:	4605      	mov	r5, r0
    337e:	60b9      	str	r1, [r7, #8]
    3380:	4616      	mov	r6, r2
    3382:	60fb      	str	r3, [r7, #12]
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    3384:	f009 fef9 	bl	d17a <usb_transfer_is_busy>
    3388:	2800      	cmp	r0, #0
    338a:	f040 8088 	bne.w	349e <usb_transfer+0x12a>
	__asm__ volatile(
    338e:	f04f 0320 	mov.w	r3, #32
    3392:	f3ef 8211 	mrs	r2, BASEPRI
    3396:	f383 8812 	msr	BASEPRI_MAX, r3
    339a:	f3bf 8f6f 	isb	sy
    339e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 34a4 <usb_transfer+0x130>
    33a2:	607a      	str	r2, [r7, #4]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    33a4:	4683      	mov	fp, r0
	return z_impl_k_sem_take(sem, timeout);
    33a6:	2300      	movs	r3, #0
    33a8:	2200      	movs	r2, #0
    33aa:	4648      	mov	r0, r9
    33ac:	f007 fd1e 	bl	adec <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    33b0:	4603      	mov	r3, r0
    33b2:	b9f0      	cbnz	r0, 33f2 <usb_transfer+0x7e>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    33b4:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 34a8 <usb_transfer+0x134>
    33b8:	2048      	movs	r0, #72	; 0x48
    33ba:	fb00 f00b 	mul.w	r0, r0, fp
    33be:	eb0a 0800 	add.w	r8, sl, r0
    33c2:	f8d8 4004 	ldr.w	r4, [r8, #4]
    33c6:	f114 0f10 	cmn.w	r4, #16
    33ca:	d131      	bne.n	3430 <usb_transfer+0xbc>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    33cc:	466e      	mov	r6, sp
    33ce:	b088      	sub	sp, #32
    33d0:	466a      	mov	r2, sp
    33d2:	4936      	ldr	r1, [pc, #216]	; (34ac <usb_transfer+0x138>)
    33d4:	e9c2 1505 	strd	r1, r5, [r2, #20]
    33d8:	2103      	movs	r1, #3
    33da:	f842 1f10 	str.w	r1, [r2, #16]!
    33de:	4834      	ldr	r0, [pc, #208]	; (34b0 <usb_transfer+0x13c>)
    33e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    33e4:	f7fe fbee 	bl	1bc4 <z_impl_z_log_msg_static_create>
    33e8:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
    33ea:	4648      	mov	r0, r9
    33ec:	f007 fcd8 	bl	ada0 <z_impl_k_sem_give>
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    33f0:	e014      	b.n	341c <usb_transfer+0xa8>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    33f2:	f10b 0b01 	add.w	fp, fp, #1
    33f6:	f1bb 0f04 	cmp.w	fp, #4
    33fa:	f109 0948 	add.w	r9, r9, #72	; 0x48
    33fe:	d1d2      	bne.n	33a6 <usb_transfer+0x32>
		LOG_ERR("No transfer slot available");
    3400:	4b2c      	ldr	r3, [pc, #176]	; (34b4 <usb_transfer+0x140>)
    3402:	627b      	str	r3, [r7, #36]	; 0x24
    3404:	2302      	movs	r3, #2
    3406:	623b      	str	r3, [r7, #32]
    3408:	4829      	ldr	r0, [pc, #164]	; (34b0 <usb_transfer+0x13c>)
    340a:	2300      	movs	r3, #0
    340c:	f107 0220 	add.w	r2, r7, #32
    3410:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		ret = -ENOMEM;
    3414:	f06f 040b 	mvn.w	r4, #11
    3418:	f7fe fbd4 	bl	1bc4 <z_impl_z_log_msg_static_create>
	__asm__ volatile(
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	f383 8811 	msr	BASEPRI, r3
    3422:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    3426:	4620      	mov	r0, r4
    3428:	372c      	adds	r7, #44	; 0x2c
    342a:	46bd      	mov	sp, r7
    342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->tsize = 0;
    3430:	f8c8 3010 	str.w	r3, [r8, #16]
	trans->cb = cb;
    3434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3436:	f8c8 3014 	str.w	r3, [r8, #20]
	trans->flags = flags;
    343a:	68fb      	ldr	r3, [r7, #12]
	trans->buffer = data;
    343c:	68ba      	ldr	r2, [r7, #8]
	trans->flags = flags;
    343e:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
	trans->priv = cb_data;
    3442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	trans->ep = ep;
    3444:	f80a 5000 	strb.w	r5, [sl, r0]
	trans->priv = cb_data;
    3448:	f8c8 3018 	str.w	r3, [r8, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    344c:	4628      	mov	r0, r5
	trans->status = -EBUSY;
    344e:	f06f 030f 	mvn.w	r3, #15
	trans->bsize = dlen;
    3452:	e9c8 2602 	strd	r2, r6, [r8, #8]
	trans->status = -EBUSY;
    3456:	f8c8 3004 	str.w	r3, [r8, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    345a:	f002 f87f 	bl	555c <usb_dc_ep_mps>
    345e:	b168      	cbz	r0, 347c <usb_transfer+0x108>
    3460:	4628      	mov	r0, r5
    3462:	f002 f87b 	bl	555c <usb_dc_ep_mps>
    3466:	fbb6 f3f0 	udiv	r3, r6, r0
    346a:	fb03 6610 	mls	r6, r3, r0, r6
    346e:	b12e      	cbz	r6, 347c <usb_transfer+0x108>
		trans->flags |= USB_TRANS_NO_ZLP;
    3470:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    3474:	f043 0304 	orr.w	r3, r3, #4
    3478:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
    347c:	68fb      	ldr	r3, [r7, #12]
    347e:	079b      	lsls	r3, r3, #30
    3480:	d508      	bpl.n	3494 <usb_transfer+0x120>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3482:	2348      	movs	r3, #72	; 0x48
    3484:	fb03 a10b 	mla	r1, r3, fp, sl
    3488:	480b      	ldr	r0, [pc, #44]	; (34b8 <usb_transfer+0x144>)
    348a:	3134      	adds	r1, #52	; 0x34
    348c:	f00a fe36 	bl	e0fc <k_work_submit_to_queue>
	int key, ret = 0;
    3490:	2400      	movs	r4, #0
    3492:	e7c3      	b.n	341c <usb_transfer+0xa8>
		ret = usb_dc_ep_read_continue(ep);
    3494:	4628      	mov	r0, r5
    3496:	f001 ffef 	bl	5478 <usb_dc_ep_read_continue>
    349a:	4604      	mov	r4, r0
    349c:	e7be      	b.n	341c <usb_transfer+0xa8>
		return -EBUSY;
    349e:	f06f 040f 	mvn.w	r4, #15
    34a2:	e7c0      	b.n	3426 <usb_transfer+0xb2>
    34a4:	20000e20 	.word	0x20000e20
    34a8:	20000e04 	.word	0x20000e04
    34ac:	0000f686 	.word	0x0000f686
    34b0:	0000eb94 	.word	0x0000eb94
    34b4:	0000f66b 	.word	0x0000f66b
    34b8:	200009c0 	.word	0x200009c0

000034bc <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    34bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    34be:	f04f 0320 	mov.w	r3, #32
    34c2:	f3ef 8411 	mrs	r4, BASEPRI
    34c6:	f383 8812 	msr	BASEPRI_MAX, r3
    34ca:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    34ce:	f7ff fe51 	bl	3174 <usb_ep_get_transfer>
	if (!trans) {
    34d2:	b150      	cbz	r0, 34ea <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    34d4:	6843      	ldr	r3, [r0, #4]
    34d6:	3310      	adds	r3, #16
    34d8:	d107      	bne.n	34ea <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    34da:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    34de:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    34e0:	f100 0134 	add.w	r1, r0, #52	; 0x34
    34e4:	4803      	ldr	r0, [pc, #12]	; (34f4 <usb_cancel_transfer+0x38>)
    34e6:	f00a fe09 	bl	e0fc <k_work_submit_to_queue>
	__asm__ volatile(
    34ea:	f384 8811 	msr	BASEPRI, r4
    34ee:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    34f2:	bd10      	pop	{r4, pc}
    34f4:	200009c0 	.word	0x200009c0

000034f8 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    34f8:	b570      	push	{r4, r5, r6, lr}
    34fa:	4c0f      	ldr	r4, [pc, #60]	; (3538 <usb_cancel_transfers+0x40>)
    34fc:	2504      	movs	r5, #4
	__asm__ volatile(
    34fe:	f04f 0320 	mov.w	r3, #32
    3502:	f3ef 8611 	mrs	r6, BASEPRI
    3506:	f383 8812 	msr	BASEPRI_MAX, r3
    350a:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    350e:	6863      	ldr	r3, [r4, #4]
    3510:	3310      	adds	r3, #16
    3512:	d107      	bne.n	3524 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    3514:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3518:	4808      	ldr	r0, [pc, #32]	; (353c <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    351a:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    351c:	f104 0134 	add.w	r1, r4, #52	; 0x34
    3520:	f00a fdec 	bl	e0fc <k_work_submit_to_queue>
	__asm__ volatile(
    3524:	f386 8811 	msr	BASEPRI, r6
    3528:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    352c:	3d01      	subs	r5, #1
    352e:	f104 0448 	add.w	r4, r4, #72	; 0x48
    3532:	d1e4      	bne.n	34fe <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    3534:	bd70      	pop	{r4, r5, r6, pc}
    3536:	bf00      	nop
    3538:	20000e04 	.word	0x20000e04
    353c:	200009c0 	.word	0x200009c0

00003540 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    3540:	b570      	push	{r4, r5, r6, lr}
    3542:	4c0a      	ldr	r4, [pc, #40]	; (356c <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3544:	4e0a      	ldr	r6, [pc, #40]	; (3570 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3546:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3548:	4631      	mov	r1, r6
    354a:	4620      	mov	r0, r4
    354c:	f00a fdb9 	bl	e0c2 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    3550:	2201      	movs	r2, #1
    3552:	f1a4 0018 	sub.w	r0, r4, #24
    3556:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3558:	3501      	adds	r5, #1
    355a:	f00a fd71 	bl	e040 <z_impl_k_sem_init>
    355e:	2d04      	cmp	r5, #4
    3560:	f104 0448 	add.w	r4, r4, #72	; 0x48
    3564:	d1f0      	bne.n	3548 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    3566:	2000      	movs	r0, #0
    3568:	bd70      	pop	{r4, r5, r6, pc}
    356a:	bf00      	nop
    356c:	20000e38 	.word	0x20000e38
    3570:	000031a1 	.word	0x000031a1

00003574 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    3574:	b570      	push	{r4, r5, r6, lr}
    3576:	4604      	mov	r4, r0
    3578:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    357a:	7901      	ldrb	r1, [r0, #4]
    357c:	4812      	ldr	r0, [pc, #72]	; (35c8 <cdc_acm_class_handle_req+0x54>)
{
    357e:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    3580:	f009 fdd7 	bl	d132 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    3584:	b1e8      	cbz	r0, 35c2 <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    3586:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    358a:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    358c:	2a00      	cmp	r2, #0
    358e:	db11      	blt.n	35b4 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    3590:	2b20      	cmp	r3, #32
    3592:	d004      	beq.n	359e <cdc_acm_class_handle_req+0x2a>
    3594:	2b22      	cmp	r3, #34	; 0x22
    3596:	d009      	beq.n	35ac <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    3598:	f06f 0085 	mvn.w	r0, #133	; 0x85
    359c:	e005      	b.n	35aa <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    359e:	6829      	ldr	r1, [r5, #0]
    35a0:	2207      	movs	r2, #7
    35a2:	3810      	subs	r0, #16
    35a4:	f009 ff2c 	bl	d400 <memcpy>
			return 0;
    35a8:	2000      	movs	r0, #0
}
    35aa:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    35ac:	8863      	ldrh	r3, [r4, #2]
    35ae:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
    35b2:	e7f9      	b.n	35a8 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    35b4:	2b21      	cmp	r3, #33	; 0x21
    35b6:	d1ef      	bne.n	3598 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    35b8:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
    35ba:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    35bc:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    35be:	6033      	str	r3, [r6, #0]
			return 0;
    35c0:	e7f2      	b.n	35a8 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    35c2:	f06f 0012 	mvn.w	r0, #18
    35c6:	e7f0      	b.n	35aa <cdc_acm_class_handle_req+0x36>
    35c8:	20000f24 	.word	0x20000f24

000035cc <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    35cc:	b508      	push	{r3, lr}
    35ce:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    35d0:	4803      	ldr	r0, [pc, #12]	; (35e0 <cdc_acm_int_in+0x14>)
    35d2:	f009 fdbc 	bl	d14e <usb_get_dev_data_by_ep>
	if (common == NULL) {
    35d6:	b110      	cbz	r0, 35de <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    35d8:	2301      	movs	r3, #1
    35da:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    35de:	bd08      	pop	{r3, pc}
    35e0:	20000f24 	.word	0x20000f24

000035e4 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    35e4:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    35e6:	2301      	movs	r3, #1
    35e8:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
    35ec:	680b      	ldr	r3, [r1, #0]
    35ee:	b133      	cbz	r3, 35fe <cdc_acm_irq_rx_enable+0x1a>
    35f0:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    35f4:	b11b      	cbz	r3, 35fe <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    35f6:	4802      	ldr	r0, [pc, #8]	; (3600 <cdc_acm_irq_rx_enable+0x1c>)
    35f8:	3108      	adds	r1, #8
    35fa:	f00a bd7f 	b.w	e0fc <k_work_submit_to_queue>
	}
}
    35fe:	4770      	bx	lr
    3600:	200009c0 	.word	0x200009c0

00003604 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3604:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    3606:	2301      	movs	r3, #1
    3608:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
    360c:	680b      	ldr	r3, [r1, #0]
    360e:	b133      	cbz	r3, 361e <cdc_acm_irq_tx_enable+0x1a>
    3610:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    3614:	b11b      	cbz	r3, 361e <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3616:	4802      	ldr	r0, [pc, #8]	; (3620 <cdc_acm_irq_tx_enable+0x1c>)
    3618:	3108      	adds	r1, #8
    361a:	f00a bd6f 	b.w	e0fc <k_work_submit_to_queue>
}
    361e:	4770      	bx	lr
    3620:	200009c0 	.word	0x200009c0

00003624 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    3624:	4a0d      	ldr	r2, [pc, #52]	; (365c <cdc_acm_reset_port+0x38>)
{
    3626:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
    3628:	2100      	movs	r1, #0
    362a:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
    362e:	6810      	ldr	r0, [r2, #0]
    3630:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    3634:	8890      	ldrh	r0, [r2, #4]
    3636:	7992      	ldrb	r2, [r2, #6]
    3638:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
    363c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
    3640:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
    3644:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	dev_data->configured = false;
    3648:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
    364c:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    3650:	2240      	movs	r2, #64	; 0x40
    3652:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    3656:	f009 bede 	b.w	d416 <memset>
    365a:	bf00      	nop
    365c:	0000ebb0 	.word	0x0000ebb0

00003660 <cdc_acm_fifo_fill>:
{
    3660:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3662:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    3664:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    3668:	b188      	cbz	r0, 368e <cdc_acm_fifo_fill+0x2e>
    366a:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    366e:	b97b      	cbnz	r3, 3690 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
    3670:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    3674:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    3678:	f009 f9c7 	bl	ca0a <ring_buf_put>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    367c:	2200      	movs	r2, #0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    367e:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    3680:	2300      	movs	r3, #0
    3682:	4804      	ldr	r0, [pc, #16]	; (3694 <cdc_acm_fifo_fill+0x34>)
    3684:	f105 0118 	add.w	r1, r5, #24
    3688:	f007 fd2e 	bl	b0e8 <k_work_schedule_for_queue>
	return wrote;
    368c:	4620      	mov	r0, r4
}
    368e:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    3690:	2000      	movs	r0, #0
    3692:	e7fc      	b.n	368e <cdc_acm_fifo_fill+0x2e>
    3694:	200009c0 	.word	0x200009c0

00003698 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    3698:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    369a:	6904      	ldr	r4, [r0, #16]
{
    369c:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    36a0:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    36a4:	b1a3      	cbz	r3, 36d0 <cdc_acm_poll_out+0x38>
    36a6:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    36aa:	b98b      	cbnz	r3, 36d0 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    36ac:	f10d 0107 	add.w	r1, sp, #7
    36b0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
    36b4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    36b8:	2201      	movs	r2, #1
    36ba:	f009 f9a6 	bl	ca0a <ring_buf_put>
    36be:	4601      	mov	r1, r0
    36c0:	b140      	cbz	r0, 36d4 <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
    36c2:	480d      	ldr	r0, [pc, #52]	; (36f8 <cdc_acm_poll_out+0x60>)
    36c4:	2221      	movs	r2, #33	; 0x21
    36c6:	2300      	movs	r3, #0
    36c8:	f104 0118 	add.w	r1, r4, #24
    36cc:	f007 fd0c 	bl	b0e8 <k_work_schedule_for_queue>
}
    36d0:	b002      	add	sp, #8
    36d2:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    36d4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    36d8:	2201      	movs	r2, #1
    36da:	f009 f9ea 	bl	cab2 <ring_buf_get>
    36de:	2800      	cmp	r0, #0
    36e0:	d0f6      	beq.n	36d0 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    36e2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    36e6:	2201      	movs	r2, #1
    36e8:	f10d 0107 	add.w	r1, sp, #7
    36ec:	f009 f98d 	bl	ca0a <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    36f0:	2800      	cmp	r0, #0
    36f2:	d1e6      	bne.n	36c2 <cdc_acm_poll_out+0x2a>
    36f4:	e7ec      	b.n	36d0 <cdc_acm_poll_out+0x38>
    36f6:	bf00      	nop
    36f8:	200009c0 	.word	0x200009c0

000036fc <tx_work_handler>:
{
    36fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    36fe:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    3702:	685b      	ldr	r3, [r3, #4]
    3704:	6a1b      	ldr	r3, [r3, #32]
    3706:	7d1f      	ldrb	r7, [r3, #20]
{
    3708:	b085      	sub	sp, #20
    370a:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    370c:	4638      	mov	r0, r7
    370e:	f009 fd34 	bl	d17a <usb_transfer_is_busy>
    3712:	4606      	mov	r6, r0
    3714:	b9e0      	cbnz	r0, 3750 <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    3716:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    3718:	f44f 6280 	mov.w	r2, #1024	; 0x400
    371c:	a903      	add	r1, sp, #12
    371e:	f009 f993 	bl	ca48 <ring_buf_get_claim>
	if (!len) {
    3722:	4604      	mov	r4, r0
    3724:	b1a0      	cbz	r0, 3750 <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    3726:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    3728:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    372c:	bf08      	it	eq
    372e:	f100 34ff 	addeq.w	r4, r0, #4294967295
	dev_data->tx_ready = false;
    3732:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    3736:	9301      	str	r3, [sp, #4]
    3738:	4b06      	ldr	r3, [pc, #24]	; (3754 <tx_work_handler+0x58>)
    373a:	9903      	ldr	r1, [sp, #12]
    373c:	9300      	str	r3, [sp, #0]
    373e:	4622      	mov	r2, r4
    3740:	2302      	movs	r3, #2
    3742:	4638      	mov	r0, r7
    3744:	f7ff fe16 	bl	3374 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    3748:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    374a:	4621      	mov	r1, r4
    374c:	f009 f99c 	bl	ca88 <ring_buf_get_finish>
}
    3750:	b005      	add	sp, #20
    3752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3754:	00003759 	.word	0x00003759

00003758 <cdc_acm_write_cb>:
{
    3758:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
    375a:	2301      	movs	r3, #1
    375c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
    3760:	6813      	ldr	r3, [r2, #0]
{
    3762:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    3764:	b13b      	cbz	r3, 3776 <cdc_acm_write_cb+0x1e>
    3766:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
    376a:	b123      	cbz	r3, 3776 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    376c:	480a      	ldr	r0, [pc, #40]	; (3798 <cdc_acm_write_cb+0x40>)
    376e:	f102 0108 	add.w	r1, r2, #8
    3772:	f00a fcc3 	bl	e0fc <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    3776:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    377a:	689a      	ldr	r2, [r3, #8]
    377c:	691b      	ldr	r3, [r3, #16]
    377e:	429a      	cmp	r2, r3
    3780:	d008      	beq.n	3794 <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    3782:	f104 0118 	add.w	r1, r4, #24
    3786:	4804      	ldr	r0, [pc, #16]	; (3798 <cdc_acm_write_cb+0x40>)
}
    3788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    378c:	2200      	movs	r2, #0
    378e:	2300      	movs	r3, #0
    3790:	f007 bcaa 	b.w	b0e8 <k_work_schedule_for_queue>
}
    3794:	bd10      	pop	{r4, pc}
    3796:	bf00      	nop
    3798:	200009c0 	.word	0x200009c0

0000379c <cdc_acm_init>:
{
    379c:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    379e:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    37a0:	2300      	movs	r3, #0
    37a2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    37a6:	4b0c      	ldr	r3, [pc, #48]	; (37d8 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    37a8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    37ac:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    37ae:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    37b2:	b969      	cbnz	r1, 37d0 <cdc_acm_init+0x34>
	list->head = node;
    37b4:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    37b8:	f104 0008 	add.w	r0, r4, #8
    37bc:	4907      	ldr	r1, [pc, #28]	; (37dc <cdc_acm_init+0x40>)
    37be:	f00a fc80 	bl	e0c2 <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
    37c2:	f104 0018 	add.w	r0, r4, #24
    37c6:	4906      	ldr	r1, [pc, #24]	; (37e0 <cdc_acm_init+0x44>)
    37c8:	f00a fca9 	bl	e11e <k_work_init_delayable>
}
    37cc:	2000      	movs	r0, #0
    37ce:	bd10      	pop	{r4, pc}
	parent->next = child;
    37d0:	600a      	str	r2, [r1, #0]
	list->tail = node;
    37d2:	605a      	str	r2, [r3, #4]
}
    37d4:	e7f0      	b.n	37b8 <cdc_acm_init+0x1c>
    37d6:	bf00      	nop
    37d8:	20000f24 	.word	0x20000f24
    37dc:	0000d1a5 	.word	0x0000d1a5
    37e0:	000036fd 	.word	0x000036fd

000037e4 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    37e4:	b530      	push	{r4, r5, lr}
	notification.wIndex = 0U;
    37e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	struct usb_cfg_data * const cfg = (void *)dev->config;
    37ea:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    37ec:	6905      	ldr	r5, [r0, #16]
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    37ee:	4c0d      	ldr	r4, [pc, #52]	; (3824 <cdc_acm_send_notification.isra.0+0x40>)
static int cdc_acm_send_notification(const struct device *dev,
    37f0:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    37f2:	f242 00a1 	movw	r0, #8353	; 0x20a1
    37f6:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    37fa:	2300      	movs	r3, #0
    37fc:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    3800:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    3802:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    3806:	7900      	ldrb	r0, [r0, #4]
    3808:	220a      	movs	r2, #10
    380a:	a901      	add	r1, sp, #4
    380c:	f7ff f9b0 	bl	2b70 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    3810:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
    3814:	b923      	cbnz	r3, 3820 <cdc_acm_send_notification.isra.0+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    3816:	2001      	movs	r0, #1
    3818:	f00a fdd8 	bl	e3cc <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    381c:	3c01      	subs	r4, #1
    381e:	d1f7      	bne.n	3810 <cdc_acm_send_notification.isra.0+0x2c>
}
    3820:	b005      	add	sp, #20
    3822:	bd30      	pop	{r4, r5, pc}
    3824:	000186a1 	.word	0x000186a1

00003828 <cdc_acm_read_cb>:
{
    3828:	b573      	push	{r0, r1, r4, r5, r6, lr}
    382a:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    382c:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
    3830:	1e0a      	subs	r2, r1, #0
{
    3832:	4605      	mov	r5, r0
	if (size <= 0) {
    3834:	dd1f      	ble.n	3876 <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    3836:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    383a:	4631      	mov	r1, r6
    383c:	f009 f8e5 	bl	ca0a <ring_buf_put>
	dev_data->rx_ready = true;
    3840:	2301      	movs	r3, #1
    3842:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
    3846:	6823      	ldr	r3, [r4, #0]
    3848:	b13b      	cbz	r3, 385a <cdc_acm_read_cb+0x32>
    384a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    384e:	b123      	cbz	r3, 385a <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3850:	480e      	ldr	r0, [pc, #56]	; (388c <cdc_acm_read_cb+0x64>)
    3852:	f104 0108 	add.w	r1, r4, #8
    3856:	f00a fc51 	bl	e0fc <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    385a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    385e:	684b      	ldr	r3, [r1, #4]
    3860:	694a      	ldr	r2, [r1, #20]
    3862:	1a9a      	subs	r2, r3, r2
    3864:	69cb      	ldr	r3, [r1, #28]
    3866:	1a9b      	subs	r3, r3, r2
    3868:	2b3f      	cmp	r3, #63	; 0x3f
    386a:	d804      	bhi.n	3876 <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
    386c:	2301      	movs	r3, #1
    386e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    3872:	b002      	add	sp, #8
    3874:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    3876:	4b06      	ldr	r3, [pc, #24]	; (3890 <cdc_acm_read_cb+0x68>)
    3878:	9300      	str	r3, [sp, #0]
    387a:	9401      	str	r4, [sp, #4]
    387c:	2301      	movs	r3, #1
    387e:	2240      	movs	r2, #64	; 0x40
    3880:	4631      	mov	r1, r6
    3882:	4628      	mov	r0, r5
    3884:	f7ff fd76 	bl	3374 <usb_transfer>
    3888:	e7f3      	b.n	3872 <cdc_acm_read_cb+0x4a>
    388a:	bf00      	nop
    388c:	200009c0 	.word	0x200009c0
    3890:	00003829 	.word	0x00003829

00003894 <cdc_acm_dev_status_cb>:
{
    3894:	b538      	push	{r3, r4, r5, lr}
    3896:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    3898:	4601      	mov	r1, r0
    389a:	481e      	ldr	r0, [pc, #120]	; (3914 <cdc_acm_dev_status_cb+0x80>)
    389c:	f009 fc3d 	bl	d11a <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    38a0:	4604      	mov	r4, r0
    38a2:	b380      	cbz	r0, 3906 <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    38a4:	4602      	mov	r2, r0
	switch (status) {
    38a6:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    38a8:	f852 39a4 	ldr.w	r3, [r2], #-164
    38ac:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    38ae:	2905      	cmp	r1, #5
    38b0:	d829      	bhi.n	3906 <cdc_acm_dev_status_cb+0x72>
    38b2:	e8df f001 	tbb	[pc, r1]
    38b6:	2820      	.short	0x2820
    38b8:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    38bc:	f814 1c06 	ldrb.w	r1, [r4, #-6]
    38c0:	b931      	cbnz	r1, 38d0 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    38c2:	6a1b      	ldr	r3, [r3, #32]
    38c4:	7b18      	ldrb	r0, [r3, #12]
    38c6:	f7ff ffaf 	bl	3828 <cdc_acm_read_cb>
			dev_data->configured = true;
    38ca:	2301      	movs	r3, #1
    38cc:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
    38d0:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
    38d4:	b9bb      	cbnz	r3, 3906 <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    38d6:	2301      	movs	r3, #1
    38d8:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    38dc:	f854 3ca4 	ldr.w	r3, [r4, #-164]
    38e0:	b18b      	cbz	r3, 3906 <cdc_acm_dev_status_cb+0x72>
    38e2:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
    38e6:	b173      	cbz	r3, 3906 <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    38e8:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
    38ec:	480a      	ldr	r0, [pc, #40]	; (3918 <cdc_acm_dev_status_cb+0x84>)
}
    38ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    38f2:	f00a bc03 	b.w	e0fc <k_work_submit_to_queue>
}
    38f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    38fa:	4610      	mov	r0, r2
    38fc:	f7ff be92 	b.w	3624 <cdc_acm_reset_port>
		dev_data->suspended = true;
    3900:	2301      	movs	r3, #1
			dev_data->suspended = false;
    3902:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    3906:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    3908:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    390c:	2b00      	cmp	r3, #0
    390e:	d0fa      	beq.n	3906 <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
    3910:	2300      	movs	r3, #0
    3912:	e7f6      	b.n	3902 <cdc_acm_dev_status_cb+0x6e>
    3914:	20000f24 	.word	0x20000f24
    3918:	200009c0 	.word	0x200009c0

0000391c <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
    391c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
    391e:	4d09      	ldr	r5, [pc, #36]	; (3944 <z_usb_work_q_init+0x28>)
    3920:	4909      	ldr	r1, [pc, #36]	; (3948 <z_usb_work_q_init+0x2c>)
    3922:	2400      	movs	r4, #0
    3924:	9400      	str	r4, [sp, #0]
    3926:	f04f 33ff 	mov.w	r3, #4294967295
    392a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    392e:	4628      	mov	r0, r5
    3930:	f007 fba2 	bl	b078 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    3934:	4905      	ldr	r1, [pc, #20]	; (394c <z_usb_work_q_init+0x30>)
    3936:	4628      	mov	r0, r5
    3938:	f00a fae8 	bl	df0c <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    393c:	4620      	mov	r0, r4
    393e:	b003      	add	sp, #12
    3940:	bd30      	pop	{r4, r5, pc}
    3942:	bf00      	nop
    3944:	200009c0 	.word	0x200009c0
    3948:	20002830 	.word	0x20002830
    394c:	0000f6d6 	.word	0x0000f6d6

00003950 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3950:	4801      	ldr	r0, [pc, #4]	; (3958 <nrf_cc3xx_platform_abort_init+0x8>)
    3952:	f008 ba7b 	b.w	be4c <nrf_cc3xx_platform_set_abort>
    3956:	bf00      	nop
    3958:	0000ec94 	.word	0x0000ec94

0000395c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    395c:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    395e:	4604      	mov	r4, r0
    3960:	b918      	cbnz	r0, 396a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    3962:	4b0f      	ldr	r3, [pc, #60]	; (39a0 <mutex_free_platform+0x44>)
    3964:	480f      	ldr	r0, [pc, #60]	; (39a4 <mutex_free_platform+0x48>)
    3966:	685b      	ldr	r3, [r3, #4]
    3968:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    396a:	6861      	ldr	r1, [r4, #4]
    396c:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    3970:	d00f      	beq.n	3992 <mutex_free_platform+0x36>
    3972:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    3976:	d00c      	beq.n	3992 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3978:	4d0b      	ldr	r5, [pc, #44]	; (39a8 <mutex_free_platform+0x4c>)
    397a:	42a9      	cmp	r1, r5
    397c:	d009      	beq.n	3992 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    397e:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    3982:	d007      	beq.n	3994 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3984:	4809      	ldr	r0, [pc, #36]	; (39ac <mutex_free_platform+0x50>)
    3986:	4621      	mov	r1, r4
    3988:	f00a fa91 	bl	deae <k_mem_slab_free>
        mutex->mutex = NULL;
    398c:	2300      	movs	r3, #0
    398e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3990:	6065      	str	r5, [r4, #4]
}
    3992:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3994:	6820      	ldr	r0, [r4, #0]
    3996:	2214      	movs	r2, #20
    3998:	f009 fd3d 	bl	d416 <memset>
    399c:	e7f8      	b.n	3990 <mutex_free_platform+0x34>
    399e:	bf00      	nop
    39a0:	20000270 	.word	0x20000270
    39a4:	0000f6df 	.word	0x0000f6df
    39a8:	a95c5f2c 	.word	0xa95c5f2c
    39ac:	2000142c 	.word	0x2000142c

000039b0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    39b0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    39b2:	b320      	cbz	r0, 39fe <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    39b4:	6843      	ldr	r3, [r0, #4]
    39b6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    39ba:	d110      	bne.n	39de <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    39bc:	2201      	movs	r2, #1
    39be:	6803      	ldr	r3, [r0, #0]
    39c0:	f3bf 8f5b 	dmb	ish
    39c4:	e853 1f00 	ldrex	r1, [r3]
    39c8:	2900      	cmp	r1, #0
    39ca:	d103      	bne.n	39d4 <mutex_lock_platform+0x24>
    39cc:	e843 2000 	strex	r0, r2, [r3]
    39d0:	2800      	cmp	r0, #0
    39d2:	d1f7      	bne.n	39c4 <mutex_lock_platform+0x14>
    39d4:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    39d8:	d10d      	bne.n	39f6 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    39da:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    39dc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    39de:	4a09      	ldr	r2, [pc, #36]	; (3a04 <mutex_lock_platform+0x54>)
    39e0:	4293      	cmp	r3, r2
    39e2:	d00a      	beq.n	39fa <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    39e4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    39e6:	f04f 32ff 	mov.w	r2, #4294967295
    39ea:	f04f 33ff 	mov.w	r3, #4294967295
    39ee:	f007 f8ed 	bl	abcc <z_impl_k_mutex_lock>
        if (ret == 0) {
    39f2:	2800      	cmp	r0, #0
    39f4:	d0f1      	beq.n	39da <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    39f6:	4804      	ldr	r0, [pc, #16]	; (3a08 <mutex_lock_platform+0x58>)
    39f8:	e7f0      	b.n	39dc <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    39fa:	4804      	ldr	r0, [pc, #16]	; (3a0c <mutex_lock_platform+0x5c>)
    39fc:	e7ee      	b.n	39dc <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    39fe:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3a02:	e7eb      	b.n	39dc <mutex_lock_platform+0x2c>
    3a04:	a95c5f2c 	.word	0xa95c5f2c
    3a08:	ffff8fe9 	.word	0xffff8fe9
    3a0c:	ffff8fea 	.word	0xffff8fea

00003a10 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a10:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3a12:	b1d8      	cbz	r0, 3a4c <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3a14:	6843      	ldr	r3, [r0, #4]
    3a16:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3a1a:	d110      	bne.n	3a3e <mutex_unlock_platform+0x2e>
    3a1c:	2200      	movs	r2, #0
    3a1e:	6803      	ldr	r3, [r0, #0]
    3a20:	f3bf 8f5b 	dmb	ish
    3a24:	e853 1f00 	ldrex	r1, [r3]
    3a28:	2901      	cmp	r1, #1
    3a2a:	d103      	bne.n	3a34 <mutex_unlock_platform+0x24>
    3a2c:	e843 2000 	strex	r0, r2, [r3]
    3a30:	2800      	cmp	r0, #0
    3a32:	d1f7      	bne.n	3a24 <mutex_unlock_platform+0x14>
    3a34:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3a38:	d10b      	bne.n	3a52 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3a3a:	2000      	movs	r0, #0
    }
}
    3a3c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3a3e:	4a07      	ldr	r2, [pc, #28]	; (3a5c <mutex_unlock_platform+0x4c>)
    3a40:	4293      	cmp	r3, r2
    3a42:	d008      	beq.n	3a56 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3a44:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3a46:	f007 f93b 	bl	acc0 <z_impl_k_mutex_unlock>
    3a4a:	e7f6      	b.n	3a3a <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3a4c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3a50:	e7f4      	b.n	3a3c <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3a52:	4803      	ldr	r0, [pc, #12]	; (3a60 <mutex_unlock_platform+0x50>)
    3a54:	e7f2      	b.n	3a3c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3a56:	4803      	ldr	r0, [pc, #12]	; (3a64 <mutex_unlock_platform+0x54>)
    3a58:	e7f0      	b.n	3a3c <mutex_unlock_platform+0x2c>
    3a5a:	bf00      	nop
    3a5c:	a95c5f2c 	.word	0xa95c5f2c
    3a60:	ffff8fe9 	.word	0xffff8fe9
    3a64:	ffff8fea 	.word	0xffff8fea

00003a68 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a68:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3a6a:	4604      	mov	r4, r0
    3a6c:	b918      	cbnz	r0, 3a76 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3a6e:	4b1d      	ldr	r3, [pc, #116]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3a70:	481d      	ldr	r0, [pc, #116]	; (3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>)
    3a72:	685b      	ldr	r3, [r3, #4]
    3a74:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3a76:	6863      	ldr	r3, [r4, #4]
    3a78:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3a7c:	d02f      	beq.n	3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
    3a7e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    3a82:	d02c      	beq.n	3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    3a84:	4a19      	ldr	r2, [pc, #100]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
    3a86:	4293      	cmp	r3, r2
    3a88:	d119      	bne.n	3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
    3a8a:	6823      	ldr	r3, [r4, #0]
    3a8c:	bb03      	cbnz	r3, 3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3a8e:	4818      	ldr	r0, [pc, #96]	; (3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>)
    3a90:	f04f 32ff 	mov.w	r2, #4294967295
    3a94:	f04f 33ff 	mov.w	r3, #4294967295
    3a98:	4621      	mov	r1, r4
    3a9a:	f006 ff95 	bl	a9c8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3a9e:	b908      	cbnz	r0, 3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3aa0:	6823      	ldr	r3, [r4, #0]
    3aa2:	b91b      	cbnz	r3, 3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
            platform_abort_apis.abort_fn(
    3aa4:	4b0f      	ldr	r3, [pc, #60]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3aa6:	4813      	ldr	r0, [pc, #76]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3aa8:	685b      	ldr	r3, [r3, #4]
    3aaa:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3aac:	6820      	ldr	r0, [r4, #0]
    3aae:	2214      	movs	r2, #20
    3ab0:	2100      	movs	r1, #0
    3ab2:	f009 fcb0 	bl	d416 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3ab6:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    3aba:	6063      	str	r3, [r4, #4]
    3abc:	e008      	b.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
    switch(flags){
    3abe:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3ac2:	d80d      	bhi.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
    3ac4:	2b3a      	cmp	r3, #58	; 0x3a
    3ac6:	d003      	beq.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
    3ac8:	f640 62ba 	movw	r2, #3770	; 0xeba
    3acc:	4293      	cmp	r3, r2
    3ace:	d1de      	bne.n	3a8e <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3ad0:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3ad2:	f00a fa31 	bl	df38 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3ad6:	6863      	ldr	r3, [r4, #4]
    3ad8:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    3adc:	6063      	str	r3, [r4, #4]
}
    3ade:	bd10      	pop	{r4, pc}
    switch(flags){
    3ae0:	4a05      	ldr	r2, [pc, #20]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3ae2:	e7f3      	b.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    3ae4:	20000270 	.word	0x20000270
    3ae8:	0000f6df 	.word	0x0000f6df
    3aec:	a95c5f2c 	.word	0xa95c5f2c
    3af0:	2000142c 	.word	0x2000142c
    3af4:	0000f705 	.word	0x0000f705
    3af8:	3a00003a 	.word	0x3a00003a

00003afc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3afc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3afe:	4906      	ldr	r1, [pc, #24]	; (3b18 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3b00:	4806      	ldr	r0, [pc, #24]	; (3b1c <nrf_cc3xx_platform_mutex_init+0x20>)
    3b02:	2340      	movs	r3, #64	; 0x40
    3b04:	2214      	movs	r2, #20
    3b06:	f00a f9c4 	bl	de92 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3b0e:	4904      	ldr	r1, [pc, #16]	; (3b20 <nrf_cc3xx_platform_mutex_init+0x24>)
    3b10:	4804      	ldr	r0, [pc, #16]	; (3b24 <nrf_cc3xx_platform_mutex_init+0x28>)
    3b12:	f008 ba0d 	b.w	bf30 <nrf_cc3xx_platform_set_mutexes>
    3b16:	bf00      	nop
    3b18:	20000f2c 	.word	0x20000f2c
    3b1c:	2000142c 	.word	0x2000142c
    3b20:	0000ec9c 	.word	0x0000ec9c
    3b24:	0000ecb0 	.word	0x0000ecb0

00003b28 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3b28:	4901      	ldr	r1, [pc, #4]	; (3b30 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3b2a:	2210      	movs	r2, #16
	str	r2, [r1]
    3b2c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3b2e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3b30:	e000ed10 	.word	0xe000ed10

00003b34 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3b34:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3b36:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3b38:	f380 8811 	msr	BASEPRI, r0
	isb
    3b3c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    3b40:	f3bf 8f4f 	dsb	sy
    3b44:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3b46:	b662      	cpsie	i
	isb
    3b48:	f3bf 8f6f 	isb	sy

	bx	lr
    3b4c:	4770      	bx	lr
    3b4e:	bf00      	nop

00003b50 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3b50:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3b52:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3b54:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    3b58:	f3bf 8f4f 	dsb	sy
    3b5c:	bf20      	wfe

	msr	BASEPRI, r0
    3b5e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3b62:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3b64:	4770      	bx	lr
    3b66:	bf00      	nop

00003b68 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b6c:	4681      	mov	r9, r0
    3b6e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    3b70:	460c      	mov	r4, r1
    3b72:	2900      	cmp	r1, #0
    3b74:	d04c      	beq.n	3c10 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3b76:	466e      	mov	r6, sp
    3b78:	b08a      	sub	sp, #40	; 0x28
    3b7a:	e9d1 1200 	ldrd	r1, r2, [r1]
    3b7e:	68a3      	ldr	r3, [r4, #8]
    3b80:	466d      	mov	r5, sp
    3b82:	4827      	ldr	r0, [pc, #156]	; (3c20 <z_arm_fatal_error+0xb8>)
    3b84:	46a8      	mov	r8, r5
    3b86:	f04f 0a05 	mov.w	sl, #5
    3b8a:	e9c5 0105 	strd	r0, r1, [r5, #20]
    3b8e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3b92:	f848 af10 	str.w	sl, [r8, #16]!
    3b96:	4823      	ldr	r0, [pc, #140]	; (3c24 <z_arm_fatal_error+0xbc>)
    3b98:	4642      	mov	r2, r8
    3b9a:	2300      	movs	r3, #0
    3b9c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    3ba0:	f7fe f810 	bl	1bc4 <z_impl_z_log_msg_static_create>
    3ba4:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3ba6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    3baa:	6963      	ldr	r3, [r4, #20]
    3bac:	46ad      	mov	sp, r5
    3bae:	481e      	ldr	r0, [pc, #120]	; (3c28 <z_arm_fatal_error+0xc0>)
    3bb0:	f8c5 a010 	str.w	sl, [r5, #16]
    3bb4:	e9c5 0105 	strd	r0, r1, [r5, #20]
    3bb8:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3bbc:	4819      	ldr	r0, [pc, #100]	; (3c24 <z_arm_fatal_error+0xbc>)
    3bbe:	2300      	movs	r3, #0
    3bc0:	4642      	mov	r2, r8
    3bc2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    3bc6:	f7fd fffd 	bl	1bc4 <z_impl_z_log_msg_static_create>
    3bca:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3bcc:	b088      	sub	sp, #32
    3bce:	69e3      	ldr	r3, [r4, #28]
    3bd0:	466d      	mov	r5, sp
    3bd2:	4a16      	ldr	r2, [pc, #88]	; (3c2c <z_arm_fatal_error+0xc4>)
    3bd4:	46a8      	mov	r8, r5
    3bd6:	f04f 0a03 	mov.w	sl, #3
    3bda:	e9c5 2305 	strd	r2, r3, [r5, #20]
    3bde:	f848 af10 	str.w	sl, [r8, #16]!
    3be2:	4810      	ldr	r0, [pc, #64]	; (3c24 <z_arm_fatal_error+0xbc>)
    3be4:	2300      	movs	r3, #0
    3be6:	4642      	mov	r2, r8
    3be8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3bec:	f7fd ffea 	bl	1bc4 <z_impl_z_log_msg_static_create>
    3bf0:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3bf2:	69a3      	ldr	r3, [r4, #24]
    3bf4:	46ad      	mov	sp, r5
    3bf6:	4a0e      	ldr	r2, [pc, #56]	; (3c30 <z_arm_fatal_error+0xc8>)
    3bf8:	f8c5 a010 	str.w	sl, [r5, #16]
    3bfc:	e9c5 2305 	strd	r2, r3, [r5, #20]
    3c00:	4808      	ldr	r0, [pc, #32]	; (3c24 <z_arm_fatal_error+0xbc>)
    3c02:	2300      	movs	r3, #0
    3c04:	4642      	mov	r2, r8
    3c06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3c0a:	f7fd ffdb 	bl	1bc4 <z_impl_z_log_msg_static_create>
    3c0e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3c10:	4621      	mov	r1, r4
    3c12:	4648      	mov	r0, r9
    3c14:	f006 fd5a 	bl	a6cc <z_fatal_error>
}
    3c18:	46bd      	mov	sp, r7
    3c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c1e:	bf00      	nop
    3c20:	0000f732 	.word	0x0000f732
    3c24:	0000eb44 	.word	0x0000eb44
    3c28:	0000f761 	.word	0x0000f761
    3c2c:	0000f790 	.word	0x0000f790
    3c30:	0000f79f 	.word	0x0000f79f

00003c34 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3c34:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3c36:	2800      	cmp	r0, #0
    3c38:	db07      	blt.n	3c4a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c3a:	4a04      	ldr	r2, [pc, #16]	; (3c4c <arch_irq_enable+0x18>)
    3c3c:	0941      	lsrs	r1, r0, #5
    3c3e:	2301      	movs	r3, #1
    3c40:	f000 001f 	and.w	r0, r0, #31
    3c44:	4083      	lsls	r3, r0
    3c46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3c4a:	4770      	bx	lr
    3c4c:	e000e100 	.word	0xe000e100

00003c50 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3c50:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3c52:	2800      	cmp	r0, #0
    3c54:	db0c      	blt.n	3c70 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c56:	0943      	lsrs	r3, r0, #5
    3c58:	4906      	ldr	r1, [pc, #24]	; (3c74 <arch_irq_disable+0x24>)
    3c5a:	f000 001f 	and.w	r0, r0, #31
    3c5e:	3320      	adds	r3, #32
    3c60:	2201      	movs	r2, #1
    3c62:	4082      	lsls	r2, r0
    3c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3c68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c6c:	f3bf 8f6f 	isb	sy
}
    3c70:	4770      	bx	lr
    3c72:	bf00      	nop
    3c74:	e000e100 	.word	0xe000e100

00003c78 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3c78:	4b05      	ldr	r3, [pc, #20]	; (3c90 <arch_irq_is_enabled+0x18>)
    3c7a:	0942      	lsrs	r2, r0, #5
    3c7c:	f000 001f 	and.w	r0, r0, #31
    3c80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3c84:	2301      	movs	r3, #1
    3c86:	fa03 f000 	lsl.w	r0, r3, r0
}
    3c8a:	4010      	ands	r0, r2
    3c8c:	4770      	bx	lr
    3c8e:	bf00      	nop
    3c90:	e000e100 	.word	0xe000e100

00003c94 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3c94:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3c96:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c98:	bfa8      	it	ge
    3c9a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3c9e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ca2:	bfb8      	it	lt
    3ca4:	4b06      	ldrlt	r3, [pc, #24]	; (3cc0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ca6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3caa:	bfac      	ite	ge
    3cac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cb0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cb4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cb6:	bfb4      	ite	lt
    3cb8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cba:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    3cbe:	4770      	bx	lr
    3cc0:	e000ed14 	.word	0xe000ed14

00003cc4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3cc4:	bf30      	wfi
    b z_SysNmiOnReset
    3cc6:	f7ff bffd 	b.w	3cc4 <z_SysNmiOnReset>
    3cca:	bf00      	nop

00003ccc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3ccc:	4a0b      	ldr	r2, [pc, #44]	; (3cfc <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3cce:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3cd0:	4b0b      	ldr	r3, [pc, #44]	; (3d00 <z_arm_prep_c+0x34>)
    3cd2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3cd6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3cd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3cdc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3ce0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3ce4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3cec:	f006 fdaa 	bl	a844 <z_bss_zero>
	z_data_copy();
    3cf0:	f007 fd92 	bl	b818 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3cf4:	f000 fb9a 	bl	442c <z_arm_interrupt_init>
	z_cstart();
    3cf8:	f006 fde4 	bl	a8c4 <z_cstart>
    3cfc:	00000000 	.word	0x00000000
    3d00:	e000ed00 	.word	0xe000ed00

00003d04 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3d04:	4a09      	ldr	r2, [pc, #36]	; (3d2c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3d06:	490a      	ldr	r1, [pc, #40]	; (3d30 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3d08:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3d0a:	6809      	ldr	r1, [r1, #0]
    3d0c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3d0e:	4909      	ldr	r1, [pc, #36]	; (3d34 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3d10:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3d12:	684b      	ldr	r3, [r1, #4]
    3d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3d18:	604b      	str	r3, [r1, #4]
    3d1a:	2300      	movs	r3, #0
    3d1c:	f383 8811 	msr	BASEPRI, r3
    3d20:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3d24:	6893      	ldr	r3, [r2, #8]
}
    3d26:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    3d28:	4770      	bx	lr
    3d2a:	bf00      	nop
    3d2c:	200021f8 	.word	0x200021f8
    3d30:	0000eff8 	.word	0x0000eff8
    3d34:	e000ed00 	.word	0xe000ed00

00003d38 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3d38:	490f      	ldr	r1, [pc, #60]	; (3d78 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3d3a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3d3c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3d40:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3d42:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3d46:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3d4a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3d4c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3d50:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3d54:	4f09      	ldr	r7, [pc, #36]	; (3d7c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3d56:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3d5a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    3d5c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3d5e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3d60:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    3d62:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3d64:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3d66:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3d6a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3d6e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3d72:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3d76:	4770      	bx	lr
    ldr r1, =_kernel
    3d78:	200021f8 	.word	0x200021f8
    ldr v4, =_SCS_ICSR
    3d7c:	e000ed04 	.word	0xe000ed04

00003d80 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3d80:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3d84:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3d86:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3d8a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3d8e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3d90:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3d94:	2902      	cmp	r1, #2
    beq _oops
    3d96:	d0ff      	beq.n	3d98 <_oops>

00003d98 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3d98:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    3d9a:	f009 fb0f 	bl	d3bc <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    3d9e:	bd01      	pop	{r0, pc}

00003da0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3da0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3da4:	9b00      	ldr	r3, [sp, #0]
    3da6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3daa:	490a      	ldr	r1, [pc, #40]	; (3dd4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3dac:	9b01      	ldr	r3, [sp, #4]
    3dae:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3db2:	9b02      	ldr	r3, [sp, #8]
    3db4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3db8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3dc0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3dc4:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3dc8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3dca:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3dcc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3dce:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3dd0:	4770      	bx	lr
    3dd2:	bf00      	nop
    3dd4:	0000c2c3 	.word	0x0000c2c3

00003dd8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3dd8:	4b07      	ldr	r3, [pc, #28]	; (3df8 <arch_switch_to_main_thread+0x20>)
    3dda:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3ddc:	4610      	mov	r0, r2
    3dde:	f381 8809 	msr	PSP, r1
    3de2:	2100      	movs	r1, #0
    3de4:	b663      	cpsie	if
    3de6:	f381 8811 	msr	BASEPRI, r1
    3dea:	f3bf 8f6f 	isb	sy
    3dee:	2200      	movs	r2, #0
    3df0:	2300      	movs	r3, #0
    3df2:	f008 fa66 	bl	c2c2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3df6:	bf00      	nop
    3df8:	200021f8 	.word	0x200021f8

00003dfc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3dfc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3dfe:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3e00:	4a0b      	ldr	r2, [pc, #44]	; (3e30 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3e02:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    3e04:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3e06:	bf1e      	ittt	ne
	movne	r1, #0
    3e08:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3e0a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    3e0c:	f00a f885 	blne	df1a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3e10:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3e12:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3e16:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3e1a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3e1e:	4905      	ldr	r1, [pc, #20]	; (3e34 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3e20:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3e22:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3e24:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3e26:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3e2a:	4903      	ldr	r1, [pc, #12]	; (3e38 <_isr_wrapper+0x3c>)
	bx r1
    3e2c:	4708      	bx	r1
    3e2e:	0000      	.short	0x0000
	ldr r2, =_kernel
    3e30:	200021f8 	.word	0x200021f8
	ldr r1, =_sw_isr_table
    3e34:	0000e924 	.word	0x0000e924
	ldr r1, =z_arm_int_exit
    3e38:	00003e3d 	.word	0x00003e3d

00003e3c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3e3c:	4b04      	ldr	r3, [pc, #16]	; (3e50 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3e3e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3e40:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    3e42:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3e44:	d003      	beq.n	3e4e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3e46:	4903      	ldr	r1, [pc, #12]	; (3e54 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3e4c:	600a      	str	r2, [r1, #0]

00003e4e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3e4e:	4770      	bx	lr
	ldr r3, =_kernel
    3e50:	200021f8 	.word	0x200021f8
	ldr r1, =_SCS_ICSR
    3e54:	e000ed04 	.word	0xe000ed04

00003e58 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e5c:	b086      	sub	sp, #24
    3e5e:	4606      	mov	r6, r0
    3e60:	af00      	add	r7, sp, #0
    3e62:	460d      	mov	r5, r1
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    3e64:	4b44      	ldr	r3, [pc, #272]	; (3f78 <mem_manage_fault.constprop.0+0x120>)
    3e66:	617b      	str	r3, [r7, #20]
    3e68:	2402      	movs	r4, #2
    3e6a:	4844      	ldr	r0, [pc, #272]	; (3f7c <mem_manage_fault.constprop.0+0x124>)
    3e6c:	613c      	str	r4, [r7, #16]
    3e6e:	f107 0210 	add.w	r2, r7, #16
    3e72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e76:	f009 fab0 	bl	d3da <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3e7a:	4b41      	ldr	r3, [pc, #260]	; (3f80 <mem_manage_fault.constprop.0+0x128>)
    3e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e7e:	06db      	lsls	r3, r3, #27
    3e80:	d578      	bpl.n	3f74 <mem_manage_fault.constprop.0+0x11c>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
    3e82:	4b40      	ldr	r3, [pc, #256]	; (3f84 <mem_manage_fault.constprop.0+0x12c>)
    3e84:	483d      	ldr	r0, [pc, #244]	; (3f7c <mem_manage_fault.constprop.0+0x124>)
    3e86:	e9c7 4304 	strd	r4, r3, [r7, #16]
    3e8a:	f107 0210 	add.w	r2, r7, #16
    3e8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e92:	f009 faa2 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
    3e96:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3e98:	4b39      	ldr	r3, [pc, #228]	; (3f80 <mem_manage_fault.constprop.0+0x128>)
    3e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e9c:	071c      	lsls	r4, r3, #28
    3e9e:	d50b      	bpl.n	3eb8 <mem_manage_fault.constprop.0+0x60>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    3ea0:	4b39      	ldr	r3, [pc, #228]	; (3f88 <mem_manage_fault.constprop.0+0x130>)
    3ea2:	617b      	str	r3, [r7, #20]
    3ea4:	2302      	movs	r3, #2
    3ea6:	4835      	ldr	r0, [pc, #212]	; (3f7c <mem_manage_fault.constprop.0+0x124>)
    3ea8:	613b      	str	r3, [r7, #16]
    3eaa:	f107 0210 	add.w	r2, r7, #16
    3eae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3eb2:	f009 fa92 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3eb6:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3eb8:	4c31      	ldr	r4, [pc, #196]	; (3f80 <mem_manage_fault.constprop.0+0x128>)
    3eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ebc:	0799      	lsls	r1, r3, #30
    3ebe:	d523      	bpl.n	3f08 <mem_manage_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
    3ec0:	46e8      	mov	r8, sp
    3ec2:	4b32      	ldr	r3, [pc, #200]	; (3f8c <mem_manage_fault.constprop.0+0x134>)
    3ec4:	617b      	str	r3, [r7, #20]
    3ec6:	2302      	movs	r3, #2
    3ec8:	613b      	str	r3, [r7, #16]
    3eca:	f107 0210 	add.w	r2, r7, #16
    3ece:	482b      	ldr	r0, [pc, #172]	; (3f7c <mem_manage_fault.constprop.0+0x124>)
    3ed0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ed4:	f009 fa81 	bl	d3da <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    3ed8:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3eda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3edc:	0612      	lsls	r2, r2, #24
    3ede:	d512      	bpl.n	3f06 <mem_manage_fault.constprop.0+0xae>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3ee0:	b088      	sub	sp, #32
    3ee2:	466a      	mov	r2, sp
    3ee4:	492a      	ldr	r1, [pc, #168]	; (3f90 <mem_manage_fault.constprop.0+0x138>)
    3ee6:	4825      	ldr	r0, [pc, #148]	; (3f7c <mem_manage_fault.constprop.0+0x124>)
    3ee8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3eec:	2303      	movs	r3, #3
    3eee:	f842 3f10 	str.w	r3, [r2, #16]!
    3ef2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3ef6:	f009 fa70 	bl	d3da <z_log_msg_static_create.constprop.0>
    3efa:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    3efc:	b11e      	cbz	r6, 3f06 <mem_manage_fault.constprop.0+0xae>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3efe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3f04:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    3f06:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3f08:	4b1d      	ldr	r3, [pc, #116]	; (3f80 <mem_manage_fault.constprop.0+0x128>)
    3f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f0c:	07de      	lsls	r6, r3, #31
    3f0e:	d50b      	bpl.n	3f28 <mem_manage_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
    3f10:	4b20      	ldr	r3, [pc, #128]	; (3f94 <mem_manage_fault.constprop.0+0x13c>)
    3f12:	617b      	str	r3, [r7, #20]
    3f14:	2302      	movs	r3, #2
    3f16:	4819      	ldr	r0, [pc, #100]	; (3f7c <mem_manage_fault.constprop.0+0x124>)
    3f18:	613b      	str	r3, [r7, #16]
    3f1a:	f107 0210 	add.w	r2, r7, #16
    3f1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f22:	f009 fa5a 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    3f26:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3f28:	4b15      	ldr	r3, [pc, #84]	; (3f80 <mem_manage_fault.constprop.0+0x128>)
    3f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f2c:	069c      	lsls	r4, r3, #26
    3f2e:	d50b      	bpl.n	3f48 <mem_manage_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
    3f30:	4b19      	ldr	r3, [pc, #100]	; (3f98 <mem_manage_fault.constprop.0+0x140>)
    3f32:	617b      	str	r3, [r7, #20]
    3f34:	2302      	movs	r3, #2
    3f36:	4811      	ldr	r0, [pc, #68]	; (3f7c <mem_manage_fault.constprop.0+0x124>)
    3f38:	613b      	str	r3, [r7, #16]
    3f3a:	f107 0210 	add.w	r2, r7, #16
    3f3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f42:	f009 fa4a 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    3f46:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3f48:	4b0d      	ldr	r3, [pc, #52]	; (3f80 <mem_manage_fault.constprop.0+0x128>)
    3f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f4c:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3f4e:	bf58      	it	pl
    3f50:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f54:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3f56:	bf42      	ittt	mi
    3f58:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3f5a:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3f5e:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f62:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3f66:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    3f68:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    3f6a:	2300      	movs	r3, #0
    3f6c:	702b      	strb	r3, [r5, #0]
}
    3f6e:	46bd      	mov	sp, r7
    3f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    3f74:	2010      	movs	r0, #16
    3f76:	e78f      	b.n	3e98 <mem_manage_fault.constprop.0+0x40>
    3f78:	0000f7cd 	.word	0x0000f7cd
    3f7c:	0000eb44 	.word	0x0000eb44
    3f80:	e000ed00 	.word	0xe000ed00
    3f84:	0000f7e3 	.word	0x0000f7e3
    3f88:	0000f816 	.word	0x0000f816
    3f8c:	0000f829 	.word	0x0000f829
    3f90:	0000f841 	.word	0x0000f841
    3f94:	0000f857 	.word	0x0000f857
    3f98:	0000f876 	.word	0x0000f876

00003f9c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fa0:	b086      	sub	sp, #24
    3fa2:	4606      	mov	r6, r0
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3fa8:	4b47      	ldr	r3, [pc, #284]	; (40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>)
    3faa:	617b      	str	r3, [r7, #20]
    3fac:	2402      	movs	r4, #2
    3fae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3fb2:	4846      	ldr	r0, [pc, #280]	; (40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>)
    3fb4:	613c      	str	r4, [r7, #16]
    3fb6:	f107 0210 	add.w	r2, r7, #16
    3fba:	f009 fa0e 	bl	d3da <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3fbe:	4b44      	ldr	r3, [pc, #272]	; (40d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd0>)
    3fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fc2:	04d9      	lsls	r1, r3, #19
    3fc4:	d56d      	bpl.n	40a2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa2>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    3fc6:	4b43      	ldr	r3, [pc, #268]	; (40d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd4>)
    3fc8:	4840      	ldr	r0, [pc, #256]	; (40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>)
    3fca:	e9c7 4304 	strd	r4, r3, [r7, #16]
    3fce:	f107 0210 	add.w	r2, r7, #16
    3fd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3fd6:	f009 fa00 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    3fda:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3fdc:	4b3c      	ldr	r3, [pc, #240]	; (40d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd0>)
    3fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fe0:	051a      	lsls	r2, r3, #20
    3fe2:	d50b      	bpl.n	3ffc <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    3fe4:	4b3c      	ldr	r3, [pc, #240]	; (40d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd8>)
    3fe6:	617b      	str	r3, [r7, #20]
    3fe8:	2302      	movs	r3, #2
    3fea:	4838      	ldr	r0, [pc, #224]	; (40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>)
    3fec:	613b      	str	r3, [r7, #16]
    3fee:	f107 0210 	add.w	r2, r7, #16
    3ff2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ff6:	f009 f9f0 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3ffa:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3ffc:	4c34      	ldr	r4, [pc, #208]	; (40d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd0>)
    3ffe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4000:	059b      	lsls	r3, r3, #22
    4002:	d523      	bpl.n	404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    4004:	46e8      	mov	r8, sp
    4006:	4b35      	ldr	r3, [pc, #212]	; (40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>)
    4008:	617b      	str	r3, [r7, #20]
    400a:	2302      	movs	r3, #2
    400c:	482f      	ldr	r0, [pc, #188]	; (40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>)
    400e:	613b      	str	r3, [r7, #16]
    4010:	f107 0210 	add.w	r2, r7, #16
    4014:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4018:	f009 f9df 	bl	d3da <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    401c:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    401e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4020:	0410      	lsls	r0, r2, #16
    4022:	d512      	bpl.n	404a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4024:	b088      	sub	sp, #32
    4026:	466a      	mov	r2, sp
    4028:	492d      	ldr	r1, [pc, #180]	; (40e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe0>)
    402a:	4828      	ldr	r0, [pc, #160]	; (40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>)
    402c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4030:	2303      	movs	r3, #3
    4032:	f842 3f10 	str.w	r3, [r2, #16]!
    4036:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    403a:	f009 f9ce 	bl	d3da <z_log_msg_static_create.constprop.0>
    403e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    4040:	b11e      	cbz	r6, 404a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4042:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4044:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4048:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    404a:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    404c:	4b20      	ldr	r3, [pc, #128]	; (40d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd0>)
    404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4050:	0559      	lsls	r1, r3, #21
    4052:	d50b      	bpl.n	406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    4054:	4b23      	ldr	r3, [pc, #140]	; (40e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe4>)
    4056:	617b      	str	r3, [r7, #20]
    4058:	2302      	movs	r3, #2
    405a:	481c      	ldr	r0, [pc, #112]	; (40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>)
    405c:	613b      	str	r3, [r7, #16]
    405e:	f107 0210 	add.w	r2, r7, #16
    4062:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4066:	f009 f9b8 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    406a:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    406c:	4b18      	ldr	r3, [pc, #96]	; (40d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd0>)
    406e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4070:	05d2      	lsls	r2, r2, #23
    4072:	d518      	bpl.n	40a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa6>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    4074:	4b1c      	ldr	r3, [pc, #112]	; (40e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe8>)
    4076:	617b      	str	r3, [r7, #20]
    4078:	2302      	movs	r3, #2
    407a:	4814      	ldr	r0, [pc, #80]	; (40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>)
    407c:	613b      	str	r3, [r7, #16]
    407e:	f107 0210 	add.w	r2, r7, #16
    4082:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4086:	f009 f9a8 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    408a:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    408c:	4a10      	ldr	r2, [pc, #64]	; (40d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd0>)
    408e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4090:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4094:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    4096:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    4098:	2300      	movs	r3, #0
    409a:	702b      	strb	r3, [r5, #0]
}
    409c:	46bd      	mov	sp, r7
    409e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    40a2:	2016      	movs	r0, #22
    40a4:	e79a      	b.n	3fdc <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    40a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40a8:	049b      	lsls	r3, r3, #18
    40aa:	d5ef      	bpl.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    40ac:	4b0f      	ldr	r3, [pc, #60]	; (40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>)
    40ae:	617b      	str	r3, [r7, #20]
    40b0:	2302      	movs	r3, #2
    40b2:	4806      	ldr	r0, [pc, #24]	; (40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>)
    40b4:	613b      	str	r3, [r7, #16]
    40b6:	f107 0210 	add.w	r2, r7, #16
    40ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    40be:	f009 f98c 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    40c2:	201c      	movs	r0, #28
    40c4:	e7e2      	b.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    40c6:	bf00      	nop
    40c8:	0000f8a5 	.word	0x0000f8a5
    40cc:	0000eb44 	.word	0x0000eb44
    40d0:	e000ed00 	.word	0xe000ed00
    40d4:	0000f8bb 	.word	0x0000f8bb
    40d8:	0000f816 	.word	0x0000f816
    40dc:	0000f8cc 	.word	0x0000f8cc
    40e0:	0000f8e5 	.word	0x0000f8e5
    40e4:	0000f8fa 	.word	0x0000f8fa
    40e8:	0000f915 	.word	0x0000f915
    40ec:	0000f876 	.word	0x0000f876

000040f0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    40f0:	b510      	push	{r4, lr}
    40f2:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    40f4:	4b36      	ldr	r3, [pc, #216]	; (41d0 <usage_fault.constprop.0+0xe0>)
    40f6:	4837      	ldr	r0, [pc, #220]	; (41d4 <usage_fault.constprop.0+0xe4>)
    40f8:	9305      	str	r3, [sp, #20]
    40fa:	aa04      	add	r2, sp, #16
    40fc:	2402      	movs	r4, #2
    40fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4102:	9404      	str	r4, [sp, #16]
    4104:	f009 f969 	bl	d3da <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4108:	4b33      	ldr	r3, [pc, #204]	; (41d8 <usage_fault.constprop.0+0xe8>)
    410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    410c:	019a      	lsls	r2, r3, #6
    410e:	d55d      	bpl.n	41cc <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    4110:	4b32      	ldr	r3, [pc, #200]	; (41dc <usage_fault.constprop.0+0xec>)
    4112:	4830      	ldr	r0, [pc, #192]	; (41d4 <usage_fault.constprop.0+0xe4>)
    4114:	aa04      	add	r2, sp, #16
    4116:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    411a:	e9cd 4304 	strd	r4, r3, [sp, #16]
    411e:	f009 f95c 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    4122:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4124:	4b2c      	ldr	r3, [pc, #176]	; (41d8 <usage_fault.constprop.0+0xe8>)
    4126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4128:	01db      	lsls	r3, r3, #7
    412a:	d50a      	bpl.n	4142 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    412c:	4b2c      	ldr	r3, [pc, #176]	; (41e0 <usage_fault.constprop.0+0xf0>)
    412e:	4829      	ldr	r0, [pc, #164]	; (41d4 <usage_fault.constprop.0+0xe4>)
    4130:	9305      	str	r3, [sp, #20]
    4132:	aa04      	add	r2, sp, #16
    4134:	2302      	movs	r3, #2
    4136:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    413a:	9304      	str	r3, [sp, #16]
    413c:	f009 f94d 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    4140:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4142:	4b25      	ldr	r3, [pc, #148]	; (41d8 <usage_fault.constprop.0+0xe8>)
    4144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4146:	031c      	lsls	r4, r3, #12
    4148:	d50a      	bpl.n	4160 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    414a:	4b26      	ldr	r3, [pc, #152]	; (41e4 <usage_fault.constprop.0+0xf4>)
    414c:	4821      	ldr	r0, [pc, #132]	; (41d4 <usage_fault.constprop.0+0xe4>)
    414e:	9305      	str	r3, [sp, #20]
    4150:	aa04      	add	r2, sp, #16
    4152:	2302      	movs	r3, #2
    4154:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4158:	9304      	str	r3, [sp, #16]
    415a:	f009 f93e 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    415e:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4160:	4b1d      	ldr	r3, [pc, #116]	; (41d8 <usage_fault.constprop.0+0xe8>)
    4162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4164:	0359      	lsls	r1, r3, #13
    4166:	d50a      	bpl.n	417e <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4168:	4b1f      	ldr	r3, [pc, #124]	; (41e8 <usage_fault.constprop.0+0xf8>)
    416a:	481a      	ldr	r0, [pc, #104]	; (41d4 <usage_fault.constprop.0+0xe4>)
    416c:	9305      	str	r3, [sp, #20]
    416e:	aa04      	add	r2, sp, #16
    4170:	2302      	movs	r3, #2
    4172:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4176:	9304      	str	r3, [sp, #16]
    4178:	f009 f92f 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    417c:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    417e:	4b16      	ldr	r3, [pc, #88]	; (41d8 <usage_fault.constprop.0+0xe8>)
    4180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4182:	039a      	lsls	r2, r3, #14
    4184:	d50a      	bpl.n	419c <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4186:	4b19      	ldr	r3, [pc, #100]	; (41ec <usage_fault.constprop.0+0xfc>)
    4188:	4812      	ldr	r0, [pc, #72]	; (41d4 <usage_fault.constprop.0+0xe4>)
    418a:	9305      	str	r3, [sp, #20]
    418c:	aa04      	add	r2, sp, #16
    418e:	2302      	movs	r3, #2
    4190:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4194:	9304      	str	r3, [sp, #16]
    4196:	f009 f920 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    419a:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    419c:	4b0e      	ldr	r3, [pc, #56]	; (41d8 <usage_fault.constprop.0+0xe8>)
    419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41a0:	03db      	lsls	r3, r3, #15
    41a2:	d50a      	bpl.n	41ba <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    41a4:	4b12      	ldr	r3, [pc, #72]	; (41f0 <usage_fault.constprop.0+0x100>)
    41a6:	480b      	ldr	r0, [pc, #44]	; (41d4 <usage_fault.constprop.0+0xe4>)
    41a8:	9305      	str	r3, [sp, #20]
    41aa:	aa04      	add	r2, sp, #16
    41ac:	2302      	movs	r3, #2
    41ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    41b2:	9304      	str	r3, [sp, #16]
    41b4:	f009 f911 	bl	d3da <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    41b8:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    41ba:	4a07      	ldr	r2, [pc, #28]	; (41d8 <usage_fault.constprop.0+0xe8>)
    41bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    41be:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    41c2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    41c6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    41c8:	b006      	add	sp, #24
    41ca:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    41cc:	201d      	movs	r0, #29
    41ce:	e7a9      	b.n	4124 <usage_fault.constprop.0+0x34>
    41d0:	0000f92d 	.word	0x0000f92d
    41d4:	0000eb44 	.word	0x0000eb44
    41d8:	e000ed00 	.word	0xe000ed00
    41dc:	0000f945 	.word	0x0000f945
    41e0:	0000f958 	.word	0x0000f958
    41e4:	0000f972 	.word	0x0000f972
    41e8:	0000f990 	.word	0x0000f990
    41ec:	0000f9b5 	.word	0x0000f9b5
    41f0:	0000f9cf 	.word	0x0000f9cf

000041f4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    41f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    41f8:	4b76      	ldr	r3, [pc, #472]	; (43d4 <z_arm_fault+0x1e0>)
{
    41fa:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    41fc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    4200:	af00      	add	r7, sp, #0
    4202:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4204:	f3c8 0408 	ubfx	r4, r8, #0, #9
    4208:	2600      	movs	r6, #0
    420a:	f386 8811 	msr	BASEPRI, r6
    420e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4212:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4216:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    421a:	d10e      	bne.n	423a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    421c:	f002 030c 	and.w	r3, r2, #12
    4220:	2b08      	cmp	r3, #8
    4222:	d119      	bne.n	4258 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4224:	4b6c      	ldr	r3, [pc, #432]	; (43d8 <z_arm_fault+0x1e4>)
    4226:	61fb      	str	r3, [r7, #28]
    4228:	2302      	movs	r3, #2
    422a:	486c      	ldr	r0, [pc, #432]	; (43dc <z_arm_fault+0x1e8>)
    422c:	61bb      	str	r3, [r7, #24]
    422e:	f107 0218 	add.w	r2, r7, #24
    4232:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4236:	f009 f8d0 	bl	d3da <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    423a:	2600      	movs	r6, #0
		return NULL;
    423c:	4635      	mov	r5, r6
	*recoverable = false;
    423e:	2300      	movs	r3, #0
    4240:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    4242:	1ee3      	subs	r3, r4, #3
    4244:	2b09      	cmp	r3, #9
    4246:	f200 80a5 	bhi.w	4394 <z_arm_fault+0x1a0>
    424a:	e8df f003 	tbb	[pc, r3]
    424e:	980a      	.short	0x980a
    4250:	a3a3949b 	.word	0xa3a3949b
    4254:	9ea3a3a3 	.word	0x9ea3a3a3
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4258:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    425a:	bf4c      	ite	mi
    425c:	460d      	movmi	r5, r1
			*nested_exc = true;
    425e:	2601      	movpl	r6, #1
    4260:	e7ed      	b.n	423e <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    4262:	46e9      	mov	r9, sp
    4264:	4b5e      	ldr	r3, [pc, #376]	; (43e0 <z_arm_fault+0x1ec>)
    4266:	61fb      	str	r3, [r7, #28]
    4268:	f04f 0802 	mov.w	r8, #2
    426c:	f107 0218 	add.w	r2, r7, #24
    4270:	485a      	ldr	r0, [pc, #360]	; (43dc <z_arm_fault+0x1e8>)
    4272:	f8c7 8018 	str.w	r8, [r7, #24]
    4276:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    427a:	f009 f8ae 	bl	d3da <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    427e:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4280:	4c54      	ldr	r4, [pc, #336]	; (43d4 <z_arm_fault+0x1e0>)
	*recoverable = false;
    4282:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4286:	079a      	lsls	r2, r3, #30
    4288:	d50b      	bpl.n	42a2 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    428a:	4b56      	ldr	r3, [pc, #344]	; (43e4 <z_arm_fault+0x1f0>)
		PR_EXC("  Debug event");
    428c:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    4290:	4852      	ldr	r0, [pc, #328]	; (43dc <z_arm_fault+0x1e8>)
    4292:	f107 0218 	add.w	r2, r7, #24
    4296:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    429a:	f009 f89e 	bl	d3da <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    429e:	2400      	movs	r4, #0
    42a0:	e040      	b.n	4324 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    42a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    42a4:	2b00      	cmp	r3, #0
    42a6:	da01      	bge.n	42ac <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    42a8:	4b4f      	ldr	r3, [pc, #316]	; (43e8 <z_arm_fault+0x1f4>)
    42aa:	e7ef      	b.n	428c <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    42ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    42ae:	005b      	lsls	r3, r3, #1
    42b0:	d5f5      	bpl.n	429e <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    42b2:	4b4e      	ldr	r3, [pc, #312]	; (43ec <z_arm_fault+0x1f8>)
    42b4:	4849      	ldr	r0, [pc, #292]	; (43dc <z_arm_fault+0x1e8>)
    42b6:	e9c7 8306 	strd	r8, r3, [r7, #24]
    42ba:	f107 0218 	add.w	r2, r7, #24
    42be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    42c2:	f009 f88a 	bl	d3da <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    42c6:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    42c8:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    42ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    42ce:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    42d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    42d4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    42d8:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    42da:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    42de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    42e2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    42e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    42e8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    42ec:	f64d 7302 	movw	r3, #57090	; 0xdf02
    42f0:	429a      	cmp	r2, r3
    42f2:	d007      	beq.n	4304 <z_arm_fault+0x110>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    42f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    42f6:	b2db      	uxtb	r3, r3
    42f8:	b383      	cbz	r3, 435c <z_arm_fault+0x168>
			reason = mem_manage_fault(esf, 1, recoverable);
    42fa:	1df9      	adds	r1, r7, #7
    42fc:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    42fe:	f7ff fdab 	bl	3e58 <mem_manage_fault.constprop.0>
    4302:	e03a      	b.n	437a <z_arm_fault+0x186>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4304:	b088      	sub	sp, #32
    4306:	682b      	ldr	r3, [r5, #0]
    4308:	466a      	mov	r2, sp
    430a:	4939      	ldr	r1, [pc, #228]	; (43f0 <z_arm_fault+0x1fc>)
    430c:	4833      	ldr	r0, [pc, #204]	; (43dc <z_arm_fault+0x1e8>)
    430e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4312:	2303      	movs	r3, #3
    4314:	f842 3f10 	str.w	r3, [r2, #16]!
    4318:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    431c:	f009 f85d 	bl	d3da <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    4320:	682c      	ldr	r4, [r5, #0]
    4322:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4324:	79fb      	ldrb	r3, [r7, #7]
    4326:	b9ab      	cbnz	r3, 4354 <z_arm_fault+0x160>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4328:	2220      	movs	r2, #32
    432a:	4629      	mov	r1, r5
    432c:	f107 0008 	add.w	r0, r7, #8
    4330:	f009 f866 	bl	d400 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4336:	2e00      	cmp	r6, #0
    4338:	d047      	beq.n	43ca <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    433a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    433e:	b922      	cbnz	r2, 434a <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4340:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4344:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4348:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    434a:	f107 0108 	add.w	r1, r7, #8
    434e:	4620      	mov	r0, r4
    4350:	f7ff fc0a 	bl	3b68 <z_arm_fatal_error>
}
    4354:	372c      	adds	r7, #44	; 0x2c
    4356:	46bd      	mov	sp, r7
    4358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    435c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    435e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    4362:	d004      	beq.n	436e <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    4364:	1df9      	adds	r1, r7, #7
    4366:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4368:	f7ff fe18 	bl	3f9c <bus_fault.constprop.0>
    436c:	e005      	b.n	437a <z_arm_fault+0x186>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    436e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    4374:	d393      	bcc.n	429e <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    4376:	f7ff febb 	bl	40f0 <usage_fault.constprop.0>
    437a:	4604      	mov	r4, r0
    437c:	e7d2      	b.n	4324 <z_arm_fault+0x130>
		reason = mem_manage_fault(esf, 0, recoverable);
    437e:	1df9      	adds	r1, r7, #7
    4380:	2000      	movs	r0, #0
    4382:	e7bc      	b.n	42fe <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    4384:	1df9      	adds	r1, r7, #7
    4386:	2000      	movs	r0, #0
    4388:	e7ee      	b.n	4368 <z_arm_fault+0x174>
	PR_FAULT_INFO(
    438a:	4b1a      	ldr	r3, [pc, #104]	; (43f4 <z_arm_fault+0x200>)
    438c:	61fb      	str	r3, [r7, #28]
    438e:	2302      	movs	r3, #2
    4390:	61bb      	str	r3, [r7, #24]
    4392:	e77d      	b.n	4290 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    4394:	4a18      	ldr	r2, [pc, #96]	; (43f8 <z_arm_fault+0x204>)
    4396:	4b19      	ldr	r3, [pc, #100]	; (43fc <z_arm_fault+0x208>)
    4398:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    439c:	46e8      	mov	r8, sp
    439e:	b08a      	sub	sp, #40	; 0x28
    43a0:	bf18      	it	ne
    43a2:	4613      	movne	r3, r2
    43a4:	466a      	mov	r2, sp
    43a6:	4916      	ldr	r1, [pc, #88]	; (4400 <z_arm_fault+0x20c>)
    43a8:	480c      	ldr	r0, [pc, #48]	; (43dc <z_arm_fault+0x1e8>)
    43aa:	e9c2 1305 	strd	r1, r3, [r2, #20]
    43ae:	f44f 7300 	mov.w	r3, #512	; 0x200
    43b2:	8413      	strh	r3, [r2, #32]
    43b4:	3c10      	subs	r4, #16
    43b6:	4b13      	ldr	r3, [pc, #76]	; (4404 <z_arm_fault+0x210>)
    43b8:	61d4      	str	r4, [r2, #28]
    43ba:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    43be:	f842 3f10 	str.w	r3, [r2, #16]!
    43c2:	f009 f80a 	bl	d3da <z_log_msg_static_create.constprop.0>
    43c6:	46c5      	mov	sp, r8
}
    43c8:	e769      	b.n	429e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    43ca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    43ce:	f023 0301 	bic.w	r3, r3, #1
    43d2:	e7b9      	b.n	4348 <z_arm_fault+0x154>
    43d4:	e000ed00 	.word	0xe000ed00
    43d8:	0000fa28 	.word	0x0000fa28
    43dc:	0000eb44 	.word	0x0000eb44
    43e0:	0000fa53 	.word	0x0000fa53
    43e4:	0000fa6a 	.word	0x0000fa6a
    43e8:	0000fa8b 	.word	0x0000fa8b
    43ec:	0000fa99 	.word	0x0000fa99
    43f0:	0000fab8 	.word	0x0000fab8
    43f4:	0000fad4 	.word	0x0000fad4
    43f8:	0000fa0f 	.word	0x0000fa0f
    43fc:	0000f9fa 	.word	0x0000f9fa
    4400:	0000faf8 	.word	0x0000faf8
    4404:	01000004 	.word	0x01000004

00004408 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4408:	4a02      	ldr	r2, [pc, #8]	; (4414 <z_arm_fault_init+0xc>)
    440a:	6953      	ldr	r3, [r2, #20]
    440c:	f043 0310 	orr.w	r3, r3, #16
    4410:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    4412:	4770      	bx	lr
    4414:	e000ed00 	.word	0xe000ed00

00004418 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4418:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    441c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4420:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4422:	4672      	mov	r2, lr
	bl z_arm_fault
    4424:	f7ff fee6 	bl	41f4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4428:	bd01      	pop	{r0, pc}
    442a:	bf00      	nop

0000442c <z_arm_interrupt_init>:
    442c:	4804      	ldr	r0, [pc, #16]	; (4440 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    442e:	2300      	movs	r3, #0
    4430:	2120      	movs	r1, #32
    4432:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4434:	3301      	adds	r3, #1
    4436:	2b30      	cmp	r3, #48	; 0x30
    4438:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    443c:	d1f9      	bne.n	4432 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    443e:	4770      	bx	lr
    4440:	e000e100 	.word	0xe000e100

00004444 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4444:	2000      	movs	r0, #0
    msr CONTROL, r0
    4446:	f380 8814 	msr	CONTROL, r0
    isb
    444a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    444e:	f7fd f921 	bl	1694 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4452:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4454:	490d      	ldr	r1, [pc, #52]	; (448c <__start+0x48>)
    str r0, [r1]
    4456:	6008      	str	r0, [r1, #0]
    dsb
    4458:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    445c:	480c      	ldr	r0, [pc, #48]	; (4490 <__start+0x4c>)
    msr msp, r0
    445e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4462:	f000 f82b 	bl	44bc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4466:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4468:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    446c:	4809      	ldr	r0, [pc, #36]	; (4494 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    446e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    4472:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4474:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4478:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    447c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    447e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4480:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4484:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4488:	f7ff fc20 	bl	3ccc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    448c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4490:	20003d70 	.word	0x20003d70
    ldr r0, =z_interrupt_stacks
    4494:	20003030 	.word	0x20003030

00004498 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4498:	4907      	ldr	r1, [pc, #28]	; (44b8 <z_arm_clear_arm_mpu_config+0x20>)
    449a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    449e:	2300      	movs	r3, #0
	int num_regions =
    44a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    44a4:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    44a6:	4293      	cmp	r3, r2
    44a8:	db00      	blt.n	44ac <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    44aa:	4770      	bx	lr
  MPU->RNR = rnr;
    44ac:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    44b0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    44b4:	3301      	adds	r3, #1
    44b6:	e7f6      	b.n	44a6 <z_arm_clear_arm_mpu_config+0xe>
    44b8:	e000ed00 	.word	0xe000ed00

000044bc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    44bc:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    44be:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    44c0:	2300      	movs	r3, #0
    44c2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    44c6:	f7ff ffe7 	bl	4498 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    44ca:	4b14      	ldr	r3, [pc, #80]	; (451c <z_arm_init_arch_hw_at_boot+0x60>)
    44cc:	f04f 32ff 	mov.w	r2, #4294967295
    44d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    44d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    44d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    44dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    44e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    44e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    44e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    44ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    44f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    44f4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    44f8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    44fc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    4500:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    4504:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    4508:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    450c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    4510:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4512:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4516:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    451a:	bd08      	pop	{r3, pc}
    451c:	e000e100 	.word	0xe000e100

00004520 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4520:	4b08      	ldr	r3, [pc, #32]	; (4544 <z_impl_k_thread_abort+0x24>)
    4522:	689b      	ldr	r3, [r3, #8]
    4524:	4283      	cmp	r3, r0
    4526:	d10b      	bne.n	4540 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4528:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    452c:	b143      	cbz	r3, 4540 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    452e:	4b06      	ldr	r3, [pc, #24]	; (4548 <z_impl_k_thread_abort+0x28>)
    4530:	685a      	ldr	r2, [r3, #4]
    4532:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4536:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    453a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    453e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    4540:	f007 b8f8 	b.w	b734 <z_thread_abort>
    4544:	200021f8 	.word	0x200021f8
    4548:	e000ed00 	.word	0xe000ed00

0000454c <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    454c:	4b02      	ldr	r3, [pc, #8]	; (4558 <z_arm_configure_static_mpu_regions+0xc>)
    454e:	4a03      	ldr	r2, [pc, #12]	; (455c <z_arm_configure_static_mpu_regions+0x10>)
    4550:	4803      	ldr	r0, [pc, #12]	; (4560 <z_arm_configure_static_mpu_regions+0x14>)
    4552:	2101      	movs	r1, #1
    4554:	f000 b882 	b.w	465c <arm_core_mpu_configure_static_mpu_regions>
    4558:	20040000 	.word	0x20040000
    455c:	20000000 	.word	0x20000000
    4560:	0000ecc0 	.word	0x0000ecc0

00004564 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4568:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 4620 <mpu_configure_regions+0xbc>
    456c:	469c      	mov	ip, r3
    456e:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    4570:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    4572:	2300      	movs	r3, #0
    4574:	428b      	cmp	r3, r1
    4576:	da1a      	bge.n	45ae <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    4578:	6844      	ldr	r4, [r0, #4]
    457a:	2c00      	cmp	r4, #0
    457c:	d04d      	beq.n	461a <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    457e:	f1bc 0f00 	cmp.w	ip, #0
    4582:	d01d      	beq.n	45c0 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4584:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4586:	4234      	tst	r4, r6
    4588:	d015      	beq.n	45b6 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    458a:	466c      	mov	r4, sp
    458c:	b088      	sub	sp, #32
    458e:	466a      	mov	r2, sp
    4590:	4924      	ldr	r1, [pc, #144]	; (4624 <mpu_configure_regions+0xc0>)
    4592:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4596:	2303      	movs	r3, #3
    4598:	f842 3f10 	str.w	r3, [r2, #16]!
    459c:	4822      	ldr	r0, [pc, #136]	; (4628 <mpu_configure_regions+0xc4>)
    459e:	2300      	movs	r3, #0
    45a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    45a4:	f7fd fb0e 	bl	1bc4 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    45a8:	f06f 0515 	mvn.w	r5, #21
    45ac:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    45ae:	4628      	mov	r0, r5
    45b0:	46bd      	mov	sp, r7
    45b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    45b6:	2c1f      	cmp	r4, #31
    45b8:	d9e7      	bls.n	458a <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    45ba:	6802      	ldr	r2, [r0, #0]
		&&
    45bc:	4216      	tst	r6, r2
    45be:	d1e4      	bne.n	458a <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    45c0:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    45c2:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    45c4:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    45c6:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    45ca:	d914      	bls.n	45f6 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    45cc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    45d0:	d813      	bhi.n	45fa <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    45d2:	3c01      	subs	r4, #1
    45d4:	fab4 f484 	clz	r4, r4
    45d8:	f1c4 041f 	rsb	r4, r4, #31
    45dc:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    45de:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    45e2:	ea46 0604 	orr.w	r6, r6, r4
    45e6:	d90a      	bls.n	45fe <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    45e8:	466c      	mov	r4, sp
    45ea:	b088      	sub	sp, #32
    45ec:	466a      	mov	r2, sp
    45ee:	4b0f      	ldr	r3, [pc, #60]	; (462c <mpu_configure_regions+0xc8>)
    45f0:	e9c2 3505 	strd	r3, r5, [r2, #20]
    45f4:	e7cf      	b.n	4596 <mpu_configure_regions+0x32>
		return REGION_32B;
    45f6:	2408      	movs	r4, #8
    45f8:	e7f1      	b.n	45de <mpu_configure_regions+0x7a>
		return REGION_4G;
    45fa:	243e      	movs	r4, #62	; 0x3e
    45fc:	e7ef      	b.n	45de <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    45fe:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    4602:	432a      	orrs	r2, r5
    4604:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4608:	f046 0601 	orr.w	r6, r6, #1
    460c:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4610:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    4614:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4616:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    461a:	3301      	adds	r3, #1
    461c:	300c      	adds	r0, #12
    461e:	e7a9      	b.n	4574 <mpu_configure_regions+0x10>
    4620:	e000ed00 	.word	0xe000ed00
    4624:	0000fb0f 	.word	0x0000fb0f
    4628:	0000eb3c 	.word	0x0000eb3c
    462c:	0000fb32 	.word	0x0000fb32

00004630 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4630:	4b04      	ldr	r3, [pc, #16]	; (4644 <arm_core_mpu_enable+0x14>)
    4632:	2205      	movs	r2, #5
    4634:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4638:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    463c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4640:	4770      	bx	lr
    4642:	bf00      	nop
    4644:	e000ed00 	.word	0xe000ed00

00004648 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4648:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    464c:	4b02      	ldr	r3, [pc, #8]	; (4658 <arm_core_mpu_disable+0x10>)
    464e:	2200      	movs	r2, #0
    4650:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4654:	4770      	bx	lr
    4656:	bf00      	nop
    4658:	e000ed00 	.word	0xe000ed00

0000465c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    465c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    465e:	4c03      	ldr	r4, [pc, #12]	; (466c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4660:	2301      	movs	r3, #1
    4662:	7822      	ldrb	r2, [r4, #0]
    4664:	f7ff ff7e 	bl	4564 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4668:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    466a:	bd10      	pop	{r4, pc}
    466c:	20002422 	.word	0x20002422

00004670 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4670:	4914      	ldr	r1, [pc, #80]	; (46c4 <z_arm_mpu_init+0x54>)
    4672:	6808      	ldr	r0, [r1, #0]
    4674:	2808      	cmp	r0, #8
{
    4676:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4678:	d821      	bhi.n	46be <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    467a:	f7ff ffe5 	bl	4648 <arm_core_mpu_disable>
    467e:	4c12      	ldr	r4, [pc, #72]	; (46c8 <z_arm_mpu_init+0x58>)
    4680:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4682:	2200      	movs	r2, #0
    4684:	4290      	cmp	r0, r2
    4686:	f101 010c 	add.w	r1, r1, #12
    468a:	d105      	bne.n	4698 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    468c:	4b0f      	ldr	r3, [pc, #60]	; (46cc <z_arm_mpu_init+0x5c>)
    468e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4690:	f7ff ffce 	bl	4630 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4694:	2000      	movs	r0, #0
}
    4696:	bd10      	pop	{r4, pc}
    4698:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    469c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    46a0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    46a4:	4313      	orrs	r3, r2
    46a6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    46aa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    46ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
    46b2:	f043 0301 	orr.w	r3, r3, #1
    46b6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    46ba:	3201      	adds	r2, #1
    46bc:	e7e2      	b.n	4684 <z_arm_mpu_init+0x14>
		return -1;
    46be:	f04f 30ff 	mov.w	r0, #4294967295
    46c2:	e7e8      	b.n	4696 <z_arm_mpu_init+0x26>
    46c4:	0000eccc 	.word	0x0000eccc
    46c8:	e000ed00 	.word	0xe000ed00
    46cc:	20002422 	.word	0x20002422

000046d0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    46d0:	4b01      	ldr	r3, [pc, #4]	; (46d8 <__stdout_hook_install+0x8>)
    46d2:	6018      	str	r0, [r3, #0]
}
    46d4:	4770      	bx	lr
    46d6:	bf00      	nop
    46d8:	20000134 	.word	0x20000134

000046dc <nordicsemi_nrf52_init>:
	__asm__ volatile(
    46dc:	f04f 0320 	mov.w	r3, #32
    46e0:	f3ef 8211 	mrs	r2, BASEPRI
    46e4:	f383 8812 	msr	BASEPRI_MAX, r3
    46e8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    46ec:	4906      	ldr	r1, [pc, #24]	; (4708 <nordicsemi_nrf52_init+0x2c>)
    46ee:	2301      	movs	r3, #1
    46f0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    46f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    46f8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    46fc:	f382 8811 	msr	BASEPRI, r2
    4700:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4704:	2000      	movs	r0, #0
    4706:	4770      	bx	lr
    4708:	4001e000 	.word	0x4001e000

0000470c <sys_arch_reboot>:
    *p_gpregret = val;
    470c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4710:	b2c0      	uxtb	r0, r0
    4712:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    4716:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    471a:	4905      	ldr	r1, [pc, #20]	; (4730 <sys_arch_reboot+0x24>)
    471c:	4b05      	ldr	r3, [pc, #20]	; (4734 <sys_arch_reboot+0x28>)
    471e:	68ca      	ldr	r2, [r1, #12]
    4720:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4724:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4726:	60cb      	str	r3, [r1, #12]
    4728:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    472c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    472e:	e7fd      	b.n	472c <sys_arch_reboot+0x20>
    4730:	e000ed00 	.word	0xe000ed00
    4734:	05fa0004 	.word	0x05fa0004

00004738 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4738:	b120      	cbz	r0, 4744 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    473a:	4b03      	ldr	r3, [pc, #12]	; (4748 <arch_busy_wait+0x10>)
    473c:	0180      	lsls	r0, r0, #6
    473e:	f043 0301 	orr.w	r3, r3, #1
    4742:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4744:	4770      	bx	lr
    4746:	bf00      	nop
    4748:	0000ebc0 	.word	0x0000ebc0

0000474c <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    474c:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    474e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4752:	d512      	bpl.n	477a <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4754:	2b08      	cmp	r3, #8
    4756:	d105      	bne.n	4764 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4758:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    475a:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    475e:	d506      	bpl.n	476e <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    4760:	480e      	ldr	r0, [pc, #56]	; (479c <endpoint_ctx+0x50>)
    4762:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    4764:	f010 0f78 	tst.w	r0, #120	; 0x78
    4768:	d112      	bne.n	4790 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    476a:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    476e:	204c      	movs	r0, #76	; 0x4c
    4770:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4774:	4b0a      	ldr	r3, [pc, #40]	; (47a0 <endpoint_ctx+0x54>)
    4776:	4418      	add	r0, r3
    4778:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    477a:	2b08      	cmp	r3, #8
    477c:	d105      	bne.n	478a <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    477e:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4780:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4784:	d506      	bpl.n	4794 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    4786:	4807      	ldr	r0, [pc, #28]	; (47a4 <endpoint_ctx+0x58>)
    4788:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    478a:	f010 0f78 	tst.w	r0, #120	; 0x78
    478e:	d0f6      	beq.n	477e <endpoint_ctx+0x32>
		return NULL;
    4790:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    4792:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    4794:	4804      	ldr	r0, [pc, #16]	; (47a8 <endpoint_ctx+0x5c>)
    4796:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    479a:	4770      	bx	lr
    479c:	20001594 	.word	0x20001594
    47a0:	20001448 	.word	0x20001448
    47a4:	200016b4 	.word	0x200016b4
    47a8:	200015b4 	.word	0x200015b4

000047ac <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    47ac:	4901      	ldr	r1, [pc, #4]	; (47b4 <usbd_work_schedule+0x8>)
    47ae:	4802      	ldr	r0, [pc, #8]	; (47b8 <usbd_work_schedule+0xc>)
    47b0:	f009 bca4 	b.w	e0fc <k_work_submit_to_queue>
    47b4:	20001470 	.word	0x20001470
    47b8:	20000a60 	.word	0x20000a60

000047bc <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    47bc:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    47be:	4801      	ldr	r0, [pc, #4]	; (47c4 <usbd_evt_put+0x8>)
    47c0:	f009 bc33 	b.w	e02a <k_queue_append>
    47c4:	200003f8 	.word	0x200003f8

000047c8 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    47c8:	4802      	ldr	r0, [pc, #8]	; (47d4 <usbd_evt_get+0xc>)
    47ca:	2200      	movs	r2, #0
    47cc:	2300      	movs	r3, #0
    47ce:	f006 bab3 	b.w	ad38 <z_impl_k_queue_get>
    47d2:	bf00      	nop
    47d4:	200003f8 	.word	0x200003f8

000047d8 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    47d8:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    47da:	4c05      	ldr	r4, [pc, #20]	; (47f0 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    47dc:	f7ff fff4 	bl	47c8 <usbd_evt_get>
		if (ev) {
    47e0:	b120      	cbz	r0, 47ec <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    47e2:	1d01      	adds	r1, r0, #4
    47e4:	4620      	mov	r0, r4
    47e6:	f009 fb62 	bl	deae <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    47ea:	e7f7      	b.n	47dc <usbd_evt_flush+0x4>
}
    47ec:	bd10      	pop	{r4, pc}
    47ee:	bf00      	nop
    47f0:	20000360 	.word	0x20000360

000047f4 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    47f4:	b510      	push	{r4, lr}
    47f6:	b088      	sub	sp, #32
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    47f8:	4818      	ldr	r0, [pc, #96]	; (485c <usbd_evt_alloc+0x68>)
    47fa:	2200      	movs	r2, #0
    47fc:	2300      	movs	r3, #0
    47fe:	a901      	add	r1, sp, #4
    4800:	f006 f8e2 	bl	a9c8 <k_mem_slab_alloc>
    4804:	b330      	cbz	r0, 4854 <usbd_evt_alloc+0x60>
			     (void **)&block.data, K_NO_WAIT)) {
		LOG_ERR("USBD event allocation failed!");
    4806:	4b16      	ldr	r3, [pc, #88]	; (4860 <usbd_evt_alloc+0x6c>)
    4808:	4816      	ldr	r0, [pc, #88]	; (4864 <usbd_evt_alloc+0x70>)
    480a:	9307      	str	r3, [sp, #28]
    480c:	aa06      	add	r2, sp, #24
    480e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4812:	2402      	movs	r4, #2
    4814:	9406      	str	r4, [sp, #24]
    4816:	f008 fe2f 	bl	d478 <z_log_msg_static_create.constprop.0>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    481a:	f7ff ffdd 	bl	47d8 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    481e:	480f      	ldr	r0, [pc, #60]	; (485c <usbd_evt_alloc+0x68>)
    4820:	2200      	movs	r2, #0
    4822:	2300      	movs	r3, #0
    4824:	a901      	add	r1, sp, #4
    4826:	f006 f8cf 	bl	a9c8 <k_mem_slab_alloc>
    482a:	b150      	cbz	r0, 4842 <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    482c:	4b0e      	ldr	r3, [pc, #56]	; (4868 <usbd_evt_alloc+0x74>)
    482e:	480d      	ldr	r0, [pc, #52]	; (4864 <usbd_evt_alloc+0x70>)
    4830:	aa06      	add	r2, sp, #24
    4832:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4836:	e9cd 4306 	strd	r4, r3, [sp, #24]
    483a:	f008 fe1d 	bl	d478 <z_log_msg_static_create.constprop.0>
			__ASSERT_NO_MSG(0);
			return NULL;
    483e:	2000      	movs	r0, #0
    4840:	e00a      	b.n	4858 <usbd_evt_alloc+0x64>
		}

		ev = (struct usbd_event *)block.data;
    4842:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    4844:	2304      	movs	r3, #4
		ev->block = block;
    4846:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4848:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    484a:	f7ff ffb7 	bl	47bc <usbd_evt_put>
		usbd_work_schedule();
    484e:	f7ff ffad 	bl	47ac <usbd_work_schedule>

		return NULL;
    4852:	e7f4      	b.n	483e <usbd_evt_alloc+0x4a>
	}

	ev = (struct usbd_event *)block.data;
    4854:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    4856:	6040      	str	r0, [r0, #4]

	return ev;
}
    4858:	b008      	add	sp, #32
    485a:	bd10      	pop	{r4, pc}
    485c:	20000360 	.word	0x20000360
    4860:	0000fb6b 	.word	0x0000fb6b
    4864:	0000eb8c 	.word	0x0000eb8c
    4868:	0000fb89 	.word	0x0000fb89

0000486c <usb_dc_power_event_handler>:

static K_TIMER_DEFINE(delay_timer, attached_evt_delay_handler, NULL);
#endif

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
    486c:	b598      	push	{r3, r4, r7, lr}
    486e:	2802      	cmp	r0, #2
    4870:	af00      	add	r7, sp, #0
    4872:	d811      	bhi.n	4898 <usb_dc_power_event_handler+0x2c>
    4874:	4b10      	ldr	r3, [pc, #64]	; (48b8 <usb_dc_power_event_handler+0x4c>)
    4876:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    4878:	f7ff ffbc 	bl	47f4 <usbd_evt_alloc>
	if (!ev) {
    487c:	b150      	cbz	r0, 4894 <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    487e:	2200      	movs	r2, #0
    4880:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    4882:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    4884:	f7ff ff9a 	bl	47bc <usbd_evt_put>
	if (usbd_ctx.attached) {
    4888:	4b0c      	ldr	r3, [pc, #48]	; (48bc <usb_dc_power_event_handler+0x50>)
    488a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    488e:	b10b      	cbz	r3, 4894 <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    4890:	f7ff ff8c 	bl	47ac <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    4894:	46bd      	mov	sp, r7
    4896:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    4898:	466c      	mov	r4, sp
    489a:	b088      	sub	sp, #32
    489c:	466a      	mov	r2, sp
    489e:	4b08      	ldr	r3, [pc, #32]	; (48c0 <usb_dc_power_event_handler+0x54>)
	switch (event) {
    48a0:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    48a4:	2303      	movs	r3, #3
    48a6:	f842 3f10 	str.w	r3, [r2, #16]!
    48aa:	4806      	ldr	r0, [pc, #24]	; (48c4 <usb_dc_power_event_handler+0x58>)
    48ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    48b0:	f008 fde2 	bl	d478 <z_log_msg_static_create.constprop.0>
    48b4:	46a5      	mov	sp, r4
    48b6:	e7ed      	b.n	4894 <usb_dc_power_event_handler+0x28>
    48b8:	0000fd7b 	.word	0x0000fd7b
    48bc:	20001448 	.word	0x20001448
    48c0:	0000fba5 	.word	0x0000fba5
    48c4:	0000eb8c 	.word	0x0000eb8c

000048c8 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    48c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    48cc:	f890 8002 	ldrb.w	r8, [r0, #2]
{
    48d0:	4606      	mov	r6, r0
    48d2:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    48d4:	4640      	mov	r0, r8
    48d6:	f7ff ff39 	bl	474c <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    48da:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    48de:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    48e0:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    48e2:	d025      	beq.n	4930 <usbd_event_transfer_data+0x68>
		switch (p_event->data.eptransfer.status) {
    48e4:	b19c      	cbz	r4, 490e <usbd_event_transfer_data+0x46>
    48e6:	2c03      	cmp	r4, #3
    48e8:	d01f      	beq.n	492a <usbd_event_transfer_data+0x62>
			usbd_work_schedule();
		}
		break;

		default: {
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    48ea:	466d      	mov	r5, sp
    48ec:	b088      	sub	sp, #32
    48ee:	466a      	mov	r2, sp
    48f0:	4b2a      	ldr	r3, [pc, #168]	; (499c <usbd_event_transfer_data+0xd4>)
    48f2:	f8c2 801c 	str.w	r8, [r2, #28]
    48f6:	e9c2 3405 	strd	r3, r4, [r2, #20]
    48fa:	2304      	movs	r3, #4
    48fc:	f842 3f10 	str.w	r3, [r2, #16]!
    4900:	4827      	ldr	r0, [pc, #156]	; (49a0 <usbd_event_transfer_data+0xd8>)
    4902:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4906:	f008 fdb7 	bl	d478 <z_log_msg_static_create.constprop.0>
    490a:	46ad      	mov	sp, r5
    490c:	e00d      	b.n	492a <usbd_event_transfer_data+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    490e:	f7ff ff71 	bl	47f4 <usbd_evt_alloc>
			if (!ev) {
    4912:	4603      	mov	r3, r0
    4914:	b148      	cbz	r0, 492a <usbd_event_transfer_data+0x62>
			ev->evt_type = USBD_EVT_EP;
    4916:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4918:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    491a:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    491c:	2203      	movs	r2, #3
    491e:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4920:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    4922:	f7ff ff4b 	bl	47bc <usbd_evt_put>
			usbd_work_schedule();
    4926:	f7ff ff41 	bl	47ac <usbd_work_schedule>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    492a:	46bd      	mov	sp, r7
    492c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (p_event->data.eptransfer.status) {
    4930:	b154      	cbz	r4, 4948 <usbd_event_transfer_data+0x80>
    4932:	2c01      	cmp	r4, #1
    4934:	d1d9      	bne.n	48ea <usbd_event_transfer_data+0x22>
			struct usbd_event *ev = usbd_evt_alloc();
    4936:	f7ff ff5d 	bl	47f4 <usbd_evt_alloc>
			if (!ev) {
    493a:	4603      	mov	r3, r0
    493c:	2800      	cmp	r0, #0
    493e:	d0f4      	beq.n	492a <usbd_event_transfer_data+0x62>
			ep_ctx->read_pending = true;
    4940:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    4942:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4944:	7304      	strb	r4, [r0, #12]
    4946:	e7eb      	b.n	4920 <usbd_event_transfer_data+0x58>
			struct usbd_event *ev = usbd_evt_alloc();
    4948:	f7ff ff54 	bl	47f4 <usbd_evt_alloc>
			if (!ev) {
    494c:	2800      	cmp	r0, #0
    494e:	d0ec      	beq.n	492a <usbd_event_transfer_data+0x62>
				p_event->data.eptransfer.ep);
    4950:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    4952:	4b14      	ldr	r3, [pc, #80]	; (49a4 <usbd_event_transfer_data+0xdc>)
    4954:	f012 0f80 	tst.w	r2, #128	; 0x80
    4958:	f002 0108 	and.w	r1, r2, #8
    495c:	d011      	beq.n	4982 <usbd_event_transfer_data+0xba>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    495e:	b141      	cbz	r1, 4972 <usbd_event_transfer_data+0xaa>
        {
            ret = p_reg->ISOIN.AMOUNT;
    4960:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    4964:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    4966:	2301      	movs	r3, #1
    4968:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    496a:	2302      	movs	r3, #2
    496c:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    496e:	6085      	str	r5, [r0, #8]
    4970:	e7d7      	b.n	4922 <usbd_event_transfer_data+0x5a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    4972:	f002 020f 	and.w	r2, r2, #15
    4976:	2114      	movs	r1, #20
    4978:	fb01 3302 	mla	r3, r1, r2, r3
    497c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4980:	e7f0      	b.n	4964 <usbd_event_transfer_data+0x9c>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    4982:	b111      	cbz	r1, 498a <usbd_event_transfer_data+0xc2>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    4984:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    4988:	e7ec      	b.n	4964 <usbd_event_transfer_data+0x9c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    498a:	f002 020f 	and.w	r2, r2, #15
    498e:	2114      	movs	r1, #20
    4990:	fb01 3302 	mla	r3, r1, r2, r3
    4994:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    4998:	e7e4      	b.n	4964 <usbd_event_transfer_data+0x9c>
    499a:	bf00      	nop
    499c:	0000fbc0 	.word	0x0000fbc0
    49a0:	0000eb8c 	.word	0x0000eb8c
    49a4:	40027000 	.word	0x40027000

000049a8 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    49a8:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    49aa:	4812      	ldr	r0, [pc, #72]	; (49f4 <usb_init+0x4c>)
    49ac:	f005 fa0e 	bl	9dcc <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    49b0:	4b11      	ldr	r3, [pc, #68]	; (49f8 <usb_init+0x50>)
    49b2:	4298      	cmp	r0, r3
    49b4:	d11a      	bne.n	49ec <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    49b6:	4811      	ldr	r0, [pc, #68]	; (49fc <usb_init+0x54>)
    49b8:	f004 fcf0 	bl	939c <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    49bc:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    49be:	4810      	ldr	r0, [pc, #64]	; (4a00 <usb_init+0x58>)
    49c0:	f004 fd32 	bl	9428 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    49c4:	490f      	ldr	r1, [pc, #60]	; (4a04 <usb_init+0x5c>)
    49c6:	4810      	ldr	r0, [pc, #64]	; (4a08 <usb_init+0x60>)
    49c8:	9400      	str	r4, [sp, #0]
    49ca:	f04f 33ff 	mov.w	r3, #4294967295
    49ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    49d2:	f006 fb51 	bl	b078 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    49d6:	490d      	ldr	r1, [pc, #52]	; (4a0c <usb_init+0x64>)
    49d8:	480b      	ldr	r0, [pc, #44]	; (4a08 <usb_init+0x60>)
    49da:	f009 fa97 	bl	df0c <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    49de:	480c      	ldr	r0, [pc, #48]	; (4a10 <usb_init+0x68>)
    49e0:	490c      	ldr	r1, [pc, #48]	; (4a14 <usb_init+0x6c>)
    49e2:	f009 fb6e 	bl	e0c2 <k_work_init>

	return 0;
    49e6:	4620      	mov	r0, r4
}
    49e8:	b002      	add	sp, #8
    49ea:	bd10      	pop	{r4, pc}
		return -EIO;
    49ec:	f06f 0004 	mvn.w	r0, #4
    49f0:	e7fa      	b.n	49e8 <usb_init+0x40>
    49f2:	bf00      	nop
    49f4:	00004a59 	.word	0x00004a59
    49f8:	0bad0000 	.word	0x0bad0000
    49fc:	0000fd7e 	.word	0x0000fd7e
    4a00:	0000ecec 	.word	0x0000ecec
    4a04:	20002c30 	.word	0x20002c30
    4a08:	20000a60 	.word	0x20000a60
    4a0c:	0000fbec 	.word	0x0000fbec
    4a10:	20001470 	.word	0x20001470
    4a14:	00004c31 	.word	0x00004c31

00004a18 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    4a18:	b510      	push	{r4, lr}
    4a1a:	490e      	ldr	r1, [pc, #56]	; (4a54 <hfxo_stop.constprop.0.isra.0+0x3c>)
    4a1c:	f3bf 8f5b 	dmb	ish
    4a20:	2300      	movs	r3, #0
    4a22:	e851 2f00 	ldrex	r2, [r1]
    4a26:	2a01      	cmp	r2, #1
    4a28:	d103      	bne.n	4a32 <hfxo_stop.constprop.0.isra.0+0x1a>
    4a2a:	e841 3000 	strex	r0, r3, [r1]
    4a2e:	2800      	cmp	r0, #0
    4a30:	d1f7      	bne.n	4a22 <hfxo_stop.constprop.0.isra.0+0xa>
    4a32:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    4a36:	d10c      	bne.n	4a52 <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4a38:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    4a3c:	3914      	subs	r1, #20
    4a3e:	4620      	mov	r0, r4
    4a40:	f007 ff09 	bl	c856 <onoff_cancel>

	if (rv == -EALREADY) {
    4a44:	3078      	adds	r0, #120	; 0x78
    4a46:	d104      	bne.n	4a52 <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    4a48:	4620      	mov	r0, r4
}
    4a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a4e:	f007 bedd 	b.w	c80c <onoff_release>
    4a52:	bd10      	pop	{r4, pc}
    4a54:	20001468 	.word	0x20001468

00004a58 <usbd_event_handler>:
{
    4a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a5c:	b088      	sub	sp, #32
    4a5e:	4606      	mov	r6, r0
    4a60:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    4a62:	2214      	movs	r2, #20
    4a64:	2100      	movs	r1, #0
    4a66:	f107 000c 	add.w	r0, r7, #12
    4a6a:	f008 fcd4 	bl	d416 <memset>
	switch (p_event->type) {
    4a6e:	7833      	ldrb	r3, [r6, #0]
    4a70:	3b01      	subs	r3, #1
    4a72:	2b05      	cmp	r3, #5
    4a74:	d821      	bhi.n	4aba <usbd_event_handler+0x62>
    4a76:	e8df f003 	tbb	[pc, r3]
    4a7a:	039b      	.short	0x039b
    4a7c:	158d1313 	.word	0x158d1313
    4a80:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    4a82:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
    4a84:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    4a86:	f7ff feb5 	bl	47f4 <usbd_evt_alloc>
		if (!ev) {
    4a8a:	4603      	mov	r3, r0
    4a8c:	b1a8      	cbz	r0, 4aba <usbd_event_handler+0x62>
		ev->evt_type = evt.evt_type;
    4a8e:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    4a90:	f100 0208 	add.w	r2, r0, #8
    4a94:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    4a98:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    4a9c:	4618      	mov	r0, r3
    4a9e:	e034      	b.n	4b0a <usbd_event_handler+0xb2>
	switch (p_event->type) {
    4aa0:	2304      	movs	r3, #4
    4aa2:	e7ee      	b.n	4a82 <usbd_event_handler+0x2a>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    4aa4:	f896 8002 	ldrb.w	r8, [r6, #2]
    4aa8:	4640      	mov	r0, r8
    4aaa:	f7ff fe4f 	bl	474c <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    4aae:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    4ab0:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    4ab2:	b133      	cbz	r3, 4ac2 <usbd_event_handler+0x6a>
    4ab4:	3b01      	subs	r3, #1
    4ab6:	2b02      	cmp	r3, #2
    4ab8:	d968      	bls.n	4b8c <usbd_event_handler+0x134>
}
    4aba:	3720      	adds	r7, #32
    4abc:	46bd      	mov	sp, r7
    4abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4ac2:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    4ac6:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4ac8:	d024      	beq.n	4b14 <usbd_event_handler+0xbc>
		switch (p_event->data.eptransfer.status) {
    4aca:	b19c      	cbz	r4, 4af4 <usbd_event_handler+0x9c>
    4acc:	2c03      	cmp	r4, #3
    4ace:	d0f4      	beq.n	4aba <usbd_event_handler+0x62>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    4ad0:	466d      	mov	r5, sp
    4ad2:	b088      	sub	sp, #32
    4ad4:	466a      	mov	r2, sp
    4ad6:	4b37      	ldr	r3, [pc, #220]	; (4bb4 <usbd_event_handler+0x15c>)
    4ad8:	f8c2 801c 	str.w	r8, [r2, #28]
    4adc:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4ae0:	2304      	movs	r3, #4
    4ae2:	f842 3f10 	str.w	r3, [r2, #16]!
    4ae6:	4834      	ldr	r0, [pc, #208]	; (4bb8 <usbd_event_handler+0x160>)
    4ae8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4aec:	f008 fcc4 	bl	d478 <z_log_msg_static_create.constprop.0>
    4af0:	46ad      	mov	sp, r5
    4af2:	e7e2      	b.n	4aba <usbd_event_handler+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    4af4:	f7ff fe7e 	bl	47f4 <usbd_evt_alloc>
			if (!ev) {
    4af8:	4603      	mov	r3, r0
    4afa:	2800      	cmp	r0, #0
    4afc:	d0dd      	beq.n	4aba <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    4afe:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4b00:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    4b02:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4b04:	2203      	movs	r2, #3
    4b06:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4b08:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    4b0a:	f7ff fe57 	bl	47bc <usbd_evt_put>
		usbd_work_schedule();
    4b0e:	f7ff fe4d 	bl	47ac <usbd_work_schedule>
    4b12:	e7d2      	b.n	4aba <usbd_event_handler+0x62>
		switch (p_event->data.eptransfer.status) {
    4b14:	b154      	cbz	r4, 4b2c <usbd_event_handler+0xd4>
    4b16:	2c01      	cmp	r4, #1
    4b18:	d1da      	bne.n	4ad0 <usbd_event_handler+0x78>
			struct usbd_event *ev = usbd_evt_alloc();
    4b1a:	f7ff fe6b 	bl	47f4 <usbd_evt_alloc>
			if (!ev) {
    4b1e:	4603      	mov	r3, r0
    4b20:	2800      	cmp	r0, #0
    4b22:	d0ca      	beq.n	4aba <usbd_event_handler+0x62>
			ep_ctx->read_pending = true;
    4b24:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    4b26:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4b28:	7304      	strb	r4, [r0, #12]
    4b2a:	e7ed      	b.n	4b08 <usbd_event_handler+0xb0>
			struct usbd_event *ev = usbd_evt_alloc();
    4b2c:	f7ff fe62 	bl	47f4 <usbd_evt_alloc>
			if (!ev) {
    4b30:	4604      	mov	r4, r0
    4b32:	2800      	cmp	r0, #0
    4b34:	d0c1      	beq.n	4aba <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    4b36:	2301      	movs	r3, #1
    4b38:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4b3a:	2302      	movs	r3, #2
    4b3c:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4b3e:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    4b40:	78b0      	ldrb	r0, [r6, #2]
    4b42:	f105 010c 	add.w	r1, r5, #12
    4b46:	f009 f950 	bl	ddea <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    4b4a:	b170      	cbz	r0, 4b6a <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
    4b4c:	466e      	mov	r6, sp
    4b4e:	b088      	sub	sp, #32
    4b50:	466a      	mov	r2, sp
    4b52:	4b1a      	ldr	r3, [pc, #104]	; (4bbc <usbd_event_handler+0x164>)
    4b54:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4b58:	2303      	movs	r3, #3
    4b5a:	f842 3f10 	str.w	r3, [r2, #16]!
    4b5e:	4816      	ldr	r0, [pc, #88]	; (4bb8 <usbd_event_handler+0x160>)
    4b60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4b64:	f008 fc88 	bl	d478 <z_log_msg_static_create.constprop.0>
    4b68:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    4b6a:	4a15      	ldr	r2, [pc, #84]	; (4bc0 <usbd_event_handler+0x168>)
    4b6c:	68e9      	ldr	r1, [r5, #12]
    4b6e:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    4b72:	428b      	cmp	r3, r1
    4b74:	d906      	bls.n	4b84 <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    4b76:	1a5b      	subs	r3, r3, r1
    4b78:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    4b7c:	f005 fb62 	bl	a244 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    4b80:	4620      	mov	r0, r4
    4b82:	e7c2      	b.n	4b0a <usbd_event_handler+0xb2>
				ctx->ctrl_read_len = 0U;
    4b84:	2300      	movs	r3, #0
    4b86:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    4b8a:	e7f9      	b.n	4b80 <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
    4b8c:	4630      	mov	r0, r6
    4b8e:	f7ff fe9b 	bl	48c8 <usbd_event_transfer_data>
	if (put_evt) {
    4b92:	e792      	b.n	4aba <usbd_event_handler+0x62>
		nrfx_usbd_setup_get(&drv_setup);
    4b94:	1d38      	adds	r0, r7, #4
    4b96:	f005 fb2f 	bl	a1f8 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    4b9a:	797b      	ldrb	r3, [r7, #5]
    4b9c:	2b05      	cmp	r3, #5
    4b9e:	d103      	bne.n	4ba8 <usbd_event_handler+0x150>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    4ba0:	793b      	ldrb	r3, [r7, #4]
    4ba2:	f013 0f60 	tst.w	r3, #96	; 0x60
    4ba6:	d088      	beq.n	4aba <usbd_event_handler+0x62>
			evt.evt.ep_evt.ep = ep_ctx;
    4ba8:	4b06      	ldr	r3, [pc, #24]	; (4bc4 <usbd_event_handler+0x16c>)
    4baa:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
    4bac:	2401      	movs	r4, #1
    4bae:	e76a      	b.n	4a86 <usbd_event_handler+0x2e>
	switch (p_event->type) {
    4bb0:	2402      	movs	r4, #2
    4bb2:	e768      	b.n	4a86 <usbd_event_handler+0x2e>
    4bb4:	0000fbc0 	.word	0x0000fbc0
    4bb8:	0000eb8c 	.word	0x0000eb8c
    4bbc:	0000fbf7 	.word	0x0000fbf7
    4bc0:	20001448 	.word	0x20001448
    4bc4:	200015b4 	.word	0x200015b4

00004bc8 <eps_ctx_init>:
{
    4bc8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4bca:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4bcc:	f064 007f 	orn	r0, r4, #127	; 0x7f
    4bd0:	b2c0      	uxtb	r0, r0
    4bd2:	f7ff fdbb 	bl	474c <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4bd6:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4bd8:	f008 fc3b 	bl	d452 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4bdc:	2c08      	cmp	r4, #8
    4bde:	d1f5      	bne.n	4bcc <eps_ctx_init+0x4>
    4be0:	4d0e      	ldr	r5, [pc, #56]	; (4c1c <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4be2:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4be4:	b2e0      	uxtb	r0, r4
    4be6:	f7ff fdb1 	bl	474c <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    4bea:	6903      	ldr	r3, [r0, #16]
    4bec:	b903      	cbnz	r3, 4bf0 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    4bee:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4bf0:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4bf2:	f008 fc2e 	bl	d452 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4bf6:	2c08      	cmp	r4, #8
    4bf8:	f105 0540 	add.w	r5, r5, #64	; 0x40
    4bfc:	d1f2      	bne.n	4be4 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    4bfe:	4808      	ldr	r0, [pc, #32]	; (4c20 <eps_ctx_init+0x58>)
    4c00:	f008 fc27 	bl	d452 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    4c04:	4b07      	ldr	r3, [pc, #28]	; (4c24 <eps_ctx_init+0x5c>)
    4c06:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    4c0a:	b912      	cbnz	r2, 4c12 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    4c0c:	4a06      	ldr	r2, [pc, #24]	; (4c28 <eps_ctx_init+0x60>)
    4c0e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    4c12:	4806      	ldr	r0, [pc, #24]	; (4c2c <eps_ctx_init+0x64>)
    4c14:	f008 fc1d 	bl	d452 <ep_ctx_reset>
}
    4c18:	2000      	movs	r0, #0
    4c1a:	bd38      	pop	{r3, r4, r5, pc}
    4c1c:	20001ad8 	.word	0x20001ad8
    4c20:	20001594 	.word	0x20001594
    4c24:	20001448 	.word	0x20001448
    4c28:	200016d8 	.word	0x200016d8
    4c2c:	200016b4 	.word	0x200016b4

00004c30 <usbd_work_handler>:
{
    4c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
    4c34:	4ca3      	ldr	r4, [pc, #652]	; (4ec4 <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4c36:	f8df a290 	ldr.w	sl, [pc, #656]	; 4ec8 <usbd_work_handler+0x298>
{
    4c3a:	b086      	sub	sp, #24
    4c3c:	4680      	mov	r8, r0
    4c3e:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    4c40:	f7ff fdc2 	bl	47c8 <usbd_evt_get>
    4c44:	4606      	mov	r6, r0
    4c46:	b918      	cbnz	r0, 4c50 <usbd_work_handler+0x20>
}
    4c48:	3718      	adds	r7, #24
    4c4a:	46bd      	mov	sp, r7
    4c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    4c50:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4c54:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4c56:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4c5a:	b93a      	cbnz	r2, 4c6c <usbd_work_handler+0x3c>
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	f000 80af 	beq.w	4dc0 <usbd_work_handler+0x190>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4c62:	4899      	ldr	r0, [pc, #612]	; (4ec8 <usbd_work_handler+0x298>)
    4c64:	4649      	mov	r1, r9
    4c66:	f009 f922 	bl	deae <k_mem_slab_free>
}
    4c6a:	e7e9      	b.n	4c40 <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    4c6c:	2b04      	cmp	r3, #4
    4c6e:	f200 8195 	bhi.w	4f9c <usbd_work_handler+0x36c>
    4c72:	e8df f013 	tbh	[pc, r3, lsl #1]
    4c76:	00a5      	.short	0x00a5
    4c78:	013b0005 	.word	0x013b0005
    4c7c:	01780151 	.word	0x01780151
			if (!ctx->attached) {
    4c80:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    4c84:	b983      	cbnz	r3, 4ca8 <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    4c86:	68b3      	ldr	r3, [r6, #8]
    4c88:	466d      	mov	r5, sp
    4c8a:	b088      	sub	sp, #32
    4c8c:	7a5b      	ldrb	r3, [r3, #9]
    4c8e:	466a      	mov	r2, sp
    4c90:	498e      	ldr	r1, [pc, #568]	; (4ecc <usbd_work_handler+0x29c>)
    4c92:	488f      	ldr	r0, [pc, #572]	; (4ed0 <usbd_work_handler+0x2a0>)
    4c94:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4c98:	2303      	movs	r3, #3
    4c9a:	f842 3f10 	str.w	r3, [r2, #16]!
    4c9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4ca2:	f008 fbe9 	bl	d478 <z_log_msg_static_create.constprop.0>
    4ca6:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    4ca8:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4caa:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    4cac:	2b03      	cmp	r3, #3
    4cae:	d839      	bhi.n	4d24 <usbd_work_handler+0xf4>
    4cb0:	e8df f003 	tbb	[pc, r3]
    4cb4:	736e3f02 	.word	0x736e3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4cb8:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    4cba:	2208      	movs	r2, #8
    4cbc:	2100      	movs	r1, #0
    4cbe:	4630      	mov	r0, r6
    4cc0:	f008 fba9 	bl	d416 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4cc4:	4b83      	ldr	r3, [pc, #524]	; (4ed4 <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4cc6:	4884      	ldr	r0, [pc, #528]	; (4ed8 <usbd_work_handler+0x2a8>)
    4cc8:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    4ccc:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    4cce:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    4cd2:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4cd4:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4cd8:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    4cdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    4ce0:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    4ce2:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4ce6:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    4cea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    4cee:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    4cf0:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4cf4:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    4cf8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4cfc:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    4cfe:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4d00:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4d02:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4d04:	f008 fb7c 	bl	d400 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    4d08:	682b      	ldr	r3, [r5, #0]
    4d0a:	7a68      	ldrb	r0, [r5, #9]
    4d0c:	2100      	movs	r1, #0
    4d0e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    4d10:	f996 3000 	ldrsb.w	r3, [r6]
    4d14:	2b00      	cmp	r3, #0
    4d16:	db08      	blt.n	4d2a <usbd_work_handler+0xfa>
    4d18:	88f3      	ldrh	r3, [r6, #6]
    4d1a:	b133      	cbz	r3, 4d2a <usbd_work_handler+0xfa>
		ctx->ctrl_read_len = usbd_setup->wLength;
    4d1c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    4d20:	f005 fa90 	bl	a244 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4d24:	4649      	mov	r1, r9
    4d26:	4650      	mov	r0, sl
    4d28:	e79d      	b.n	4c66 <usbd_work_handler+0x36>
		ctx->ctrl_read_len = 0U;
    4d2a:	2300      	movs	r3, #0
    4d2c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    4d30:	e7f8      	b.n	4d24 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_pending) {
    4d32:	7f6b      	ldrb	r3, [r5, #29]
    4d34:	2b00      	cmp	r3, #0
    4d36:	d0f5      	beq.n	4d24 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_complete) {
    4d38:	7f2b      	ldrb	r3, [r5, #28]
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d0f2      	beq.n	4d24 <usbd_work_handler+0xf4>
	ep_ctx->read_pending = false;
    4d3e:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4d40:	4866      	ldr	r0, [pc, #408]	; (4edc <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
    4d42:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4d44:	f04f 32ff 	mov.w	r2, #4294967295
    4d48:	f04f 33ff 	mov.w	r3, #4294967295
	ep_ctx->read_complete = false;
    4d4c:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4d4e:	f008 fb96 	bl	d47e <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    4d52:	696b      	ldr	r3, [r5, #20]
    4d54:	603b      	str	r3, [r7, #0]
    4d56:	686b      	ldr	r3, [r5, #4]
    4d58:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4d5c:	4639      	mov	r1, r7
    4d5e:	7a68      	ldrb	r0, [r5, #9]
    4d60:	f005 f876 	bl	9e50 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    4d64:	4b5e      	ldr	r3, [pc, #376]	; (4ee0 <usbd_work_handler+0x2b0>)
    4d66:	4298      	cmp	r0, r3
    4d68:	d00e      	beq.n	4d88 <usbd_work_handler+0x158>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    4d6a:	466d      	mov	r5, sp
    4d6c:	b088      	sub	sp, #32
    4d6e:	466a      	mov	r2, sp
    4d70:	4b5c      	ldr	r3, [pc, #368]	; (4ee4 <usbd_work_handler+0x2b4>)
    4d72:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4d76:	2303      	movs	r3, #3
    4d78:	f842 3f10 	str.w	r3, [r2, #16]!
    4d7c:	4854      	ldr	r0, [pc, #336]	; (4ed0 <usbd_work_handler+0x2a0>)
    4d7e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4d82:	f008 fb79 	bl	d478 <z_log_msg_static_create.constprop.0>
    4d86:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    4d88:	4854      	ldr	r0, [pc, #336]	; (4edc <usbd_work_handler+0x2ac>)
    4d8a:	f008 fb7a 	bl	d482 <k_mutex_unlock.isra.0>
    4d8e:	e7c9      	b.n	4d24 <usbd_work_handler+0xf4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4d90:	682b      	ldr	r3, [r5, #0]
    4d92:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4d94:	7a68      	ldrb	r0, [r5, #9]
    4d96:	4798      	blx	r3
		break;
    4d98:	e7c4      	b.n	4d24 <usbd_work_handler+0xf4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4d9a:	7aab      	ldrb	r3, [r5, #10]
    4d9c:	b96b      	cbnz	r3, 4dba <usbd_work_handler+0x18a>
    4d9e:	7feb      	ldrb	r3, [r5, #31]
    4da0:	b95b      	cbnz	r3, 4dba <usbd_work_handler+0x18a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4da2:	484e      	ldr	r0, [pc, #312]	; (4edc <usbd_work_handler+0x2ac>)
    4da4:	f04f 32ff 	mov.w	r2, #4294967295
    4da8:	f04f 33ff 	mov.w	r3, #4294967295
    4dac:	f008 fb67 	bl	d47e <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    4db0:	f005 fa78 	bl	a2a4 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    4db4:	4849      	ldr	r0, [pc, #292]	; (4edc <usbd_work_handler+0x2ac>)
    4db6:	f008 fb64 	bl	d482 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4dba:	682b      	ldr	r3, [r5, #0]
    4dbc:	2102      	movs	r1, #2
    4dbe:	e7e9      	b.n	4d94 <usbd_work_handler+0x164>
	switch (pwr_evt->state) {
    4dc0:	7a33      	ldrb	r3, [r6, #8]
    4dc2:	2b04      	cmp	r3, #4
    4dc4:	d8ae      	bhi.n	4d24 <usbd_work_handler+0xf4>
    4dc6:	e8df f003 	tbb	[pc, r3]
    4dca:	0359      	.short	0x0359
    4dcc:	6723      	.short	0x6723
    4dce:	73          	.byte	0x73
    4dcf:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    4dd0:	f004 ffc6 	bl	9d60 <nrfx_usbd_is_enabled>
    4dd4:	4605      	mov	r5, r0
    4dd6:	2800      	cmp	r0, #0
    4dd8:	d1a4      	bne.n	4d24 <usbd_work_handler+0xf4>
			nrfx_usbd_enable();
    4dda:	f004 fefd 	bl	9bd8 <nrfx_usbd_enable>
    4dde:	f3bf 8f5b 	dmb	ish
    4de2:	4941      	ldr	r1, [pc, #260]	; (4ee8 <usbd_work_handler+0x2b8>)
    4de4:	2301      	movs	r3, #1
    4de6:	e851 2f00 	ldrex	r2, [r1]
    4dea:	2a00      	cmp	r2, #0
    4dec:	d103      	bne.n	4df6 <usbd_work_handler+0x1c6>
    4dee:	e841 3000 	strex	r0, r3, [r1]
    4df2:	2800      	cmp	r0, #0
    4df4:	d1f7      	bne.n	4de6 <usbd_work_handler+0x1b6>
    4df6:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    4dfa:	d193      	bne.n	4d24 <usbd_work_handler+0xf4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4dfc:	f841 5c08 	str.w	r5, [r1, #-8]
    4e00:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4e04:	69e0      	ldr	r0, [r4, #28]
    4e06:	6163      	str	r3, [r4, #20]
    4e08:	3914      	subs	r1, #20
    4e0a:	f007 fca7 	bl	c75c <onoff_request>
    4e0e:	e789      	b.n	4d24 <usbd_work_handler+0xf4>
	switch (pwr_evt->state) {
    4e10:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4e12:	f065 007f 	orn	r0, r5, #127	; 0x7f
    4e16:	b2c0      	uxtb	r0, r0
    4e18:	f7ff fc98 	bl	474c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4e1c:	7a03      	ldrb	r3, [r0, #8]
    4e1e:	b113      	cbz	r3, 4e26 <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4e20:	7a40      	ldrb	r0, [r0, #9]
    4e22:	f005 fbef 	bl	a604 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    4e26:	3501      	adds	r5, #1
    4e28:	2d08      	cmp	r5, #8
    4e2a:	d1f2      	bne.n	4e12 <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
    4e2c:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    4e30:	b11b      	cbz	r3, 4e3a <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4e32:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    4e36:	f005 fbe5 	bl	a604 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    4e3a:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4e3c:	b2e8      	uxtb	r0, r5
    4e3e:	f7ff fc85 	bl	474c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4e42:	7a03      	ldrb	r3, [r0, #8]
    4e44:	b113      	cbz	r3, 4e4c <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4e46:	7a40      	ldrb	r0, [r0, #9]
    4e48:	f005 fbdc 	bl	a604 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    4e4c:	3501      	adds	r5, #1
    4e4e:	2d08      	cmp	r5, #8
    4e50:	d1f4      	bne.n	4e3c <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
    4e52:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4e56:	b11b      	cbz	r3, 4e60 <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4e58:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    4e5c:	f005 fbd2 	bl	a604 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    4e60:	2001      	movs	r0, #1
    4e62:	f004 ff5f 	bl	9d24 <nrfx_usbd_start>
		ctx->ready = true;
    4e66:	2301      	movs	r3, #1
    4e68:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    4e6c:	6823      	ldr	r3, [r4, #0]
    4e6e:	2b00      	cmp	r3, #0
    4e70:	f43f af58 	beq.w	4d24 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    4e74:	2100      	movs	r1, #0
    4e76:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    4e78:	4798      	blx	r3
    4e7a:	e753      	b.n	4d24 <usbd_work_handler+0xf4>
		ctx->ready = false;
    4e7c:	2500      	movs	r5, #0
    4e7e:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    4e82:	f005 fb7b 	bl	a57c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    4e86:	f7ff fdc7 	bl	4a18 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    4e8a:	6823      	ldr	r3, [r4, #0]
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	f43f af49 	beq.w	4d24 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    4e92:	4629      	mov	r1, r5
    4e94:	2004      	movs	r0, #4
    4e96:	e7ef      	b.n	4e78 <usbd_work_handler+0x248>
		if (dev_ready()) {
    4e98:	2a00      	cmp	r2, #0
    4e9a:	f43f af43 	beq.w	4d24 <usbd_work_handler+0xf4>
			nrfx_usbd_suspend();
    4e9e:	f004 ff69 	bl	9d74 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    4ea2:	6823      	ldr	r3, [r4, #0]
    4ea4:	2b00      	cmp	r3, #0
    4ea6:	f43f af3d 	beq.w	4d24 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    4eaa:	2100      	movs	r1, #0
    4eac:	2005      	movs	r0, #5
    4eae:	e7e3      	b.n	4e78 <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
    4eb0:	6823      	ldr	r3, [r4, #0]
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	f43f af36 	beq.w	4d24 <usbd_work_handler+0xf4>
    4eb8:	2a00      	cmp	r2, #0
    4eba:	f43f af33 	beq.w	4d24 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4ebe:	2100      	movs	r1, #0
    4ec0:	2006      	movs	r0, #6
    4ec2:	e7d9      	b.n	4e78 <usbd_work_handler+0x248>
    4ec4:	20001448 	.word	0x20001448
    4ec8:	20000360 	.word	0x20000360
    4ecc:	0000fc17 	.word	0x0000fc17
    4ed0:	0000eb8c 	.word	0x0000eb8c
    4ed4:	40027000 	.word	0x40027000
    4ed8:	2000144c 	.word	0x2000144c
    4edc:	20001480 	.word	0x20001480
    4ee0:	0bad0000 	.word	0x0bad0000
    4ee4:	0000fc3d 	.word	0x0000fc3d
    4ee8:	20001468 	.word	0x20001468
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4eec:	f108 0510 	add.w	r5, r8, #16
    4ef0:	f04f 33ff 	mov.w	r3, #4294967295
    4ef4:	f04f 32ff 	mov.w	r2, #4294967295
    4ef8:	4628      	mov	r0, r5
    4efa:	f008 fac0 	bl	d47e <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    4efe:	f7ff fe63 	bl	4bc8 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    4f02:	4628      	mov	r0, r5
    4f04:	f008 fabd 	bl	d482 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    4f08:	f858 3c28 	ldr.w	r3, [r8, #-40]
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	f43f af09 	beq.w	4d24 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_RESET, NULL);
    4f12:	2100      	movs	r1, #0
    4f14:	2001      	movs	r0, #1
    4f16:	e7af      	b.n	4e78 <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
    4f18:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4f1c:	b193      	cbz	r3, 4f44 <usbd_work_handler+0x314>
		ep_ctx->read_pending = true;
    4f1e:	2501      	movs	r5, #1
    4f20:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    4f24:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    4f28:	f7ff fc64 	bl	47f4 <usbd_evt_alloc>
		if (!ev) {
    4f2c:	b990      	cbnz	r0, 4f54 <usbd_work_handler+0x324>
			LOG_ERR("Failed to alloc evt");
    4f2e:	4b23      	ldr	r3, [pc, #140]	; (4fbc <usbd_work_handler+0x38c>)
    4f30:	617b      	str	r3, [r7, #20]
    4f32:	2302      	movs	r3, #2
    4f34:	4822      	ldr	r0, [pc, #136]	; (4fc0 <usbd_work_handler+0x390>)
    4f36:	613b      	str	r3, [r7, #16]
    4f38:	f107 0210 	add.w	r2, r7, #16
    4f3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4f40:	f008 fa9a 	bl	d478 <z_log_msg_static_create.constprop.0>
			if (ctx->status_cb) {
    4f44:	f858 3c28 	ldr.w	r3, [r8, #-40]
    4f48:	2b00      	cmp	r3, #0
    4f4a:	f43f aeeb 	beq.w	4d24 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SOF, NULL);
    4f4e:	2100      	movs	r1, #0
    4f50:	200a      	movs	r0, #10
    4f52:	e791      	b.n	4e78 <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
    4f54:	4a1b      	ldr	r2, [pc, #108]	; (4fc4 <usbd_work_handler+0x394>)
		ev->evt_type = USBD_EVT_EP;
    4f56:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4f58:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    4f5a:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    4f5c:	f7ff fc2e 	bl	47bc <usbd_evt_put>
		usbd_work_schedule();
    4f60:	f7ff fc24 	bl	47ac <usbd_work_schedule>
    4f64:	e7ee      	b.n	4f44 <usbd_work_handler+0x314>
				LOG_ERR("USBD event queue full!");
    4f66:	4b18      	ldr	r3, [pc, #96]	; (4fc8 <usbd_work_handler+0x398>)
    4f68:	617b      	str	r3, [r7, #20]
    4f6a:	2302      	movs	r3, #2
    4f6c:	613b      	str	r3, [r7, #16]
    4f6e:	f107 0210 	add.w	r2, r7, #16
    4f72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4f76:	4812      	ldr	r0, [pc, #72]	; (4fc0 <usbd_work_handler+0x390>)
    4f78:	f008 fa7e 	bl	d478 <z_log_msg_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    4f7c:	f008 fe51 	bl	dc22 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    4f80:	f005 fafc 	bl	a57c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4f84:	f004 fe1e 	bl	9bc4 <nrfx_usbd_uninit>
	usbd_evt_flush();
    4f88:	f7ff fc26 	bl	47d8 <usbd_evt_flush>
	ret = eps_ctx_init();
    4f8c:	f7ff fe1c 	bl	4bc8 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4f90:	f008 fe40 	bl	dc14 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4f94:	480d      	ldr	r0, [pc, #52]	; (4fcc <usbd_work_handler+0x39c>)
    4f96:	f004 ff19 	bl	9dcc <nrfx_usbd_init>
}
    4f9a:	e6c3      	b.n	4d24 <usbd_work_handler+0xf4>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    4f9c:	466d      	mov	r5, sp
    4f9e:	b088      	sub	sp, #32
    4fa0:	466a      	mov	r2, sp
    4fa2:	490b      	ldr	r1, [pc, #44]	; (4fd0 <usbd_work_handler+0x3a0>)
    4fa4:	4806      	ldr	r0, [pc, #24]	; (4fc0 <usbd_work_handler+0x390>)
		switch (ev->evt_type) {
    4fa6:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    4faa:	2303      	movs	r3, #3
    4fac:	f842 3f10 	str.w	r3, [r2, #16]!
    4fb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4fb4:	f008 fa60 	bl	d478 <z_log_msg_static_create.constprop.0>
    4fb8:	46ad      	mov	sp, r5
    4fba:	e6b3      	b.n	4d24 <usbd_work_handler+0xf4>
    4fbc:	0000fc63 	.word	0x0000fc63
    4fc0:	0000eb8c 	.word	0x0000eb8c
    4fc4:	200016b4 	.word	0x200016b4
    4fc8:	0000fc77 	.word	0x0000fc77
    4fcc:	00004a59 	.word	0x00004a59
    4fd0:	0000fc8e 	.word	0x0000fc8e

00004fd4 <usb_dc_attach>:
{
    4fd4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    4fd6:	4d16      	ldr	r5, [pc, #88]	; (5030 <usb_dc_attach+0x5c>)
    4fd8:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    4fdc:	bb2c      	cbnz	r4, 502a <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    4fde:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4fe2:	f008 ffa9 	bl	df38 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    4fe6:	4620      	mov	r0, r4
    4fe8:	f000 fbc2 	bl	5770 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4fec:	4622      	mov	r2, r4
    4fee:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    4ff0:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4ff2:	2027      	movs	r0, #39	; 0x27
    4ff4:	f7fe fe4e 	bl	3c94 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    4ff8:	f008 fe0c 	bl	dc14 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    4ffc:	f7ff fde4 	bl	4bc8 <eps_ctx_init>
	if (ret == 0) {
    5000:	4604      	mov	r4, r0
    5002:	b910      	cbnz	r0, 500a <usb_dc_attach+0x36>
		ctx->attached = true;
    5004:	2301      	movs	r3, #1
    5006:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    500a:	4b0a      	ldr	r3, [pc, #40]	; (5034 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    500c:	681b      	ldr	r3, [r3, #0]
    500e:	b10b      	cbz	r3, 5014 <usb_dc_attach+0x40>
		usbd_work_schedule();
    5010:	f7ff fbcc 	bl	47ac <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    5014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5018:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    501c:	07db      	lsls	r3, r3, #31
    501e:	d502      	bpl.n	5026 <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    5020:	2000      	movs	r0, #0
    5022:	f7ff fc23 	bl	486c <usb_dc_power_event_handler>
}
    5026:	4620      	mov	r0, r4
    5028:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    502a:	2400      	movs	r4, #0
    502c:	e7fb      	b.n	5026 <usb_dc_attach+0x52>
    502e:	bf00      	nop
    5030:	20001448 	.word	0x20001448
    5034:	200003f8 	.word	0x200003f8

00005038 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    5038:	4b07      	ldr	r3, [pc, #28]	; (5058 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    503a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    503e:	b13a      	cbz	r2, 5050 <usb_dc_set_address+0x18>
    5040:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    5044:	2b00      	cmp	r3, #0
    5046:	bf14      	ite	ne
    5048:	2000      	movne	r0, #0
    504a:	f06f 0012 	mvneq.w	r0, #18
    504e:	4770      	bx	lr
    5050:	f06f 0012 	mvn.w	r0, #18
}
    5054:	4770      	bx	lr
    5056:	bf00      	nop
    5058:	20001448 	.word	0x20001448

0000505c <usb_dc_ep_check_cap>:
{
    505c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    505e:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    5060:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    5062:	791b      	ldrb	r3, [r3, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    5064:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    5068:	b97b      	cbnz	r3, 508a <usb_dc_ep_check_cap+0x2e>
    506a:	b158      	cbz	r0, 5084 <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    506c:	4b10      	ldr	r3, [pc, #64]	; (50b0 <usb_dc_ep_check_cap+0x54>)
		LOG_ERR("invalid endpoint index/address");
    506e:	9305      	str	r3, [sp, #20]
    5070:	2302      	movs	r3, #2
    5072:	9304      	str	r3, [sp, #16]
    5074:	aa04      	add	r2, sp, #16
    5076:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    507a:	480e      	ldr	r0, [pc, #56]	; (50b4 <usb_dc_ep_check_cap+0x58>)
    507c:	f008 f9fc 	bl	d478 <z_log_msg_static_create.constprop.0>
		return -1;
    5080:	f04f 30ff 	mov.w	r0, #4294967295
}
    5084:	b007      	add	sp, #28
    5086:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    508a:	2808      	cmp	r0, #8
    508c:	d901      	bls.n	5092 <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    508e:	4b0a      	ldr	r3, [pc, #40]	; (50b8 <usb_dc_ep_check_cap+0x5c>)
    5090:	e7ed      	b.n	506e <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    5092:	2b01      	cmp	r3, #1
    5094:	d109      	bne.n	50aa <usb_dc_ep_check_cap+0x4e>
    5096:	0713      	lsls	r3, r2, #28
    5098:	d407      	bmi.n	50aa <usb_dc_ep_check_cap+0x4e>
		LOG_WRN("invalid endpoint type");
    509a:	4b08      	ldr	r3, [pc, #32]	; (50bc <usb_dc_ep_check_cap+0x60>)
    509c:	9305      	str	r3, [sp, #20]
    509e:	2302      	movs	r3, #2
    50a0:	9304      	str	r3, [sp, #16]
    50a2:	aa04      	add	r2, sp, #16
    50a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    50a8:	e7e7      	b.n	507a <usb_dc_ep_check_cap+0x1e>
	return 0;
    50aa:	2000      	movs	r0, #0
    50ac:	e7ea      	b.n	5084 <usb_dc_ep_check_cap+0x28>
    50ae:	bf00      	nop
    50b0:	0000fca5 	.word	0x0000fca5
    50b4:	0000eb8c 	.word	0x0000eb8c
    50b8:	0000fcc4 	.word	0x0000fcc4
    50bc:	0000fce3 	.word	0x0000fce3

000050c0 <usb_dc_ep_configure>:
{
    50c0:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    50c2:	4b16      	ldr	r3, [pc, #88]	; (511c <usb_dc_ep_configure+0x5c>)
	if (!dev_attached()) {
    50c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    50c8:	b087      	sub	sp, #28
    50ca:	4604      	mov	r4, r0
	if (!dev_attached()) {
    50cc:	b31b      	cbz	r3, 5116 <usb_dc_ep_configure+0x56>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    50ce:	7805      	ldrb	r5, [r0, #0]
    50d0:	4628      	mov	r0, r5
    50d2:	f7ff fb3b 	bl	474c <endpoint_ctx>
	if (!ep_ctx) {
    50d6:	b1b0      	cbz	r0, 5106 <usb_dc_ep_configure+0x46>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    50d8:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    50da:	7923      	ldrb	r3, [r4, #4]
    50dc:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    50de:	8863      	ldrh	r3, [r4, #2]
    50e0:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    50e2:	7820      	ldrb	r0, [r4, #0]
    50e4:	8861      	ldrh	r1, [r4, #2]
    50e6:	f010 0f08 	tst.w	r0, #8
    50ea:	d110      	bne.n	510e <usb_dc_ep_configure+0x4e>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    50ec:	1e4b      	subs	r3, r1, #1
    50ee:	420b      	tst	r3, r1
    50f0:	d00d      	beq.n	510e <usb_dc_ep_configure+0x4e>
			LOG_ERR("EP max packet size must be a power of 2");
    50f2:	4b0b      	ldr	r3, [pc, #44]	; (5120 <usb_dc_ep_configure+0x60>)
    50f4:	9305      	str	r3, [sp, #20]
    50f6:	480b      	ldr	r0, [pc, #44]	; (5124 <usb_dc_ep_configure+0x64>)
    50f8:	2302      	movs	r3, #2
    50fa:	aa04      	add	r2, sp, #16
    50fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5100:	9304      	str	r3, [sp, #16]
    5102:	f008 f9b9 	bl	d478 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    5106:	f06f 0015 	mvn.w	r0, #21
}
    510a:	b007      	add	sp, #28
    510c:	bd30      	pop	{r4, r5, pc}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    510e:	f008 fe67 	bl	dde0 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    5112:	2000      	movs	r0, #0
    5114:	e7f9      	b.n	510a <usb_dc_ep_configure+0x4a>
		return -ENODEV;
    5116:	f06f 0012 	mvn.w	r0, #18
    511a:	e7f6      	b.n	510a <usb_dc_ep_configure+0x4a>
    511c:	20001448 	.word	0x20001448
    5120:	0000fcf9 	.word	0x0000fcf9
    5124:	0000eb8c 	.word	0x0000eb8c

00005128 <usb_dc_ep_set_stall>:
{
    5128:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    512a:	4b19      	ldr	r3, [pc, #100]	; (5190 <usb_dc_ep_set_stall+0x68>)
	if (!dev_attached() || !dev_ready()) {
    512c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    5130:	b087      	sub	sp, #28
    5132:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    5134:	b342      	cbz	r2, 5188 <usb_dc_ep_set_stall+0x60>
    5136:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    513a:	b32b      	cbz	r3, 5188 <usb_dc_ep_set_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
    513c:	f7ff fb06 	bl	474c <endpoint_ctx>
	if (!ep_ctx) {
    5140:	4604      	mov	r4, r0
    5142:	b918      	cbnz	r0, 514c <usb_dc_ep_set_stall+0x24>
		return -EINVAL;
    5144:	f06f 0015 	mvn.w	r0, #21
}
    5148:	b007      	add	sp, #28
    514a:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    514c:	7a83      	ldrb	r3, [r0, #10]
    514e:	2b01      	cmp	r3, #1
    5150:	d00f      	beq.n	5172 <usb_dc_ep_set_stall+0x4a>
    5152:	d907      	bls.n	5164 <usb_dc_ep_set_stall+0x3c>
    5154:	3b02      	subs	r3, #2
    5156:	2b01      	cmp	r3, #1
    5158:	d907      	bls.n	516a <usb_dc_ep_set_stall+0x42>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    515a:	6963      	ldr	r3, [r4, #20]
    515c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    515e:	2000      	movs	r0, #0
    5160:	60e0      	str	r0, [r4, #12]
	return 0;
    5162:	e7f1      	b.n	5148 <usb_dc_ep_set_stall+0x20>
		nrfx_usbd_setup_stall();
    5164:	f005 f8a6 	bl	a2b4 <nrfx_usbd_setup_stall>
		break;
    5168:	e7f7      	b.n	515a <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    516a:	4628      	mov	r0, r5
    516c:	f005 f816 	bl	a19c <nrfx_usbd_ep_stall>
		break;
    5170:	e7f3      	b.n	515a <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
    5172:	4b08      	ldr	r3, [pc, #32]	; (5194 <usb_dc_ep_set_stall+0x6c>)
    5174:	9305      	str	r3, [sp, #20]
    5176:	4808      	ldr	r0, [pc, #32]	; (5198 <usb_dc_ep_set_stall+0x70>)
    5178:	2302      	movs	r3, #2
    517a:	aa04      	add	r2, sp, #16
    517c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5180:	9304      	str	r3, [sp, #16]
    5182:	f008 f979 	bl	d478 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    5186:	e7dd      	b.n	5144 <usb_dc_ep_set_stall+0x1c>
		return -ENODEV;
    5188:	f06f 0012 	mvn.w	r0, #18
    518c:	e7dc      	b.n	5148 <usb_dc_ep_set_stall+0x20>
    518e:	bf00      	nop
    5190:	20001448 	.word	0x20001448
    5194:	0000fd21 	.word	0x0000fd21
    5198:	0000eb8c 	.word	0x0000eb8c

0000519c <usb_dc_ep_clear_stall>:
{
    519c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    519e:	4b0e      	ldr	r3, [pc, #56]	; (51d8 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    51a0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    51a4:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    51a6:	b182      	cbz	r2, 51ca <usb_dc_ep_clear_stall+0x2e>
    51a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    51ac:	b16b      	cbz	r3, 51ca <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    51ae:	f7ff facd 	bl	474c <endpoint_ctx>
	if (!ep_ctx) {
    51b2:	b168      	cbz	r0, 51d0 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    51b4:	f015 0408 	ands.w	r4, r5, #8
    51b8:	d10a      	bne.n	51d0 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    51ba:	4628      	mov	r0, r5
    51bc:	f005 f810 	bl	a1e0 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    51c0:	4628      	mov	r0, r5
    51c2:	f005 fa73 	bl	a6ac <nrfx_usbd_ep_stall_clear>
	return 0;
    51c6:	4620      	mov	r0, r4
}
    51c8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    51ca:	f06f 0012 	mvn.w	r0, #18
    51ce:	e7fb      	b.n	51c8 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    51d0:	f06f 0015 	mvn.w	r0, #21
    51d4:	e7f8      	b.n	51c8 <usb_dc_ep_clear_stall+0x2c>
    51d6:	bf00      	nop
    51d8:	20001448 	.word	0x20001448

000051dc <usb_dc_ep_is_stalled>:
{
    51dc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    51de:	4b0c      	ldr	r3, [pc, #48]	; (5210 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    51e0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    51e4:	4605      	mov	r5, r0
    51e6:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    51e8:	b162      	cbz	r2, 5204 <usb_dc_ep_is_stalled+0x28>
    51ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    51ee:	b14b      	cbz	r3, 5204 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    51f0:	f7ff faac 	bl	474c <endpoint_ctx>
	if (!ep_ctx) {
    51f4:	b148      	cbz	r0, 520a <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    51f6:	b144      	cbz	r4, 520a <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    51f8:	4628      	mov	r0, r5
    51fa:	f004 ffd7 	bl	a1ac <nrfx_usbd_ep_stall_check>
    51fe:	7020      	strb	r0, [r4, #0]
	return 0;
    5200:	2000      	movs	r0, #0
}
    5202:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    5204:	f06f 0012 	mvn.w	r0, #18
    5208:	e7fb      	b.n	5202 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    520a:	f06f 0015 	mvn.w	r0, #21
    520e:	e7f8      	b.n	5202 <usb_dc_ep_is_stalled+0x26>
    5210:	20001448 	.word	0x20001448

00005214 <usb_dc_ep_enable>:
{
    5214:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    5216:	4e13      	ldr	r6, [pc, #76]	; (5264 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    5218:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    521c:	4604      	mov	r4, r0
	if (!dev_attached()) {
    521e:	b1c3      	cbz	r3, 5252 <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    5220:	f7ff fa94 	bl	474c <endpoint_ctx>
	if (!ep_ctx) {
    5224:	4605      	mov	r5, r0
    5226:	b1b8      	cbz	r0, 5258 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    5228:	0723      	lsls	r3, r4, #28
    522a:	d405      	bmi.n	5238 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    522c:	4620      	mov	r0, r4
    522e:	f004 ffd7 	bl	a1e0 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    5232:	4620      	mov	r0, r4
    5234:	f005 fa3a 	bl	a6ac <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    5238:	7a2b      	ldrb	r3, [r5, #8]
    523a:	b983      	cbnz	r3, 525e <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    523c:	2301      	movs	r3, #1
    523e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    5240:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    5244:	b90b      	cbnz	r3, 524a <usb_dc_ep_enable+0x36>
	return 0;
    5246:	2000      	movs	r0, #0
}
    5248:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    524a:	4620      	mov	r0, r4
    524c:	f005 f9da 	bl	a604 <nrfx_usbd_ep_enable>
    5250:	e7f9      	b.n	5246 <usb_dc_ep_enable+0x32>
		return -ENODEV;
    5252:	f06f 0012 	mvn.w	r0, #18
    5256:	e7f7      	b.n	5248 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    5258:	f06f 0015 	mvn.w	r0, #21
    525c:	e7f4      	b.n	5248 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    525e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5262:	e7f1      	b.n	5248 <usb_dc_ep_enable+0x34>
    5264:	20001448 	.word	0x20001448

00005268 <usb_dc_ep_write>:
{
    5268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    526c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 5394 <usb_dc_ep_write+0x12c>
{
    5270:	b084      	sub	sp, #16
    5272:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    5274:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
    5278:	af00      	add	r7, sp, #0
    527a:	4680      	mov	r8, r0
    527c:	468a      	mov	sl, r1
    527e:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    5280:	2b00      	cmp	r3, #0
    5282:	f000 8083 	beq.w	538c <usb_dc_ep_write+0x124>
    5286:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    528a:	2b00      	cmp	r3, #0
    528c:	d07e      	beq.n	538c <usb_dc_ep_write+0x124>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    528e:	f010 0f80 	tst.w	r0, #128	; 0x80
    5292:	d014      	beq.n	52be <usb_dc_ep_write+0x56>
	ep_ctx = endpoint_ctx(ep);
    5294:	f7ff fa5a 	bl	474c <endpoint_ctx>
	if (!ep_ctx) {
    5298:	4604      	mov	r4, r0
    529a:	b180      	cbz	r0, 52be <usb_dc_ep_write+0x56>
	if (!ep_ctx->cfg.en) {
    529c:	7a03      	ldrb	r3, [r0, #8]
    529e:	b9ab      	cbnz	r3, 52cc <usb_dc_ep_write+0x64>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    52a0:	466c      	mov	r4, sp
    52a2:	b088      	sub	sp, #32
    52a4:	466a      	mov	r2, sp
    52a6:	4b3c      	ldr	r3, [pc, #240]	; (5398 <usb_dc_ep_write+0x130>)
    52a8:	483c      	ldr	r0, [pc, #240]	; (539c <usb_dc_ep_write+0x134>)
    52aa:	e9c2 3805 	strd	r3, r8, [r2, #20]
    52ae:	2303      	movs	r3, #3
    52b0:	f842 3f10 	str.w	r3, [r2, #16]!
    52b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    52b8:	f008 f8de 	bl	d478 <z_log_msg_static_create.constprop.0>
    52bc:	46a5      	mov	sp, r4
		return -EINVAL;
    52be:	f06f 0415 	mvn.w	r4, #21
}
    52c2:	4620      	mov	r0, r4
    52c4:	3710      	adds	r7, #16
    52c6:	46bd      	mov	sp, r7
    52c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    52cc:	f04f 33ff 	mov.w	r3, #4294967295
    52d0:	f04f 32ff 	mov.w	r2, #4294967295
    52d4:	f109 0038 	add.w	r0, r9, #56	; 0x38
    52d8:	f008 f8d1 	bl	d47e <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    52dc:	7fa3      	ldrb	r3, [r4, #30]
    52de:	b133      	cbz	r3, 52ee <usb_dc_ep_write+0x86>
		k_mutex_unlock(&ctx->drv_lock);
    52e0:	f109 0038 	add.w	r0, r9, #56	; 0x38
    52e4:	f008 f8cd 	bl	d482 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    52e8:	f06f 040a 	mvn.w	r4, #10
    52ec:	e7e9      	b.n	52c2 <usb_dc_ep_write+0x5a>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    52ee:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    52f0:	b355      	cbz	r5, 5348 <usb_dc_ep_write+0xe0>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    52f2:	2b00      	cmp	r3, #0
    52f4:	d038      	beq.n	5368 <usb_dc_ep_write+0x100>
	ep_ctx->write_in_progress = true;
    52f6:	2301      	movs	r3, #1
    52f8:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    52fa:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    52fe:	1d39      	adds	r1, r7, #4
    5300:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    5302:	e9c7 a501 	strd	sl, r5, [r7, #4]
    5306:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    530a:	f004 fda1 	bl	9e50 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    530e:	4b24      	ldr	r3, [pc, #144]	; (53a0 <usb_dc_ep_write+0x138>)
    5310:	4298      	cmp	r0, r3
    5312:	d037      	beq.n	5384 <usb_dc_ep_write+0x11c>
		ep_ctx->write_in_progress = false;
    5314:	f884 901e 	strb.w	r9, [r4, #30]
		if (ret_bytes) {
    5318:	b10e      	cbz	r6, 531e <usb_dc_ep_write+0xb6>
			*ret_bytes = 0;
    531a:	f8c6 9000 	str.w	r9, [r6]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    531e:	466c      	mov	r4, sp
    5320:	b088      	sub	sp, #32
    5322:	466a      	mov	r2, sp
    5324:	4b1f      	ldr	r3, [pc, #124]	; (53a4 <usb_dc_ep_write+0x13c>)
    5326:	e9c2 3005 	strd	r3, r0, [r2, #20]
    532a:	2303      	movs	r3, #3
    532c:	f842 3f10 	str.w	r3, [r2, #16]!
    5330:	481a      	ldr	r0, [pc, #104]	; (539c <usb_dc_ep_write+0x134>)
    5332:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5336:	f008 f89f 	bl	d478 <z_log_msg_static_create.constprop.0>
    533a:	46a5      	mov	sp, r4
		result = -EIO;
    533c:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    5340:	4819      	ldr	r0, [pc, #100]	; (53a8 <usb_dc_ep_write+0x140>)
    5342:	f008 f89e 	bl	d482 <k_mutex_unlock.isra.0>
	return result;
    5346:	e7bc      	b.n	52c2 <usb_dc_ep_write+0x5a>
	if (!data_len && ep_ctx->trans_zlp) {
    5348:	7fe2      	ldrb	r2, [r4, #31]
    534a:	b102      	cbz	r2, 534e <usb_dc_ep_write+0xe6>
		ep_ctx->trans_zlp = false;
    534c:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    534e:	2b00      	cmp	r3, #0
    5350:	d1d1      	bne.n	52f6 <usb_dc_ep_write+0x8e>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    5352:	f004 ffb7 	bl	a2c4 <nrfx_usbd_last_setup_dir_get>
    5356:	4580      	cmp	r8, r0
    5358:	d0cd      	beq.n	52f6 <usb_dc_ep_write+0x8e>
		nrfx_usbd_setup_clear();
    535a:	f004 ffa3 	bl	a2a4 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    535e:	4812      	ldr	r0, [pc, #72]	; (53a8 <usb_dc_ep_write+0x140>)
    5360:	f008 f88f 	bl	d482 <k_mutex_unlock.isra.0>
		return 0;
    5364:	2400      	movs	r4, #0
    5366:	e7ac      	b.n	52c2 <usb_dc_ep_write+0x5a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    5368:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    536c:	429d      	cmp	r5, r3
    536e:	d2f0      	bcs.n	5352 <usb_dc_ep_write+0xea>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    5370:	6862      	ldr	r2, [r4, #4]
    5372:	fbb5 f3f2 	udiv	r3, r5, r2
    5376:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    537a:	2b00      	cmp	r3, #0
    537c:	d1e9      	bne.n	5352 <usb_dc_ep_write+0xea>
			ep_ctx->trans_zlp = true;
    537e:	2301      	movs	r3, #1
    5380:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    5382:	e7e6      	b.n	5352 <usb_dc_ep_write+0xea>
		if (ret_bytes) {
    5384:	b106      	cbz	r6, 5388 <usb_dc_ep_write+0x120>
			*ret_bytes = data_len;
    5386:	6035      	str	r5, [r6, #0]
	int result = 0;
    5388:	2400      	movs	r4, #0
    538a:	e7d9      	b.n	5340 <usb_dc_ep_write+0xd8>
		return -ENODEV;
    538c:	f06f 0412 	mvn.w	r4, #18
    5390:	e797      	b.n	52c2 <usb_dc_ep_write+0x5a>
    5392:	bf00      	nop
    5394:	20001448 	.word	0x20001448
    5398:	0000fd43 	.word	0x0000fd43
    539c:	0000eb8c 	.word	0x0000eb8c
    53a0:	0bad0000 	.word	0x0bad0000
    53a4:	0000fd62 	.word	0x0000fd62
    53a8:	20001480 	.word	0x20001480

000053ac <usb_dc_ep_read_wait>:
{
    53ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    53b0:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    53b2:	4b2d      	ldr	r3, [pc, #180]	; (5468 <usb_dc_ep_read_wait+0xbc>)
{
    53b4:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
    53b6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    53ba:	af00      	add	r7, sp, #0
    53bc:	4681      	mov	r9, r0
    53be:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    53c0:	2a00      	cmp	r2, #0
    53c2:	d04d      	beq.n	5460 <usb_dc_ep_read_wait+0xb4>
    53c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    53c8:	2b00      	cmp	r3, #0
    53ca:	d049      	beq.n	5460 <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    53cc:	f010 0f80 	tst.w	r0, #128	; 0x80
    53d0:	d119      	bne.n	5406 <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
    53d2:	b911      	cbnz	r1, 53da <usb_dc_ep_read_wait+0x2e>
    53d4:	f1b8 0f00 	cmp.w	r8, #0
    53d8:	d115      	bne.n	5406 <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
    53da:	4648      	mov	r0, r9
    53dc:	f7ff f9b6 	bl	474c <endpoint_ctx>
	if (!ep_ctx) {
    53e0:	4604      	mov	r4, r0
    53e2:	b180      	cbz	r0, 5406 <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
    53e4:	7a03      	ldrb	r3, [r0, #8]
    53e6:	b98b      	cbnz	r3, 540c <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    53e8:	466c      	mov	r4, sp
    53ea:	b088      	sub	sp, #32
    53ec:	466a      	mov	r2, sp
    53ee:	4b1f      	ldr	r3, [pc, #124]	; (546c <usb_dc_ep_read_wait+0xc0>)
    53f0:	481f      	ldr	r0, [pc, #124]	; (5470 <usb_dc_ep_read_wait+0xc4>)
    53f2:	e9c2 3905 	strd	r3, r9, [r2, #20]
    53f6:	2303      	movs	r3, #3
    53f8:	f842 3f10 	str.w	r3, [r2, #16]!
    53fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5400:	f008 f83a 	bl	d478 <z_log_msg_static_create.constprop.0>
    5404:	46a5      	mov	sp, r4
		return -EINVAL;
    5406:	f06f 0015 	mvn.w	r0, #21
    540a:	e015      	b.n	5438 <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    540c:	f04f 33ff 	mov.w	r3, #4294967295
    5410:	4818      	ldr	r0, [pc, #96]	; (5474 <usb_dc_ep_read_wait+0xc8>)
    5412:	f04f 32ff 	mov.w	r2, #4294967295
    5416:	f008 f832 	bl	d47e <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    541a:	68e3      	ldr	r3, [r4, #12]
    541c:	4598      	cmp	r8, r3
    541e:	46c1      	mov	r9, r8
    5420:	bf28      	it	cs
    5422:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
    5424:	b95e      	cbnz	r6, 543e <usb_dc_ep_read_wait+0x92>
    5426:	f1b8 0f00 	cmp.w	r8, #0
    542a:	d108      	bne.n	543e <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
    542c:	b105      	cbz	r5, 5430 <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
    542e:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    5430:	4810      	ldr	r0, [pc, #64]	; (5474 <usb_dc_ep_read_wait+0xc8>)
    5432:	f008 f826 	bl	d482 <k_mutex_unlock.isra.0>
		return 0;
    5436:	2000      	movs	r0, #0
}
    5438:	46bd      	mov	sp, r7
    543a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    543e:	69a1      	ldr	r1, [r4, #24]
    5440:	464a      	mov	r2, r9
    5442:	4630      	mov	r0, r6
    5444:	f007 ffdc 	bl	d400 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    5448:	69a3      	ldr	r3, [r4, #24]
    544a:	444b      	add	r3, r9
    544c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    544e:	68e3      	ldr	r3, [r4, #12]
    5450:	eba3 0309 	sub.w	r3, r3, r9
    5454:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    5456:	2d00      	cmp	r5, #0
    5458:	d0ea      	beq.n	5430 <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
    545a:	f8c5 9000 	str.w	r9, [r5]
    545e:	e7e7      	b.n	5430 <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
    5460:	f06f 0012 	mvn.w	r0, #18
    5464:	e7e8      	b.n	5438 <usb_dc_ep_read_wait+0x8c>
    5466:	bf00      	nop
    5468:	20001448 	.word	0x20001448
    546c:	0000fd43 	.word	0x0000fd43
    5470:	0000eb8c 	.word	0x0000eb8c
    5474:	20001480 	.word	0x20001480

00005478 <usb_dc_ep_read_continue>:
{
    5478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    547a:	4d27      	ldr	r5, [pc, #156]	; (5518 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    547c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    5480:	af00      	add	r7, sp, #0
    5482:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
    5484:	2b00      	cmp	r3, #0
    5486:	d044      	beq.n	5512 <usb_dc_ep_read_continue+0x9a>
    5488:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    548c:	2b00      	cmp	r3, #0
    548e:	d040      	beq.n	5512 <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5490:	0603      	lsls	r3, r0, #24
    5492:	d414      	bmi.n	54be <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    5494:	f7ff f95a 	bl	474c <endpoint_ctx>
	if (!ep_ctx) {
    5498:	4604      	mov	r4, r0
    549a:	b180      	cbz	r0, 54be <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    549c:	7a03      	ldrb	r3, [r0, #8]
    549e:	b993      	cbnz	r3, 54c6 <usb_dc_ep_read_continue+0x4e>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    54a0:	466c      	mov	r4, sp
    54a2:	b088      	sub	sp, #32
    54a4:	466a      	mov	r2, sp
    54a6:	4b1d      	ldr	r3, [pc, #116]	; (551c <usb_dc_ep_read_continue+0xa4>)
    54a8:	481d      	ldr	r0, [pc, #116]	; (5520 <usb_dc_ep_read_continue+0xa8>)
    54aa:	e9c2 3605 	strd	r3, r6, [r2, #20]
    54ae:	2303      	movs	r3, #3
    54b0:	f842 3f10 	str.w	r3, [r2, #16]!
    54b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    54b8:	f007 ffde 	bl	d478 <z_log_msg_static_create.constprop.0>
    54bc:	46a5      	mov	sp, r4
		return -EINVAL;
    54be:	f06f 0015 	mvn.w	r0, #21
}
    54c2:	46bd      	mov	sp, r7
    54c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    54c6:	f04f 33ff 	mov.w	r3, #4294967295
    54ca:	f04f 32ff 	mov.w	r2, #4294967295
    54ce:	f105 0038 	add.w	r0, r5, #56	; 0x38
    54d2:	f007 ffd4 	bl	d47e <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    54d6:	68e3      	ldr	r3, [r4, #12]
    54d8:	b9b3      	cbnz	r3, 5508 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    54da:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    54dc:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    54de:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    54e0:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    54e2:	7f63      	ldrb	r3, [r4, #29]
    54e4:	b183      	cbz	r3, 5508 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    54e6:	f7ff f985 	bl	47f4 <usbd_evt_alloc>
			if (!ev) {
    54ea:	b930      	cbnz	r0, 54fa <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    54ec:	f105 0038 	add.w	r0, r5, #56	; 0x38
    54f0:	f007 ffc7 	bl	d482 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    54f4:	f06f 000b 	mvn.w	r0, #11
    54f8:	e7e3      	b.n	54c2 <usb_dc_ep_read_continue+0x4a>
			ev->evt_type = USBD_EVT_EP;
    54fa:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    54fc:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    54fe:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    5500:	f7ff f95c 	bl	47bc <usbd_evt_put>
			usbd_work_schedule();
    5504:	f7ff f952 	bl	47ac <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    5508:	4806      	ldr	r0, [pc, #24]	; (5524 <usb_dc_ep_read_continue+0xac>)
    550a:	f007 ffba 	bl	d482 <k_mutex_unlock.isra.0>
	return 0;
    550e:	2000      	movs	r0, #0
    5510:	e7d7      	b.n	54c2 <usb_dc_ep_read_continue+0x4a>
		return -ENODEV;
    5512:	f06f 0012 	mvn.w	r0, #18
    5516:	e7d4      	b.n	54c2 <usb_dc_ep_read_continue+0x4a>
    5518:	20001448 	.word	0x20001448
    551c:	0000fd43 	.word	0x0000fd43
    5520:	0000eb8c 	.word	0x0000eb8c
    5524:	20001480 	.word	0x20001480

00005528 <usb_dc_ep_set_callback>:
{
    5528:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    552a:	4b08      	ldr	r3, [pc, #32]	; (554c <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    552c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    5530:	460c      	mov	r4, r1
	if (!dev_attached()) {
    5532:	b12b      	cbz	r3, 5540 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    5534:	f7ff f90a 	bl	474c <endpoint_ctx>
	if (!ep_ctx) {
    5538:	b128      	cbz	r0, 5546 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    553a:	6004      	str	r4, [r0, #0]
	return 0;
    553c:	2000      	movs	r0, #0
}
    553e:	bd10      	pop	{r4, pc}
		return -ENODEV;
    5540:	f06f 0012 	mvn.w	r0, #18
    5544:	e7fb      	b.n	553e <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    5546:	f06f 0015 	mvn.w	r0, #21
    554a:	e7f8      	b.n	553e <usb_dc_ep_set_callback+0x16>
    554c:	20001448 	.word	0x20001448

00005550 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    5550:	4b01      	ldr	r3, [pc, #4]	; (5558 <usb_dc_set_status_callback+0x8>)
    5552:	6018      	str	r0, [r3, #0]
}
    5554:	4770      	bx	lr
    5556:	bf00      	nop
    5558:	20001448 	.word	0x20001448

0000555c <usb_dc_ep_mps>:
{
    555c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    555e:	4b07      	ldr	r3, [pc, #28]	; (557c <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    5560:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5564:	b123      	cbz	r3, 5570 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    5566:	f7ff f8f1 	bl	474c <endpoint_ctx>
	if (!ep_ctx) {
    556a:	b120      	cbz	r0, 5576 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    556c:	6840      	ldr	r0, [r0, #4]
}
    556e:	bd08      	pop	{r3, pc}
		return -ENODEV;
    5570:	f06f 0012 	mvn.w	r0, #18
    5574:	e7fb      	b.n	556e <usb_dc_ep_mps+0x12>
		return -EINVAL;
    5576:	f06f 0015 	mvn.w	r0, #21
    557a:	e7f8      	b.n	556e <usb_dc_ep_mps+0x12>
    557c:	20001448 	.word	0x20001448

00005580 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5580:	4b08      	ldr	r3, [pc, #32]	; (55a4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5582:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5584:	1ac3      	subs	r3, r0, r3
{
    5586:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5588:	4907      	ldr	r1, [pc, #28]	; (55a8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    558a:	109b      	asrs	r3, r3, #2
{
    558c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    558e:	4359      	muls	r1, r3
    5590:	4806      	ldr	r0, [pc, #24]	; (55ac <onoff_stop+0x2c>)
    5592:	2240      	movs	r2, #64	; 0x40
    5594:	f007 ffbb 	bl	d50e <stop>
	notify(mgr, res);
    5598:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    559a:	4601      	mov	r1, r0
	notify(mgr, res);
    559c:	4620      	mov	r0, r4
}
    559e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    55a2:	4718      	bx	r3
    55a4:	20001cec 	.word	0x20001cec
    55a8:	b6db6db7 	.word	0xb6db6db7
    55ac:	0000e87c 	.word	0x0000e87c

000055b0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    55b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    55b2:	4c0c      	ldr	r4, [pc, #48]	; (55e4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    55b4:	4a0c      	ldr	r2, [pc, #48]	; (55e8 <onoff_start+0x38>)
    55b6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    55b8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    55ba:	9300      	str	r3, [sp, #0]
{
    55bc:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    55be:	460b      	mov	r3, r1
    55c0:	490a      	ldr	r1, [pc, #40]	; (55ec <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    55c2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    55c4:	4361      	muls	r1, r4
{
    55c6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    55c8:	4809      	ldr	r0, [pc, #36]	; (55f0 <onoff_start+0x40>)
    55ca:	f007 ffcc 	bl	d566 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    55ce:	1e01      	subs	r1, r0, #0
    55d0:	da05      	bge.n	55de <onoff_start+0x2e>
		notify(mgr, err);
    55d2:	4630      	mov	r0, r6
    55d4:	462b      	mov	r3, r5
	}
}
    55d6:	b002      	add	sp, #8
    55d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    55dc:	4718      	bx	r3
}
    55de:	b002      	add	sp, #8
    55e0:	bd70      	pop	{r4, r5, r6, pc}
    55e2:	bf00      	nop
    55e4:	20001cec 	.word	0x20001cec
    55e8:	0000d5d1 	.word	0x0000d5d1
    55ec:	b6db6db7 	.word	0xb6db6db7
    55f0:	0000e87c 	.word	0x0000e87c

000055f4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    55f4:	2200      	movs	r2, #0
{
    55f6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    55f8:	2101      	movs	r1, #1
{
    55fa:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    55fc:	4610      	mov	r0, r2
    55fe:	f7fe fb49 	bl	3c94 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5602:	480f      	ldr	r0, [pc, #60]	; (5640 <clk_init+0x4c>)
    5604:	f003 fb0c 	bl	8c20 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5608:	4b0e      	ldr	r3, [pc, #56]	; (5644 <clk_init+0x50>)
    560a:	4298      	cmp	r0, r3
    560c:	d115      	bne.n	563a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    560e:	f003 fb17 	bl	8c40 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    5612:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5614:	490c      	ldr	r1, [pc, #48]	; (5648 <clk_init+0x54>)
    5616:	4630      	mov	r0, r6
    5618:	f007 f88d 	bl	c736 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    561c:	2800      	cmp	r0, #0
    561e:	db0b      	blt.n	5638 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5620:	2501      	movs	r5, #1
    5622:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    5624:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5626:	4908      	ldr	r1, [pc, #32]	; (5648 <clk_init+0x54>)
    5628:	f104 001c 	add.w	r0, r4, #28
    562c:	f007 f883 	bl	c736 <onoff_manager_init>
		if (err < 0) {
    5630:	2800      	cmp	r0, #0
    5632:	db01      	blt.n	5638 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5634:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    5636:	2000      	movs	r0, #0
}
    5638:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    563a:	f06f 0004 	mvn.w	r0, #4
    563e:	e7fb      	b.n	5638 <clk_init+0x44>
    5640:	00005681 	.word	0x00005681
    5644:	0bad0000 	.word	0x0bad0000
    5648:	0000ecf0 	.word	0x0000ecf0

0000564c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    564c:	b570      	push	{r4, r5, r6, lr}
    564e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    5650:	230c      	movs	r3, #12
    5652:	4809      	ldr	r0, [pc, #36]	; (5678 <clkstarted_handle.constprop.0+0x2c>)
    5654:	434b      	muls	r3, r1
    5656:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    5658:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    565c:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    565e:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    5660:	4418      	add	r0, r3
	sub_data->cb = NULL;
    5662:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    5664:	f007 ff40 	bl	d4e8 <set_on_state>
	if (callback) {
    5668:	b12d      	cbz	r5, 5676 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    566a:	4632      	mov	r2, r6
    566c:	462b      	mov	r3, r5
    566e:	4803      	ldr	r0, [pc, #12]	; (567c <clkstarted_handle.constprop.0+0x30>)
}
    5670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5674:	4718      	bx	r3
}
    5676:	bd70      	pop	{r4, r5, r6, pc}
    5678:	20001cec 	.word	0x20001cec
    567c:	0000e87c 	.word	0x0000e87c

00005680 <clock_event_handler>:
	switch (event) {
    5680:	b110      	cbz	r0, 5688 <clock_event_handler+0x8>
    5682:	2801      	cmp	r0, #1
    5684:	d004      	beq.n	5690 <clock_event_handler+0x10>
    5686:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5688:	4b03      	ldr	r3, [pc, #12]	; (5698 <clock_event_handler+0x18>)
    568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    568c:	075b      	lsls	r3, r3, #29
    568e:	d101      	bne.n	5694 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5690:	f7ff bfdc 	b.w	564c <clkstarted_handle.constprop.0>
}
    5694:	4770      	bx	lr
    5696:	bf00      	nop
    5698:	20001cec 	.word	0x20001cec

0000569c <generic_hfclk_start>:
{
    569c:	b508      	push	{r3, lr}
	__asm__ volatile(
    569e:	f04f 0320 	mov.w	r3, #32
    56a2:	f3ef 8111 	mrs	r1, BASEPRI
    56a6:	f383 8812 	msr	BASEPRI_MAX, r3
    56aa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    56ae:	4a12      	ldr	r2, [pc, #72]	; (56f8 <generic_hfclk_start+0x5c>)
    56b0:	6813      	ldr	r3, [r2, #0]
    56b2:	f043 0002 	orr.w	r0, r3, #2
    56b6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    56b8:	07da      	lsls	r2, r3, #31
    56ba:	d408      	bmi.n	56ce <generic_hfclk_start+0x32>
	__asm__ volatile(
    56bc:	f381 8811 	msr	BASEPRI, r1
    56c0:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    56c4:	2001      	movs	r0, #1
}
    56c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    56ca:	f008 ba01 	b.w	dad0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    56ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56d2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    56d6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    56da:	07d3      	lsls	r3, r2, #31
    56dc:	d5ee      	bpl.n	56bc <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    56de:	4807      	ldr	r0, [pc, #28]	; (56fc <generic_hfclk_start+0x60>)
    56e0:	f007 ff02 	bl	d4e8 <set_on_state>
    56e4:	f381 8811 	msr	BASEPRI, r1
    56e8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    56ec:	2000      	movs	r0, #0
}
    56ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    56f2:	f7ff bfab 	b.w	564c <clkstarted_handle.constprop.0>
    56f6:	bf00      	nop
    56f8:	20001d3c 	.word	0x20001d3c
    56fc:	20001d2c 	.word	0x20001d2c

00005700 <api_blocking_start>:
{
    5700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5702:	2200      	movs	r2, #0
    5704:	2301      	movs	r3, #1
    5706:	e9cd 2302 	strd	r2, r3, [sp, #8]
    570a:	ab04      	add	r3, sp, #16
    570c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5710:	4a09      	ldr	r2, [pc, #36]	; (5738 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5712:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5716:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5718:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    571c:	f007 ff51 	bl	d5c2 <api_start>
	if (err < 0) {
    5720:	2800      	cmp	r0, #0
    5722:	db05      	blt.n	5730 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    5724:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5728:	2300      	movs	r3, #0
    572a:	4668      	mov	r0, sp
    572c:	f005 fb5e 	bl	adec <z_impl_k_sem_take>
}
    5730:	b007      	add	sp, #28
    5732:	f85d fb04 	ldr.w	pc, [sp], #4
    5736:	bf00      	nop
    5738:	0000d5ef 	.word	0x0000d5ef

0000573c <generic_hfclk_stop>:
{
    573c:	b510      	push	{r4, lr}
	__asm__ volatile(
    573e:	f04f 0320 	mov.w	r3, #32
    5742:	f3ef 8411 	mrs	r4, BASEPRI
    5746:	f383 8812 	msr	BASEPRI_MAX, r3
    574a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    574e:	4a07      	ldr	r2, [pc, #28]	; (576c <generic_hfclk_stop+0x30>)
    5750:	6813      	ldr	r3, [r2, #0]
    5752:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    5756:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    5758:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    575a:	d402      	bmi.n	5762 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    575c:	2001      	movs	r0, #1
    575e:	f008 f9f3 	bl	db48 <nrfx_clock_stop>
	__asm__ volatile(
    5762:	f384 8811 	msr	BASEPRI, r4
    5766:	f3bf 8f6f 	isb	sy
}
    576a:	bd10      	pop	{r4, pc}
    576c:	20001d3c 	.word	0x20001d3c

00005770 <z_nrf_clock_control_get_onoff>:
}
    5770:	4a02      	ldr	r2, [pc, #8]	; (577c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    5772:	b2c3      	uxtb	r3, r0
}
    5774:	201c      	movs	r0, #28
    5776:	fb03 2000 	mla	r0, r3, r0, r2
    577a:	4770      	bx	lr
    577c:	20001cec 	.word	0x20001cec

00005780 <z_nrf_clock_control_lf_on>:
{
    5780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5784:	4938      	ldr	r1, [pc, #224]	; (5868 <z_nrf_clock_control_lf_on+0xe8>)
    5786:	f3bf 8f5b 	dmb	ish
    578a:	4607      	mov	r7, r0
    578c:	2201      	movs	r2, #1
    578e:	e851 3f00 	ldrex	r3, [r1]
    5792:	e841 2000 	strex	r0, r2, [r1]
    5796:	2800      	cmp	r0, #0
    5798:	d1f9      	bne.n	578e <z_nrf_clock_control_lf_on+0xe>
    579a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    579e:	b933      	cbnz	r3, 57ae <z_nrf_clock_control_lf_on+0x2e>
    57a0:	4932      	ldr	r1, [pc, #200]	; (586c <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    57a2:	4833      	ldr	r0, [pc, #204]	; (5870 <z_nrf_clock_control_lf_on+0xf0>)
    57a4:	604b      	str	r3, [r1, #4]
    57a6:	60cb      	str	r3, [r1, #12]
    57a8:	608a      	str	r2, [r1, #8]
    57aa:	f006 ffd7 	bl	c75c <onoff_request>
	switch (start_mode) {
    57ae:	1e7b      	subs	r3, r7, #1
    57b0:	2b01      	cmp	r3, #1
    57b2:	d82b      	bhi.n	580c <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    57b4:	2f01      	cmp	r7, #1
    57b6:	d107      	bne.n	57c8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    57b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57bc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    57c0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    57c4:	2b01      	cmp	r3, #1
    57c6:	d021      	beq.n	580c <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    57c8:	f008 fb9a 	bl	df00 <k_is_in_isr>
    57cc:	4605      	mov	r5, r0
    57ce:	b9f8      	cbnz	r0, 5810 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    57d0:	4b28      	ldr	r3, [pc, #160]	; (5874 <z_nrf_clock_control_lf_on+0xf4>)
    57d2:	781b      	ldrb	r3, [r3, #0]
    57d4:	b1e3      	cbz	r3, 5810 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    57d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57da:	2202      	movs	r2, #2
    57dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    57e0:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57e2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5878 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    57e6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    57ea:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    57ee:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    57f2:	03d2      	lsls	r2, r2, #15
    57f4:	d516      	bpl.n	5824 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    57f6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    57fa:	2b01      	cmp	r3, #1
    57fc:	d001      	beq.n	5802 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    57fe:	2f01      	cmp	r7, #1
    5800:	d110      	bne.n	5824 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    5802:	b35d      	cbz	r5, 585c <z_nrf_clock_control_lf_on+0xdc>
    5804:	f386 8811 	msr	BASEPRI, r6
    5808:	f3bf 8f6f 	isb	sy
}
    580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    5810:	f04f 0320 	mov.w	r3, #32
    5814:	f3ef 8611 	mrs	r6, BASEPRI
    5818:	f383 8812 	msr	BASEPRI_MAX, r3
    581c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5820:	2501      	movs	r5, #1
    5822:	e7de      	b.n	57e2 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5824:	b1ad      	cbz	r5, 5852 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5826:	4630      	mov	r0, r6
    5828:	f7fe f992 	bl	3b50 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    582c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5830:	2b00      	cmp	r3, #0
    5832:	d1da      	bne.n	57ea <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5834:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    5838:	2a00      	cmp	r2, #0
    583a:	d0d6      	beq.n	57ea <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    583c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    5840:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    5844:	2301      	movs	r3, #1
    5846:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    584a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    584e:	60a3      	str	r3, [r4, #8]
}
    5850:	e7cb      	b.n	57ea <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    5852:	2100      	movs	r1, #0
    5854:	2021      	movs	r0, #33	; 0x21
    5856:	f005 ff33 	bl	b6c0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    585a:	e7e7      	b.n	582c <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    585c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5860:	2202      	movs	r2, #2
    5862:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5866:	e7d1      	b.n	580c <z_nrf_clock_control_lf_on+0x8c>
    5868:	20001ce8 	.word	0x20001ce8
    586c:	20001cd8 	.word	0x20001cd8
    5870:	20001d08 	.word	0x20001d08
    5874:	2000252b 	.word	0x2000252b
    5878:	e000e100 	.word	0xe000e100

0000587c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    587c:	b508      	push	{r3, lr}
    587e:	4807      	ldr	r0, [pc, #28]	; (589c <uart_console_init+0x20>)
    5880:	f008 fae2 	bl	de48 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    5884:	b138      	cbz	r0, 5896 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    5886:	4806      	ldr	r0, [pc, #24]	; (58a0 <uart_console_init+0x24>)
    5888:	f7fe ff22 	bl	46d0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    588c:	4804      	ldr	r0, [pc, #16]	; (58a0 <uart_console_init+0x24>)
    588e:	f7fb fa0d 	bl	cac <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    5892:	2000      	movs	r0, #0
}
    5894:	bd08      	pop	{r3, pc}
		return -ENODEV;
    5896:	f06f 0012 	mvn.w	r0, #18
    589a:	e7fb      	b.n	5894 <uart_console_init+0x18>
    589c:	0000e8c4 	.word	0x0000e8c4
    58a0:	000058a5 	.word	0x000058a5

000058a4 <console_out>:
	if ('\n' == c) {
    58a4:	280a      	cmp	r0, #10
{
    58a6:	b538      	push	{r3, r4, r5, lr}
    58a8:	4d07      	ldr	r5, [pc, #28]	; (58c8 <console_out+0x24>)
    58aa:	4604      	mov	r4, r0
	if ('\n' == c) {
    58ac:	d104      	bne.n	58b8 <console_out+0x14>
    58ae:	68ab      	ldr	r3, [r5, #8]
    58b0:	210d      	movs	r1, #13
    58b2:	685b      	ldr	r3, [r3, #4]
    58b4:	4628      	mov	r0, r5
    58b6:	4798      	blx	r3
    58b8:	68ab      	ldr	r3, [r5, #8]
    58ba:	4803      	ldr	r0, [pc, #12]	; (58c8 <console_out+0x24>)
    58bc:	685b      	ldr	r3, [r3, #4]
    58be:	b2e1      	uxtb	r1, r4
    58c0:	4798      	blx	r3
}
    58c2:	4620      	mov	r0, r4
    58c4:	bd38      	pop	{r3, r4, r5, pc}
    58c6:	bf00      	nop
    58c8:	0000e8c4 	.word	0x0000e8c4

000058cc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    58cc:	b530      	push	{r4, r5, lr}
	return port->config;
    58ce:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    58d0:	7b05      	ldrb	r5, [r0, #12]
    58d2:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    58d6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    58da:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    58dc:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    58e0:	d105      	bne.n	58ee <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    58e2:	4620      	mov	r0, r4
    58e4:	f003 fc30 	bl	9148 <nrfx_gpiote_trigger_disable>

		return 0;
    58e8:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    58ea:	b005      	add	sp, #20
    58ec:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    58ee:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    58f0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    58f4:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    58f8:	d114      	bne.n	5924 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    58fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    58fe:	bf0c      	ite	eq
    5900:	2304      	moveq	r3, #4
    5902:	2305      	movne	r3, #5
    5904:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5908:	2300      	movs	r3, #0
    590a:	4619      	mov	r1, r3
    590c:	aa02      	add	r2, sp, #8
    590e:	4620      	mov	r0, r4
    5910:	f003 fa58 	bl	8dc4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5914:	4b1f      	ldr	r3, [pc, #124]	; (5994 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    5916:	4298      	cmp	r0, r3
    5918:	d139      	bne.n	598e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    591a:	2101      	movs	r1, #1
    591c:	4620      	mov	r0, r4
    591e:	f003 fbcb 	bl	90b8 <nrfx_gpiote_trigger_enable>
	return 0;
    5922:	e7e1      	b.n	58e8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5924:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    5928:	d026      	beq.n	5978 <gpio_nrfx_pin_interrupt_configure+0xac>
    592a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    592e:	bf14      	ite	ne
    5930:	2301      	movne	r3, #1
    5932:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5934:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5938:	6883      	ldr	r3, [r0, #8]
    593a:	40cb      	lsrs	r3, r1
    593c:	07d9      	lsls	r1, r3, #31
    593e:	d4e3      	bmi.n	5908 <gpio_nrfx_pin_interrupt_configure+0x3c>
    5940:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    5944:	d1e0      	bne.n	5908 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    5946:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    5948:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    594a:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    594e:	4a12      	ldr	r2, [pc, #72]	; (5998 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5950:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    5954:	bf18      	it	ne
    5956:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    595a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    595e:	07db      	lsls	r3, r3, #31
    5960:	d4d2      	bmi.n	5908 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5962:	f10d 0507 	add.w	r5, sp, #7
    5966:	4629      	mov	r1, r5
    5968:	4620      	mov	r0, r4
    596a:	f003 fb51 	bl	9010 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    596e:	4b0b      	ldr	r3, [pc, #44]	; (599c <gpio_nrfx_pin_interrupt_configure+0xd0>)
    5970:	4298      	cmp	r0, r3
    5972:	d003      	beq.n	597c <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    5974:	9503      	str	r5, [sp, #12]
    5976:	e7c7      	b.n	5908 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5978:	2303      	movs	r3, #3
    597a:	e7db      	b.n	5934 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    597c:	4628      	mov	r0, r5
    597e:	f003 fb95 	bl	90ac <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5982:	4b04      	ldr	r3, [pc, #16]	; (5994 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    5984:	4298      	cmp	r0, r3
    5986:	d0f5      	beq.n	5974 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    5988:	f06f 000b 	mvn.w	r0, #11
    598c:	e7ad      	b.n	58ea <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    598e:	f06f 0015 	mvn.w	r0, #21
    5992:	e7aa      	b.n	58ea <gpio_nrfx_pin_interrupt_configure+0x1e>
    5994:	0bad0000 	.word	0x0bad0000
    5998:	50000300 	.word	0x50000300
    599c:	0bad0004 	.word	0x0bad0004

000059a0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    59a0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    59a2:	f003 fb73 	bl	908c <nrfx_gpiote_is_init>
    59a6:	4604      	mov	r4, r0
    59a8:	b968      	cbnz	r0, 59c6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    59aa:	f003 fb47 	bl	903c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    59ae:	4b08      	ldr	r3, [pc, #32]	; (59d0 <gpio_nrfx_init+0x30>)
    59b0:	4298      	cmp	r0, r3
    59b2:	d10a      	bne.n	59ca <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    59b4:	4807      	ldr	r0, [pc, #28]	; (59d4 <gpio_nrfx_init+0x34>)
    59b6:	4621      	mov	r1, r4
    59b8:	f003 fb24 	bl	9004 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    59bc:	4622      	mov	r2, r4
    59be:	2105      	movs	r1, #5
    59c0:	2006      	movs	r0, #6
    59c2:	f7fe f967 	bl	3c94 <z_arm_irq_priority_set>
		return 0;
    59c6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    59c8:	bd10      	pop	{r4, pc}
		return -EIO;
    59ca:	f06f 0004 	mvn.w	r0, #4
    59ce:	e7fb      	b.n	59c8 <gpio_nrfx_init+0x28>
    59d0:	0bad0000 	.word	0x0bad0000
    59d4:	000059d9 	.word	0x000059d9

000059d8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    59d8:	0942      	lsrs	r2, r0, #5
{
    59da:	b570      	push	{r4, r5, r6, lr}
    59dc:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    59de:	d002      	beq.n	59e6 <nrfx_gpio_handler+0xe>
    59e0:	2a01      	cmp	r2, #1
    59e2:	d017      	beq.n	5a14 <nrfx_gpio_handler+0x3c>
}
    59e4:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    59e6:	4e0d      	ldr	r6, [pc, #52]	; (5a1c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    59e8:	6932      	ldr	r2, [r6, #16]
    59ea:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    59ec:	2900      	cmp	r1, #0
    59ee:	d0f9      	beq.n	59e4 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    59f0:	f003 031f 	and.w	r3, r3, #31
    59f4:	2501      	movs	r5, #1
	return node->next;
    59f6:	680c      	ldr	r4, [r1, #0]
    59f8:	409d      	lsls	r5, r3
    59fa:	2900      	cmp	r1, #0
    59fc:	d0f2      	beq.n	59e4 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    59fe:	688a      	ldr	r2, [r1, #8]
    5a00:	402a      	ands	r2, r5
    5a02:	d002      	beq.n	5a0a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5a04:	684b      	ldr	r3, [r1, #4]
    5a06:	4630      	mov	r0, r6
    5a08:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5a0a:	b12c      	cbz	r4, 5a18 <nrfx_gpio_handler+0x40>
    5a0c:	6823      	ldr	r3, [r4, #0]
    5a0e:	4621      	mov	r1, r4
    5a10:	461c      	mov	r4, r3
    5a12:	e7f2      	b.n	59fa <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5a14:	4e02      	ldr	r6, [pc, #8]	; (5a20 <nrfx_gpio_handler+0x48>)
    5a16:	e7e7      	b.n	59e8 <nrfx_gpio_handler+0x10>
    5a18:	4623      	mov	r3, r4
    5a1a:	e7f8      	b.n	5a0e <nrfx_gpio_handler+0x36>
    5a1c:	0000e8ac 	.word	0x0000e8ac
    5a20:	0000e894 	.word	0x0000e894

00005a24 <gpio_nrfx_pin_configure>:
{
    5a24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    5a28:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5a2a:	7b3b      	ldrb	r3, [r7, #12]
    5a2c:	f001 051f 	and.w	r5, r1, #31
    5a30:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    5a34:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5a36:	4628      	mov	r0, r5
    5a38:	f10d 0103 	add.w	r1, sp, #3
{
    5a3c:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5a3e:	f003 fae7 	bl	9010 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    5a42:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5a46:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    5a48:	d10b      	bne.n	5a62 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    5a4a:	4628      	mov	r0, r5
    5a4c:	f003 fba4 	bl	9198 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    5a50:	4b3d      	ldr	r3, [pc, #244]	; (5b48 <gpio_nrfx_pin_configure+0x124>)
    5a52:	4598      	cmp	r8, r3
    5a54:	d103      	bne.n	5a5e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    5a56:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5a5a:	f003 fb21 	bl	90a0 <nrfx_gpiote_channel_free>
		return 0;
    5a5e:	2000      	movs	r0, #0
    5a60:	e00c      	b.n	5a7c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5a62:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5a64:	4619      	mov	r1, r3
    5a66:	aa02      	add	r2, sp, #8
    5a68:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    5a6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5a6e:	f003 f9a9 	bl	8dc4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5a72:	4b35      	ldr	r3, [pc, #212]	; (5b48 <gpio_nrfx_pin_configure+0x124>)
    5a74:	4298      	cmp	r0, r3
    5a76:	d004      	beq.n	5a82 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    5a78:	f06f 0015 	mvn.w	r0, #21
}
    5a7c:	b004      	add	sp, #16
    5a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    5a82:	4580      	cmp	r8, r0
    5a84:	d103      	bne.n	5a8e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    5a86:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5a8a:	f003 fb09 	bl	90a0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    5a8e:	03a3      	lsls	r3, r4, #14
    5a90:	d54b      	bpl.n	5b2a <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5a92:	f240 3306 	movw	r3, #774	; 0x306
    5a96:	4023      	ands	r3, r4
    5a98:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    5a9c:	d019      	beq.n	5ad2 <gpio_nrfx_pin_configure+0xae>
    5a9e:	d80c      	bhi.n	5aba <gpio_nrfx_pin_configure+0x96>
    5aa0:	2b06      	cmp	r3, #6
    5aa2:	d017      	beq.n	5ad4 <gpio_nrfx_pin_configure+0xb0>
    5aa4:	d804      	bhi.n	5ab0 <gpio_nrfx_pin_configure+0x8c>
    5aa6:	b1ab      	cbz	r3, 5ad4 <gpio_nrfx_pin_configure+0xb0>
    5aa8:	2b02      	cmp	r3, #2
    5aaa:	d1e5      	bne.n	5a78 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    5aac:	2304      	movs	r3, #4
    5aae:	e011      	b.n	5ad4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5ab4:	d1e0      	bne.n	5a78 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    5ab6:	2301      	movs	r3, #1
    5ab8:	e00c      	b.n	5ad4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5aba:	f240 2202 	movw	r2, #514	; 0x202
    5abe:	4293      	cmp	r3, r2
    5ac0:	d027      	beq.n	5b12 <gpio_nrfx_pin_configure+0xee>
    5ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5ac6:	d026      	beq.n	5b16 <gpio_nrfx_pin_configure+0xf2>
    5ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5acc:	d1d4      	bne.n	5a78 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    5ace:	2302      	movs	r3, #2
    5ad0:	e000      	b.n	5ad4 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    5ad2:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    5ad4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5ad8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5adc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    5ae0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    5ae2:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    5ae6:	bf54      	ite	pl
    5ae8:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5aec:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5aee:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    5af0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5af4:	d511      	bpl.n	5b1a <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5af6:	687a      	ldr	r2, [r7, #4]
    5af8:	2301      	movs	r3, #1
    5afa:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    5afc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5b00:	2200      	movs	r2, #0
    5b02:	a901      	add	r1, sp, #4
    5b04:	4628      	mov	r0, r5
    5b06:	f003 fa0b 	bl	8f20 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5b0a:	4b0f      	ldr	r3, [pc, #60]	; (5b48 <gpio_nrfx_pin_configure+0x124>)
    5b0c:	4298      	cmp	r0, r3
    5b0e:	d0a6      	beq.n	5a5e <gpio_nrfx_pin_configure+0x3a>
    5b10:	e7b2      	b.n	5a78 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    5b12:	2305      	movs	r3, #5
    5b14:	e7de      	b.n	5ad4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5b16:	2303      	movs	r3, #3
    5b18:	e7dc      	b.n	5ad4 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5b1a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5b1c:	bf41      	itttt	mi
    5b1e:	2301      	movmi	r3, #1
    5b20:	687a      	ldrmi	r2, [r7, #4]
    5b22:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    5b24:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    5b28:	e7ea      	b.n	5b00 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    5b2a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5b2c:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    5b30:	bf54      	ite	pl
    5b32:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5b36:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5b38:	461a      	mov	r2, r3
    5b3a:	a901      	add	r1, sp, #4
    5b3c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    5b3e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5b42:	f003 f93f 	bl	8dc4 <nrfx_gpiote_input_configure>
    5b46:	e7e0      	b.n	5b0a <gpio_nrfx_pin_configure+0xe6>
    5b48:	0bad0000 	.word	0x0bad0000

00005b4c <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
    5b4c:	4801      	ldr	r0, [pc, #4]	; (5b54 <timer_callback+0x8>)
    5b4e:	f005 ba8d 	b.w	b06c <k_work_submit>
    5b52:	bf00      	nop
    5b54:	20000138 	.word	0x20000138

00005b58 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
    5b58:	b508      	push	{r3, lr}
	return (k_uptime_get_32() - saved_time);
    5b5a:	f007 fdb6 	bl	d6ca <k_uptime_get_32>
    5b5e:	4b02      	ldr	r3, [pc, #8]	; (5b68 <RtcGetTimerElapsedTime+0x10>)
    5b60:	681b      	ldr	r3, [r3, #0]
}
    5b62:	1ac0      	subs	r0, r0, r3
    5b64:	bd08      	pop	{r3, pc}
    5b66:	bf00      	nop
    5b68:	20001d58 	.word	0x20001d58

00005b6c <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
    5b6c:	4801      	ldr	r0, [pc, #4]	; (5b74 <RtcStopAlarm+0x8>)
    5b6e:	f008 bc5f 	b.w	e430 <z_impl_k_timer_stop>
    5b72:	bf00      	nop
    5b74:	20000328 	.word	0x20000328

00005b78 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
    5b78:	b507      	push	{r0, r1, r2, lr}
    5b7a:	4601      	mov	r1, r0
			return ((t * to_hz + off) / from_hz);
    5b7c:	f240 30e7 	movw	r0, #999	; 0x3e7
    5b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5b84:	2300      	movs	r3, #0
    5b86:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    5b8a:	0c49      	lsrs	r1, r1, #17
    5b8c:	f7fa fab8 	bl	100 <__aeabi_uldivmod>
    5b90:	4602      	mov	r2, r0
    5b92:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    5b94:	2100      	movs	r1, #0
    5b96:	2000      	movs	r0, #0
    5b98:	e9cd 0100 	strd	r0, r1, [sp]
    5b9c:	4802      	ldr	r0, [pc, #8]	; (5ba8 <RtcSetAlarm+0x30>)
    5b9e:	f006 f807 	bl	bbb0 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
    5ba2:	b003      	add	sp, #12
    5ba4:	f85d fb04 	ldr.w	pc, [sp], #4
    5ba8:	20000328 	.word	0x20000328

00005bac <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
    5bac:	b508      	push	{r3, lr}
	saved_time = k_uptime_get_32();
    5bae:	f007 fd8c 	bl	d6ca <k_uptime_get_32>
    5bb2:	4b01      	ldr	r3, [pc, #4]	; (5bb8 <RtcSetTimerContext+0xc>)
    5bb4:	6018      	str	r0, [r3, #0]

	return saved_time;
}
    5bb6:	bd08      	pop	{r3, pc}
    5bb8:	20001d58 	.word	0x20001d58

00005bbc <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
    5bbc:	4b01      	ldr	r3, [pc, #4]	; (5bc4 <RtcGetTimerContext+0x8>)
    5bbe:	6818      	ldr	r0, [r3, #0]
    5bc0:	4770      	bx	lr
    5bc2:	bf00      	nop
    5bc4:	20001d58 	.word	0x20001d58

00005bc8 <sx12xx_ev_rx_done>:
	return true;
}

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
    5bc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
    5bcc:	4c27      	ldr	r4, [pc, #156]	; (5c6c <sx12xx_ev_rx_done+0xa4>)
{
    5bce:	469a      	mov	sl, r3

	/* Receiving in asynchronous mode */
	if (dev_data.async_rx_cb) {
    5bd0:	e9d4 9301 	ldrd	r9, r3, [r4, #4]
{
    5bd4:	4607      	mov	r7, r0
    5bd6:	460d      	mov	r5, r1
    5bd8:	4616      	mov	r6, r2
	if (dev_data.async_rx_cb) {
    5bda:	b17b      	cbz	r3, 5bfc <sx12xx_ev_rx_done+0x34>
		/* Start receiving again */
		Radio.Rx(0);
    5bdc:	4b24      	ldr	r3, [pc, #144]	; (5c70 <sx12xx_ev_rx_done+0xa8>)
    5bde:	2000      	movs	r0, #0
    5be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5be2:	4798      	blx	r3
		/* Run the callback */
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
    5be4:	f8cd a000 	str.w	sl, [sp]
    5be8:	f8d4 8008 	ldr.w	r8, [r4, #8]
    5bec:	6820      	ldr	r0, [r4, #0]
    5bee:	4633      	mov	r3, r6
    5bf0:	462a      	mov	r2, r5
    5bf2:	4639      	mov	r1, r7
    5bf4:	47c0      	blx	r8
	/* Completely release modem */
	dev_data.operation_done = NULL;
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
    5bf6:	b002      	add	sp, #8
    5bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5bfc:	f104 0240 	add.w	r2, r4, #64	; 0x40
    5c00:	2302      	movs	r3, #2
    5c02:	f3bf 8f5b 	dmb	ish
    5c06:	e852 1f00 	ldrex	r1, [r2]
    5c0a:	2901      	cmp	r1, #1
    5c0c:	d103      	bne.n	5c16 <sx12xx_ev_rx_done+0x4e>
    5c0e:	e842 3000 	strex	r0, r3, [r2]
    5c12:	2800      	cmp	r0, #0
    5c14:	d1f7      	bne.n	5c06 <sx12xx_ev_rx_done+0x3e>
    5c16:	f3bf 8f5b 	dmb	ish
    5c1a:	4690      	mov	r8, r2
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
    5c1c:	d1eb      	bne.n	5bf6 <sx12xx_ev_rx_done+0x2e>
	if (size < *dev_data.rx_params.size) {
    5c1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5c20:	781a      	ldrb	r2, [r3, #0]
    5c22:	42aa      	cmp	r2, r5
		*dev_data.rx_params.size = size;
    5c24:	bf88      	it	hi
    5c26:	701d      	strbhi	r5, [r3, #0]
	       *dev_data.rx_params.size);
    5c28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	memcpy(dev_data.rx_params.buf, payload,
    5c2a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    5c2c:	781a      	ldrb	r2, [r3, #0]
    5c2e:	4639      	mov	r1, r7
    5c30:	f007 fbe6 	bl	d400 <memcpy>
	if (dev_data.rx_params.rssi) {
    5c34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5c36:	b103      	cbz	r3, 5c3a <sx12xx_ev_rx_done+0x72>
		*dev_data.rx_params.rssi = rssi;
    5c38:	801e      	strh	r6, [r3, #0]
	if (dev_data.rx_params.snr) {
    5c3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5c3c:	b10b      	cbz	r3, 5c42 <sx12xx_ev_rx_done+0x7a>
		*dev_data.rx_params.snr = snr;
    5c3e:	f883 a000 	strb.w	sl, [r3]
	Radio.Sleep();
    5c42:	4b0b      	ldr	r3, [pc, #44]	; (5c70 <sx12xx_ev_rx_done+0xa8>)
    5c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c46:	4798      	blx	r3
	dev_data.operation_done = NULL;
    5c48:	2100      	movs	r1, #0
    5c4a:	6061      	str	r1, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5c4c:	f3bf 8f5b 	dmb	ish
    5c50:	e858 3f00 	ldrex	r3, [r8]
    5c54:	e848 1200 	strex	r2, r1, [r8]
    5c58:	2a00      	cmp	r2, #0
    5c5a:	d1f9      	bne.n	5c50 <sx12xx_ev_rx_done+0x88>
    5c5c:	f3bf 8f5b 	dmb	ish
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    5c60:	4648      	mov	r0, r9
}
    5c62:	b002      	add	sp, #8
    5c64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c68:	f006 b82e 	b.w	bcc8 <z_impl_k_poll_signal_raise>
    5c6c:	20001d5c 	.word	0x20001d5c
    5c70:	0000ed8c 	.word	0x0000ed8c

00005c74 <modem_release.constprop.0>:
static bool modem_release(struct sx12xx_data *data)
    5c74:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5c76:	4c12      	ldr	r4, [pc, #72]	; (5cc0 <modem_release.constprop.0+0x4c>)
    5c78:	f3bf 8f5b 	dmb	ish
    5c7c:	2302      	movs	r3, #2
    5c7e:	e854 2f00 	ldrex	r2, [r4]
    5c82:	2a01      	cmp	r2, #1
    5c84:	d103      	bne.n	5c8e <modem_release.constprop.0+0x1a>
    5c86:	e844 3100 	strex	r1, r3, [r4]
    5c8a:	2900      	cmp	r1, #0
    5c8c:	d1f7      	bne.n	5c7e <modem_release.constprop.0+0xa>
    5c8e:	f3bf 8f5b 	dmb	ish
    5c92:	bf0c      	ite	eq
    5c94:	2001      	moveq	r0, #1
    5c96:	2000      	movne	r0, #0
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
    5c98:	d110      	bne.n	5cbc <modem_release.constprop.0+0x48>
	Radio.Sleep();
    5c9a:	4b0a      	ldr	r3, [pc, #40]	; (5cc4 <modem_release.constprop.0+0x50>)
    5c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c9e:	4798      	blx	r3
	data->operation_done = NULL;
    5ca0:	2300      	movs	r3, #0
    5ca2:	f844 3c3c 	str.w	r3, [r4, #-60]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5ca6:	f3bf 8f5b 	dmb	ish
    5caa:	e854 2f00 	ldrex	r2, [r4]
    5cae:	e844 3100 	strex	r1, r3, [r4]
    5cb2:	2900      	cmp	r1, #0
    5cb4:	d1f9      	bne.n	5caa <modem_release.constprop.0+0x36>
    5cb6:	f3bf 8f5b 	dmb	ish
	return true;
    5cba:	2001      	movs	r0, #1
}
    5cbc:	bd10      	pop	{r4, pc}
    5cbe:	bf00      	nop
    5cc0:	20001d9c 	.word	0x20001d9c
    5cc4:	0000ed8c 	.word	0x0000ed8c

00005cc8 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
    5cc8:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
    5cca:	4b06      	ldr	r3, [pc, #24]	; (5ce4 <sx12xx_ev_tx_done+0x1c>)
    5ccc:	685c      	ldr	r4, [r3, #4]

	if (modem_release(&dev_data)) {
    5cce:	f7ff ffd1 	bl	5c74 <modem_release.constprop.0>
    5cd2:	b130      	cbz	r0, 5ce2 <sx12xx_ev_tx_done+0x1a>
		/* Raise signal if provided */
		if (sig) {
    5cd4:	b12c      	cbz	r4, 5ce2 <sx12xx_ev_tx_done+0x1a>
    5cd6:	2100      	movs	r1, #0
    5cd8:	4620      	mov	r0, r4
			k_poll_signal_raise(sig, 0);
		}
	}
}
    5cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5cde:	f005 bff3 	b.w	bcc8 <z_impl_k_poll_signal_raise>
    5ce2:	bd10      	pop	{r4, pc}
    5ce4:	20001d5c 	.word	0x20001d5c

00005ce8 <__sx12xx_configure_pin>:
{
    5ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cea:	4604      	mov	r4, r0
    5cec:	af00      	add	r7, sp, #0
	if (!device_is_ready(gpio->port)) {
    5cee:	6800      	ldr	r0, [r0, #0]
{
    5cf0:	460d      	mov	r5, r1
    5cf2:	f008 f8a9 	bl	de48 <z_device_is_ready>
	if (!device_is_ready(gpio->port)) {
    5cf6:	4603      	mov	r3, r0
    5cf8:	6820      	ldr	r0, [r4, #0]
    5cfa:	b9bb      	cbnz	r3, 5d2c <__sx12xx_configure_pin+0x44>
		LOG_ERR("GPIO device not ready %s", gpio->port->name);
    5cfc:	466c      	mov	r4, sp
    5cfe:	b088      	sub	sp, #32
    5d00:	6801      	ldr	r1, [r0, #0]
    5d02:	466a      	mov	r2, sp
    5d04:	4827      	ldr	r0, [pc, #156]	; (5da4 <__sx12xx_configure_pin+0xbc>)
    5d06:	e9c2 0105 	strd	r0, r1, [r2, #20]
    5d0a:	f44f 7100 	mov.w	r1, #512	; 0x200
    5d0e:	8391      	strh	r1, [r2, #28]
    5d10:	4925      	ldr	r1, [pc, #148]	; (5da8 <__sx12xx_configure_pin+0xc0>)
    5d12:	f842 1f10 	str.w	r1, [r2, #16]!
    5d16:	4825      	ldr	r0, [pc, #148]	; (5dac <__sx12xx_configure_pin+0xc4>)
    5d18:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    5d1c:	f7fb ff52 	bl	1bc4 <z_impl_z_log_msg_static_create>
		return -ENODEV;
    5d20:	f06f 0512 	mvn.w	r5, #18
    5d24:	46a5      	mov	sp, r4
}
    5d26:	4628      	mov	r0, r5
    5d28:	46bd      	mov	sp, r7
    5d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
    5d2c:	88e3      	ldrh	r3, [r4, #6]
				  spec->pin,
    5d2e:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
    5d30:	432b      	orrs	r3, r5
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5d32:	02dd      	lsls	r5, r3, #11
	const struct gpio_driver_api *api =
    5d34:	f8d0 e008 	ldr.w	lr, [r0, #8]
	struct gpio_driver_data *data =
    5d38:	f8d0 c010 	ldr.w	ip, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5d3c:	d506      	bpl.n	5d4c <__sx12xx_configure_pin+0x64>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5d3e:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    5d42:	d003      	beq.n	5d4c <__sx12xx_configure_pin+0x64>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5d44:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5d46:	bf48      	it	mi
    5d48:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5d4c:	f8dc 5000 	ldr.w	r5, [ip]
    5d50:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5d52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5d56:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5d58:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5d5a:	bf4c      	ite	mi
    5d5c:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5d5e:	43b5      	bicpl	r5, r6
    5d60:	f8cc 5000 	str.w	r5, [ip]
	return api->pin_configure(port, pin, flags);
    5d64:	f8de 3000 	ldr.w	r3, [lr]
    5d68:	4798      	blx	r3
	if (err) {
    5d6a:	4605      	mov	r5, r0
    5d6c:	2800      	cmp	r0, #0
    5d6e:	d0da      	beq.n	5d26 <__sx12xx_configure_pin+0x3e>
		LOG_ERR("Cannot configure gpio %s %d: %d", gpio->port->name,
    5d70:	6823      	ldr	r3, [r4, #0]
    5d72:	6819      	ldr	r1, [r3, #0]
    5d74:	7923      	ldrb	r3, [r4, #4]
    5d76:	466c      	mov	r4, sp
    5d78:	b08a      	sub	sp, #40	; 0x28
    5d7a:	466a      	mov	r2, sp
    5d7c:	480c      	ldr	r0, [pc, #48]	; (5db0 <__sx12xx_configure_pin+0xc8>)
    5d7e:	e9c2 3507 	strd	r3, r5, [r2, #28]
    5d82:	f44f 7300 	mov.w	r3, #512	; 0x200
    5d86:	8493      	strh	r3, [r2, #36]	; 0x24
    5d88:	4b0a      	ldr	r3, [pc, #40]	; (5db4 <__sx12xx_configure_pin+0xcc>)
    5d8a:	e9c2 0105 	strd	r0, r1, [r2, #20]
    5d8e:	f842 3f10 	str.w	r3, [r2, #16]!
    5d92:	4806      	ldr	r0, [pc, #24]	; (5dac <__sx12xx_configure_pin+0xc4>)
    5d94:	2300      	movs	r3, #0
    5d96:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    5d9a:	f7fb ff13 	bl	1bc4 <z_impl_z_log_msg_static_create>
    5d9e:	46a5      	mov	sp, r4
		return err;
    5da0:	e7c1      	b.n	5d26 <__sx12xx_configure_pin+0x3e>
    5da2:	bf00      	nop
    5da4:	0000fdcd 	.word	0x0000fdcd
    5da8:	01000003 	.word	0x01000003
    5dac:	0000eb6c 	.word	0x0000eb6c
    5db0:	0000fde6 	.word	0x0000fde6
    5db4:	01000005 	.word	0x01000005

00005db8 <sx12xx_lora_send_async>:
	return ret;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
    5db8:	b570      	push	{r4, r5, r6, lr}
    5dba:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5dbc:	490f      	ldr	r1, [pc, #60]	; (5dfc <sx12xx_lora_send_async+0x44>)
    5dbe:	f3bf 8f5b 	dmb	ish
    5dc2:	2001      	movs	r0, #1
    5dc4:	e851 4f00 	ldrex	r4, [r1]
    5dc8:	2c00      	cmp	r4, #0
    5dca:	d103      	bne.n	5dd4 <sx12xx_lora_send_async+0x1c>
    5dcc:	e841 0600 	strex	r6, r0, [r1]
    5dd0:	2e00      	cmp	r6, #0
    5dd2:	d1f7      	bne.n	5dc4 <sx12xx_lora_send_async+0xc>
    5dd4:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
    5dd8:	d10c      	bne.n	5df4 <sx12xx_lora_send_async+0x3c>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    5dda:	4e09      	ldr	r6, [pc, #36]	; (5e00 <sx12xx_lora_send_async+0x48>)
	dev_data.operation_done = async;
    5ddc:	f841 3c3c 	str.w	r3, [r1, #-60]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    5de0:	b2d4      	uxtb	r4, r2
    5de2:	6d73      	ldr	r3, [r6, #84]	; 0x54
    5de4:	4621      	mov	r1, r4
    5de6:	4798      	blx	r3

	Radio.Send(data, data_len);
    5de8:	4628      	mov	r0, r5
    5dea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5dec:	4621      	mov	r1, r4
    5dee:	4798      	blx	r3

	return 0;
    5df0:	2000      	movs	r0, #0
}
    5df2:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
    5df4:	f06f 000f 	mvn.w	r0, #15
    5df8:	e7fb      	b.n	5df2 <sx12xx_lora_send_async+0x3a>
    5dfa:	bf00      	nop
    5dfc:	20001d9c 	.word	0x20001d9c
    5e00:	0000ed8c 	.word	0x0000ed8c

00005e04 <sx12xx_lora_send>:
{
    5e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e08:	b095      	sub	sp, #84	; 0x54
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5e0a:	2500      	movs	r5, #0
{
    5e0c:	af04      	add	r7, sp, #16
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5e0e:	1d3c      	adds	r4, r7, #4
	if (!dev_data.tx_cfg.frequency) {
    5e10:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 5f04 <sx12xx_lora_send+0x100>
{
    5e14:	4682      	mov	sl, r0
    5e16:	468b      	mov	fp, r1
    5e18:	4690      	mov	r8, r2
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    5e1a:	4629      	mov	r1, r5
    5e1c:	2210      	movs	r2, #16
    5e1e:	f107 0014 	add.w	r0, r7, #20
    5e22:	2601      	movs	r6, #1
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5e24:	e9c7 4401 	strd	r4, r4, [r7, #4]
    5e28:	e9c7 5503 	strd	r5, r5, [r7, #12]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    5e2c:	f007 faf3 	bl	d416 <memset>
    5e30:	f887 6021 	strb.w	r6, [r7, #33]	; 0x21
	if (!dev_data.tx_cfg.frequency) {
    5e34:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    5e38:	627c      	str	r4, [r7, #36]	; 0x24
	if (!dev_data.tx_cfg.frequency) {
    5e3a:	2b00      	cmp	r3, #0
    5e3c:	d05e      	beq.n	5efc <sx12xx_lora_send+0xf8>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
    5e3e:	4623      	mov	r3, r4
    5e40:	4642      	mov	r2, r8
    5e42:	4659      	mov	r1, fp
    5e44:	4650      	mov	r0, sl
    5e46:	f7ff ffb7 	bl	5db8 <sx12xx_lora_send_async>
	if (ret < 0) {
    5e4a:	1e04      	subs	r4, r0, #0
    5e4c:	db51      	blt.n	5ef2 <sx12xx_lora_send+0xee>
	air_time = Radio.TimeOnAir(MODEM_LORA,
    5e4e:	fa5f f088 	uxtb.w	r0, r8
    5e52:	f899 3036 	ldrb.w	r3, [r9, #54]	; 0x36
    5e56:	f899 2035 	ldrb.w	r2, [r9, #53]	; 0x35
    5e5a:	f899 1034 	ldrb.w	r1, [r9, #52]	; 0x34
    5e5e:	4c2a      	ldr	r4, [pc, #168]	; (5f08 <sx12xx_lora_send+0x104>)
    5e60:	9603      	str	r6, [sp, #12]
    5e62:	e9cd 5001 	strd	r5, r0, [sp, #4]
    5e66:	f8b9 0038 	ldrh.w	r0, [r9, #56]	; 0x38
    5e6a:	9000      	str	r0, [sp, #0]
    5e6c:	6a64      	ldr	r4, [r4, #36]	; 0x24
    5e6e:	4630      	mov	r0, r6
    5e70:	47a0      	blx	r4
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
    5e72:	46e9      	mov	r9, sp
    5e74:	b08a      	sub	sp, #40	; 0x28
	air_time = Radio.TimeOnAir(MODEM_LORA,
    5e76:	4604      	mov	r4, r0
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
    5e78:	aa04      	add	r2, sp, #16
    5e7a:	4b24      	ldr	r3, [pc, #144]	; (5f0c <sx12xx_lora_send+0x108>)
    5e7c:	6153      	str	r3, [r2, #20]
    5e7e:	4b24      	ldr	r3, [pc, #144]	; (5f10 <sx12xx_lora_send+0x10c>)
    5e80:	6210      	str	r0, [r2, #32]
    5e82:	e9c2 3806 	strd	r3, r8, [r2, #24]
    5e86:	2305      	movs	r3, #5
    5e88:	f842 3f10 	str.w	r3, [r2, #16]!
    5e8c:	4821      	ldr	r0, [pc, #132]	; (5f14 <sx12xx_lora_send+0x110>)
    5e8e:	462b      	mov	r3, r5
    5e90:	f44f 5124 	mov.w	r1, #10496	; 0x2900
    5e94:	f7fb fe96 	bl	1bc4 <z_impl_z_log_msg_static_create>
    5e98:	f240 30e7 	movw	r0, #999	; 0x3e7
    5e9c:	46cd      	mov	sp, r9
    5e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5ea2:	2300      	movs	r3, #0
    5ea4:	eb00 4004 	add.w	r0, r0, r4, lsl #16
    5ea8:	f3c4 410e 	ubfx	r1, r4, #16, #15
    5eac:	f7fa f928 	bl	100 <__aeabi_uldivmod>
    5eb0:	4602      	mov	r2, r0
    5eb2:	460b      	mov	r3, r1
	return z_impl_k_poll(events, num_events, timeout);
    5eb4:	4631      	mov	r1, r6
    5eb6:	f107 0014 	add.w	r0, r7, #20
    5eba:	f005 fea9 	bl	bc10 <z_impl_k_poll>
	if (ret < 0) {
    5ebe:	1e04      	subs	r4, r0, #0
    5ec0:	da17      	bge.n	5ef2 <sx12xx_lora_send+0xee>
		LOG_ERR("Packet transmission failed!");
    5ec2:	4b15      	ldr	r3, [pc, #84]	; (5f18 <sx12xx_lora_send+0x114>)
    5ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
    5ec6:	2302      	movs	r3, #2
    5ec8:	63bb      	str	r3, [r7, #56]	; 0x38
    5eca:	4812      	ldr	r0, [pc, #72]	; (5f14 <sx12xx_lora_send+0x110>)
    5ecc:	462b      	mov	r3, r5
    5ece:	f107 0238 	add.w	r2, r7, #56	; 0x38
    5ed2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5ed6:	f7fb fe75 	bl	1bc4 <z_impl_z_log_msg_static_create>
		if (!modem_release(&dev_data)) {
    5eda:	f7ff fecb 	bl	5c74 <modem_release.constprop.0>
    5ede:	b940      	cbnz	r0, 5ef2 <sx12xx_lora_send+0xee>
    5ee0:	f04f 32ff 	mov.w	r2, #4294967295
    5ee4:	f04f 33ff 	mov.w	r3, #4294967295
    5ee8:	4631      	mov	r1, r6
    5eea:	f107 0014 	add.w	r0, r7, #20
    5eee:	f005 fe8f 	bl	bc10 <z_impl_k_poll>
}
    5ef2:	4620      	mov	r0, r4
    5ef4:	3744      	adds	r7, #68	; 0x44
    5ef6:	46bd      	mov	sp, r7
    5ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    5efc:	f06f 0415 	mvn.w	r4, #21
    5f00:	e7f7      	b.n	5ef2 <sx12xx_lora_send+0xee>
    5f02:	bf00      	nop
    5f04:	20001d5c 	.word	0x20001d5c
    5f08:	0000ed8c 	.word	0x0000ed8c
    5f0c:	0000fe06 	.word	0x0000fe06
    5f10:	0000fe5b 	.word	0x0000fe5b
    5f14:	0000eb6c 	.word	0x0000eb6c
    5f18:	0000fe2f 	.word	0x0000fe2f

00005f1c <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
    5f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f1e:	b093      	sub	sp, #76	; 0x4c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5f20:	2500      	movs	r5, #0
{
    5f22:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5f26:	ac03      	add	r4, sp, #12
{
    5f28:	460f      	mov	r7, r1
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    5f2a:	2210      	movs	r2, #16
    5f2c:	4629      	mov	r1, r5
    5f2e:	a807      	add	r0, sp, #28
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    5f30:	e9cd 4403 	strd	r4, r4, [sp, #12]
    5f34:	e9cd 5505 	strd	r5, r5, [sp, #20]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    5f38:	2601      	movs	r6, #1
    5f3a:	f007 fa6c 	bl	d416 <memset>
    5f3e:	4b25      	ldr	r3, [pc, #148]	; (5fd4 <sx12xx_lora_recv+0xb8>)
    5f40:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
    5f44:	940b      	str	r4, [sp, #44]	; 0x2c
    5f46:	f3bf 8f5b 	dmb	ish
    5f4a:	e853 2f00 	ldrex	r2, [r3]
    5f4e:	42aa      	cmp	r2, r5
    5f50:	d103      	bne.n	5f5a <sx12xx_lora_recv+0x3e>
    5f52:	e843 6100 	strex	r1, r6, [r3]
    5f56:	2900      	cmp	r1, #0
    5f58:	d1f7      	bne.n	5f4a <sx12xx_lora_recv+0x2e>
    5f5a:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
    5f5e:	d135      	bne.n	5fcc <sx12xx_lora_recv+0xb0>
	dev_data.async_rx_cb = NULL;
	/* Store operation signal */
	dev_data.operation_done = &done;
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
    5f60:	f10d 0207 	add.w	r2, sp, #7
	dev_data.operation_done = &done;
    5f64:	e943 450f 	strd	r4, r5, [r3, #-60]	; 0x3c
	dev_data.rx_params.size = &size;
    5f68:	609a      	str	r2, [r3, #8]
	dev_data.rx_params.rssi = rssi;
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    5f6a:	4c1b      	ldr	r4, [pc, #108]	; (5fd8 <sx12xx_lora_recv+0xbc>)
	dev_data.rx_params.rssi = rssi;
    5f6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    5f6e:	60da      	str	r2, [r3, #12]
	dev_data.rx_params.snr = snr;
    5f70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    5f72:	611a      	str	r2, [r3, #16]
	dev_data.rx_params.buf = data;
    5f74:	605f      	str	r7, [r3, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    5f76:	21ff      	movs	r1, #255	; 0xff
    5f78:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5f7a:	4630      	mov	r0, r6
    5f7c:	4798      	blx	r3
	Radio.Rx(0);
    5f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5f80:	4628      	mov	r0, r5
    5f82:	4798      	blx	r3
    5f84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    5f88:	4631      	mov	r1, r6
    5f8a:	a807      	add	r0, sp, #28
    5f8c:	f005 fe40 	bl	bc10 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
    5f90:	1e04      	subs	r4, r0, #0
    5f92:	da0a      	bge.n	5faa <sx12xx_lora_recv+0x8e>
		if (!modem_release(&dev_data)) {
    5f94:	f7ff fe6e 	bl	5c74 <modem_release.constprop.0>
    5f98:	b950      	cbnz	r0, 5fb0 <sx12xx_lora_recv+0x94>
    5f9a:	f04f 32ff 	mov.w	r2, #4294967295
    5f9e:	f04f 33ff 	mov.w	r3, #4294967295
    5fa2:	4631      	mov	r1, r6
    5fa4:	a807      	add	r0, sp, #28
    5fa6:	f005 fe33 	bl	bc10 <z_impl_k_poll>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
    5faa:	f89d 4007 	ldrb.w	r4, [sp, #7]
    5fae:	e00a      	b.n	5fc6 <sx12xx_lora_recv+0xaa>
		LOG_INF("Receive timeout");
    5fb0:	4b0a      	ldr	r3, [pc, #40]	; (5fdc <sx12xx_lora_recv+0xc0>)
    5fb2:	9311      	str	r3, [sp, #68]	; 0x44
    5fb4:	2302      	movs	r3, #2
    5fb6:	9310      	str	r3, [sp, #64]	; 0x40
    5fb8:	4809      	ldr	r0, [pc, #36]	; (5fe0 <sx12xx_lora_recv+0xc4>)
    5fba:	462b      	mov	r3, r5
    5fbc:	aa10      	add	r2, sp, #64	; 0x40
    5fbe:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5fc2:	f7fb fdff 	bl	1bc4 <z_impl_z_log_msg_static_create>
}
    5fc6:	4620      	mov	r0, r4
    5fc8:	b013      	add	sp, #76	; 0x4c
    5fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
    5fcc:	f06f 040f 	mvn.w	r4, #15
    5fd0:	e7f9      	b.n	5fc6 <sx12xx_lora_recv+0xaa>
    5fd2:	bf00      	nop
    5fd4:	20001d9c 	.word	0x20001d9c
    5fd8:	0000ed8c 	.word	0x0000ed8c
    5fdc:	0000fe4b 	.word	0x0000fe4b
    5fe0:	0000eb6c 	.word	0x0000eb6c

00005fe4 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
    5fe4:	b510      	push	{r4, lr}
	/* Cancel ongoing reception */
	if (cb == NULL) {
    5fe6:	b929      	cbnz	r1, 5ff4 <sx12xx_lora_recv_async+0x10>
		if (!modem_release(&dev_data)) {
    5fe8:	f7ff fe44 	bl	5c74 <modem_release.constprop.0>
    5fec:	b9d0      	cbnz	r0, 6024 <sx12xx_lora_recv_async+0x40>
			/* Not receiving or already being stopped */
			return -EINVAL;
    5fee:	f06f 0015 	mvn.w	r0, #21
	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
	Radio.Rx(0);

	return 0;
}
    5ff2:	bd10      	pop	{r4, pc}
    5ff4:	4b0e      	ldr	r3, [pc, #56]	; (6030 <sx12xx_lora_recv_async+0x4c>)
    5ff6:	f3bf 8f5b 	dmb	ish
    5ffa:	2001      	movs	r0, #1
    5ffc:	e853 2f00 	ldrex	r2, [r3]
    6000:	2a00      	cmp	r2, #0
    6002:	d103      	bne.n	600c <sx12xx_lora_recv_async+0x28>
    6004:	e843 0400 	strex	r4, r0, [r3]
    6008:	2c00      	cmp	r4, #0
    600a:	d1f7      	bne.n	5ffc <sx12xx_lora_recv_async+0x18>
    600c:	f3bf 8f5b 	dmb	ish
	if (!modem_acquire(&dev_data)) {
    6010:	d10a      	bne.n	6028 <sx12xx_lora_recv_async+0x44>
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    6012:	4c08      	ldr	r4, [pc, #32]	; (6034 <sx12xx_lora_recv_async+0x50>)
	dev_data.async_rx_cb = cb;
    6014:	f843 1c38 	str.w	r1, [r3, #-56]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    6018:	6d63      	ldr	r3, [r4, #84]	; 0x54
    601a:	21ff      	movs	r1, #255	; 0xff
    601c:	4798      	blx	r3
	Radio.Rx(0);
    601e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6020:	2000      	movs	r0, #0
    6022:	4798      	blx	r3
		return 0;
    6024:	2000      	movs	r0, #0
    6026:	e7e4      	b.n	5ff2 <sx12xx_lora_recv_async+0xe>
		return -EBUSY;
    6028:	f06f 000f 	mvn.w	r0, #15
    602c:	e7e1      	b.n	5ff2 <sx12xx_lora_recv_async+0xe>
    602e:	bf00      	nop
    6030:	20001d9c 	.word	0x20001d9c
    6034:	0000ed8c 	.word	0x0000ed8c

00006038 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
    6038:	b5f0      	push	{r4, r5, r6, r7, lr}
    603a:	4f29      	ldr	r7, [pc, #164]	; (60e0 <sx12xx_lora_config+0xa8>)
    603c:	f3bf 8f5b 	dmb	ish
    6040:	b08b      	sub	sp, #44	; 0x2c
    6042:	460c      	mov	r4, r1
    6044:	2501      	movs	r5, #1
    6046:	e857 3f00 	ldrex	r3, [r7]
    604a:	2b00      	cmp	r3, #0
    604c:	d103      	bne.n	6056 <sx12xx_lora_config+0x1e>
    604e:	e847 5200 	strex	r2, r5, [r7]
    6052:	2a00      	cmp	r2, #0
    6054:	d1f7      	bne.n	6046 <sx12xx_lora_config+0xe>
    6056:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
    605a:	d13d      	bne.n	60d8 <sx12xx_lora_config+0xa0>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
    605c:	4e21      	ldr	r6, [pc, #132]	; (60e4 <sx12xx_lora_config+0xac>)
    605e:	6820      	ldr	r0, [r4, #0]
    6060:	68f3      	ldr	r3, [r6, #12]
    6062:	4798      	blx	r3

	if (config->tx) {
    6064:	7ae3      	ldrb	r3, [r4, #11]
    6066:	b31b      	cbz	r3, 60b0 <sx12xx_lora_config+0x78>
		/* Store TX config locally for airtime calculations */
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
    6068:	2210      	movs	r2, #16
    606a:	4621      	mov	r1, r4
    606c:	f1a7 0010 	sub.w	r0, r7, #16
    6070:	f007 f9c6 	bl	d400 <memcpy>
		/* Configure radio driver */
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
    6074:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
    6078:	9308      	str	r3, [sp, #32]
    607a:	2200      	movs	r2, #0
    607c:	7b23      	ldrb	r3, [r4, #12]
    607e:	9307      	str	r3, [sp, #28]
    6080:	e9cd 2205 	strd	r2, r2, [sp, #20]
    6084:	e9cd 2503 	strd	r2, r5, [sp, #12]
    6088:	8923      	ldrh	r3, [r4, #8]
    608a:	9302      	str	r3, [sp, #8]
    608c:	79a3      	ldrb	r3, [r4, #6]
    608e:	9301      	str	r3, [sp, #4]
    6090:	7963      	ldrb	r3, [r4, #5]
    6092:	9300      	str	r3, [sp, #0]
    6094:	69f7      	ldr	r7, [r6, #28]
    6096:	7923      	ldrb	r3, [r4, #4]
    6098:	f994 100a 	ldrsb.w	r1, [r4, #10]
    609c:	4628      	mov	r0, r5
    609e:	47b8      	blx	r7
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, config->iq_inverted, true);
	}

	Radio.SetPublicNetwork(config->public_network);
    60a0:	6db3      	ldr	r3, [r6, #88]	; 0x58
    60a2:	7b60      	ldrb	r0, [r4, #13]
    60a4:	4798      	blx	r3

	modem_release(&dev_data);
    60a6:	f7ff fde5 	bl	5c74 <modem_release.constprop.0>
	return 0;
    60aa:	2000      	movs	r0, #0
}
    60ac:	b00b      	add	sp, #44	; 0x2c
    60ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
    60b0:	9509      	str	r5, [sp, #36]	; 0x24
    60b2:	7b22      	ldrb	r2, [r4, #12]
    60b4:	69b7      	ldr	r7, [r6, #24]
    60b6:	e9cd 3207 	strd	r3, r2, [sp, #28]
    60ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
    60be:	e9cd 3303 	strd	r3, r3, [sp, #12]
    60c2:	220a      	movs	r2, #10
    60c4:	9202      	str	r2, [sp, #8]
    60c6:	8922      	ldrh	r2, [r4, #8]
    60c8:	e9cd 3200 	strd	r3, r2, [sp]
    60cc:	4628      	mov	r0, r5
    60ce:	79a3      	ldrb	r3, [r4, #6]
    60d0:	7962      	ldrb	r2, [r4, #5]
    60d2:	7921      	ldrb	r1, [r4, #4]
    60d4:	47b8      	blx	r7
    60d6:	e7e3      	b.n	60a0 <sx12xx_lora_config+0x68>
		return -EBUSY;
    60d8:	f06f 000f 	mvn.w	r0, #15
    60dc:	e7e6      	b.n	60ac <sx12xx_lora_config+0x74>
    60de:	bf00      	nop
    60e0:	20001d9c 	.word	0x20001d9c
    60e4:	0000ed8c 	.word	0x0000ed8c

000060e8 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
    60e8:	b538      	push	{r3, r4, r5, lr}
    60ea:	4608      	mov	r0, r1
    60ec:	4611      	mov	r1, r2
    60ee:	461a      	mov	r2, r3
    60f0:	4b0b      	ldr	r3, [pc, #44]	; (6120 <sx12xx_lora_test_cw+0x38>)
    60f2:	f3bf 8f5b 	dmb	ish
    60f6:	2401      	movs	r4, #1
    60f8:	e853 5f00 	ldrex	r5, [r3]
    60fc:	2d00      	cmp	r5, #0
    60fe:	d104      	bne.n	610a <sx12xx_lora_test_cw+0x22>
    6100:	e843 4c00 	strex	ip, r4, [r3]
    6104:	f1bc 0f00 	cmp.w	ip, #0
    6108:	d1f6      	bne.n	60f8 <sx12xx_lora_test_cw+0x10>
    610a:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
    610e:	d104      	bne.n	611a <sx12xx_lora_test_cw+0x32>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
    6110:	4b04      	ldr	r3, [pc, #16]	; (6124 <sx12xx_lora_test_cw+0x3c>)
    6112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6114:	4798      	blx	r3
	return 0;
    6116:	2000      	movs	r0, #0
}
    6118:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    611a:	f06f 000f 	mvn.w	r0, #15
    611e:	e7fb      	b.n	6118 <sx12xx_lora_test_cw+0x30>
    6120:	20001d9c 	.word	0x20001d9c
    6124:	0000ed8c 	.word	0x0000ed8c

00006128 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
    6128:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    612a:	4b10      	ldr	r3, [pc, #64]	; (616c <sx12xx_init+0x44>)
    612c:	f3bf 8f5b 	dmb	ish
    6130:	2400      	movs	r4, #0
    6132:	e853 2f00 	ldrex	r2, [r3]
    6136:	e843 4100 	strex	r1, r4, [r3]
    613a:	2900      	cmp	r1, #0
    613c:	d1f9      	bne.n	6132 <sx12xx_init+0xa>
    613e:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
	dev_data.events.TxDone = sx12xx_ev_tx_done;
    6142:	490b      	ldr	r1, [pc, #44]	; (6170 <sx12xx_init+0x48>)
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	/* TX timeout event raises at the end of the test CW transmission */
	dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
	Radio.Init(&dev_data.events);
    6144:	4d0b      	ldr	r5, [pc, #44]	; (6174 <sx12xx_init+0x4c>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
    6146:	f843 1c34 	str.w	r1, [r3, #-52]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
    614a:	490b      	ldr	r1, [pc, #44]	; (6178 <sx12xx_init+0x50>)
    614c:	f843 1c2c 	str.w	r1, [r3, #-44]
	dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
    6150:	490a      	ldr	r1, [pc, #40]	; (617c <sx12xx_init+0x54>)
    6152:	f843 1c30 	str.w	r1, [r3, #-48]
	Radio.Init(&dev_data.events);
    6156:	682a      	ldr	r2, [r5, #0]
	dev_data.dev = dev;
    6158:	f843 0c40 	str.w	r0, [r3, #-64]
	Radio.Init(&dev_data.events);
    615c:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
    6160:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
    6162:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    6164:	4798      	blx	r3

	return 0;
}
    6166:	4620      	mov	r0, r4
    6168:	bd38      	pop	{r3, r4, r5, pc}
    616a:	bf00      	nop
    616c:	20001d9c 	.word	0x20001d9c
    6170:	00005cc9 	.word	0x00005cc9
    6174:	0000ed8c 	.word	0x0000ed8c
    6178:	00005bc9 	.word	0x00005bc9
    617c:	0000d731 	.word	0x0000d731

00006180 <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
    6180:	4b03      	ldr	r3, [pc, #12]	; (6190 <sx127x_dio_work_handle+0x10>)
    6182:	1ac0      	subs	r0, r0, r3
    6184:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
    6186:	4b03      	ldr	r3, [pc, #12]	; (6194 <sx127x_dio_work_handle+0x14>)
    6188:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    618c:	2000      	movs	r0, #0
    618e:	4718      	bx	r3
    6190:	20001dbc 	.word	0x20001dbc
    6194:	20000154 	.word	0x20000154

00006198 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
    6198:	b508      	push	{r3, lr}
	unsigned int i, pin;

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == sx127x_dios[i].port &&
    619a:	4b06      	ldr	r3, [pc, #24]	; (61b4 <sx127x_irq_callback+0x1c>)
    619c:	4283      	cmp	r3, r0
    619e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    61a2:	d105      	bne.n	61b0 <sx127x_irq_callback+0x18>
    61a4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    61a8:	d102      	bne.n	61b0 <sx127x_irq_callback+0x18>
		    pin == sx127x_dios[i].pin) {
			k_work_submit(&dev_data.dio_work[i]);
    61aa:	4803      	ldr	r0, [pc, #12]	; (61b8 <sx127x_irq_callback+0x20>)
    61ac:	f004 ff5e 	bl	b06c <k_work_submit>
		}
	}
}
    61b0:	bd08      	pop	{r3, pc}
    61b2:	bf00      	nop
    61b4:	0000e8ac 	.word	0x0000e8ac
    61b8:	20001dbc 	.word	0x20001dbc

000061bc <SX1276WriteBuffer.part.0>:
int sx127x_write(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
}

void SX127xWriteBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
    61bc:	b580      	push	{r7, lr}
    61be:	af00      	add	r7, sp, #0
{
	int ret;

	ret = sx127x_write(addr, buffer, size);
	if (ret < 0) {
		LOG_ERR("Unable to write address: 0x%x", addr);
    61c0:	b088      	sub	sp, #32
    61c2:	466a      	mov	r2, sp
    61c4:	4b06      	ldr	r3, [pc, #24]	; (61e0 <SX1276WriteBuffer.part.0+0x24>)
    61c6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    61ca:	2303      	movs	r3, #3
    61cc:	f842 3f10 	str.w	r3, [r2, #16]!
    61d0:	4804      	ldr	r0, [pc, #16]	; (61e4 <SX1276WriteBuffer.part.0+0x28>)
    61d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    61d6:	f007 faaf 	bl	d738 <z_log_msg_static_create.constprop.0>
	}
}
    61da:	46bd      	mov	sp, r7
    61dc:	bd80      	pop	{r7, pc}
    61de:	bf00      	nop
    61e0:	0000fe7a 	.word	0x0000fe7a
    61e4:	0000eb64 	.word	0x0000eb64

000061e8 <SX1276ReadBuffer.part.0>:

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
    61e8:	b580      	push	{r7, lr}
    61ea:	af00      	add	r7, sp, #0
{
	int ret;

	ret = sx127x_read(addr, buffer, size);
	if (ret < 0) {
		LOG_ERR("Unable to read address: 0x%x", addr);
    61ec:	b088      	sub	sp, #32
    61ee:	466a      	mov	r2, sp
    61f0:	4b06      	ldr	r3, [pc, #24]	; (620c <SX1276ReadBuffer.part.0+0x24>)
    61f2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    61f6:	2303      	movs	r3, #3
    61f8:	f842 3f10 	str.w	r3, [r2, #16]!
    61fc:	4804      	ldr	r0, [pc, #16]	; (6210 <SX1276ReadBuffer.part.0+0x28>)
    61fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6202:	f007 fa99 	bl	d738 <z_log_msg_static_create.constprop.0>
	}
}
    6206:	46bd      	mov	sp, r7
    6208:	bd80      	pop	{r7, pc}
    620a:	bf00      	nop
    620c:	0000fe98 	.word	0x0000fe98
    6210:	0000eb64 	.word	0x0000eb64

00006214 <gpio_pin_set_dt.constprop.0.isra.0>:
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
    6214:	4b07      	ldr	r3, [pc, #28]	; (6234 <gpio_pin_set_dt.constprop.0.isra.0+0x20>)
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6216:	691a      	ldr	r2, [r3, #16]
    6218:	6812      	ldr	r2, [r2, #0]
    621a:	0752      	lsls	r2, r2, #29
		value = (value != 0) ? 0 : 1;
    621c:	bf48      	it	mi
    621e:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
    6222:	b120      	cbz	r0, 622e <gpio_pin_set_dt.constprop.0.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
    6224:	689b      	ldr	r3, [r3, #8]
    6226:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    6228:	4802      	ldr	r0, [pc, #8]	; (6234 <gpio_pin_set_dt.constprop.0.isra.0+0x20>)
    622a:	2104      	movs	r1, #4
    622c:	4718      	bx	r3
    622e:	689b      	ldr	r3, [r3, #8]
    6230:	691b      	ldr	r3, [r3, #16]
    6232:	e7f9      	b.n	6228 <gpio_pin_set_dt.constprop.0.isra.0+0x14>
    6234:	0000e8ac 	.word	0x0000e8ac

00006238 <SX1276IoIrqInit>:
{
    6238:	b5f0      	push	{r4, r5, r6, r7, lr}
    623a:	b087      	sub	sp, #28
		if (!irqHandlers[i]) {
    623c:	6803      	ldr	r3, [r0, #0]
{
    623e:	af00      	add	r7, sp, #0
		if (!irqHandlers[i]) {
    6240:	b1bb      	cbz	r3, 6272 <SX1276IoIrqInit+0x3a>
    6242:	4c29      	ldr	r4, [pc, #164]	; (62e8 <SX1276IoIrqInit+0xb0>)
    6244:	4620      	mov	r0, r4
    6246:	f007 fdff 	bl	de48 <z_device_is_ready>
		if (!device_is_ready(sx127x_dios[i].port)) {
    624a:	b9a8      	cbnz	r0, 6278 <SX1276IoIrqInit+0x40>
			LOG_ERR("GPIO port %s not ready",
    624c:	6823      	ldr	r3, [r4, #0]
    624e:	466c      	mov	r4, sp
    6250:	b088      	sub	sp, #32
    6252:	466a      	mov	r2, sp
    6254:	4925      	ldr	r1, [pc, #148]	; (62ec <SX1276IoIrqInit+0xb4>)
    6256:	4826      	ldr	r0, [pc, #152]	; (62f0 <SX1276IoIrqInit+0xb8>)
    6258:	e9c2 1305 	strd	r1, r3, [r2, #20]
    625c:	f44f 7300 	mov.w	r3, #512	; 0x200
    6260:	8393      	strh	r3, [r2, #28]
    6262:	4b24      	ldr	r3, [pc, #144]	; (62f4 <SX1276IoIrqInit+0xbc>)
    6264:	f842 3f10 	str.w	r3, [r2, #16]!
    6268:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    626c:	f007 fa64 	bl	d738 <z_log_msg_static_create.constprop.0>
    6270:	46a5      	mov	sp, r4
}
    6272:	371c      	adds	r7, #28
    6274:	46bd      	mov	sp, r7
    6276:	bdf0      	pop	{r4, r5, r6, r7, pc}
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
    6278:	491f      	ldr	r1, [pc, #124]	; (62f8 <SX1276IoIrqInit+0xc0>)
    627a:	4820      	ldr	r0, [pc, #128]	; (62fc <SX1276IoIrqInit+0xc4>)
    627c:	f007 ff21 	bl	e0c2 <k_work_init>
	struct gpio_driver_data *data =
    6280:	6926      	ldr	r6, [r4, #16]
	const struct gpio_driver_api *api =
    6282:	68a5      	ldr	r5, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6284:	6833      	ldr	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
    6286:	4a1e      	ldr	r2, [pc, #120]	; (6300 <SX1276IoIrqInit+0xc8>)
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    628c:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
    628e:	682b      	ldr	r3, [r5, #0]
    6290:	211c      	movs	r1, #28
    6292:	4620      	mov	r0, r4
    6294:	4798      	blx	r3
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    6296:	491b      	ldr	r1, [pc, #108]	; (6304 <SX1276IoIrqInit+0xcc>)
    6298:	4b1b      	ldr	r3, [pc, #108]	; (6308 <SX1276IoIrqInit+0xd0>)
    629a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    629c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    62a0:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    62a2:	69eb      	ldr	r3, [r5, #28]
    62a4:	b95b      	cbnz	r3, 62be <SX1276IoIrqInit+0x86>
			LOG_ERR("Could not set gpio callback.");
    62a6:	4b19      	ldr	r3, [pc, #100]	; (630c <SX1276IoIrqInit+0xd4>)
    62a8:	617b      	str	r3, [r7, #20]
    62aa:	4811      	ldr	r0, [pc, #68]	; (62f0 <SX1276IoIrqInit+0xb8>)
    62ac:	2302      	movs	r3, #2
    62ae:	f107 0210 	add.w	r2, r7, #16
    62b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    62b6:	613b      	str	r3, [r7, #16]
    62b8:	f007 fa3e 	bl	d738 <z_log_msg_static_create.constprop.0>
			return;
    62bc:	e7d9      	b.n	6272 <SX1276IoIrqInit+0x3a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    62be:	2201      	movs	r2, #1
    62c0:	4620      	mov	r0, r4
    62c2:	4798      	blx	r3
		if (gpio_add_callback(sx127x_dios[i].port, &callbacks[i]) < 0) {
    62c4:	2800      	cmp	r0, #0
    62c6:	dbee      	blt.n	62a6 <SX1276IoIrqInit+0x6e>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    62c8:	6833      	ldr	r3, [r6, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    62ca:	69ad      	ldr	r5, [r5, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    62cc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    62d0:	bf14      	ite	ne
    62d2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    62d6:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    62da:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    62de:	211c      	movs	r1, #28
    62e0:	4620      	mov	r0, r4
    62e2:	47a8      	blx	r5
	for (i = 0; i < SX127X_MAX_DIO; i++) {
    62e4:	e7c5      	b.n	6272 <SX1276IoIrqInit+0x3a>
    62e6:	bf00      	nop
    62e8:	0000e8ac 	.word	0x0000e8ac
    62ec:	0000feb5 	.word	0x0000feb5
    62f0:	0000eb64 	.word	0x0000eb64
    62f4:	01000003 	.word	0x01000003
    62f8:	00006181 	.word	0x00006181
    62fc:	20001dbc 	.word	0x20001dbc
    6300:	00010020 	.word	0x00010020
    6304:	20001db0 	.word	0x20001db0
    6308:	00006199 	.word	0x00006199
    630c:	0000fecc 	.word	0x0000fecc

00006310 <sx127x_read>:
{
    6310:	b510      	push	{r4, lr}
    6312:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
    6314:	f10d 0307 	add.w	r3, sp, #7
    6318:	9306      	str	r3, [sp, #24]
    631a:	2301      	movs	r3, #1
    631c:	e9cd 3107 	strd	r3, r1, [sp, #28]
	return sx127x_transceive(reg_addr, false, data, len);
    6320:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
    6322:	2302      	movs	r3, #2
    6324:	aa06      	add	r2, sp, #24
		const struct spi_buf_set rx = {
    6326:	e9cd 3203 	strd	r3, r2, [sp, #12]
    632a:	f88d 0007 	strb.w	r0, [sp, #7]
	struct spi_buf_set tx = {
    632e:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
    6330:	9305      	str	r3, [sp, #20]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    6332:	4804      	ldr	r0, [pc, #16]	; (6344 <sx127x_read+0x34>)
    6334:	4904      	ldr	r1, [pc, #16]	; (6348 <sx127x_read+0x38>)
    6336:	6883      	ldr	r3, [r0, #8]
    6338:	aa02      	add	r2, sp, #8
    633a:	681c      	ldr	r4, [r3, #0]
    633c:	ab04      	add	r3, sp, #16
    633e:	47a0      	blx	r4
}
    6340:	b00a      	add	sp, #40	; 0x28
    6342:	bd10      	pop	{r4, pc}
    6344:	0000e8f4 	.word	0x0000e8f4
    6348:	0000edfc 	.word	0x0000edfc

0000634c <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
    634c:	b5f0      	push	{r4, r5, r6, r7, lr}
    634e:	b089      	sub	sp, #36	; 0x24
    6350:	4605      	mov	r5, r0
    6352:	af00      	add	r7, sp, #0
    6354:	4832      	ldr	r0, [pc, #200]	; (6420 <sx127x_lora_init+0xd4>)
    6356:	f007 fd77 	bl	de48 <z_device_is_ready>
	if (!device_is_ready(spec->bus)) {
    635a:	b368      	cbz	r0, 63b8 <sx127x_lora_init+0x6c>
	    !device_is_ready(spec->config.cs->gpio.port)) {
    635c:	4b31      	ldr	r3, [pc, #196]	; (6424 <sx127x_lora_init+0xd8>)
    635e:	6818      	ldr	r0, [r3, #0]
    6360:	f007 fd72 	bl	de48 <z_device_is_ready>
	if (spec->config.cs &&
    6364:	b340      	cbz	r0, 63b8 <sx127x_lora_init+0x6c>
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
    6366:	4830      	ldr	r0, [pc, #192]	; (6428 <sx127x_lora_init+0xdc>)
    6368:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
    636c:	f7ff fcbc 	bl	5ce8 <__sx12xx_configure_pin>
	if (ret) {
    6370:	4604      	mov	r4, r0
    6372:	bb70      	cbnz	r0, 63d2 <sx127x_lora_init+0x86>
	return z_impl_k_sleep(timeout);
    6374:	2100      	movs	r1, #0
    6376:	f640 40cd 	movw	r0, #3277	; 0xccd
    637a:	f005 f9a1 	bl	b6c0 <z_impl_k_sleep>
		return ret;
	}

	k_sleep(K_MSEC(100));
	gpio_pin_set_dt(&dev_config.reset, 0);
    637e:	4620      	mov	r0, r4
    6380:	f7ff ff48 	bl	6214 <gpio_pin_set_dt.constprop.0.isra.0>
    6384:	2100      	movs	r1, #0
    6386:	f640 40cd 	movw	r0, #3277	; 0xccd
    638a:	f005 f999 	bl	b6c0 <z_impl_k_sleep>
	k_sleep(K_MSEC(100));

	ret = sx127x_read(REG_VERSION, &regval, 1);
    638e:	2201      	movs	r2, #1
    6390:	1df9      	adds	r1, r7, #7
    6392:	2042      	movs	r0, #66	; 0x42
    6394:	f7ff ffbc 	bl	6310 <sx127x_read>
	if (ret < 0) {
    6398:	2800      	cmp	r0, #0
    639a:	da1e      	bge.n	63da <sx127x_lora_init+0x8e>
		LOG_ERR("Unable to read version info");
    639c:	4b23      	ldr	r3, [pc, #140]	; (642c <sx127x_lora_init+0xe0>)
    639e:	61fb      	str	r3, [r7, #28]
    63a0:	2302      	movs	r3, #2
    63a2:	4823      	ldr	r0, [pc, #140]	; (6430 <sx127x_lora_init+0xe4>)
    63a4:	61bb      	str	r3, [r7, #24]
    63a6:	f107 0218 	add.w	r2, r7, #24
    63aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    63ae:	f007 f9c3 	bl	d738 <z_log_msg_static_create.constprop.0>
		return -EIO;
    63b2:	f06f 0404 	mvn.w	r4, #4
    63b6:	e00c      	b.n	63d2 <sx127x_lora_init+0x86>
		LOG_ERR("SPI device not ready");
    63b8:	4b1e      	ldr	r3, [pc, #120]	; (6434 <sx127x_lora_init+0xe8>)
    63ba:	61fb      	str	r3, [r7, #28]
    63bc:	2302      	movs	r3, #2
    63be:	481c      	ldr	r0, [pc, #112]	; (6430 <sx127x_lora_init+0xe4>)
    63c0:	61bb      	str	r3, [r7, #24]
    63c2:	f107 0218 	add.w	r2, r7, #24
    63c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    63ca:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("SPI device not ready");
    63ce:	f007 f9b3 	bl	d738 <z_log_msg_static_create.constprop.0>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
    63d2:	4620      	mov	r0, r4
    63d4:	3724      	adds	r7, #36	; 0x24
    63d6:	46bd      	mov	sp, r7
    63d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("SX127x version 0x%02x found", regval);
    63da:	466e      	mov	r6, sp
    63dc:	b088      	sub	sp, #32
    63de:	79fb      	ldrb	r3, [r7, #7]
    63e0:	466a      	mov	r2, sp
    63e2:	4915      	ldr	r1, [pc, #84]	; (6438 <sx127x_lora_init+0xec>)
    63e4:	4812      	ldr	r0, [pc, #72]	; (6430 <sx127x_lora_init+0xe4>)
    63e6:	e9c2 1305 	strd	r1, r3, [r2, #20]
    63ea:	2303      	movs	r3, #3
    63ec:	f842 3f10 	str.w	r3, [r2, #16]!
    63f0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    63f4:	f007 f9a0 	bl	d738 <z_log_msg_static_create.constprop.0>
	ret = sx12xx_init(dev);
    63f8:	4628      	mov	r0, r5
    63fa:	46b5      	mov	sp, r6
    63fc:	f7ff fe94 	bl	6128 <sx12xx_init>
	if (ret < 0) {
    6400:	1e05      	subs	r5, r0, #0
    6402:	dae6      	bge.n	63d2 <sx127x_lora_init+0x86>
		LOG_ERR("Failed to initialize SX12xx common");
    6404:	4b0d      	ldr	r3, [pc, #52]	; (643c <sx127x_lora_init+0xf0>)
    6406:	61fb      	str	r3, [r7, #28]
    6408:	2302      	movs	r3, #2
    640a:	4809      	ldr	r0, [pc, #36]	; (6430 <sx127x_lora_init+0xe4>)
    640c:	61bb      	str	r3, [r7, #24]
    640e:	f107 0218 	add.w	r2, r7, #24
    6412:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6416:	f007 f98f 	bl	d738 <z_log_msg_static_create.constprop.0>
		return ret;
    641a:	462c      	mov	r4, r5
    641c:	e7d9      	b.n	63d2 <sx127x_lora_init+0x86>
    641e:	bf00      	nop
    6420:	0000e8f4 	.word	0x0000e8f4
    6424:	20000148 	.word	0x20000148
    6428:	0000ee08 	.word	0x0000ee08
    642c:	0000fefe 	.word	0x0000fefe
    6430:	0000eb64 	.word	0x0000eb64
    6434:	0000fee9 	.word	0x0000fee9
    6438:	0000ff1a 	.word	0x0000ff1a
    643c:	0000ff36 	.word	0x0000ff36

00006440 <sx127x_write>:
{
    6440:	b510      	push	{r4, lr}
    6442:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
    6444:	f10d 0307 	add.w	r3, sp, #7
    6448:	9304      	str	r3, [sp, #16]
    644a:	2301      	movs	r3, #1
    644c:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
    6450:	ab04      	add	r3, sp, #16
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    6452:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
    6456:	9302      	str	r3, [sp, #8]
    6458:	2302      	movs	r3, #2
    645a:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    645e:	9207      	str	r2, [sp, #28]
	struct spi_buf_set tx = {
    6460:	9303      	str	r3, [sp, #12]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    6462:	4804      	ldr	r0, [pc, #16]	; (6474 <sx127x_write+0x34>)
    6464:	4904      	ldr	r1, [pc, #16]	; (6478 <sx127x_write+0x38>)
    6466:	6883      	ldr	r3, [r0, #8]
    6468:	aa02      	add	r2, sp, #8
    646a:	681c      	ldr	r4, [r3, #0]
    646c:	2300      	movs	r3, #0
    646e:	47a0      	blx	r4
}
    6470:	b008      	add	sp, #32
    6472:	bd10      	pop	{r4, pc}
    6474:	0000e8f4 	.word	0x0000e8f4
    6478:	0000edfc 	.word	0x0000edfc

0000647c <SX1276SetRfTxPower>:
{
    647c:	b510      	push	{r4, lr}
    647e:	b088      	sub	sp, #32
	uint8_t pa_config = 0;
    6480:	2300      	movs	r3, #0
{
    6482:	4604      	mov	r4, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    6484:	2201      	movs	r2, #1
    6486:	f10d 0107 	add.w	r1, sp, #7
    648a:	204d      	movs	r0, #77	; 0x4d
	uint8_t pa_config = 0;
    648c:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t pa_dac = 0;
    6490:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    6494:	f7ff ff3c 	bl	6310 <sx127x_read>
	if (ret < 0) {
    6498:	2800      	cmp	r0, #0
    649a:	da0b      	bge.n	64b4 <SX1276SetRfTxPower+0x38>
		LOG_ERR("Unable to read PA dac");
    649c:	4b1f      	ldr	r3, [pc, #124]	; (651c <SX1276SetRfTxPower+0xa0>)
		LOG_ERR("Unable to write PA dac");
    649e:	9307      	str	r3, [sp, #28]
    64a0:	481f      	ldr	r0, [pc, #124]	; (6520 <SX1276SetRfTxPower+0xa4>)
    64a2:	2302      	movs	r3, #2
    64a4:	aa06      	add	r2, sp, #24
    64a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    64aa:	9306      	str	r3, [sp, #24]
    64ac:	f007 f944 	bl	d738 <z_log_msg_static_create.constprop.0>
}
    64b0:	b008      	add	sp, #32
    64b2:	bd10      	pop	{r4, pc}
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    64b4:	2c14      	cmp	r4, #20
    64b6:	4622      	mov	r2, r4
    64b8:	bfa8      	it	ge
    64ba:	2214      	movge	r2, #20
    64bc:	2a02      	cmp	r2, #2
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    64be:	f89d 1007 	ldrb.w	r1, [sp, #7]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
    64c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    64c6:	bfb8      	it	lt
    64c8:	2202      	movlt	r2, #2
    64ca:	b2d2      	uxtb	r2, r2
		if (power > 17) {
    64cc:	2c11      	cmp	r4, #17
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    64ce:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    64d2:	bfcc      	ite	gt
    64d4:	3a05      	subgt	r2, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    64d6:	3a02      	suble	r2, #2
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
    64d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			pa_dac |= SX127X_PADAC_20DBM_ON;
    64dc:	bfcc      	ite	gt
    64de:	f041 0107 	orrgt.w	r1, r1, #7
			pa_dac |= SX127X_PADAC_20DBM_OFF;
    64e2:	f041 0104 	orrle.w	r1, r1, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    64e6:	4313      	orrs	r3, r2
    64e8:	b2db      	uxtb	r3, r3
			pa_dac |= SX127X_PADAC_20DBM_OFF;
    64ea:	f88d 1007 	strb.w	r1, [sp, #7]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    64ee:	2201      	movs	r2, #1
    64f0:	f10d 0106 	add.w	r1, sp, #6
    64f4:	2009      	movs	r0, #9
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    64f6:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    64fa:	f7ff ffa1 	bl	6440 <sx127x_write>
	if (ret < 0) {
    64fe:	2800      	cmp	r0, #0
    6500:	da01      	bge.n	6506 <SX1276SetRfTxPower+0x8a>
		LOG_ERR("Unable to write PA config");
    6502:	4b08      	ldr	r3, [pc, #32]	; (6524 <SX1276SetRfTxPower+0xa8>)
    6504:	e7cb      	b.n	649e <SX1276SetRfTxPower+0x22>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
    6506:	2201      	movs	r2, #1
    6508:	f10d 0107 	add.w	r1, sp, #7
    650c:	204d      	movs	r0, #77	; 0x4d
    650e:	f7ff ff97 	bl	6440 <sx127x_write>
	if (ret < 0) {
    6512:	2800      	cmp	r0, #0
    6514:	dacc      	bge.n	64b0 <SX1276SetRfTxPower+0x34>
		LOG_ERR("Unable to write PA dac");
    6516:	4b04      	ldr	r3, [pc, #16]	; (6528 <SX1276SetRfTxPower+0xac>)
    6518:	e7c1      	b.n	649e <SX1276SetRfTxPower+0x22>
    651a:	bf00      	nop
    651c:	0000ff59 	.word	0x0000ff59
    6520:	0000eb64 	.word	0x0000eb64
    6524:	0000ff6f 	.word	0x0000ff6f
    6528:	0000ff89 	.word	0x0000ff89

0000652c <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    652c:	4a04      	ldr	r2, [pc, #16]	; (6540 <TimerInsertNewHeadTimer+0x14>)
    652e:	6813      	ldr	r3, [r2, #0]

    if( cur != NULL )
    6530:	b10b      	cbz	r3, 6536 <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
    6532:	2100      	movs	r1, #0
    6534:	7259      	strb	r1, [r3, #9]
    }

    obj->Next = cur;
    6536:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
    6538:	6010      	str	r0, [r2, #0]
    TimerSetTimeout( TimerListHead );
    653a:	f007 b93c 	b.w	d7b6 <TimerSetTimeout>
    653e:	bf00      	nop
    6540:	20001dcc 	.word	0x20001dcc

00006544 <TimerStart>:
{
    6544:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6546:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    6548:	a801      	add	r0, sp, #4
    654a:	f007 f8e1 	bl	d710 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
    654e:	b16c      	cbz	r4, 656c <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    6550:	4d17      	ldr	r5, [pc, #92]	; (65b0 <TimerStart+0x6c>)
    6552:	682a      	ldr	r2, [r5, #0]
    6554:	4613      	mov	r3, r2

    while( cur != NULL )
    6556:	b973      	cbnz	r3, 6576 <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
    6558:	6863      	ldr	r3, [r4, #4]
    655a:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
    655c:	2301      	movs	r3, #1
    655e:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
    6560:	b96a      	cbnz	r2, 657e <TimerStart+0x3a>
        RtcSetTimerContext( );
    6562:	f7ff fb23 	bl	5bac <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
    6566:	4620      	mov	r0, r4
    6568:	f7ff ffe0 	bl	652c <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
    656c:	a801      	add	r0, sp, #4
    656e:	f007 f8d9 	bl	d724 <BoardCriticalSectionEnd>
}
    6572:	b003      	add	sp, #12
    6574:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
    6576:	429c      	cmp	r4, r3
    6578:	d0f8      	beq.n	656c <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
    657a:	695b      	ldr	r3, [r3, #20]
    657c:	e7eb      	b.n	6556 <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
    657e:	f7ff faeb 	bl	5b58 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
    6582:	6823      	ldr	r3, [r4, #0]
    6584:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
    6586:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
    6588:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
    658a:	681a      	ldr	r2, [r3, #0]
    658c:	4290      	cmp	r0, r2
    658e:	d3ea      	bcc.n	6566 <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
    6590:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
    6592:	6959      	ldr	r1, [r3, #20]
    6594:	b911      	cbnz	r1, 659c <TimerStart+0x58>
    cur->Next = obj;
    6596:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
    6598:	6161      	str	r1, [r4, #20]
    659a:	e7e7      	b.n	656c <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
    659c:	6811      	ldr	r1, [r2, #0]
    659e:	4288      	cmp	r0, r1
    65a0:	d902      	bls.n	65a8 <TimerStart+0x64>
            next = next->Next;
    65a2:	4613      	mov	r3, r2
    65a4:	6952      	ldr	r2, [r2, #20]
    65a6:	e7f4      	b.n	6592 <TimerStart+0x4e>
            cur->Next = obj;
    65a8:	615c      	str	r4, [r3, #20]
            obj->Next = next;
    65aa:	6162      	str	r2, [r4, #20]
            return;
    65ac:	e7de      	b.n	656c <TimerStart+0x28>
    65ae:	bf00      	nop
    65b0:	20001dcc 	.word	0x20001dcc

000065b4 <TimerIrqHandler>:
{
    65b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
    65b6:	f7ff fb01 	bl	5bbc <RtcGetTimerContext>
    if( TimerListHead != NULL )
    65ba:	4c1c      	ldr	r4, [pc, #112]	; (662c <TimerIrqHandler+0x78>)
    uint32_t old =  RtcGetTimerContext( );
    65bc:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
    65be:	f7ff faf5 	bl	5bac <RtcSetTimerContext>
    if( TimerListHead != NULL )
    65c2:	6823      	ldr	r3, [r4, #0]
    65c4:	b1a3      	cbz	r3, 65f0 <TimerIrqHandler+0x3c>
    uint32_t deltaContext = now - old; // intentional wrap around
    65c6:	1b47      	subs	r7, r0, r5
    65c8:	461e      	mov	r6, r3
                next->Timestamp -= deltaContext;
    65ca:	1a2d      	subs	r5, r5, r0
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
    65cc:	6971      	ldr	r1, [r6, #20]
    65ce:	b929      	cbnz	r1, 65dc <TimerIrqHandler+0x28>
        TimerListHead = TimerListHead->Next;
    65d0:	695a      	ldr	r2, [r3, #20]
    65d2:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    65d4:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
    65d6:	7219      	strb	r1, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    65d8:	b942      	cbnz	r2, 65ec <TimerIrqHandler+0x38>
    65da:	e7fe      	b.n	65da <TimerIrqHandler+0x26>
            if( next->Timestamp > deltaContext )
    65dc:	680a      	ldr	r2, [r1, #0]
    65de:	42ba      	cmp	r2, r7
                next->Timestamp -= deltaContext;
    65e0:	bf8c      	ite	hi
    65e2:	1952      	addhi	r2, r2, r5
                next->Timestamp = 0;
    65e4:	2200      	movls	r2, #0
    65e6:	600a      	str	r2, [r1, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
    65e8:	6976      	ldr	r6, [r6, #20]
    65ea:	e7ef      	b.n	65cc <TimerIrqHandler+0x18>
        ExecuteCallBack( cur->Callback, cur->Context );
    65ec:	6918      	ldr	r0, [r3, #16]
    65ee:	4790      	blx	r2
        cur->IsStarted = false;
    65f0:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    65f2:	6823      	ldr	r3, [r4, #0]
    65f4:	b92b      	cbnz	r3, 6602 <TimerIrqHandler+0x4e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    65f6:	6820      	ldr	r0, [r4, #0]
    65f8:	b980      	cbnz	r0, 661c <TimerIrqHandler+0x68>
}
    65fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
    65fc:	6918      	ldr	r0, [r3, #16]
    65fe:	4790      	blx	r2
    6600:	e7f7      	b.n	65f2 <TimerIrqHandler+0x3e>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    6602:	681d      	ldr	r5, [r3, #0]
    6604:	f7ff faa8 	bl	5b58 <RtcGetTimerElapsedTime>
    6608:	4285      	cmp	r5, r0
    660a:	d2f4      	bcs.n	65f6 <TimerIrqHandler+0x42>
        cur = TimerListHead;
    660c:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
    660e:	695a      	ldr	r2, [r3, #20]
    6610:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    6612:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
    6614:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    6616:	2a00      	cmp	r2, #0
    6618:	d1f0      	bne.n	65fc <TimerIrqHandler+0x48>
    661a:	e7fe      	b.n	661a <TimerIrqHandler+0x66>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    661c:	7a43      	ldrb	r3, [r0, #9]
    661e:	2b00      	cmp	r3, #0
    6620:	d1eb      	bne.n	65fa <TimerIrqHandler+0x46>
}
    6622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerSetTimeout( TimerListHead );
    6626:	f007 b8c6 	b.w	d7b6 <TimerSetTimeout>
    662a:	bf00      	nop
    662c:	20001dcc 	.word	0x20001dcc

00006630 <TimerStop>:
{
    6630:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
    6632:	4d13      	ldr	r5, [pc, #76]	; (6680 <TimerStop+0x50>)
{
    6634:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    6636:	a801      	add	r0, sp, #4
    6638:	f007 f86a 	bl	d710 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
    663c:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
    663e:	b16b      	cbz	r3, 665c <TimerStop+0x2c>
    6640:	b164      	cbz	r4, 665c <TimerStop+0x2c>
    obj->IsStarted = false;
    6642:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
    6644:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
    6646:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
    6648:	d111      	bne.n	666e <TimerStop+0x3e>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
    664a:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
    664c:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
    664e:	b161      	cbz	r1, 666a <TimerStop+0x3a>
            TimerListHead->IsNext2Expire = false;
    6650:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
    6652:	b144      	cbz	r4, 6666 <TimerStop+0x36>
                TimerSetTimeout( TimerListHead );
    6654:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
    6656:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
    6658:	f007 f8ad 	bl	d7b6 <TimerSetTimeout>
        CRITICAL_SECTION_END( );
    665c:	a801      	add	r0, sp, #4
    665e:	f007 f861 	bl	d724 <BoardCriticalSectionEnd>
}
    6662:	b003      	add	sp, #12
    6664:	bd30      	pop	{r4, r5, pc}
                RtcStopAlarm( );
    6666:	f7ff fa81 	bl	5b6c <RtcStopAlarm>
                TimerListHead = NULL;
    666a:	602c      	str	r4, [r5, #0]
    666c:	e7f6      	b.n	665c <TimerStop+0x2c>
                cur = cur->Next;
    666e:	461a      	mov	r2, r3
    6670:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
    6672:	2b00      	cmp	r3, #0
    6674:	d0f2      	beq.n	665c <TimerStop+0x2c>
            if( cur == obj )
    6676:	429c      	cmp	r4, r3
    6678:	d1f9      	bne.n	666e <TimerStop+0x3e>
                if( cur->Next != NULL )
    667a:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
    667c:	6153      	str	r3, [r2, #20]
    667e:	e7ed      	b.n	665c <TimerStop+0x2c>
    6680:	20001dcc 	.word	0x20001dcc

00006684 <GetFskBandwidthRegValue>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
             SX1276_PLL_STEP_SCALED );
}

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    6684:	b510      	push	{r4, lr}
    6686:	4b09      	ldr	r3, [pc, #36]	; (66ac <GetFskBandwidthRegValue+0x28>)
    6688:	2200      	movs	r2, #0
    668a:	4619      	mov	r1, r3
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
    668c:	681c      	ldr	r4, [r3, #0]
    668e:	4284      	cmp	r4, r0
    6690:	d802      	bhi.n	6698 <GetFskBandwidthRegValue+0x14>
    6692:	689c      	ldr	r4, [r3, #8]
    6694:	4284      	cmp	r4, r0
    6696:	d805      	bhi.n	66a4 <GetFskBandwidthRegValue+0x20>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    6698:	3201      	adds	r2, #1
    669a:	2a15      	cmp	r2, #21
    669c:	f103 0308 	add.w	r3, r3, #8
    66a0:	d1f4      	bne.n	668c <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
    66a2:	e7fe      	b.n	66a2 <GetFskBandwidthRegValue+0x1e>
            return FskBandwidths[i].RegValue;
    66a4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    66a8:	7908      	ldrb	r0, [r1, #4]
}
    66aa:	bd10      	pop	{r4, pc}
    66ac:	0000ee1c 	.word	0x0000ee1c

000066b0 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
    66b0:	4b05      	ldr	r3, [pc, #20]	; (66c8 <SX1276OnDio4Irq+0x18>)
    66b2:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    66b6:	b92a      	cbnz	r2, 66c4 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
    66b8:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    66bc:	b912      	cbnz	r2, 66c4 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    66be:	2201      	movs	r2, #1
    66c0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
    66c4:	4770      	bx	lr
    66c6:	bf00      	nop
    66c8:	20001e18 	.word	0x20001e18

000066cc <SX1276GetStatus>:
}
    66cc:	4b01      	ldr	r3, [pc, #4]	; (66d4 <SX1276GetStatus+0x8>)
    66ce:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    66d2:	4770      	bx	lr
    66d4:	20001e18 	.word	0x20001e18

000066d8 <SX1276GetTimeOnAir>:
{
    66d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    66da:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    66de:	f89d c018 	ldrb.w	ip, [sp, #24]
    66e2:	f89d e01c 	ldrb.w	lr, [sp, #28]
    66e6:	f89d 5020 	ldrb.w	r5, [sp, #32]
    switch( modem )
    66ea:	b140      	cbz	r0, 66fe <SX1276GetTimeOnAir+0x26>
    66ec:	2801      	cmp	r0, #1
    66ee:	d014      	beq.n	671a <SX1276GetTimeOnAir+0x42>
    66f0:	2201      	movs	r2, #1
    66f2:	2300      	movs	r3, #0
    return ( numerator + denominator - 1 ) / denominator;
    66f4:	1898      	adds	r0, r3, r2
    66f6:	3801      	subs	r0, #1
    66f8:	fbb0 f0f2 	udiv	r0, r0, r2
}
    66fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ( ( fixLen == false ) ? 8 : 0 ) +
    66fe:	f08c 0c01 	eor.w	ip, ip, #1
    return ( preambleLen << 3 ) +
    6702:	00e3      	lsls	r3, r4, #3
    6704:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) +
    6708:	3318      	adds	r3, #24
               ( 0 ) + // Address filter size
    670a:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
             ( syncWordLength << 3 ) +
    670e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
    6712:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    6716:	434b      	muls	r3, r1
        break;
    6718:	e7ec      	b.n	66f4 <SX1276GetTimeOnAir+0x1c>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
    671a:	1f50      	subs	r0, r2, #5
    671c:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
    671e:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
    6722:	d804      	bhi.n	672e <SX1276GetTimeOnAir+0x56>
        if( preambleLen < 12 )
    6724:	2c0c      	cmp	r4, #12
    6726:	bf38      	it	cc
    6728:	240c      	movcc	r4, #12
    bool    lowDatareOptimize = false;
    672a:	2700      	movs	r7, #0
    672c:	e006      	b.n	673c <SX1276GetTimeOnAir+0x64>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    672e:	b9c1      	cbnz	r1, 6762 <SX1276GetTimeOnAir+0x8a>
    6730:	f1a2 070b 	sub.w	r7, r2, #11
    6734:	2f01      	cmp	r7, #1
    6736:	bf8c      	ite	hi
    6738:	2700      	movhi	r7, #0
    673a:	2701      	movls	r7, #1
                            ( crcOn ? 16 : 0 ) -
    673c:	0128      	lsls	r0, r5, #4
                            ( fixLen ? 0 : 20 );
    673e:	f1bc 0f00 	cmp.w	ip, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
    6742:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
                            ( fixLen ? 0 : 20 );
    6746:	bf0c      	ite	eq
    6748:	2514      	moveq	r5, #20
    674a:	2500      	movne	r5, #0
                            ( crcOn ? 16 : 0 ) -
    674c:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    if( datarate <= 6 )
    6750:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
    6752:	ea4f 0682 	mov.w	r6, r2, lsl #2
    6756:	4428      	add	r0, r5
            ceilDenominator = 4 * ( datarate - 2 );
    6758:	f1a2 0c02 	sub.w	ip, r2, #2
    if( datarate <= 6 )
    675c:	d808      	bhi.n	6770 <SX1276GetTimeOnAir+0x98>
            ceilDenominator = 4 * datarate;
    675e:	4635      	mov	r5, r6
    6760:	e00b      	b.n	677a <SX1276GetTimeOnAir+0xa2>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    6762:	2901      	cmp	r1, #1
    6764:	d1e1      	bne.n	672a <SX1276GetTimeOnAir+0x52>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
    6766:	f1a2 000c 	sub.w	r0, r2, #12
    676a:	4247      	negs	r7, r0
    676c:	4147      	adcs	r7, r0
    676e:	e7e5      	b.n	673c <SX1276GetTimeOnAir+0x64>
        ceilNumerator += 8;
    6770:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
    6772:	2f00      	cmp	r7, #0
    6774:	d0f3      	beq.n	675e <SX1276GetTimeOnAir+0x86>
            ceilDenominator = 4 * ( datarate - 2 );
    6776:	ea4f 058c 	mov.w	r5, ip, lsl #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
    677a:	2800      	cmp	r0, #0
    677c:	bfac      	ite	ge
    677e:	182e      	addge	r6, r5, r0
    6780:	1c2e      	addlt	r6, r5, #0
    6782:	1e70      	subs	r0, r6, #1
    if( datarate <= 6 )
    6784:	2a06      	cmp	r2, #6
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
    6786:	fb90 f0f5 	sdiv	r0, r0, r5
    678a:	fb03 4400 	mla	r4, r3, r0, r4
    int32_t intermediate =
    678e:	bf8c      	ite	hi
    6790:	340c      	addhi	r4, #12
        intermediate += 2;
    6792:	340e      	addls	r4, #14
    switch( bw )
    6794:	2902      	cmp	r1, #2
    6796:	d80a      	bhi.n	67ae <SX1276GetTimeOnAir+0xd6>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
    6798:	00a3      	lsls	r3, r4, #2
    679a:	3301      	adds	r3, #1
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
    679c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
    67a0:	fa03 f30c 	lsl.w	r3, r3, ip
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
    67a4:	4353      	muls	r3, r2
    67a6:	4a02      	ldr	r2, [pc, #8]	; (67b0 <SX1276GetTimeOnAir+0xd8>)
    67a8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    67ac:	e7a2      	b.n	66f4 <SX1276GetTimeOnAir+0x1c>
    return ( numerator + denominator - 1 ) / denominator;
    67ae:	deff      	udf	#255	; 0xff
    67b0:	0000ee10 	.word	0x0000ee10

000067b4 <SX1276SetChannel>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    67b4:	f643 5309 	movw	r3, #15625	; 0x3d09
{
    67b8:	b510      	push	{r4, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    67ba:	fbb0 f2f3 	udiv	r2, r0, r3
    67be:	f641 6484 	movw	r4, #7812	; 0x1e84
    67c2:	fb03 0112 	mls	r1, r3, r2, r0
    67c6:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    67ca:	fbb4 f4f3 	udiv	r4, r4, r3
    SX1276.Settings.Channel = freq;
    67ce:	4b0a      	ldr	r3, [pc, #40]	; (67f8 <SX1276SetChannel+0x44>)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
    67d0:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276.Settings.Channel = freq;
    67d4:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
    67d8:	f3c4 4107 	ubfx	r1, r4, #16, #8
    67dc:	2006      	movs	r0, #6
    67de:	f007 f831 	bl	d844 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
    67e2:	f3c4 2107 	ubfx	r1, r4, #8, #8
    67e6:	2007      	movs	r0, #7
    67e8:	f007 f82c 	bl	d844 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
    67ec:	b2e1      	uxtb	r1, r4
    67ee:	2008      	movs	r0, #8
}
    67f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
    67f4:	f007 b826 	b.w	d844 <SX1276Write>
    67f8:	20001e18 	.word	0x20001e18

000067fc <SX1276OnDio3Irq>:
{
    67fc:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
    67fe:	4b11      	ldr	r3, [pc, #68]	; (6844 <SX1276OnDio3Irq+0x48>)
    6800:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
    6804:	2e01      	cmp	r6, #1
    6806:	d11c      	bne.n	6842 <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
    6808:	2012      	movs	r0, #18
    680a:	f007 f826 	bl	d85a <SX1276Read>
    680e:	f010 0401 	ands.w	r4, r0, #1
    6812:	4d0d      	ldr	r5, [pc, #52]	; (6848 <SX1276OnDio3Irq+0x4c>)
    6814:	d00b      	beq.n	682e <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
    6816:	2105      	movs	r1, #5
    6818:	2012      	movs	r0, #18
    681a:	f007 f813 	bl	d844 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    681e:	682b      	ldr	r3, [r5, #0]
    6820:	b17b      	cbz	r3, 6842 <SX1276OnDio3Irq+0x46>
    6822:	699b      	ldr	r3, [r3, #24]
    6824:	b16b      	cbz	r3, 6842 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
    6826:	4630      	mov	r0, r6
}
    6828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
    682c:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
    682e:	2104      	movs	r1, #4
    6830:	2012      	movs	r0, #18
    6832:	f007 f807 	bl	d844 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    6836:	682b      	ldr	r3, [r5, #0]
    6838:	b11b      	cbz	r3, 6842 <SX1276OnDio3Irq+0x46>
    683a:	699b      	ldr	r3, [r3, #24]
    683c:	b10b      	cbz	r3, 6842 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
    683e:	4620      	mov	r0, r4
    6840:	e7f2      	b.n	6828 <SX1276OnDio3Irq+0x2c>
}
    6842:	bd70      	pop	{r4, r5, r6, pc}
    6844:	20001e18 	.word	0x20001e18
    6848:	20001f5c 	.word	0x20001f5c

0000684c <SX1276OnDio2Irq>:
{
    684c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    684e:	4c31      	ldr	r4, [pc, #196]	; (6914 <SX1276OnDio2Irq+0xc8>)
    6850:	f894 10e0 	ldrb.w	r1, [r4, #224]	; 0xe0
    6854:	2901      	cmp	r1, #1
    6856:	d002      	beq.n	685e <SX1276OnDio2Irq+0x12>
    6858:	2902      	cmp	r1, #2
    685a:	d052      	beq.n	6902 <SX1276OnDio2Irq+0xb6>
}
    685c:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    685e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    6862:	b1cb      	cbz	r3, 6898 <SX1276OnDio2Irq+0x4c>
    6864:	2b01      	cmp	r3, #1
    6866:	d1f9      	bne.n	685c <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    6868:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    686c:	2b00      	cmp	r3, #0
    686e:	d0f5      	beq.n	685c <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    6870:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    6872:	2012      	movs	r0, #18
    6874:	f006 ffe6 	bl	d844 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
    6878:	4b27      	ldr	r3, [pc, #156]	; (6918 <SX1276OnDio2Irq+0xcc>)
    687a:	681b      	ldr	r3, [r3, #0]
    687c:	2b00      	cmp	r3, #0
    687e:	d0ed      	beq.n	685c <SX1276OnDio2Irq+0x10>
    6880:	695c      	ldr	r4, [r3, #20]
    6882:	2c00      	cmp	r4, #0
    6884:	d0ea      	beq.n	685c <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    6886:	201c      	movs	r0, #28
    6888:	f006 ffe7 	bl	d85a <SX1276Read>
    688c:	4623      	mov	r3, r4
    688e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
    6892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    6896:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
    6898:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    689a:	bb6b      	cbnz	r3, 68f8 <SX1276OnDio2Irq+0xac>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    689c:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
    68a0:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    68a4:	2b00      	cmp	r3, #0
    68a6:	d1d9      	bne.n	685c <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
    68a8:	481c      	ldr	r0, [pc, #112]	; (691c <SX1276OnDio2Irq+0xd0>)
    68aa:	f7ff fec1 	bl	6630 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    68ae:	2301      	movs	r3, #1
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    68b0:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    68b2:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    68b6:	f006 ffd0 	bl	d85a <SX1276Read>
    68ba:	0840      	lsrs	r0, r0, #1
    68bc:	4240      	negs	r0, r0
    68be:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    68c2:	201b      	movs	r0, #27
    68c4:	f006 ffc9 	bl	d85a <SX1276Read>
    68c8:	4605      	mov	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
    68ca:	201c      	movs	r0, #28
    68cc:	f006 ffc5 	bl	d85a <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    68d0:	f643 5309 	movw	r3, #15625	; 0x3d09
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    68d4:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    68d8:	b2c0      	uxtb	r0, r0
    68da:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
    68dc:	0a2d      	lsrs	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    68de:	3080      	adds	r0, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    68e0:	435d      	muls	r5, r3
    68e2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    68e6:	200c      	movs	r0, #12
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    68e8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    68ec:	f006 ffb5 	bl	d85a <SX1276Read>
    68f0:	0940      	lsrs	r0, r0, #5
    68f2:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
    68f6:	e7b1      	b.n	685c <SX1276OnDio2Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
    68f8:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
    68fc:	2b00      	cmp	r3, #0
    68fe:	d0ad      	beq.n	685c <SX1276OnDio2Irq+0x10>
    6900:	e7ce      	b.n	68a0 <SX1276OnDio2Irq+0x54>
            switch( SX1276.Settings.Modem )
    6902:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    6906:	2b01      	cmp	r3, #1
    6908:	d1a8      	bne.n	685c <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    690a:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    690e:	2b00      	cmp	r3, #0
    6910:	d0a4      	beq.n	685c <SX1276OnDio2Irq+0x10>
    6912:	e7ae      	b.n	6872 <SX1276OnDio2Irq+0x26>
    6914:	20001e18 	.word	0x20001e18
    6918:	20001f5c 	.word	0x20001f5c
    691c:	20001dd0 	.word	0x20001dd0

00006920 <SX1276OnDio1Irq>:
{
    6920:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    6922:	4c40      	ldr	r4, [pc, #256]	; (6a24 <SX1276OnDio1Irq+0x104>)
    6924:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
    6928:	2d01      	cmp	r5, #1
    692a:	d002      	beq.n	6932 <SX1276OnDio1Irq+0x12>
    692c:	2d02      	cmp	r5, #2
    692e:	d059      	beq.n	69e4 <SX1276OnDio1Irq+0xc4>
}
    6930:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    6932:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    6936:	b1cb      	cbz	r3, 696c <SX1276OnDio1Irq+0x4c>
    6938:	2b01      	cmp	r3, #1
    693a:	d1f9      	bne.n	6930 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
    693c:	f006 ff2f 	bl	d79e <SX1276GetDio1PinState>
    6940:	2800      	cmp	r0, #0
    6942:	d0f5      	beq.n	6930 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
    6944:	4838      	ldr	r0, [pc, #224]	; (6a28 <SX1276OnDio1Irq+0x108>)
    6946:	f7ff fe73 	bl	6630 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
    694a:	2180      	movs	r1, #128	; 0x80
    694c:	2012      	movs	r0, #18
    694e:	f006 ff79 	bl	d844 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    6952:	2300      	movs	r3, #0
    6954:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    6958:	4b34      	ldr	r3, [pc, #208]	; (6a2c <SX1276OnDio1Irq+0x10c>)
    695a:	681b      	ldr	r3, [r3, #0]
    695c:	2b00      	cmp	r3, #0
    695e:	d0e7      	beq.n	6930 <SX1276OnDio1Irq+0x10>
    6960:	68db      	ldr	r3, [r3, #12]
    6962:	2b00      	cmp	r3, #0
    6964:	d0e4      	beq.n	6930 <SX1276OnDio1Irq+0x10>
}
    6966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
    696a:	4718      	bx	r3
                if( SX1276GetDio1PinState( ) == 0 )
    696c:	f006 ff17 	bl	d79e <SX1276GetDio1PinState>
    6970:	2800      	cmp	r0, #0
    6972:	d0dd      	beq.n	6930 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
    6974:	482e      	ldr	r0, [pc, #184]	; (6a30 <SX1276OnDio1Irq+0x110>)
    6976:	f7ff fe5b 	bl	6630 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    697a:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    697e:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    6982:	4313      	orrs	r3, r2
    6984:	b29b      	uxth	r3, r3
    6986:	b93b      	cbnz	r3, 6998 <SX1276OnDio1Irq+0x78>
                    if( SX1276.Settings.Fsk.FixLen == false )
    6988:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    698c:	b9e8      	cbnz	r0, 69ca <SX1276OnDio1Irq+0xaa>
    SX1276ReadBuffer( 0, buffer, size );
    698e:	462a      	mov	r2, r5
    6990:	f504 718b 	add.w	r1, r4, #278	; 0x116
    6994:	f006 fee9 	bl	d76a <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
    6998:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    699c:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
    69a0:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
    69a4:	4923      	ldr	r1, [pc, #140]	; (6a34 <SX1276OnDio1Irq+0x114>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
    69a6:	1a12      	subs	r2, r2, r0
    69a8:	429a      	cmp	r2, r3
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
    69aa:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
    69ac:	db13      	blt.n	69d6 <SX1276OnDio1Irq+0xb6>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
    69ae:	1e5a      	subs	r2, r3, #1
    SX1276ReadBuffer( 0, buffer, size );
    69b0:	b2d2      	uxtb	r2, r2
    69b2:	2000      	movs	r0, #0
    69b4:	f006 fed9 	bl	d76a <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
    69b8:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    69bc:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
    69c0:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    69c2:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    69c4:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
    69c8:	e7b2      	b.n	6930 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    69ca:	2032      	movs	r0, #50	; 0x32
    69cc:	f006 ff45 	bl	d85a <SX1276Read>
    69d0:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    69d4:	e7e0      	b.n	6998 <SX1276OnDio1Irq+0x78>
    SX1276ReadBuffer( 0, buffer, size );
    69d6:	b2d2      	uxtb	r2, r2
    69d8:	2000      	movs	r0, #0
    69da:	f006 fec6 	bl	d76a <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    69de:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    69e2:	e7ef      	b.n	69c4 <SX1276OnDio1Irq+0xa4>
            switch( SX1276.Settings.Modem )
    69e4:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
    69e8:	2d00      	cmp	r5, #0
    69ea:	d1a1      	bne.n	6930 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
    69ec:	f006 fed7 	bl	d79e <SX1276GetDio1PinState>
    69f0:	2801      	cmp	r0, #1
    69f2:	d09d      	beq.n	6930 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
    69f4:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    69f8:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    69fc:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
    6a00:	490c      	ldr	r1, [pc, #48]	; (6a34 <SX1276OnDio1Irq+0x114>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
    6a02:	1a1b      	subs	r3, r3, r0
    6a04:	4293      	cmp	r3, r2
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
    6a06:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
    6a08:	dd07      	ble.n	6a1a <SX1276OnDio1Irq+0xfa>
    SX1276WriteBuffer( 0, buffer, size );
    6a0a:	4628      	mov	r0, r5
    6a0c:	f006 feba 	bl	d784 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    6a10:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
    6a14:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    6a18:	e7d3      	b.n	69c2 <SX1276OnDio1Irq+0xa2>
    SX1276WriteBuffer( 0, buffer, size );
    6a1a:	b2da      	uxtb	r2, r3
    6a1c:	4628      	mov	r0, r5
    6a1e:	f006 feb1 	bl	d784 <SX1276WriteBuffer>
    6a22:	e7dc      	b.n	69de <SX1276OnDio1Irq+0xbe>
    6a24:	20001e18 	.word	0x20001e18
    6a28:	20001de8 	.word	0x20001de8
    6a2c:	20001f5c 	.word	0x20001f5c
    6a30:	20001dd0 	.word	0x20001dd0
    6a34:	20002423 	.word	0x20002423

00006a38 <SX1276OnDio0Irq>:
{
    6a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    6a3a:	4c8f      	ldr	r4, [pc, #572]	; (6c78 <SX1276OnDio0Irq+0x240>)
    volatile uint8_t irqFlags = 0;
    6a3c:	2300      	movs	r3, #0
    6a3e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
    6a42:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    6a46:	2b01      	cmp	r3, #1
    6a48:	d004      	beq.n	6a54 <SX1276OnDio0Irq+0x1c>
    6a4a:	2b02      	cmp	r3, #2
    6a4c:	f000 80ff 	beq.w	6c4e <SX1276OnDio0Irq+0x216>
}
    6a50:	b002      	add	sp, #8
    6a52:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    6a54:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    6a58:	b33b      	cbz	r3, 6aaa <SX1276OnDio0Irq+0x72>
    6a5a:	2b01      	cmp	r3, #1
    6a5c:	d1f8      	bne.n	6a50 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
    6a5e:	2140      	movs	r1, #64	; 0x40
    6a60:	2012      	movs	r0, #18
    6a62:	f006 feef 	bl	d844 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
    6a66:	2012      	movs	r0, #18
    6a68:	f006 fef7 	bl	d85a <SX1276Read>
    6a6c:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
    6a70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a74:	4d81      	ldr	r5, [pc, #516]	; (6c7c <SX1276OnDio0Irq+0x244>)
    6a76:	f013 0f20 	tst.w	r3, #32
    6a7a:	f000 8093 	beq.w	6ba4 <SX1276OnDio0Irq+0x16c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
    6a7e:	2120      	movs	r1, #32
    6a80:	2012      	movs	r0, #18
    6a82:	f006 fedf 	bl	d844 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
    6a86:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
    6a8a:	b90b      	cbnz	r3, 6a90 <SX1276OnDio0Irq+0x58>
                            SX1276.Settings.State = RF_IDLE;
    6a8c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
    6a90:	487b      	ldr	r0, [pc, #492]	; (6c80 <SX1276OnDio0Irq+0x248>)
    6a92:	f7ff fdcd 	bl	6630 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    6a96:	682b      	ldr	r3, [r5, #0]
    6a98:	2b00      	cmp	r3, #0
    6a9a:	d0d9      	beq.n	6a50 <SX1276OnDio0Irq+0x18>
    6a9c:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    6a9e:	2b00      	cmp	r3, #0
    6aa0:	d0d6      	beq.n	6a50 <SX1276OnDio0Irq+0x18>
}
    6aa2:	b002      	add	sp, #8
    6aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
    6aa8:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
    6aaa:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    6aae:	4d73      	ldr	r5, [pc, #460]	; (6c7c <SX1276OnDio0Irq+0x244>)
    6ab0:	b393      	cbz	r3, 6b18 <SX1276OnDio0Irq+0xe0>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
    6ab2:	203f      	movs	r0, #63	; 0x3f
    6ab4:	f006 fed1 	bl	d85a <SX1276Read>
    6ab8:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
    6abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ac0:	079b      	lsls	r3, r3, #30
    6ac2:	d429      	bmi.n	6b18 <SX1276OnDio0Irq+0xe0>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    6ac4:	210b      	movs	r1, #11
    6ac6:	203e      	movs	r0, #62	; 0x3e
    6ac8:	f006 febc 	bl	d844 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    6acc:	2110      	movs	r1, #16
    6ace:	203f      	movs	r0, #63	; 0x3f
    6ad0:	f006 feb8 	bl	d844 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
    6ad4:	486a      	ldr	r0, [pc, #424]	; (6c80 <SX1276OnDio0Irq+0x248>)
    6ad6:	f7ff fdab 	bl	6630 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
    6ada:	f894 6102 	ldrb.w	r6, [r4, #258]	; 0x102
    6ade:	b98e      	cbnz	r6, 6b04 <SX1276OnDio0Irq+0xcc>
                            TimerStop( &RxTimeoutSyncWord );
    6ae0:	4868      	ldr	r0, [pc, #416]	; (6c84 <SX1276OnDio0Irq+0x24c>)
    6ae2:	f7ff fda5 	bl	6630 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
    6ae6:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    6aea:	682b      	ldr	r3, [r5, #0]
    6aec:	b113      	cbz	r3, 6af4 <SX1276OnDio0Irq+0xbc>
    6aee:	691b      	ldr	r3, [r3, #16]
    6af0:	b103      	cbz	r3, 6af4 <SX1276OnDio0Irq+0xbc>
                            RadioEvents->RxError( );
    6af2:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    6af4:	2300      	movs	r3, #0
    6af6:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
    6afa:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
    6afe:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
    6b02:	e7a5      	b.n	6a50 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    6b04:	200d      	movs	r0, #13
    6b06:	f006 fea8 	bl	d85a <SX1276Read>
    6b0a:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    6b0e:	b2c9      	uxtb	r1, r1
    6b10:	200d      	movs	r0, #13
    6b12:	f006 fe97 	bl	d844 <SX1276Write>
    6b16:	e7e8      	b.n	6aea <SX1276OnDio0Irq+0xb2>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    6b18:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
    6b1c:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
    6b20:	4e59      	ldr	r6, [pc, #356]	; (6c88 <SX1276OnDio0Irq+0x250>)
    6b22:	ea52 0301 	orrs.w	r3, r2, r1
    6b26:	d10a      	bne.n	6b3e <SX1276OnDio0Irq+0x106>
                    if( SX1276.Settings.Fsk.FixLen == false )
    6b28:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    6b2c:	bb50      	cbnz	r0, 6b84 <SX1276OnDio0Irq+0x14c>
    SX1276ReadBuffer( 0, buffer, size );
    6b2e:	4957      	ldr	r1, [pc, #348]	; (6c8c <SX1276OnDio0Irq+0x254>)
    6b30:	2201      	movs	r2, #1
    6b32:	f006 fe1a 	bl	d76a <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    6b36:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
    6b3a:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    6b3e:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
    6b40:	b2d2      	uxtb	r2, r2
    6b42:	4431      	add	r1, r6
    6b44:	2000      	movs	r0, #0
    6b46:	f006 fe10 	bl	d76a <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    6b4a:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
    6b4e:	484c      	ldr	r0, [pc, #304]	; (6c80 <SX1276OnDio0Irq+0x248>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    6b50:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
    6b54:	f7ff fd6c 	bl	6630 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
    6b58:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    6b5c:	b9c3      	cbnz	r3, 6b90 <SX1276OnDio0Irq+0x158>
                    TimerStop( &RxTimeoutSyncWord );
    6b5e:	4849      	ldr	r0, [pc, #292]	; (6c84 <SX1276OnDio0Irq+0x24c>)
                    SX1276.Settings.State = RF_IDLE;
    6b60:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
    6b64:	f7ff fd64 	bl	6630 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    6b68:	682b      	ldr	r3, [r5, #0]
    6b6a:	2b00      	cmp	r3, #0
    6b6c:	d0c2      	beq.n	6af4 <SX1276OnDio0Irq+0xbc>
    6b6e:	689d      	ldr	r5, [r3, #8]
    6b70:	2d00      	cmp	r5, #0
    6b72:	d0bf      	beq.n	6af4 <SX1276OnDio0Irq+0xbc>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
    6b74:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
    6b78:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
    6b7c:	4842      	ldr	r0, [pc, #264]	; (6c88 <SX1276OnDio0Irq+0x250>)
    6b7e:	2300      	movs	r3, #0
    6b80:	47a8      	blx	r5
    6b82:	e7b7      	b.n	6af4 <SX1276OnDio0Irq+0xbc>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    6b84:	2032      	movs	r0, #50	; 0x32
    6b86:	f006 fe68 	bl	d85a <SX1276Read>
    6b8a:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    6b8e:	e7d2      	b.n	6b36 <SX1276OnDio0Irq+0xfe>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    6b90:	200d      	movs	r0, #13
    6b92:	f006 fe62 	bl	d85a <SX1276Read>
    6b96:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    6b9a:	b2c9      	uxtb	r1, r1
    6b9c:	200d      	movs	r0, #13
    6b9e:	f006 fe51 	bl	d844 <SX1276Write>
    6ba2:	e7e1      	b.n	6b68 <SX1276OnDio0Irq+0x130>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
    6ba4:	2019      	movs	r0, #25
    6ba6:	f006 fe58 	bl	d85a <SX1276Read>
    6baa:	b240      	sxtb	r0, r0
    6bac:	3002      	adds	r0, #2
    6bae:	1080      	asrs	r0, r0, #2
    6bb0:	f884 013c 	strb.w	r0, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    6bb4:	201a      	movs	r0, #26
    6bb6:	f006 fe50 	bl	d85a <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
    6bba:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
    6bbe:	4934      	ldr	r1, [pc, #208]	; (6c90 <SX1276OnDio0Irq+0x258>)
    6bc0:	2a00      	cmp	r2, #0
    6bc2:	f340 130b 	sbfx	r3, r0, #4, #12
    6bc6:	da3a      	bge.n	6c3e <SX1276OnDio0Irq+0x206>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    6bc8:	f8d4 60e4 	ldr.w	r6, [r4, #228]	; 0xe4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
    6bcc:	b292      	uxth	r2, r2
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    6bce:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
    6bd0:	bf8c      	ite	hi
    6bd2:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
    6bd4:	3aa4      	subls	r2, #164	; 0xa4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
    6bd6:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
    6bd8:	4410      	add	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    6bda:	4403      	add	r3, r0
    6bdc:	b21b      	sxth	r3, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    6bde:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
    6be0:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    6be4:	f006 fe39 	bl	d85a <SX1276Read>
    6be8:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
    6bec:	2010      	movs	r0, #16
    6bee:	f006 fe34 	bl	d85a <SX1276Read>
    6bf2:	4601      	mov	r1, r0
    6bf4:	200d      	movs	r0, #13
    6bf6:	f006 fe25 	bl	d844 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
    6bfa:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
    6bfe:	4922      	ldr	r1, [pc, #136]	; (6c88 <SX1276OnDio0Irq+0x250>)
    6c00:	2000      	movs	r0, #0
    6c02:	f006 fdb2 	bl	d76a <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
    6c06:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
    6c0a:	b90b      	cbnz	r3, 6c10 <SX1276OnDio0Irq+0x1d8>
                        SX1276.Settings.State = RF_IDLE;
    6c0c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
    6c10:	481b      	ldr	r0, [pc, #108]	; (6c80 <SX1276OnDio0Irq+0x248>)
    6c12:	f7ff fd0d 	bl	6630 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    6c16:	682b      	ldr	r3, [r5, #0]
    6c18:	2b00      	cmp	r3, #0
    6c1a:	f43f af19 	beq.w	6a50 <SX1276OnDio0Irq+0x18>
    6c1e:	689d      	ldr	r5, [r3, #8]
    6c20:	2d00      	cmp	r5, #0
    6c22:	f43f af15 	beq.w	6a50 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    6c26:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
    6c2a:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
    6c2e:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    6c32:	4815      	ldr	r0, [pc, #84]	; (6c88 <SX1276OnDio0Irq+0x250>)
    6c34:	46ac      	mov	ip, r5
}
    6c36:	b002      	add	sp, #8
    6c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    6c3c:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    6c3e:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
    6c42:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
    6c44:	b29b      	uxth	r3, r3
    6c46:	bf8c      	ite	hi
    6c48:	389d      	subhi	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    6c4a:	38a4      	subls	r0, #164	; 0xa4
    6c4c:	e7c5      	b.n	6bda <SX1276OnDio0Irq+0x1a2>
            TimerStop( &TxTimeoutTimer );
    6c4e:	4811      	ldr	r0, [pc, #68]	; (6c94 <SX1276OnDio0Irq+0x25c>)
    6c50:	f7ff fcee 	bl	6630 <TimerStop>
            switch( SX1276.Settings.Modem )
    6c54:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    6c58:	2b01      	cmp	r3, #1
    6c5a:	d103      	bne.n	6c64 <SX1276OnDio0Irq+0x22c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
    6c5c:	2108      	movs	r1, #8
    6c5e:	2012      	movs	r0, #18
    6c60:	f006 fdf0 	bl	d844 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    6c64:	2300      	movs	r3, #0
    6c66:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    6c6a:	4b04      	ldr	r3, [pc, #16]	; (6c7c <SX1276OnDio0Irq+0x244>)
    6c6c:	681b      	ldr	r3, [r3, #0]
    6c6e:	2b00      	cmp	r3, #0
    6c70:	f43f aeee 	beq.w	6a50 <SX1276OnDio0Irq+0x18>
    6c74:	681b      	ldr	r3, [r3, #0]
    6c76:	e712      	b.n	6a9e <SX1276OnDio0Irq+0x66>
    6c78:	20001e18 	.word	0x20001e18
    6c7c:	20001f5c 	.word	0x20001f5c
    6c80:	20001de8 	.word	0x20001de8
    6c84:	20001dd0 	.word	0x20001dd0
    6c88:	20002423 	.word	0x20002423
    6c8c:	20001f2e 	.word	0x20001f2e
    6c90:	1f4add40 	.word	0x1f4add40
    6c94:	20001e00 	.word	0x20001e00

00006c98 <RxChainCalibration>:
{
    6c98:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
    6c9a:	2009      	movs	r0, #9
    6c9c:	f006 fddd 	bl	d85a <SX1276Read>
    6ca0:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    6ca2:	2006      	movs	r0, #6
    6ca4:	f006 fdd9 	bl	d85a <SX1276Read>
    6ca8:	4606      	mov	r6, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
    6caa:	2007      	movs	r0, #7
    6cac:	f006 fdd5 	bl	d85a <SX1276Read>
    6cb0:	0204      	lsls	r4, r0, #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
    6cb2:	2008      	movs	r0, #8
    6cb4:	f006 fdd1 	bl	d85a <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    6cb8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    6cbc:	f643 5309 	movw	r3, #15625	; 0x3d09
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    6cc0:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    6cc2:	b2c0      	uxtb	r0, r0
    6cc4:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
    6cc6:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    6cc8:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    6cca:	3080      	adds	r0, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
    6ccc:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    6cce:	eb04 2410 	add.w	r4, r4, r0, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
    6cd2:	2009      	movs	r0, #9
    6cd4:	f006 fdb6 	bl	d844 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    6cd8:	203b      	movs	r0, #59	; 0x3b
    6cda:	f006 fdbe 	bl	d85a <SX1276Read>
    6cde:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    6ce2:	b2c9      	uxtb	r1, r1
    6ce4:	203b      	movs	r0, #59	; 0x3b
    6ce6:	f006 fdad 	bl	d844 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    6cea:	203b      	movs	r0, #59	; 0x3b
    6cec:	f006 fdb5 	bl	d85a <SX1276Read>
    6cf0:	0682      	lsls	r2, r0, #26
    6cf2:	d4fa      	bmi.n	6cea <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
    6cf4:	480c      	ldr	r0, [pc, #48]	; (6d28 <RxChainCalibration+0x90>)
    6cf6:	f7ff fd5d 	bl	67b4 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    6cfa:	203b      	movs	r0, #59	; 0x3b
    6cfc:	f006 fdad 	bl	d85a <SX1276Read>
    6d00:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    6d04:	b2c9      	uxtb	r1, r1
    6d06:	203b      	movs	r0, #59	; 0x3b
    6d08:	f006 fd9c 	bl	d844 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    6d0c:	203b      	movs	r0, #59	; 0x3b
    6d0e:	f006 fda4 	bl	d85a <SX1276Read>
    6d12:	0683      	lsls	r3, r0, #26
    6d14:	d4fa      	bmi.n	6d0c <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
    6d16:	4629      	mov	r1, r5
    6d18:	2009      	movs	r0, #9
    6d1a:	f006 fd93 	bl	d844 <SX1276Write>
    SX1276SetChannel( initialFreq );
    6d1e:	4620      	mov	r0, r4
}
    6d20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
    6d24:	f7ff bd46 	b.w	67b4 <SX1276SetChannel>
    6d28:	33bca100 	.word	0x33bca100

00006d2c <SX1276SetSleep>:
{
    6d2c:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    6d2e:	480a      	ldr	r0, [pc, #40]	; (6d58 <SX1276SetSleep+0x2c>)
    6d30:	f7ff fc7e 	bl	6630 <TimerStop>
    TimerStop( &TxTimeoutTimer );
    6d34:	4809      	ldr	r0, [pc, #36]	; (6d5c <SX1276SetSleep+0x30>)
    6d36:	f7ff fc7b 	bl	6630 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    6d3a:	4809      	ldr	r0, [pc, #36]	; (6d60 <SX1276SetSleep+0x34>)
    6d3c:	f7ff fc78 	bl	6630 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    6d40:	2000      	movs	r0, #0
    6d42:	f006 fd95 	bl	d870 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
    6d46:	2000      	movs	r0, #0
    6d48:	f006 fcfc 	bl	d744 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
    6d4c:	4b05      	ldr	r3, [pc, #20]	; (6d64 <SX1276SetSleep+0x38>)
    6d4e:	2200      	movs	r2, #0
    6d50:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    6d54:	bd08      	pop	{r3, pc}
    6d56:	bf00      	nop
    6d58:	20001de8 	.word	0x20001de8
    6d5c:	20001e00 	.word	0x20001e00
    6d60:	20001dd0 	.word	0x20001dd0
    6d64:	20001e18 	.word	0x20001e18

00006d68 <SX1276SetStby>:
{
    6d68:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    6d6a:	4808      	ldr	r0, [pc, #32]	; (6d8c <SX1276SetStby+0x24>)
    6d6c:	f7ff fc60 	bl	6630 <TimerStop>
    TimerStop( &TxTimeoutTimer );
    6d70:	4807      	ldr	r0, [pc, #28]	; (6d90 <SX1276SetStby+0x28>)
    6d72:	f7ff fc5d 	bl	6630 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    6d76:	4807      	ldr	r0, [pc, #28]	; (6d94 <SX1276SetStby+0x2c>)
    6d78:	f7ff fc5a 	bl	6630 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
    6d7c:	2001      	movs	r0, #1
    6d7e:	f006 fd77 	bl	d870 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
    6d82:	4b05      	ldr	r3, [pc, #20]	; (6d98 <SX1276SetStby+0x30>)
    6d84:	2200      	movs	r2, #0
    6d86:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    6d8a:	bd08      	pop	{r3, pc}
    6d8c:	20001de8 	.word	0x20001de8
    6d90:	20001e00 	.word	0x20001e00
    6d94:	20001dd0 	.word	0x20001dd0
    6d98:	20001e18 	.word	0x20001e18

00006d9c <SX1276Send>:
{
    6d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
    6d9e:	4c60      	ldr	r4, [pc, #384]	; (6f20 <SX1276Send+0x184>)
{
    6da0:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
    6da4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
    6da8:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
    6daa:	b1db      	cbz	r3, 6de4 <SX1276Send+0x48>
    6dac:	2b01      	cmp	r3, #1
    6dae:	d045      	beq.n	6e3c <SX1276Send+0xa0>
    6db0:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
    6db2:	485c      	ldr	r0, [pc, #368]	; (6f24 <SX1276Send+0x188>)
    6db4:	f7ff fc3c 	bl	6630 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
    6db8:	485b      	ldr	r0, [pc, #364]	; (6f28 <SX1276Send+0x18c>)
    6dba:	4629      	mov	r1, r5
    6dbc:	f006 fd19 	bl	d7f2 <TimerSetValue>
    switch( SX1276.Settings.Modem )
    6dc0:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d076      	beq.n	6eb6 <SX1276Send+0x11a>
    6dc8:	2b01      	cmp	r3, #1
    6dca:	f000 808c 	beq.w	6ee6 <SX1276Send+0x14a>
    SX1276.Settings.State = RF_TX_RUNNING;
    6dce:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
    6dd0:	4855      	ldr	r0, [pc, #340]	; (6f28 <SX1276Send+0x18c>)
    SX1276.Settings.State = RF_TX_RUNNING;
    6dd2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    6dd6:	f7ff fbb5 	bl	6544 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    6dda:	2003      	movs	r0, #3
    6ddc:	f006 fd48 	bl	d870 <SX1276SetOpMode>
}
    6de0:	b003      	add	sp, #12
    6de2:	bd30      	pop	{r4, r5, pc}
            if( SX1276.Settings.Fsk.FixLen == false )
    6de4:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
    6de8:	f89d 1007 	ldrb.w	r1, [sp, #7]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    6dec:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
    6df0:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
    6df4:	b9f0      	cbnz	r0, 6e34 <SX1276Send+0x98>
    SX1276WriteBuffer( 0, buffer, size );
    6df6:	2201      	movs	r2, #1
    6df8:	f10d 0107 	add.w	r1, sp, #7
    6dfc:	f006 fcc2 	bl	d784 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
    6e00:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e04:	1e53      	subs	r3, r2, #1
    6e06:	2b3f      	cmp	r3, #63	; 0x3f
    6e08:	d904      	bls.n	6e14 <SX1276Send+0x78>
                memcpy1( RxTxBuffer, buffer, size );
    6e0a:	4848      	ldr	r0, [pc, #288]	; (6f2c <SX1276Send+0x190>)
    6e0c:	4629      	mov	r1, r5
    6e0e:	f006 fcc8 	bl	d7a2 <memcpy1>
    6e12:	2220      	movs	r2, #32
    SX1276WriteBuffer( 0, buffer, size );
    6e14:	4629      	mov	r1, r5
    6e16:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
    6e18:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    SX1276WriteBuffer( 0, buffer, size );
    6e1c:	f006 fcb2 	bl	d784 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    6e20:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    6e24:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
    6e28:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    6e2c:	4413      	add	r3, r2
    6e2e:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
    6e32:	e7be      	b.n	6db2 <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
    6e34:	2032      	movs	r0, #50	; 0x32
    6e36:	f006 fd05 	bl	d844 <SX1276Write>
    6e3a:	e7e1      	b.n	6e00 <SX1276Send+0x64>
            if( SX1276.Settings.LoRa.IqInverted == true )
    6e3c:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    6e40:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    6e42:	b36b      	cbz	r3, 6ea0 <SX1276Send+0x104>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    6e44:	f006 fd09 	bl	d85a <SX1276Read>
    6e48:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    6e4c:	2033      	movs	r0, #51	; 0x33
    6e4e:	f006 fcf9 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    6e52:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    6e54:	203b      	movs	r0, #59	; 0x3b
    6e56:	f006 fcf5 	bl	d844 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
    6e5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    6e5e:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
    6e62:	2022      	movs	r0, #34	; 0x22
    6e64:	f006 fcee 	bl	d844 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
    6e68:	2100      	movs	r1, #0
    6e6a:	200e      	movs	r0, #14
    6e6c:	f006 fcea 	bl	d844 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    6e70:	2100      	movs	r1, #0
    6e72:	200d      	movs	r0, #13
    6e74:	f006 fce6 	bl	d844 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
    6e78:	2001      	movs	r0, #1
    6e7a:	f006 fcee 	bl	d85a <SX1276Read>
    6e7e:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
    6e82:	d104      	bne.n	6e8e <SX1276Send+0xf2>
                SX1276SetStby( );
    6e84:	f7ff ff70 	bl	6d68 <SX1276SetStby>
                DelayMs( 1 );
    6e88:	2001      	movs	r0, #1
    6e8a:	f006 fcd9 	bl	d840 <DelayMs>
    SX1276WriteBuffer( 0, buffer, size );
    6e8e:	4629      	mov	r1, r5
    6e90:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e94:	2000      	movs	r0, #0
    6e96:	f006 fc75 	bl	d784 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
    6e9a:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
        break;
    6e9e:	e788      	b.n	6db2 <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    6ea0:	f006 fcdb 	bl	d85a <SX1276Read>
    6ea4:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    6ea8:	f041 0101 	orr.w	r1, r1, #1
    6eac:	2033      	movs	r0, #51	; 0x33
    6eae:	f006 fcc9 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    6eb2:	211d      	movs	r1, #29
    6eb4:	e7ce      	b.n	6e54 <SX1276Send+0xb8>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    6eb6:	2040      	movs	r0, #64	; 0x40
    6eb8:	f006 fccf 	bl	d85a <SX1276Read>
    6ebc:	f000 0103 	and.w	r1, r0, #3
    6ec0:	2040      	movs	r0, #64	; 0x40
    6ec2:	f006 fcbf 	bl	d844 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    6ec6:	2041      	movs	r0, #65	; 0x41
    6ec8:	f006 fcc7 	bl	d85a <SX1276Read>
    6ecc:	f000 013e 	and.w	r1, r0, #62	; 0x3e
    6ed0:	2041      	movs	r0, #65	; 0x41
    6ed2:	f006 fcb7 	bl	d844 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    6ed6:	2035      	movs	r0, #53	; 0x35
    6ed8:	f006 fcbf 	bl	d85a <SX1276Read>
    6edc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6ee0:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
    6ee4:	e773      	b.n	6dce <SX1276Send+0x32>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    6ee6:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    6eea:	b173      	cbz	r3, 6f0a <SX1276Send+0x16e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    6eec:	21f5      	movs	r1, #245	; 0xf5
    6eee:	2011      	movs	r0, #17
    6ef0:	f006 fca8 	bl	d844 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
    6ef4:	2040      	movs	r0, #64	; 0x40
    6ef6:	f006 fcb0 	bl	d85a <SX1276Read>
    6efa:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    6efe:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    6f02:	2040      	movs	r0, #64	; 0x40
    6f04:	f006 fc9e 	bl	d844 <SX1276Write>
    6f08:	e761      	b.n	6dce <SX1276Send+0x32>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    6f0a:	21f7      	movs	r1, #247	; 0xf7
    6f0c:	2011      	movs	r0, #17
    6f0e:	f006 fc99 	bl	d844 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    6f12:	2040      	movs	r0, #64	; 0x40
    6f14:	f006 fca1 	bl	d85a <SX1276Read>
    6f18:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    6f1c:	e7ef      	b.n	6efe <SX1276Send+0x162>
    6f1e:	bf00      	nop
    6f20:	20001e18 	.word	0x20001e18
    6f24:	20001de8 	.word	0x20001de8
    6f28:	20001e00 	.word	0x20001e00
    6f2c:	20002423 	.word	0x20002423

00006f30 <SX1276SetRx>:
{
    6f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
    6f32:	4c83      	ldr	r4, [pc, #524]	; (7140 <SX1276SetRx+0x210>)
{
    6f34:	4605      	mov	r5, r0
    TimerStop( &TxTimeoutTimer );
    6f36:	4883      	ldr	r0, [pc, #524]	; (7144 <SX1276SetRx+0x214>)
    6f38:	f7ff fb7a 	bl	6630 <TimerStop>
    switch( SX1276.Settings.Modem )
    6f3c:	f894 60e1 	ldrb.w	r6, [r4, #225]	; 0xe1
    6f40:	b14e      	cbz	r6, 6f56 <SX1276SetRx+0x26>
    6f42:	2e01      	cmp	r6, #1
    6f44:	d04d      	beq.n	6fe2 <SX1276SetRx+0xb2>
    SX1276.Settings.State = RF_RX_RUNNING;
    6f46:	2301      	movs	r3, #1
    6f48:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
    6f4c:	2d00      	cmp	r5, #0
    6f4e:	f000 80f3 	beq.w	7138 <SX1276SetRx+0x208>
    bool rxContinuous = false;
    6f52:	2700      	movs	r7, #0
    6f54:	e029      	b.n	6faa <SX1276SetRx+0x7a>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    6f56:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
    6f58:	f894 7102 	ldrb.w	r7, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    6f5c:	f006 fc7d 	bl	d85a <SX1276Read>
    6f60:	f000 0103 	and.w	r1, r0, #3
    6f64:	f041 010c 	orr.w	r1, r1, #12
    6f68:	2040      	movs	r0, #64	; 0x40
    6f6a:	f006 fc6b 	bl	d844 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    6f6e:	2041      	movs	r0, #65	; 0x41
    6f70:	f006 fc73 	bl	d85a <SX1276Read>
    6f74:	f060 013e 	orn	r1, r0, #62	; 0x3e
    6f78:	b2c9      	uxtb	r1, r1
    6f7a:	2041      	movs	r0, #65	; 0x41
    6f7c:	f006 fc62 	bl	d844 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    6f80:	2035      	movs	r0, #53	; 0x35
    6f82:	f006 fc6a 	bl	d85a <SX1276Read>
    6f86:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6f8a:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
    6f8e:	211e      	movs	r1, #30
    6f90:	200d      	movs	r0, #13
    6f92:	f006 fc57 	bl	d844 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    6f96:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    6f9a:	f8a4 6118 	strh.w	r6, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    6f9e:	f8a4 6116 	strh.w	r6, [r4, #278]	; 0x116
    SX1276.Settings.State = RF_RX_RUNNING;
    6fa2:	2301      	movs	r3, #1
    6fa4:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
    6fa8:	b135      	cbz	r5, 6fb8 <SX1276SetRx+0x88>
        TimerSetValue( &RxTimeoutTimer, timeout );
    6faa:	4867      	ldr	r0, [pc, #412]	; (7148 <SX1276SetRx+0x218>)
    6fac:	4629      	mov	r1, r5
    6fae:	f006 fc20 	bl	d7f2 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
    6fb2:	4865      	ldr	r0, [pc, #404]	; (7148 <SX1276SetRx+0x218>)
    6fb4:	f7ff fac6 	bl	6544 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
    6fb8:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    6fbc:	2b00      	cmp	r3, #0
    6fbe:	f040 80b5 	bne.w	712c <SX1276SetRx+0x1fc>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
    6fc2:	2005      	movs	r0, #5
    6fc4:	f006 fc54 	bl	d870 <SX1276SetOpMode>
        if( rxContinuous == false )
    6fc8:	2f00      	cmp	r7, #0
    6fca:	f040 80b7 	bne.w	713c <SX1276SetRx+0x20c>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
    6fce:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    6fd2:	485e      	ldr	r0, [pc, #376]	; (714c <SX1276SetRx+0x21c>)
    6fd4:	f006 fc0d 	bl	d7f2 <TimerSetValue>
}
    6fd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            TimerStart( &RxTimeoutSyncWord );
    6fdc:	485b      	ldr	r0, [pc, #364]	; (714c <SX1276SetRx+0x21c>)
    6fde:	f7ff bab1 	b.w	6544 <TimerStart>
            if( SX1276.Settings.LoRa.IqInverted == true )
    6fe2:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    6fe6:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    6fe8:	b33b      	cbz	r3, 703a <SX1276SetRx+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    6fea:	f006 fc36 	bl	d85a <SX1276Read>
    6fee:	f040 0141 	orr.w	r1, r0, #65	; 0x41
    6ff2:	b2c9      	uxtb	r1, r1
    6ff4:	2033      	movs	r0, #51	; 0x33
    6ff6:	f006 fc25 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    6ffa:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    6ffc:	203b      	movs	r0, #59	; 0x3b
    6ffe:	f006 fc21 	bl	d844 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    7002:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7006:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    7008:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    700c:	d87d      	bhi.n	710a <SX1276SetRx+0x1da>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    700e:	f006 fc24 	bl	d85a <SX1276Read>
    7012:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    7016:	2031      	movs	r0, #49	; 0x31
    7018:	f006 fc14 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
    701c:	2100      	movs	r1, #0
    701e:	2030      	movs	r0, #48	; 0x30
    7020:	f006 fc10 	bl	d844 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
    7024:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    7028:	2b08      	cmp	r3, #8
    702a:	d81c      	bhi.n	7066 <SX1276SetRx+0x136>
    702c:	e8df f003 	tbb	[pc, r3]
    7030:	4a403610 	.word	0x4a403610
    7034:	68685e54 	.word	0x68685e54
    7038:	68          	.byte	0x68
    7039:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    703a:	f006 fc0e 	bl	d85a <SX1276Read>
    703e:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    7042:	f041 0101 	orr.w	r1, r1, #1
    7046:	2033      	movs	r0, #51	; 0x33
    7048:	f006 fbfc 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    704c:	211d      	movs	r1, #29
    704e:	e7d5      	b.n	6ffc <SX1276SetRx+0xcc>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
    7050:	202f      	movs	r0, #47	; 0x2f
    7052:	2148      	movs	r1, #72	; 0x48
    7054:	f006 fbf6 	bl	d844 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
    7058:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    705c:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
    7060:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
    7062:	f7ff fba7 	bl	67b4 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    7066:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
    706a:	f894 7132 	ldrb.w	r7, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    706e:	2b00      	cmp	r3, #0
    7070:	d052      	beq.n	7118 <SX1276SetRx+0x1e8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    7072:	211d      	movs	r1, #29
    7074:	2011      	movs	r0, #17
    7076:	f006 fbe5 	bl	d844 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
    707a:	2040      	movs	r0, #64	; 0x40
    707c:	f006 fbed 	bl	d85a <SX1276Read>
    7080:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    7084:	2040      	movs	r0, #64	; 0x40
    7086:	f006 fbdd 	bl	d844 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
    708a:	2100      	movs	r1, #0
    708c:	200f      	movs	r0, #15
    708e:	f006 fbd9 	bl	d844 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    7092:	2100      	movs	r1, #0
    7094:	200d      	movs	r0, #13
    7096:	f006 fbd5 	bl	d844 <SX1276Write>
        break;
    709a:	e782      	b.n	6fa2 <SX1276SetRx+0x72>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    709c:	202f      	movs	r0, #47	; 0x2f
    709e:	2144      	movs	r1, #68	; 0x44
    70a0:	f006 fbd0 	bl	d844 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
    70a4:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    70a8:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
    70ac:	3034      	adds	r0, #52	; 0x34
    70ae:	e7d8      	b.n	7062 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    70b0:	202f      	movs	r0, #47	; 0x2f
    70b2:	2144      	movs	r1, #68	; 0x44
    70b4:	f006 fbc6 	bl	d844 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
    70b8:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    70bc:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
    70c0:	3004      	adds	r0, #4
    70c2:	e7ce      	b.n	7062 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    70c4:	202f      	movs	r0, #47	; 0x2f
    70c6:	2144      	movs	r1, #68	; 0x44
    70c8:	f006 fbbc 	bl	d844 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
    70cc:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    70d0:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
    70d4:	305e      	adds	r0, #94	; 0x5e
    70d6:	e7c4      	b.n	7062 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    70d8:	202f      	movs	r0, #47	; 0x2f
    70da:	2144      	movs	r1, #68	; 0x44
    70dc:	f006 fbb2 	bl	d844 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
    70e0:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    70e4:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
    70e8:	3012      	adds	r0, #18
    70ea:	e7ba      	b.n	7062 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    70ec:	202f      	movs	r0, #47	; 0x2f
    70ee:	2144      	movs	r1, #68	; 0x44
    70f0:	f006 fba8 	bl	d844 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
    70f4:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    70f8:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
    70fc:	30c6      	adds	r0, #198	; 0xc6
    70fe:	e7b0      	b.n	7062 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
    7100:	2140      	movs	r1, #64	; 0x40
    7102:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
    7104:	f006 fb9e 	bl	d844 <SX1276Write>
    7108:	e7ad      	b.n	7066 <SX1276SetRx+0x136>
    710a:	f006 fba6 	bl	d85a <SX1276Read>
    710e:	f060 017f 	orn	r1, r0, #127	; 0x7f
    7112:	b2c9      	uxtb	r1, r1
    7114:	2031      	movs	r0, #49	; 0x31
    7116:	e7f5      	b.n	7104 <SX1276SetRx+0x1d4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    7118:	211f      	movs	r1, #31
    711a:	2011      	movs	r0, #17
    711c:	f006 fb92 	bl	d844 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    7120:	2040      	movs	r0, #64	; 0x40
    7122:	f006 fb9a 	bl	d85a <SX1276Read>
    7126:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    712a:	e7ab      	b.n	7084 <SX1276SetRx+0x154>
        if( rxContinuous == true )
    712c:	b127      	cbz	r7, 7138 <SX1276SetRx+0x208>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
    712e:	2005      	movs	r0, #5
}
    7130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
    7134:	f006 bb9c 	b.w	d870 <SX1276SetOpMode>
    7138:	2006      	movs	r0, #6
    713a:	e7f9      	b.n	7130 <SX1276SetRx+0x200>
}
    713c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    713e:	bf00      	nop
    7140:	20001e18 	.word	0x20001e18
    7144:	20001e00 	.word	0x20001e00
    7148:	20001de8 	.word	0x20001de8
    714c:	20001dd0 	.word	0x20001dd0

00007150 <SX1276ReadRssi>:
{
    7150:	b508      	push	{r3, lr}
    switch( modem )
    7152:	b120      	cbz	r0, 715e <SX1276ReadRssi+0xe>
    7154:	2801      	cmp	r0, #1
    7156:	d00a      	beq.n	716e <SX1276ReadRssi+0x1e>
    7158:	f04f 30ff 	mov.w	r0, #4294967295
}
    715c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    715e:	2011      	movs	r0, #17
    7160:	f006 fb7b 	bl	d85a <SX1276Read>
    7164:	f3c0 0047 	ubfx	r0, r0, #1, #8
    7168:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    716a:	b200      	sxth	r0, r0
    716c:	e7f6      	b.n	715c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    716e:	4b08      	ldr	r3, [pc, #32]	; (7190 <SX1276ReadRssi+0x40>)
    7170:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    7174:	4b07      	ldr	r3, [pc, #28]	; (7194 <SX1276ReadRssi+0x44>)
    7176:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    7178:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    717c:	d903      	bls.n	7186 <SX1276ReadRssi+0x36>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    717e:	f006 fb6c 	bl	d85a <SX1276Read>
    7182:	389d      	subs	r0, #157	; 0x9d
    7184:	e7f1      	b.n	716a <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    7186:	f006 fb68 	bl	d85a <SX1276Read>
    718a:	38a4      	subs	r0, #164	; 0xa4
    718c:	e7ed      	b.n	716a <SX1276ReadRssi+0x1a>
    718e:	bf00      	nop
    7190:	20001e18 	.word	0x20001e18
    7194:	1f4add40 	.word	0x1f4add40

00007198 <SX1276SetModem>:
{
    7198:	b510      	push	{r4, lr}
    719a:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
    719c:	2001      	movs	r0, #1
    719e:	f006 fb5c 	bl	d85a <SX1276Read>
    71a2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
    71a6:	42a0      	cmp	r0, r4
    71a8:	4b17      	ldr	r3, [pc, #92]	; (7208 <SX1276SetModem+0x70>)
    71aa:	d102      	bne.n	71b2 <SX1276SetModem+0x1a>
    71ac:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
    71b0:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
    71b2:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
    71b4:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    71b8:	f04f 0000 	mov.w	r0, #0
    switch( SX1276.Settings.Modem )
    71bc:	d013      	beq.n	71e6 <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    71be:	f006 fb57 	bl	d870 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
    71c2:	2001      	movs	r0, #1
    71c4:	f006 fb49 	bl	d85a <SX1276Read>
    71c8:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    71cc:	2001      	movs	r0, #1
    71ce:	f006 fb39 	bl	d844 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    71d2:	2100      	movs	r1, #0
    71d4:	2040      	movs	r0, #64	; 0x40
    71d6:	f006 fb35 	bl	d844 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
    71da:	2130      	movs	r1, #48	; 0x30
}
    71dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    71e0:	2041      	movs	r0, #65	; 0x41
    71e2:	f006 bb2f 	b.w	d844 <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    71e6:	f006 fb43 	bl	d870 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
    71ea:	4620      	mov	r0, r4
    71ec:	f006 fb35 	bl	d85a <SX1276Read>
    71f0:	f060 017f 	orn	r1, r0, #127	; 0x7f
    71f4:	b2c9      	uxtb	r1, r1
    71f6:	4620      	mov	r0, r4
    71f8:	f006 fb24 	bl	d844 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    71fc:	2100      	movs	r1, #0
    71fe:	2040      	movs	r0, #64	; 0x40
    7200:	f006 fb20 	bl	d844 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    7204:	2100      	movs	r1, #0
    7206:	e7e9      	b.n	71dc <SX1276SetModem+0x44>
    7208:	20001e18 	.word	0x20001e18

0000720c <SX1276Init>:
{
    720c:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
    720e:	4b17      	ldr	r3, [pc, #92]	; (726c <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    7210:	4917      	ldr	r1, [pc, #92]	; (7270 <SX1276Init+0x64>)
    RadioEvents = events;
    7212:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    7214:	4817      	ldr	r0, [pc, #92]	; (7274 <SX1276Init+0x68>)
    7216:	4c18      	ldr	r4, [pc, #96]	; (7278 <SX1276Init+0x6c>)
    7218:	f006 fae3 	bl	d7e2 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
    721c:	4914      	ldr	r1, [pc, #80]	; (7270 <SX1276Init+0x64>)
    721e:	4817      	ldr	r0, [pc, #92]	; (727c <SX1276Init+0x70>)
    7220:	f006 fadf 	bl	d7e2 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
    7224:	4912      	ldr	r1, [pc, #72]	; (7270 <SX1276Init+0x64>)
    7226:	4816      	ldr	r0, [pc, #88]	; (7280 <SX1276Init+0x74>)
    7228:	f006 fadb 	bl	d7e2 <TimerInit>
    SX1276Reset( );
    722c:	f006 fa8c 	bl	d748 <SX1276Reset>
    RxChainCalibration( );
    7230:	f7ff fd32 	bl	6c98 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    7234:	2000      	movs	r0, #0
    7236:	f006 fb1b 	bl	d870 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
    723a:	4812      	ldr	r0, [pc, #72]	; (7284 <SX1276Init+0x78>)
    723c:	f7fe fffc 	bl	6238 <SX1276IoIrqInit>
    7240:	2500      	movs	r5, #0
        SX1276SetModem( RadioRegsInit[i].Modem );
    7242:	7820      	ldrb	r0, [r4, #0]
    7244:	f7ff ffa8 	bl	7198 <SX1276SetModem>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    7248:	3501      	adds	r5, #1
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    724a:	78a1      	ldrb	r1, [r4, #2]
    724c:	7860      	ldrb	r0, [r4, #1]
    724e:	f006 faf9 	bl	d844 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    7252:	2d10      	cmp	r5, #16
    7254:	f104 0403 	add.w	r4, r4, #3
    7258:	d1f3      	bne.n	7242 <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
    725a:	2000      	movs	r0, #0
    725c:	f7ff ff9c 	bl	7198 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
    7260:	4b09      	ldr	r3, [pc, #36]	; (7288 <SX1276Init+0x7c>)
    7262:	2200      	movs	r2, #0
    7264:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    7268:	bd38      	pop	{r3, r4, r5, pc}
    726a:	bf00      	nop
    726c:	20001f5c 	.word	0x20001f5c
    7270:	00007851 	.word	0x00007851
    7274:	20001e00 	.word	0x20001e00
    7278:	0000ffb0 	.word	0x0000ffb0
    727c:	20001de8 	.word	0x20001de8
    7280:	20001dd0 	.word	0x20001dd0
    7284:	20000154 	.word	0x20000154
    7288:	20001e18 	.word	0x20001e18

0000728c <SX1276SetRxConfig>:
{
    728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7290:	b087      	sub	sp, #28
    7292:	4605      	mov	r5, r0
    7294:	9300      	str	r3, [sp, #0]
    7296:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7298:	9301      	str	r3, [sp, #4]
    729a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    729e:	9302      	str	r3, [sp, #8]
    72a0:	460c      	mov	r4, r1
    72a2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    72a6:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
    72aa:	9303      	str	r3, [sp, #12]
    72ac:	4616      	mov	r6, r2
    72ae:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    72b2:	9204      	str	r2, [sp, #16]
    72b4:	9105      	str	r1, [sp, #20]
    72b6:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
    72ba:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
    72be:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
    72c2:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
    72c6:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    SX1276SetModem( modem );
    72ca:	f7ff ff65 	bl	7198 <SX1276SetModem>
    SX1276SetStby( );
    72ce:	f7ff fd4b 	bl	6d68 <SX1276SetStby>
    switch( modem )
    72d2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    72d6:	b12d      	cbz	r5, 72e4 <SX1276SetRxConfig+0x58>
    72d8:	2d01      	cmp	r5, #1
    72da:	9905      	ldr	r1, [sp, #20]
    72dc:	d06b      	beq.n	73b6 <SX1276SetRxConfig+0x12a>
}
    72de:	b007      	add	sp, #28
    72e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    72e4:	4990      	ldr	r1, [pc, #576]	; (7528 <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    72e6:	9801      	ldr	r0, [sp, #4]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
    72e8:	f881 3102 	strb.w	r3, [r1, #258]	; 0x102
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
    72ec:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    72f0:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
            SX1276.Settings.Fsk.Datarate = datarate;
    72f4:	f8c1 60f8 	str.w	r6, [r1, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    72f8:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    72fc:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
            SX1276.Settings.Fsk.FixLen = fixLen;
    7300:	f881 80fe 	strb.w	r8, [r1, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    7304:	f881 90ff 	strb.w	r9, [r1, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
    7308:	f881 a100 	strb.w	sl, [r1, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    730c:	f8a1 70fc 	strh.w	r7, [r1, #252]	; 0xfc
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    7310:	2002      	movs	r0, #2
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
    7312:	fb03 f30b 	mul.w	r3, r3, fp
    7316:	fbb3 f3f6 	udiv	r3, r3, r6
    731a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
    731e:	4b83      	ldr	r3, [pc, #524]	; (752c <SX1276SetRxConfig+0x2a0>)
    7320:	fbb3 f6f6 	udiv	r6, r3, r6
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    7324:	f3c6 2107 	ubfx	r1, r6, #8, #8
    7328:	f006 fa8c 	bl	d844 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
    732c:	b2f1      	uxtb	r1, r6
    732e:	2003      	movs	r0, #3
    7330:	f006 fa88 	bl	d844 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
    7334:	4620      	mov	r0, r4
    7336:	f7ff f9a5 	bl	6684 <GetFskBandwidthRegValue>
    733a:	4601      	mov	r1, r0
    733c:	2012      	movs	r0, #18
    733e:	f006 fa81 	bl	d844 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
    7342:	9801      	ldr	r0, [sp, #4]
    7344:	f7ff f99e 	bl	6684 <GetFskBandwidthRegValue>
    7348:	4601      	mov	r1, r0
    734a:	2013      	movs	r0, #19
    734c:	f006 fa7a 	bl	d844 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    7350:	0a39      	lsrs	r1, r7, #8
    7352:	2025      	movs	r0, #37	; 0x25
    7354:	f006 fa76 	bl	d844 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    7358:	b2f9      	uxtb	r1, r7
    735a:	2026      	movs	r0, #38	; 0x26
    735c:	f006 fa72 	bl	d844 <SX1276Write>
            if( fixLen == 1 )
    7360:	f1b8 0f00 	cmp.w	r8, #0
    7364:	d01b      	beq.n	739e <SX1276SetRxConfig+0x112>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
    7366:	4649      	mov	r1, r9
    7368:	2032      	movs	r0, #50	; 0x32
    736a:	f006 fa6b 	bl	d844 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    736e:	2030      	movs	r0, #48	; 0x30
    7370:	f006 fa73 	bl	d85a <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
    7374:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    7378:	4305      	orrs	r5, r0
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    737a:	ea45 110a 	orr.w	r1, r5, sl, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
    737e:	b2c9      	uxtb	r1, r1
    7380:	2030      	movs	r0, #48	; 0x30
    7382:	f006 fa5f 	bl	d844 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    7386:	2031      	movs	r0, #49	; 0x31
    7388:	f006 fa67 	bl	d85a <SX1276Read>
    738c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    7390:	b2c9      	uxtb	r1, r1
    7392:	2031      	movs	r0, #49	; 0x31
}
    7394:	b007      	add	sp, #28
    7396:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    739a:	f006 ba53 	b.w	d844 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    739e:	21ff      	movs	r1, #255	; 0xff
    73a0:	2032      	movs	r0, #50	; 0x32
    73a2:	f006 fa4f 	bl	d844 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    73a6:	2030      	movs	r0, #48	; 0x30
    73a8:	f006 fa57 	bl	d85a <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    73ac:	f06f 057f 	mvn.w	r5, #127	; 0x7f
                           RF_PACKETCONFIG1_CRC_MASK &
    73b0:	f000 006f 	and.w	r0, r0, #111	; 0x6f
    73b4:	e7e0      	b.n	7378 <SX1276SetRxConfig+0xec>
            if( bandwidth > 2 )
    73b6:	2c02      	cmp	r4, #2
    73b8:	d900      	bls.n	73bc <SX1276SetRxConfig+0x130>
                while( 1 );
    73ba:	e7fe      	b.n	73ba <SX1276SetRxConfig+0x12e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    73bc:	4d5a      	ldr	r5, [pc, #360]	; (7528 <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.LoRa.Coderate = coderate;
    73be:	9800      	ldr	r0, [sp, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
    73c0:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
            else if( datarate < 6 )
    73c4:	2e06      	cmp	r6, #6
    73c6:	4633      	mov	r3, r6
    73c8:	bf38      	it	cc
    73ca:	2306      	movcc	r3, #6
            bandwidth += 7;
    73cc:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    73ce:	2b0c      	cmp	r3, #12
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    73d0:	f885 112f 	strb.w	r1, [r5, #303]	; 0x12f
    73d4:	bf28      	it	cs
    73d6:	230c      	movcs	r3, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    73d8:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
    73da:	f885 0129 	strb.w	r0, [r5, #297]	; 0x129
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    73de:	2c07      	cmp	r4, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    73e0:	e9c5 4648 	strd	r4, r6, [r5, #288]	; 0x120
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    73e4:	f8a5 712a 	strh.w	r7, [r5, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    73e8:	f885 812c 	strb.w	r8, [r5, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
    73ec:	f885 912d 	strb.w	r9, [r5, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
    73f0:	f885 a12e 	strb.w	sl, [r5, #302]	; 0x12e
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    73f4:	f885 1130 	strb.w	r1, [r5, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    73f8:	f885 2131 	strb.w	r2, [r5, #305]	; 0x131
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    73fc:	d178      	bne.n	74f0 <SX1276SetRxConfig+0x264>
    73fe:	f1a3 020b 	sub.w	r2, r3, #11
    7402:	2a01      	cmp	r2, #1
    7404:	bf8c      	ite	hi
    7406:	2200      	movhi	r2, #0
    7408:	2201      	movls	r2, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    740a:	201d      	movs	r0, #29
    740c:	f885 2128 	strb.w	r2, [r5, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG1,
    7410:	9301      	str	r3, [sp, #4]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    7412:	f006 fa22 	bl	d85a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    7416:	9b00      	ldr	r3, [sp, #0]
    7418:	ea48 0143 	orr.w	r1, r8, r3, lsl #1
    741c:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
    7420:	b2c9      	uxtb	r1, r1
    7422:	201d      	movs	r0, #29
    7424:	f006 fa0e 	bl	d844 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    7428:	201e      	movs	r0, #30
    742a:	f006 fa16 	bl	d85a <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG2,
    742e:	9b01      	ldr	r3, [sp, #4]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    7430:	f3cb 2101 	ubfx	r1, fp, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
    7434:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
    7438:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
    743c:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
    7440:	4301      	orrs	r1, r0
    7442:	b2c9      	uxtb	r1, r1
    7444:	201e      	movs	r0, #30
    7446:	f006 f9fd 	bl	d844 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    744a:	2026      	movs	r0, #38	; 0x26
    744c:	f006 fa05 	bl	d85a <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    7450:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG3,
    7454:	f020 0108 	bic.w	r1, r0, #8
    7458:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
    745c:	b2c9      	uxtb	r1, r1
    745e:	2026      	movs	r0, #38	; 0x26
    7460:	f006 f9f0 	bl	d844 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
    7464:	fa5f f18b 	uxtb.w	r1, fp
    7468:	201f      	movs	r0, #31
    746a:	f006 f9eb 	bl	d844 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    746e:	0a39      	lsrs	r1, r7, #8
    7470:	2020      	movs	r0, #32
    7472:	f006 f9e7 	bl	d844 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    7476:	b2f9      	uxtb	r1, r7
    7478:	2021      	movs	r0, #33	; 0x21
    747a:	f006 f9e3 	bl	d844 <SX1276Write>
            if( fixLen == 1 )
    747e:	f1b8 0f00 	cmp.w	r8, #0
    7482:	d003      	beq.n	748c <SX1276SetRxConfig+0x200>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
    7484:	4649      	mov	r1, r9
    7486:	2022      	movs	r0, #34	; 0x22
    7488:	f006 f9dc 	bl	d844 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    748c:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
    7490:	b16b      	cbz	r3, 74ae <SX1276SetRxConfig+0x222>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    7492:	2044      	movs	r0, #68	; 0x44
    7494:	f006 f9e1 	bl	d85a <SX1276Read>
    7498:	f060 017f 	orn	r1, r0, #127	; 0x7f
    749c:	b2c9      	uxtb	r1, r1
    749e:	2044      	movs	r0, #68	; 0x44
    74a0:	f006 f9d0 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    74a4:	f895 1130 	ldrb.w	r1, [r5, #304]	; 0x130
    74a8:	2024      	movs	r0, #36	; 0x24
    74aa:	f006 f9cb 	bl	d844 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    74ae:	2c09      	cmp	r4, #9
    74b0:	d12b      	bne.n	750a <SX1276SetRxConfig+0x27e>
    74b2:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
    74b6:	4b1e      	ldr	r3, [pc, #120]	; (7530 <SX1276SetRxConfig+0x2a4>)
    74b8:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    74ba:	f04f 0102 	mov.w	r1, #2
    74be:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    74c2:	d91e      	bls.n	7502 <SX1276SetRxConfig+0x276>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    74c4:	f006 f9be 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
    74c8:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    74ca:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    74cc:	f006 f9ba 	bl	d844 <SX1276Write>
            if( datarate == 6 )
    74d0:	2e06      	cmp	r6, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    74d2:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    74d6:	d81b      	bhi.n	7510 <SX1276SetRxConfig+0x284>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    74d8:	f006 f9bf 	bl	d85a <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    74dc:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    74e0:	f041 0105 	orr.w	r1, r1, #5
    74e4:	2031      	movs	r0, #49	; 0x31
    74e6:	f006 f9ad 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    74ea:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    74ec:	2037      	movs	r0, #55	; 0x37
    74ee:	e751      	b.n	7394 <SX1276SetRxConfig+0x108>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    74f0:	2c08      	cmp	r4, #8
    74f2:	d104      	bne.n	74fe <SX1276SetRxConfig+0x272>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    74f4:	2e0b      	cmp	r6, #11
    74f6:	bf94      	ite	ls
    74f8:	2200      	movls	r2, #0
    74fa:	2201      	movhi	r2, #1
    74fc:	e785      	b.n	740a <SX1276SetRxConfig+0x17e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    74fe:	2200      	movs	r2, #0
    7500:	e783      	b.n	740a <SX1276SetRxConfig+0x17e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    7502:	f006 f99f 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    7506:	217f      	movs	r1, #127	; 0x7f
    7508:	e7df      	b.n	74ca <SX1276SetRxConfig+0x23e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    750a:	2103      	movs	r1, #3
    750c:	2036      	movs	r0, #54	; 0x36
    750e:	e7dd      	b.n	74cc <SX1276SetRxConfig+0x240>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    7510:	f006 f9a3 	bl	d85a <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    7514:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    7518:	f041 0103 	orr.w	r1, r1, #3
    751c:	2031      	movs	r0, #49	; 0x31
    751e:	f006 f991 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    7522:	210a      	movs	r1, #10
    7524:	e7e2      	b.n	74ec <SX1276SetRxConfig+0x260>
    7526:	bf00      	nop
    7528:	20001e18 	.word	0x20001e18
    752c:	01e84800 	.word	0x01e84800
    7530:	1f4add40 	.word	0x1f4add40

00007534 <SX1276SetTxConfig>:
{
    7534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7538:	b087      	sub	sp, #28
    753a:	461e      	mov	r6, r3
    753c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
    7540:	9305      	str	r3, [sp, #20]
    7542:	468a      	mov	sl, r1
    7544:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    7548:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
    754c:	9302      	str	r3, [sp, #8]
    754e:	4617      	mov	r7, r2
    7550:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7552:	9104      	str	r1, [sp, #16]
    7554:	9203      	str	r2, [sp, #12]
    7556:	9001      	str	r0, [sp, #4]
    7558:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    755c:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    7560:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
    7564:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
    7568:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
    756c:	f7ff fe14 	bl	7198 <SX1276SetModem>
    SX1276SetStby( );
    7570:	f7ff fbfa 	bl	6d68 <SX1276SetStby>
    SX1276SetRfTxPower( power );
    7574:	4650      	mov	r0, sl
    7576:	f7fe ff81 	bl	647c <SX1276SetRfTxPower>
    switch( modem )
    757a:	9b01      	ldr	r3, [sp, #4]
    757c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
    7580:	b12b      	cbz	r3, 758e <SX1276SetTxConfig+0x5a>
    7582:	2b01      	cmp	r3, #1
    7584:	9b05      	ldr	r3, [sp, #20]
    7586:	d05b      	beq.n	7640 <SX1276SetTxConfig+0x10c>
}
    7588:	b007      	add	sp, #28
    758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
    758e:	4b76      	ldr	r3, [pc, #472]	; (7768 <SX1276SetTxConfig+0x234>)
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    7590:	e9c3 763b 	strd	r7, r6, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.FixLen = fixLen;
    7594:	f883 50fe 	strb.w	r5, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
    7598:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    759c:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
    75a0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            SX1276.Settings.Fsk.Power = power;
    75a4:	f883 a0e8 	strb.w	sl, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Datarate = datarate;
    75a8:	f8c3 80f8 	str.w	r8, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    75ac:	f8a3 90fc 	strh.w	r9, [r3, #252]	; 0xfc
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    75b0:	f643 5309 	movw	r3, #15625	; 0x3d09
    75b4:	f641 6684 	movw	r6, #7812	; 0x1e84
    75b8:	fbb7 f2f3 	udiv	r2, r7, r3
    75bc:	fb03 7712 	mls	r7, r3, r2, r7
    75c0:	eb06 2607 	add.w	r6, r6, r7, lsl #8
    75c4:	fbb6 f6f3 	udiv	r6, r6, r3
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
    75c8:	eb06 2602 	add.w	r6, r6, r2, lsl #8
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
    75cc:	f3c6 2107 	ubfx	r1, r6, #8, #8
    75d0:	2004      	movs	r0, #4
    75d2:	f006 f937 	bl	d844 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
    75d6:	b2f1      	uxtb	r1, r6
    75d8:	2005      	movs	r0, #5
    75da:	f006 f933 	bl	d844 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
    75de:	4e63      	ldr	r6, [pc, #396]	; (776c <SX1276SetTxConfig+0x238>)
    75e0:	fbb6 f6f8 	udiv	r6, r6, r8
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    75e4:	2002      	movs	r0, #2
    75e6:	f3c6 2107 	ubfx	r1, r6, #8, #8
    75ea:	f006 f92b 	bl	d844 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
    75ee:	b2f1      	uxtb	r1, r6
    75f0:	2003      	movs	r0, #3
    75f2:	f006 f927 	bl	d844 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    75f6:	ea4f 2119 	mov.w	r1, r9, lsr #8
    75fa:	2025      	movs	r0, #37	; 0x25
    75fc:	f006 f922 	bl	d844 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
    7600:	fa5f f189 	uxtb.w	r1, r9
    7604:	2026      	movs	r0, #38	; 0x26
    7606:	f006 f91d 	bl	d844 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    760a:	2030      	movs	r0, #48	; 0x30
    760c:	f006 f925 	bl	d85a <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    7610:	f085 0501 	eor.w	r5, r5, #1
                           ( crcOn << 4 ) );
    7614:	0124      	lsls	r4, r4, #4
            SX1276Write( REG_PACKETCONFIG1,
    7616:	f000 006f 	and.w	r0, r0, #111	; 0x6f
    761a:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
    761e:	4304      	orrs	r4, r0
    7620:	b2e1      	uxtb	r1, r4
    7622:	2030      	movs	r0, #48	; 0x30
    7624:	f006 f90e 	bl	d844 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    7628:	2031      	movs	r0, #49	; 0x31
    762a:	f006 f916 	bl	d85a <SX1276Read>
    762e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    7632:	b2c9      	uxtb	r1, r1
    7634:	2031      	movs	r0, #49	; 0x31
}
    7636:	b007      	add	sp, #28
    7638:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    763c:	f006 b902 	b.w	d844 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
    7640:	4f49      	ldr	r7, [pc, #292]	; (7768 <SX1276SetTxConfig+0x234>)
            if( bandwidth > 2 )
    7642:	2e02      	cmp	r6, #2
            SX1276.Settings.LoRa.Power = power;
    7644:	f887 a11c 	strb.w	sl, [r7, #284]	; 0x11c
            if( bandwidth > 2 )
    7648:	d900      	bls.n	764c <SX1276SetTxConfig+0x118>
                while( 1 );
    764a:	e7fe      	b.n	764a <SX1276SetTxConfig+0x116>
            else if( datarate < 6 )
    764c:	f1b8 0f06 	cmp.w	r8, #6
    7650:	46c2      	mov	sl, r8
    7652:	bf38      	it	cc
    7654:	f04f 0a06 	movcc.w	sl, #6
            bandwidth += 7;
    7658:	3607      	adds	r6, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    765a:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    765e:	9802      	ldr	r0, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
    7660:	f887 b129 	strb.w	fp, [r7, #297]	; 0x129
    7664:	bf28      	it	cs
    7666:	f04f 0a0c 	movcs.w	sl, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    766a:	2e07      	cmp	r6, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    766c:	e9c7 6848 	strd	r6, r8, [r7, #288]	; 0x120
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    7670:	f8a7 912a 	strh.w	r9, [r7, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    7674:	f887 512c 	strb.w	r5, [r7, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    7678:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    767c:	f887 0130 	strb.w	r0, [r7, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
    7680:	f887 412e 	strb.w	r4, [r7, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    7684:	f887 1131 	strb.w	r1, [r7, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
    7688:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    768c:	d156      	bne.n	773c <SX1276SetTxConfig+0x208>
    768e:	f1aa 020b 	sub.w	r2, sl, #11
    7692:	2a01      	cmp	r2, #1
    7694:	bf8c      	ite	hi
    7696:	2200      	movhi	r2, #0
    7698:	2201      	movls	r2, #1
    769a:	f887 2128 	strb.w	r2, [r7, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    769e:	b16b      	cbz	r3, 76bc <SX1276SetTxConfig+0x188>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    76a0:	2044      	movs	r0, #68	; 0x44
    76a2:	f006 f8da 	bl	d85a <SX1276Read>
    76a6:	f060 017f 	orn	r1, r0, #127	; 0x7f
    76aa:	b2c9      	uxtb	r1, r1
    76ac:	2044      	movs	r0, #68	; 0x44
    76ae:	f006 f8c9 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    76b2:	f897 1130 	ldrb.w	r1, [r7, #304]	; 0x130
    76b6:	2024      	movs	r0, #36	; 0x24
    76b8:	f006 f8c4 	bl	d844 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    76bc:	201d      	movs	r0, #29
    76be:	f006 f8cc 	bl	d85a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    76c2:	ea45 014b 	orr.w	r1, r5, fp, lsl #1
    76c6:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
    76ca:	b2c9      	uxtb	r1, r1
    76cc:	201d      	movs	r0, #29
    76ce:	f006 f8b9 	bl	d844 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    76d2:	201e      	movs	r0, #30
    76d4:	f006 f8c1 	bl	d85a <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
    76d8:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
    76da:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
    76de:	ea44 140a 	orr.w	r4, r4, sl, lsl #4
    76e2:	4304      	orrs	r4, r0
    76e4:	b2e1      	uxtb	r1, r4
    76e6:	201e      	movs	r0, #30
    76e8:	f006 f8ac 	bl	d844 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    76ec:	2026      	movs	r0, #38	; 0x26
    76ee:	f006 f8b4 	bl	d85a <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    76f2:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG3,
    76f6:	f020 0108 	bic.w	r1, r0, #8
    76fa:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
    76fe:	b2c9      	uxtb	r1, r1
    7700:	2026      	movs	r0, #38	; 0x26
    7702:	f006 f89f 	bl	d844 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    7706:	ea4f 2119 	mov.w	r1, r9, lsr #8
    770a:	2020      	movs	r0, #32
    770c:	f006 f89a 	bl	d844 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
    7710:	2021      	movs	r0, #33	; 0x21
    7712:	fa5f f189 	uxtb.w	r1, r9
    7716:	f006 f895 	bl	d844 <SX1276Write>
            if( datarate == 6 )
    771a:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    771e:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    7722:	d815      	bhi.n	7750 <SX1276SetTxConfig+0x21c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    7724:	f006 f899 	bl	d85a <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    7728:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    772c:	f041 0105 	orr.w	r1, r1, #5
    7730:	2031      	movs	r0, #49	; 0x31
    7732:	f006 f887 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    7736:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    7738:	2037      	movs	r0, #55	; 0x37
    773a:	e77c      	b.n	7636 <SX1276SetTxConfig+0x102>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    773c:	2e08      	cmp	r6, #8
    773e:	d105      	bne.n	774c <SX1276SetTxConfig+0x218>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    7740:	f1b8 0f0b 	cmp.w	r8, #11
    7744:	bf94      	ite	ls
    7746:	2200      	movls	r2, #0
    7748:	2201      	movhi	r2, #1
    774a:	e7a6      	b.n	769a <SX1276SetTxConfig+0x166>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    774c:	2200      	movs	r2, #0
    774e:	e7a4      	b.n	769a <SX1276SetTxConfig+0x166>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    7750:	f006 f883 	bl	d85a <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    7754:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    7758:	f041 0103 	orr.w	r1, r1, #3
    775c:	2031      	movs	r0, #49	; 0x31
    775e:	f006 f871 	bl	d844 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    7762:	210a      	movs	r1, #10
    7764:	e7e8      	b.n	7738 <SX1276SetTxConfig+0x204>
    7766:	bf00      	nop
    7768:	20001e18 	.word	0x20001e18
    776c:	01e84800 	.word	0x01e84800

00007770 <SX1276SetTxContinuousWave>:
{
    7770:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
    7772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
    7776:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
    7778:	fb03 f402 	mul.w	r4, r3, r2
{
    777c:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
    777e:	f7ff f819 	bl	67b4 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
    7782:	2300      	movs	r3, #0
    7784:	2205      	movs	r2, #5
    7786:	e9cd 3201 	strd	r3, r2, [sp, #4]
    778a:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
    778e:	e9cd 3306 	strd	r3, r3, [sp, #24]
    7792:	e9cd 3304 	strd	r3, r3, [sp, #16]
    7796:	9303      	str	r3, [sp, #12]
    7798:	4618      	mov	r0, r3
    779a:	4629      	mov	r1, r5
    779c:	9200      	str	r2, [sp, #0]
    779e:	9408      	str	r4, [sp, #32]
    77a0:	461a      	mov	r2, r3
    77a2:	f7ff fec7 	bl	7534 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
    77a6:	2031      	movs	r0, #49	; 0x31
    77a8:	f006 f857 	bl	d85a <SX1276Read>
    77ac:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
    77b0:	2031      	movs	r0, #49	; 0x31
    77b2:	f006 f847 	bl	d844 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    77b6:	4d0d      	ldr	r5, [pc, #52]	; (77ec <SX1276SetTxContinuousWave+0x7c>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
    77b8:	21f0      	movs	r1, #240	; 0xf0
    77ba:	2040      	movs	r0, #64	; 0x40
    77bc:	f006 f842 	bl	d844 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
    77c0:	21a0      	movs	r1, #160	; 0xa0
    77c2:	2041      	movs	r0, #65	; 0x41
    77c4:	f006 f83e 	bl	d844 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    77c8:	4621      	mov	r1, r4
    77ca:	4628      	mov	r0, r5
    77cc:	f006 f811 	bl	d7f2 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
    77d0:	4b07      	ldr	r3, [pc, #28]	; (77f0 <SX1276SetTxContinuousWave+0x80>)
    77d2:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
    77d4:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
    77d6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    77da:	f7fe feb3 	bl	6544 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    77de:	2003      	movs	r0, #3
}
    77e0:	b00b      	add	sp, #44	; 0x2c
    77e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    77e6:	f006 b843 	b.w	d870 <SX1276SetOpMode>
    77ea:	bf00      	nop
    77ec:	20001e00 	.word	0x20001e00
    77f0:	20001e18 	.word	0x20001e18

000077f4 <SX1276SetMaxPayloadLength>:
{
    77f4:	b538      	push	{r3, r4, r5, lr}
    77f6:	4605      	mov	r5, r0
    77f8:	460c      	mov	r4, r1
    SX1276SetModem( modem );
    77fa:	f7ff fccd 	bl	7198 <SX1276SetModem>
    switch( modem )
    77fe:	b115      	cbz	r5, 7806 <SX1276SetMaxPayloadLength+0x12>
    7800:	2d01      	cmp	r5, #1
    7802:	d00b      	beq.n	781c <SX1276SetMaxPayloadLength+0x28>
}
    7804:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
    7806:	4b07      	ldr	r3, [pc, #28]	; (7824 <SX1276SetMaxPayloadLength+0x30>)
    7808:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    780c:	2b00      	cmp	r3, #0
    780e:	d1f9      	bne.n	7804 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
    7810:	4621      	mov	r1, r4
    7812:	2032      	movs	r0, #50	; 0x32
}
    7814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
    7818:	f006 b814 	b.w	d844 <SX1276Write>
    781c:	4621      	mov	r1, r4
    781e:	2023      	movs	r0, #35	; 0x23
    7820:	e7f8      	b.n	7814 <SX1276SetMaxPayloadLength+0x20>
    7822:	bf00      	nop
    7824:	20001e18 	.word	0x20001e18

00007828 <SX1276SetPublicNetwork>:
{
    7828:	b510      	push	{r4, lr}
    782a:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
    782c:	2001      	movs	r0, #1
    782e:	f7ff fcb3 	bl	7198 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
    7832:	4b06      	ldr	r3, [pc, #24]	; (784c <SX1276SetPublicNetwork+0x24>)
    7834:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
    7838:	b12c      	cbz	r4, 7846 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
    783a:	2134      	movs	r1, #52	; 0x34
}
    783c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    7840:	2039      	movs	r0, #57	; 0x39
    7842:	f005 bfff 	b.w	d844 <SX1276Write>
    7846:	2112      	movs	r1, #18
    7848:	e7f8      	b.n	783c <SX1276SetPublicNetwork+0x14>
    784a:	bf00      	nop
    784c:	20001e18 	.word	0x20001e18

00007850 <SX1276OnTimeoutIrq>:
{
    7850:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    7852:	4c2d      	ldr	r4, [pc, #180]	; (7908 <SX1276OnTimeoutIrq+0xb8>)
    7854:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    7858:	2b01      	cmp	r3, #1
    785a:	d002      	beq.n	7862 <SX1276OnTimeoutIrq+0x12>
    785c:	2b02      	cmp	r3, #2
    785e:	d02d      	beq.n	78bc <SX1276OnTimeoutIrq+0x6c>
}
    7860:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
    7862:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    7866:	b9cb      	cbnz	r3, 789c <SX1276OnTimeoutIrq+0x4c>
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    7868:	210b      	movs	r1, #11
    786a:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    786c:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    7870:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    7874:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    7878:	f005 ffe4 	bl	d844 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    787c:	2110      	movs	r1, #16
    787e:	203f      	movs	r0, #63	; 0x3f
    7880:	f005 ffe0 	bl	d844 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
    7884:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    7888:	b193      	cbz	r3, 78b0 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    788a:	200d      	movs	r0, #13
    788c:	f005 ffe5 	bl	d85a <SX1276Read>
    7890:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    7894:	b2c9      	uxtb	r1, r1
    7896:	200d      	movs	r0, #13
    7898:	f005 ffd4 	bl	d844 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    789c:	4b1b      	ldr	r3, [pc, #108]	; (790c <SX1276OnTimeoutIrq+0xbc>)
    789e:	681b      	ldr	r3, [r3, #0]
    78a0:	2b00      	cmp	r3, #0
    78a2:	d0dd      	beq.n	7860 <SX1276OnTimeoutIrq+0x10>
    78a4:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    78a6:	2b00      	cmp	r3, #0
    78a8:	d0da      	beq.n	7860 <SX1276OnTimeoutIrq+0x10>
}
    78aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
    78ae:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
    78b0:	4817      	ldr	r0, [pc, #92]	; (7910 <SX1276OnTimeoutIrq+0xc0>)
                SX1276.Settings.State = RF_IDLE;
    78b2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
    78b6:	f7fe febb 	bl	6630 <TimerStop>
    78ba:	e7ef      	b.n	789c <SX1276OnTimeoutIrq+0x4c>
        SX1276Reset( );
    78bc:	f005 ff44 	bl	d748 <SX1276Reset>
        RxChainCalibration( );
    78c0:	f7ff f9ea 	bl	6c98 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    78c4:	2000      	movs	r0, #0
    78c6:	f005 ffd3 	bl	d870 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    78ca:	4d12      	ldr	r5, [pc, #72]	; (7914 <SX1276OnTimeoutIrq+0xc4>)
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    78cc:	2600      	movs	r6, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
    78ce:	7828      	ldrb	r0, [r5, #0]
    78d0:	f7ff fc62 	bl	7198 <SX1276SetModem>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    78d4:	3601      	adds	r6, #1
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    78d6:	78a9      	ldrb	r1, [r5, #2]
    78d8:	7868      	ldrb	r0, [r5, #1]
    78da:	f005 ffb3 	bl	d844 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    78de:	2e10      	cmp	r6, #16
    78e0:	f105 0503 	add.w	r5, r5, #3
    78e4:	d1f3      	bne.n	78ce <SX1276OnTimeoutIrq+0x7e>
        SX1276SetModem( MODEM_FSK );
    78e6:	2000      	movs	r0, #0
    78e8:	f7ff fc56 	bl	7198 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
    78ec:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
    78f0:	f7ff ff9a 	bl	7828 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
    78f4:	2300      	movs	r3, #0
    78f6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    78fa:	4b04      	ldr	r3, [pc, #16]	; (790c <SX1276OnTimeoutIrq+0xbc>)
    78fc:	681b      	ldr	r3, [r3, #0]
    78fe:	2b00      	cmp	r3, #0
    7900:	d0ae      	beq.n	7860 <SX1276OnTimeoutIrq+0x10>
    7902:	685b      	ldr	r3, [r3, #4]
    7904:	e7cf      	b.n	78a6 <SX1276OnTimeoutIrq+0x56>
    7906:	bf00      	nop
    7908:	20001e18 	.word	0x20001e18
    790c:	20001f5c 	.word	0x20001f5c
    7910:	20001dd0 	.word	0x20001dd0
    7914:	0000ffb0 	.word	0x0000ffb0

00007918 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    7918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    791c:	4e51      	ldr	r6, [pc, #324]	; (7a64 <pinctrl_configure_pins+0x14c>)
    791e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7922:	f04f 0c01 	mov.w	ip, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7926:	4281      	cmp	r1, r0
    7928:	d102      	bne.n	7930 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    792a:	2000      	movs	r0, #0
}
    792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7930:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    7932:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7936:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    793a:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    793c:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    7940:	bf08      	it	eq
    7942:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    7946:	2c22      	cmp	r4, #34	; 0x22
    7948:	f200 8088 	bhi.w	7a5c <pinctrl_configure_pins+0x144>
    794c:	e8df f004 	tbb	[pc, r4]
    7950:	42272212 	.word	0x42272212
    7954:	86423e2a 	.word	0x86423e2a
    7958:	45868686 	.word	0x45868686
    795c:	8686866e 	.word	0x8686866e
    7960:	86868686 	.word	0x86868686
    7964:	86868686 	.word	0x86868686
    7968:	86868686 	.word	0x86868686
    796c:	7a777186 	.word	0x7a777186
    7970:	807d      	.short	0x807d
    7972:	83          	.byte	0x83
    7973:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    7974:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    7978:	095f      	lsrs	r7, r3, #5
        case 1: return NRF_P1;
    797a:	2f01      	cmp	r7, #1
    *p_pin = pin_number & 0x1F;
    797c:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    7980:	bf14      	ite	ne
    7982:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    7986:	4637      	moveq	r7, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7988:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    798c:	f8c7 4508 	str.w	r4, [r7, #1288]	; 0x508
    7990:	2401      	movs	r4, #1
    7992:	e002      	b.n	799a <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
    7994:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7998:	2400      	movs	r4, #0
    799a:	46a6      	mov	lr, r4
    799c:	e024      	b.n	79e8 <pinctrl_configure_pins+0xd0>
			NRF_PSEL_UART(reg, RTS) = pin;
    799e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    79a2:	e7e9      	b.n	7978 <pinctrl_configure_pins+0x60>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    79a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    79a8:	2400      	movs	r4, #0
    return pin_number >> 5;
    79aa:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    79ae:	f1be 0f01 	cmp.w	lr, #1
    79b2:	bf14      	ite	ne
    79b4:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    79b8:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    79ba:	f003 071f 	and.w	r7, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    79be:	fa0c f707 	lsl.w	r7, ip, r7
    p_reg->OUTCLR = clr_mask;
    79c2:	f8ce 750c 	str.w	r7, [lr, #1292]	; 0x50c
    79c6:	f04f 0e01 	mov.w	lr, #1
    79ca:	e00d      	b.n	79e8 <pinctrl_configure_pins+0xd0>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    79cc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    79d0:	2401      	movs	r4, #1
    79d2:	e7ea      	b.n	79aa <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    79d4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    79d8:	e7de      	b.n	7998 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    79da:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    79de:	2d00      	cmp	r5, #0
    79e0:	d1da      	bne.n	7998 <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    79e2:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    79e4:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    79e6:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    79e8:	f850 7b04 	ldr.w	r7, [r0], #4
    79ec:	f407 5800 	and.w	r8, r7, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    79f0:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    79f4:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    79f8:	f3c7 18c1 	ubfx	r8, r7, #7, #2
    *p_pin = pin_number & 0x1F;
    79fc:	f003 071f 	and.w	r7, r3, #31
    return pin_number >> 5;
    7a00:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7a04:	bf1c      	itt	ne
    7a06:	2401      	movne	r4, #1
    7a08:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7a0c:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    7a10:	2b01      	cmp	r3, #1
    7a12:	bf0c      	ite	eq
    7a14:	4633      	moveq	r3, r6
    7a16:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7a1a:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    7a1e:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7a22:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    7a26:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7a2a:	e77c      	b.n	7926 <pinctrl_configure_pins+0xe>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    7a2c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    7a30:	e7d5      	b.n	79de <pinctrl_configure_pins+0xc6>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    7a32:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7a36:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7a38:	f04f 0e00 	mov.w	lr, #0
    7a3c:	e7d4      	b.n	79e8 <pinctrl_configure_pins+0xd0>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    7a3e:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
			if (write != NO_WRITE) {
    7a42:	e799      	b.n	7978 <pinctrl_configure_pins+0x60>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    7a44:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    7a48:	e7f5      	b.n	7a36 <pinctrl_configure_pins+0x11e>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    7a4a:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    7a4e:	e7f2      	b.n	7a36 <pinctrl_configure_pins+0x11e>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    7a50:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    7a54:	e7ef      	b.n	7a36 <pinctrl_configure_pins+0x11e>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    7a56:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    7a5a:	e7ec      	b.n	7a36 <pinctrl_configure_pins+0x11e>
		switch (NRF_GET_FUN(pins[i])) {
    7a5c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7a60:	e764      	b.n	792c <pinctrl_configure_pins+0x14>
    7a62:	bf00      	nop
    7a64:	50000300 	.word	0x50000300

00007a68 <event_txdrdy_check>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a68:	4b05      	ldr	r3, [pc, #20]	; (7a80 <event_txdrdy_check+0x18>)
    7a6a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
    7a6e:	b92b      	cbnz	r3, 7a7c <event_txdrdy_check+0x14>
    7a70:	4b04      	ldr	r3, [pc, #16]	; (7a84 <event_txdrdy_check+0x1c>)
    7a72:	7818      	ldrb	r0, [r3, #0]
    7a74:	3800      	subs	r0, #0
    7a76:	bf18      	it	ne
    7a78:	2001      	movne	r0, #1
    7a7a:	4770      	bx	lr
    7a7c:	2001      	movs	r0, #1
#endif
	       );
}
    7a7e:	4770      	bx	lr
    7a80:	40002000 	.word	0x40002000
    7a84:	20002524 	.word	0x20002524

00007a88 <uart_nrfx_poll_in>:
    7a88:	4b07      	ldr	r3, [pc, #28]	; (7aa8 <uart_nrfx_poll_in+0x20>)
    7a8a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    7a8e:	b142      	cbz	r2, 7aa2 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a90:	2000      	movs	r0, #0
    7a92:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    7a96:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    7a9a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    7a9e:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    7aa0:	4770      	bx	lr
		return -1;
    7aa2:	f04f 30ff 	mov.w	r0, #4294967295
}
    7aa6:	4770      	bx	lr
    7aa8:	40002000 	.word	0x40002000

00007aac <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7aac:	4b02      	ldr	r3, [pc, #8]	; (7ab8 <uart_nrfx_err_check+0xc>)
    7aae:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7ab2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    7ab6:	4770      	bx	lr
    7ab8:	40002000 	.word	0x40002000

00007abc <uart_nrfx_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrfx_fifo_read(const struct device *dev,
			       uint8_t *rx_data,
			       const int size)
{
    7abc:	b570      	push	{r4, r5, r6, lr}
	uint8_t num_rx = 0U;

	while ((size - num_rx > 0) &&
    7abe:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ac0:	4c08      	ldr	r4, [pc, #32]	; (7ae4 <uart_nrfx_fifo_read+0x28>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7ac2:	461e      	mov	r6, r3
    7ac4:	b2d8      	uxtb	r0, r3
    7ac6:	4282      	cmp	r2, r0
    7ac8:	dd03      	ble.n	7ad2 <uart_nrfx_fifo_read+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7aca:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    7ace:	3301      	adds	r3, #1
    7ad0:	b905      	cbnz	r5, 7ad4 <uart_nrfx_fifo_read+0x18>
		/* Receive a character */
		rx_data[num_rx++] = (uint8_t)nrf_uart_rxd_get(uart0_addr);
	}

	return num_rx;
}
    7ad2:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7ad4:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
    7ad8:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    return p_reg->RXD;
    7adc:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    7ae0:	540d      	strb	r5, [r1, r0]
    7ae2:	e7ef      	b.n	7ac4 <uart_nrfx_fifo_read+0x8>
    7ae4:	40002000 	.word	0x40002000

00007ae8 <uart_nrfx_irq_tx_enable>:
/** Interrupt driven transfer enabling function */
static void uart_nrfx_irq_tx_enable(const struct device *dev)
{
	uint32_t key;

	disable_tx_irq = false;
    7ae8:	4b0e      	ldr	r3, [pc, #56]	; (7b24 <uart_nrfx_irq_tx_enable+0x3c>)
    7aea:	2200      	movs	r2, #0
    7aec:	701a      	strb	r2, [r3, #0]
    p_reg->TXD = txd;
}

NRF_STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7aee:	4b0e      	ldr	r3, [pc, #56]	; (7b28 <uart_nrfx_irq_tx_enable+0x40>)
    7af0:	2201      	movs	r2, #1
    7af2:	609a      	str	r2, [r3, #8]
    p_reg->INTENSET = mask;
    7af4:	2280      	movs	r2, #128	; 0x80
    7af6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    7afa:	f04f 0220 	mov.w	r2, #32
    7afe:	f3ef 8311 	mrs	r3, BASEPRI
    7b02:	f382 8812 	msr	BASEPRI_MAX, r2
    7b06:	f3bf 8f6f 	isb	sy
	/* Critical section is used to avoid any UART related interrupt which
	 * can occur after the if statement and before call of the function
	 * forcing an interrupt.
	 */
	key = irq_lock();
	if (uart_sw_event_txdrdy) {
    7b0a:	4a08      	ldr	r2, [pc, #32]	; (7b2c <uart_nrfx_irq_tx_enable+0x44>)
    7b0c:	7812      	ldrb	r2, [r2, #0]
    7b0e:	b11a      	cbz	r2, 7b18 <uart_nrfx_irq_tx_enable+0x30>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b10:	4a07      	ldr	r2, [pc, #28]	; (7b30 <uart_nrfx_irq_tx_enable+0x48>)
    7b12:	2104      	movs	r1, #4
    7b14:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
    7b18:	f383 8811 	msr	BASEPRI, r3
    7b1c:	f3bf 8f6f 	isb	sy
		 * triggered by the software.
		 */
		NVIC_SetPendingIRQ(IRQN);
	}
	irq_unlock(key);
}
    7b20:	4770      	bx	lr
    7b22:	bf00      	nop
    7b24:	20002523 	.word	0x20002523
    7b28:	40002000 	.word	0x40002000
    7b2c:	20002524 	.word	0x20002524
    7b30:	e000e100 	.word	0xe000e100

00007b34 <uart_nrfx_irq_tx_disable>:

/** Interrupt driven transfer disabling function */
static void uart_nrfx_irq_tx_disable(const struct device *dev)
{
	/* Disable TX interrupt in uart_nrfx_isr() when transmission is done. */
	disable_tx_irq = true;
    7b34:	4b01      	ldr	r3, [pc, #4]	; (7b3c <uart_nrfx_irq_tx_disable+0x8>)
    7b36:	2201      	movs	r2, #1
    7b38:	701a      	strb	r2, [r3, #0]
}
    7b3a:	4770      	bx	lr
    7b3c:	20002523 	.word	0x20002523

00007b40 <uart_nrfx_irq_rx_enable>:
    7b40:	4b02      	ldr	r3, [pc, #8]	; (7b4c <uart_nrfx_irq_rx_enable+0xc>)
    7b42:	2204      	movs	r2, #4
    7b44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    7b48:	4770      	bx	lr
    7b4a:	bf00      	nop
    7b4c:	40002000 	.word	0x40002000

00007b50 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    7b50:	4b02      	ldr	r3, [pc, #8]	; (7b5c <uart_nrfx_irq_rx_disable+0xc>)
    7b52:	2204      	movs	r2, #4
    7b54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    7b58:	4770      	bx	lr
    7b5a:	bf00      	nop
    7b5c:	40002000 	.word	0x40002000

00007b60 <uart_nrfx_irq_tx_ready_complete>:

/** Interrupt driven transfer empty function */
static int uart_nrfx_irq_tx_ready_complete(const struct device *dev)
{
    7b60:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
    7b62:	4b07      	ldr	r3, [pc, #28]	; (7b80 <uart_nrfx_irq_tx_ready_complete+0x20>)
    7b64:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	 * called after the TX interrupt is requested to be disabled but before
	 * the disabling is actually performed (in the IRQ handler).
	 */
	return nrf_uart_int_enable_check(uart0_addr,
					 NRF_UART_INT_MASK_TXDRDY) &&
	       !disable_tx_irq &&
    7b68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    7b6c:	d004      	beq.n	7b78 <uart_nrfx_irq_tx_ready_complete+0x18>
    7b6e:	4b05      	ldr	r3, [pc, #20]	; (7b84 <uart_nrfx_irq_tx_ready_complete+0x24>)
    7b70:	781b      	ldrb	r3, [r3, #0]
					 NRF_UART_INT_MASK_TXDRDY) &&
    7b72:	b913      	cbnz	r3, 7b7a <uart_nrfx_irq_tx_ready_complete+0x1a>
	       event_txdrdy_check();
    7b74:	f7ff ff78 	bl	7a68 <event_txdrdy_check>
}
    7b78:	bd08      	pop	{r3, pc}
	       !disable_tx_irq &&
    7b7a:	2000      	movs	r0, #0
    7b7c:	e7fc      	b.n	7b78 <uart_nrfx_irq_tx_ready_complete+0x18>
    7b7e:	bf00      	nop
    7b80:	40002000 	.word	0x40002000
    7b84:	20002523 	.word	0x20002523

00007b88 <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7b88:	4b03      	ldr	r3, [pc, #12]	; (7b98 <uart_nrfx_irq_rx_ready+0x10>)
    7b8a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(const struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
    7b8e:	3800      	subs	r0, #0
    7b90:	bf18      	it	ne
    7b92:	2001      	movne	r0, #1
    7b94:	4770      	bx	lr
    7b96:	bf00      	nop
    7b98:	40002000 	.word	0x40002000

00007b9c <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    7b9c:	4b02      	ldr	r3, [pc, #8]	; (7ba8 <uart_nrfx_irq_err_enable+0xc>)
    7b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
    7ba2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    7ba6:	4770      	bx	lr
    7ba8:	40002000 	.word	0x40002000

00007bac <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    7bac:	4b02      	ldr	r3, [pc, #8]	; (7bb8 <uart_nrfx_irq_err_disable+0xc>)
    7bae:	f44f 7200 	mov.w	r2, #512	; 0x200
    7bb2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    7bb6:	4770      	bx	lr
    7bb8:	40002000 	.word	0x40002000

00007bbc <uart_nrfx_irq_is_pending>:

/** Interrupt driven pending status function */
static int uart_nrfx_irq_is_pending(const struct device *dev)
{
    7bbc:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
    7bbe:	4a0b      	ldr	r2, [pc, #44]	; (7bec <uart_nrfx_irq_is_pending+0x30>)
    7bc0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return ((nrf_uart_int_enable_check(uart0_addr,
					   NRF_UART_INT_MASK_TXDRDY) &&
		 uart_nrfx_irq_tx_ready_complete(dev))
		||
    7bc4:	061b      	lsls	r3, r3, #24
    7bc6:	d405      	bmi.n	7bd4 <uart_nrfx_irq_is_pending+0x18>
    7bc8:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
    7bcc:	f010 0004 	ands.w	r0, r0, #4
    7bd0:	d106      	bne.n	7be0 <uart_nrfx_irq_is_pending+0x24>
		(nrf_uart_int_enable_check(uart0_addr,
					   NRF_UART_INT_MASK_RXDRDY) &&
		 uart_nrfx_irq_rx_ready(dev)));
}
    7bd2:	bd08      	pop	{r3, pc}
		 uart_nrfx_irq_tx_ready_complete(dev))
    7bd4:	f7ff ffc4 	bl	7b60 <uart_nrfx_irq_tx_ready_complete>
					   NRF_UART_INT_MASK_TXDRDY) &&
    7bd8:	2800      	cmp	r0, #0
    7bda:	d0f5      	beq.n	7bc8 <uart_nrfx_irq_is_pending+0xc>
		||
    7bdc:	2001      	movs	r0, #1
    7bde:	e7f8      	b.n	7bd2 <uart_nrfx_irq_is_pending+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7be0:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
					   NRF_UART_INT_MASK_RXDRDY) &&
    7be4:	3800      	subs	r0, #0
    7be6:	bf18      	it	ne
    7be8:	2001      	movne	r0, #1
    7bea:	e7f2      	b.n	7bd2 <uart_nrfx_irq_is_pending+0x16>
    7bec:	40002000 	.word	0x40002000

00007bf0 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(const struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
    7bf0:	4b02      	ldr	r3, [pc, #8]	; (7bfc <uart_nrfx_irq_callback_set+0xc>)
    7bf2:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
    7bf4:	4b02      	ldr	r3, [pc, #8]	; (7c00 <uart_nrfx_irq_callback_set+0x10>)
    7bf6:	601a      	str	r2, [r3, #0]
}
    7bf8:	4770      	bx	lr
    7bfa:	bf00      	nop
    7bfc:	20001f68 	.word	0x20001f68
    7c00:	20001f64 	.word	0x20001f64

00007c04 <uart_nrfx_isr>:
 *
 * @param arg Argument to ISR.
 */
static void uart_nrfx_isr(const struct device *dev)
{
	if (disable_tx_irq &&
    7c04:	4a0e      	ldr	r2, [pc, #56]	; (7c40 <uart_nrfx_isr+0x3c>)
    7c06:	4b0f      	ldr	r3, [pc, #60]	; (7c44 <uart_nrfx_isr+0x40>)
    7c08:	7811      	ldrb	r1, [r2, #0]
    7c0a:	b151      	cbz	r1, 7c22 <uart_nrfx_isr+0x1e>
    7c0c:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
    7c10:	b139      	cbz	r1, 7c22 <uart_nrfx_isr+0x1e>
    p_reg->INTENCLR = mask;
    7c12:	2180      	movs	r1, #128	; 0x80
    7c14:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7c18:	2101      	movs	r1, #1
    7c1a:	60d9      	str	r1, [r3, #12]
		/* The transaction is over. It is okay to enter the deep sleep
		 * mode if needed.
		 */
		pm_device_busy_clear(dev);

		disable_tx_irq = false;
    7c1c:	2300      	movs	r3, #0
    7c1e:	7013      	strb	r3, [r2, #0]

		return;
    7c20:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7c22:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
	}

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    7c26:	b122      	cbz	r2, 7c32 <uart_nrfx_isr+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7c28:	2200      	movs	r2, #0
    7c2a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    7c2e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_ERROR);
	}

	if (irq_callback) {
    7c32:	4b05      	ldr	r3, [pc, #20]	; (7c48 <uart_nrfx_isr+0x44>)
    7c34:	681b      	ldr	r3, [r3, #0]
    7c36:	b113      	cbz	r3, 7c3e <uart_nrfx_isr+0x3a>
		irq_callback(dev, irq_cb_data);
    7c38:	4a04      	ldr	r2, [pc, #16]	; (7c4c <uart_nrfx_isr+0x48>)
    7c3a:	6811      	ldr	r1, [r2, #0]
    7c3c:	4718      	bx	r3
	}
}
    7c3e:	4770      	bx	lr
    7c40:	20002523 	.word	0x20002523
    7c44:	40002000 	.word	0x40002000
    7c48:	20001f68 	.word	0x20001f68
    7c4c:	20001f64 	.word	0x20001f64

00007c50 <uart_nrfx_configure>:
{
    7c50:	b530      	push	{r4, r5, lr}
	switch (cfg->stop_bits) {
    7c52:	794b      	ldrb	r3, [r1, #5]
    7c54:	2b01      	cmp	r3, #1
    7c56:	d022      	beq.n	7c9e <uart_nrfx_configure+0x4e>
    7c58:	2b03      	cmp	r3, #3
    7c5a:	d11d      	bne.n	7c98 <uart_nrfx_configure+0x48>
		uart_cfg.stop = NRF_UART_STOP_TWO;
    7c5c:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    7c5e:	798b      	ldrb	r3, [r1, #6]
    7c60:	2b03      	cmp	r3, #3
    7c62:	d119      	bne.n	7c98 <uart_nrfx_configure+0x48>
	switch (cfg->flow_ctrl) {
    7c64:	79cb      	ldrb	r3, [r1, #7]
    7c66:	b9bb      	cbnz	r3, 7c98 <uart_nrfx_configure+0x48>
	switch (cfg->parity) {
    7c68:	790a      	ldrb	r2, [r1, #4]
    7c6a:	b112      	cbz	r2, 7c72 <uart_nrfx_configure+0x22>
    7c6c:	2a02      	cmp	r2, #2
    7c6e:	d113      	bne.n	7c98 <uart_nrfx_configure+0x48>
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    7c70:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    7c72:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    7c74:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    7c78:	d061      	beq.n	7d3e <uart_nrfx_configure+0xee>
    7c7a:	d82d      	bhi.n	7cd8 <uart_nrfx_configure+0x88>
    7c7c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    7c80:	d05f      	beq.n	7d42 <uart_nrfx_configure+0xf2>
    7c82:	d816      	bhi.n	7cb2 <uart_nrfx_configure+0x62>
    7c84:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    7c88:	d05d      	beq.n	7d46 <uart_nrfx_configure+0xf6>
    7c8a:	d80a      	bhi.n	7ca2 <uart_nrfx_configure+0x52>
    7c8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    7c90:	d05c      	beq.n	7d4c <uart_nrfx_configure+0xfc>
    7c92:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    7c96:	d05c      	beq.n	7d52 <uart_nrfx_configure+0x102>
		return -ENOTSUP;
    7c98:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7c9c:	e04e      	b.n	7d3c <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
    7c9e:	2500      	movs	r5, #0
    7ca0:	e7dd      	b.n	7c5e <uart_nrfx_configure+0xe>
	switch (baudrate) {
    7ca2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    7ca6:	d057      	beq.n	7d58 <uart_nrfx_configure+0x108>
    7ca8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    7cac:	d1f4      	bne.n	7c98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    7cae:	4b34      	ldr	r3, [pc, #208]	; (7d80 <uart_nrfx_configure+0x130>)
    7cb0:	e039      	b.n	7d26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    7cb2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    7cb6:	d052      	beq.n	7d5e <uart_nrfx_configure+0x10e>
    7cb8:	d807      	bhi.n	7cca <uart_nrfx_configure+0x7a>
    7cba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    7cbe:	d050      	beq.n	7d62 <uart_nrfx_configure+0x112>
    7cc0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    7cc4:	d1e8      	bne.n	7c98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    7cc6:	4b2f      	ldr	r3, [pc, #188]	; (7d84 <uart_nrfx_configure+0x134>)
    7cc8:	e02d      	b.n	7d26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    7cca:	f647 2412 	movw	r4, #31250	; 0x7a12
    7cce:	42a3      	cmp	r3, r4
    7cd0:	d1e2      	bne.n	7c98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    7cd2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    7cd6:	e026      	b.n	7d26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    7cd8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    7cdc:	d044      	beq.n	7d68 <uart_nrfx_configure+0x118>
    7cde:	d811      	bhi.n	7d04 <uart_nrfx_configure+0xb4>
    7ce0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    7ce4:	d042      	beq.n	7d6c <uart_nrfx_configure+0x11c>
    7ce6:	d808      	bhi.n	7cfa <uart_nrfx_configure+0xaa>
    7ce8:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    7cec:	42a3      	cmp	r3, r4
    7cee:	d03f      	beq.n	7d70 <uart_nrfx_configure+0x120>
    7cf0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    7cf4:	d1d0      	bne.n	7c98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    7cf6:	4b24      	ldr	r3, [pc, #144]	; (7d88 <uart_nrfx_configure+0x138>)
    7cf8:	e015      	b.n	7d26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    7cfa:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    7cfe:	d1cb      	bne.n	7c98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    7d00:	4b22      	ldr	r3, [pc, #136]	; (7d8c <uart_nrfx_configure+0x13c>)
    7d02:	e010      	b.n	7d26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    7d04:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    7d08:	d035      	beq.n	7d76 <uart_nrfx_configure+0x126>
    7d0a:	d807      	bhi.n	7d1c <uart_nrfx_configure+0xcc>
    7d0c:	4c20      	ldr	r4, [pc, #128]	; (7d90 <uart_nrfx_configure+0x140>)
    7d0e:	42a3      	cmp	r3, r4
    7d10:	d033      	beq.n	7d7a <uart_nrfx_configure+0x12a>
    7d12:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    7d16:	d1bf      	bne.n	7c98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    7d18:	4b1e      	ldr	r3, [pc, #120]	; (7d94 <uart_nrfx_configure+0x144>)
    7d1a:	e004      	b.n	7d26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    7d1c:	4c1e      	ldr	r4, [pc, #120]	; (7d98 <uart_nrfx_configure+0x148>)
    7d1e:	42a3      	cmp	r3, r4
    7d20:	d1ba      	bne.n	7c98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    7d22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
    7d26:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    7d28:	481c      	ldr	r0, [pc, #112]	; (7d9c <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
    7d2a:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
    7d2c:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    7d30:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    7d34:	c903      	ldmia	r1, {r0, r1}
    7d36:	e884 0003 	stmia.w	r4, {r0, r1}
	return 0;
    7d3a:	2000      	movs	r0, #0
}
    7d3c:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    7d3e:	4b18      	ldr	r3, [pc, #96]	; (7da0 <uart_nrfx_configure+0x150>)
    7d40:	e7f1      	b.n	7d26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    7d42:	4b18      	ldr	r3, [pc, #96]	; (7da4 <uart_nrfx_configure+0x154>)
    7d44:	e7ef      	b.n	7d26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    7d46:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    7d4a:	e7ec      	b.n	7d26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
    7d4c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    7d50:	e7e9      	b.n	7d26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    7d52:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    7d56:	e7e6      	b.n	7d26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    7d58:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    7d5c:	e7e3      	b.n	7d26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    7d5e:	4b12      	ldr	r3, [pc, #72]	; (7da8 <uart_nrfx_configure+0x158>)
    7d60:	e7e1      	b.n	7d26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    7d62:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    7d66:	e7de      	b.n	7d26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    7d68:	4b10      	ldr	r3, [pc, #64]	; (7dac <uart_nrfx_configure+0x15c>)
    7d6a:	e7dc      	b.n	7d26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    7d6c:	4b10      	ldr	r3, [pc, #64]	; (7db0 <uart_nrfx_configure+0x160>)
    7d6e:	e7da      	b.n	7d26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    7d70:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    7d74:	e7d7      	b.n	7d26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    7d76:	4b0f      	ldr	r3, [pc, #60]	; (7db4 <uart_nrfx_configure+0x164>)
    7d78:	e7d5      	b.n	7d26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    7d7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7d7e:	e7d2      	b.n	7d26 <uart_nrfx_configure+0xd6>
    7d80:	0013b000 	.word	0x0013b000
    7d84:	004ea000 	.word	0x004ea000
    7d88:	00ebf000 	.word	0x00ebf000
    7d8c:	01d7e000 	.word	0x01d7e000
    7d90:	0003d090 	.word	0x0003d090
    7d94:	075f7000 	.word	0x075f7000
    7d98:	000f4240 	.word	0x000f4240
    7d9c:	40002000 	.word	0x40002000
    7da0:	009d5000 	.word	0x009d5000
    7da4:	00275000 	.word	0x00275000
    7da8:	0075f000 	.word	0x0075f000
    7dac:	03afb000 	.word	0x03afb000
    7db0:	013a9000 	.word	0x013a9000
    7db4:	0ebed000 	.word	0x0ebed000

00007db8 <uart_nrfx_poll_out>:
{
    7db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dba:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    7dbc:	f006 f8a0 	bl	df00 <k_is_in_isr>
    7dc0:	4d1b      	ldr	r5, [pc, #108]	; (7e30 <uart_nrfx_poll_out+0x78>)
    7dc2:	bb90      	cbnz	r0, 7e2a <uart_nrfx_poll_out+0x72>
    7dc4:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7dc6:	2701      	movs	r7, #1
    7dc8:	f3bf 8f5b 	dmb	ish
    7dcc:	e855 3f00 	ldrex	r3, [r5]
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	d103      	bne.n	7ddc <uart_nrfx_poll_out+0x24>
    7dd4:	e845 7200 	strex	r2, r7, [r5]
    7dd8:	2a00      	cmp	r2, #0
    7dda:	d1f7      	bne.n	7dcc <uart_nrfx_poll_out+0x14>
    7ddc:	f3bf 8f5b 	dmb	ish
				  (atomic_val_t) 1) == false) {
    7de0:	d007      	beq.n	7df2 <uart_nrfx_poll_out+0x3a>
    7de2:	2021      	movs	r0, #33	; 0x21
    7de4:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
    7de6:	3c01      	subs	r4, #1
    7de8:	f003 fc6a 	bl	b6c0 <z_impl_k_sleep>
    7dec:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    7df0:	d1ea      	bne.n	7dc8 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7df2:	4b10      	ldr	r3, [pc, #64]	; (7e34 <uart_nrfx_poll_out+0x7c>)
    7df4:	2200      	movs	r2, #0
    7df6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    7dfa:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
	uart_sw_event_txdrdy = 0U;
    7dfe:	490e      	ldr	r1, [pc, #56]	; (7e38 <uart_nrfx_poll_out+0x80>)
    7e00:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e02:	2201      	movs	r2, #1
    7e04:	609a      	str	r2, [r3, #8]
    p_reg->TXD = txd;
    7e06:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    7e0a:	f8c3 651c 	str.w	r6, [r3, #1308]	; 0x51c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    7e0e:	f7ff fe2b 	bl	7a68 <event_txdrdy_check>
    7e12:	b920      	cbnz	r0, 7e1e <uart_nrfx_poll_out+0x66>
    7e14:	2001      	movs	r0, #1
    7e16:	f005 fe59 	bl	dacc <nrfx_busy_wait>
    7e1a:	3c01      	subs	r4, #1
    7e1c:	d1f7      	bne.n	7e0e <uart_nrfx_poll_out+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e1e:	4b05      	ldr	r3, [pc, #20]	; (7e34 <uart_nrfx_poll_out+0x7c>)
    7e20:	2201      	movs	r2, #1
    7e22:	60da      	str	r2, [r3, #12]
	*lock = 0;
    7e24:	2300      	movs	r3, #0
    7e26:	602b      	str	r3, [r5, #0]
}
    7e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    7e2a:	2301      	movs	r3, #1
    7e2c:	602b      	str	r3, [r5, #0]
    7e2e:	e7e0      	b.n	7df2 <uart_nrfx_poll_out+0x3a>
    7e30:	20001f60 	.word	0x20001f60
    7e34:	40002000 	.word	0x40002000
    7e38:	20002524 	.word	0x20002524

00007e3c <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    7e3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    7e40:	4d19      	ldr	r5, [pc, #100]	; (7ea8 <uart_nrfx_init+0x6c>)
	const struct uart_nrfx_config *config = dev->config;
    7e42:	6843      	ldr	r3, [r0, #4]
	struct uart_nrfx_data *data = dev->data;
    7e44:	f8d0 8010 	ldr.w	r8, [r0, #16]
    7e48:	2100      	movs	r1, #0
    7e4a:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	int err;

	nrf_uart_disable(uart0_addr);

	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    7e4e:	681f      	ldr	r7, [r3, #0]
{
    7e50:	4606      	mov	r6, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    7e52:	aa01      	add	r2, sp, #4
    7e54:	4638      	mov	r0, r7
    7e56:	f005 fd7c 	bl	d952 <pinctrl_lookup_state>
	if (ret < 0) {
    7e5a:	1e04      	subs	r4, r0, #0
    7e5c:	db1f      	blt.n	7e9e <uart_nrfx_init+0x62>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    7e5e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    7e60:	683a      	ldr	r2, [r7, #0]
    7e62:	7919      	ldrb	r1, [r3, #4]
    7e64:	6818      	ldr	r0, [r3, #0]
    7e66:	f7ff fd57 	bl	7918 <pinctrl_configure_pins>
	if (err < 0) {
    7e6a:	1e04      	subs	r4, r0, #0
    7e6c:	db17      	blt.n	7e9e <uart_nrfx_init+0x62>
		return err;
	}

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
    7e6e:	4641      	mov	r1, r8
    7e70:	4630      	mov	r0, r6
    7e72:	f7ff feed 	bl	7c50 <uart_nrfx_configure>
	if (err) {
    7e76:	4604      	mov	r4, r0
    7e78:	b988      	cbnz	r0, 7e9e <uart_nrfx_init+0x62>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    7e7a:	2304      	movs	r3, #4
    7e7c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7e80:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
    7e84:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
    7e88:	4b08      	ldr	r3, [pc, #32]	; (7eac <uart_nrfx_init+0x70>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e8a:	2101      	movs	r1, #1
    7e8c:	6029      	str	r1, [r5, #0]
#endif

#if defined(CONFIG_UART_0_ASYNC) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(IRQN,
    7e8e:	4602      	mov	r2, r0
    7e90:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
    7e92:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(IRQN,
    7e94:	f7fb fefe 	bl	3c94 <z_arm_irq_priority_set>
		    IRQ_PRIO,
		    uart_nrfx_isr,
		    DEVICE_DT_INST_GET(0),
		    0);
	irq_enable(IRQN);
    7e98:	2002      	movs	r0, #2
    7e9a:	f7fb fecb 	bl	3c34 <arch_irq_enable>
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
    7e9e:	4620      	mov	r0, r4
    7ea0:	b002      	add	sp, #8
    7ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ea6:	bf00      	nop
    7ea8:	40002000 	.word	0x40002000
    7eac:	20002524 	.word	0x20002524

00007eb0 <uart_nrfx_fifo_fill>:
{
    7eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while ((len - num_tx > 0) &&
    7eb4:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7eb6:	4e0c      	ldr	r6, [pc, #48]	; (7ee8 <uart_nrfx_fifo_fill+0x38>)
	uart_sw_event_txdrdy = 0U;
    7eb8:	f8df 8030 	ldr.w	r8, [pc, #48]	; 7eec <uart_nrfx_fifo_fill+0x3c>
    7ebc:	4627      	mov	r7, r4
	while ((len - num_tx > 0) &&
    7ebe:	b2e5      	uxtb	r5, r4
    7ec0:	42aa      	cmp	r2, r5
    7ec2:	dd03      	ble.n	7ecc <uart_nrfx_fifo_fill+0x1c>
	       event_txdrdy_check()) {
    7ec4:	f7ff fdd0 	bl	7a68 <event_txdrdy_check>
	while ((len - num_tx > 0) &&
    7ec8:	3401      	adds	r4, #1
    7eca:	b910      	cbnz	r0, 7ed2 <uart_nrfx_fifo_fill+0x22>
}
    7ecc:	4628      	mov	r0, r5
    7ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ed2:	f8c6 711c 	str.w	r7, [r6, #284]	; 0x11c
    7ed6:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
    p_reg->TXD = txd;
    7eda:	5d4b      	ldrb	r3, [r1, r5]
	uart_sw_event_txdrdy = 0U;
    7edc:	f888 7000 	strb.w	r7, [r8]
    7ee0:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
}
    7ee4:	e7eb      	b.n	7ebe <uart_nrfx_fifo_fill+0xe>
    7ee6:	bf00      	nop
    7ee8:	40002000 	.word	0x40002000
    7eec:	20002524 	.word	0x20002524

00007ef0 <spi_nrfx_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int spi_nrfx_init(const struct device *dev)
{
    7ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ef4:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
    7ef6:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    7ef8:	6905      	ldr	r5, [r0, #16]
	int err;

	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    7efa:	6a26      	ldr	r6, [r4, #32]
{
    7efc:	af00      	add	r7, sp, #0
	ret = pinctrl_lookup_state(config, id, &state);
    7efe:	1d3a      	adds	r2, r7, #4
    7f00:	2100      	movs	r1, #0
    7f02:	4630      	mov	r0, r6
    7f04:	f005 fd25 	bl	d952 <pinctrl_lookup_state>
	if (ret < 0) {
    7f08:	2800      	cmp	r0, #0
    7f0a:	db32      	blt.n	7f72 <spi_nrfx_init+0x82>
	return pinctrl_apply_state_direct(config, state);
    7f0c:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    7f0e:	6832      	ldr	r2, [r6, #0]
    7f10:	7919      	ldrb	r1, [r3, #4]
    7f12:	6818      	ldr	r0, [r3, #0]
    7f14:	f7ff fd00 	bl	7918 <pinctrl_configure_pins>
	if (err < 0) {
    7f18:	2800      	cmp	r0, #0
    7f1a:	db2a      	blt.n	7f72 <spi_nrfx_init+0x82>
		return err;
	}

	dev_config->irq_connect();
    7f1c:	69e3      	ldr	r3, [r4, #28]
    7f1e:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    7f20:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7f22:	2601      	movs	r6, #1
    7f24:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    7f28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7f2c:	429c      	cmp	r4, r3
    7f2e:	d304      	bcc.n	7f3a <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    7f30:	4628      	mov	r0, r5
    7f32:	f005 fd7c 	bl	da2e <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    7f36:	2000      	movs	r0, #0

	return 0;
    7f38:	e01b      	b.n	7f72 <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
    7f3a:	6820      	ldr	r0, [r4, #0]
    7f3c:	f005 ff84 	bl	de48 <z_device_is_ready>
    7f40:	b9d8      	cbnz	r0, 7f7a <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    7f42:	6823      	ldr	r3, [r4, #0]
    7f44:	6819      	ldr	r1, [r3, #0]
    7f46:	7923      	ldrb	r3, [r4, #4]
    7f48:	466c      	mov	r4, sp
    7f4a:	b08a      	sub	sp, #40	; 0x28
    7f4c:	466a      	mov	r2, sp
    7f4e:	481c      	ldr	r0, [pc, #112]	; (7fc0 <spi_nrfx_init+0xd0>)
    7f50:	61d3      	str	r3, [r2, #28]
    7f52:	f44f 7300 	mov.w	r3, #512	; 0x200
    7f56:	8413      	strh	r3, [r2, #32]
    7f58:	4b1a      	ldr	r3, [pc, #104]	; (7fc4 <spi_nrfx_init+0xd4>)
    7f5a:	e9c2 0105 	strd	r0, r1, [r2, #20]
    7f5e:	481a      	ldr	r0, [pc, #104]	; (7fc8 <spi_nrfx_init+0xd8>)
    7f60:	f842 3f10 	str.w	r3, [r2, #16]!
    7f64:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    7f68:	f005 fd28 	bl	d9bc <z_log_msg_static_create.constprop.0>
			return -ENODEV;
    7f6c:	f06f 0012 	mvn.w	r0, #18
    7f70:	46a5      	mov	sp, r4
}
    7f72:	370c      	adds	r7, #12
    7f74:	46bd      	mov	sp, r7
    7f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
    7f7a:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    7f7c:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    7f7e:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    7f80:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    7f84:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7f88:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    7f8c:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    7f8e:	bf54      	ite	pl
    7f90:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    7f94:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    7f98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7f9c:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7fa0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7fa2:	bf4c      	ite	mi
    7fa4:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7fa8:	ea2c 0308 	bicpl.w	r3, ip, r8
    7fac:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    7fb0:	f8d9 3000 	ldr.w	r3, [r9]
    7fb4:	4798      	blx	r3
		if (ret < 0) {
    7fb6:	2800      	cmp	r0, #0
    7fb8:	dbdb      	blt.n	7f72 <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    7fba:	3408      	adds	r4, #8
    7fbc:	e7b2      	b.n	7f24 <spi_nrfx_init+0x34>
    7fbe:	bf00      	nop
    7fc0:	0000ffee 	.word	0x0000ffee
    7fc4:	01000004 	.word	0x01000004
    7fc8:	0000eb5c 	.word	0x0000eb5c

00007fcc <transfer_next_chunk>:
{
    7fcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7fce:	4605      	mov	r5, r0
	const struct spi_nrfx_config *dev_config = dev->config;
    7fd0:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    7fd2:	692a      	ldr	r2, [r5, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    7fd4:	6d93      	ldr	r3, [r2, #88]	; 0x58
		return ctx->rx_len;
    7fd6:	6e11      	ldr	r1, [r2, #96]	; 0x60
	if (!ctx->tx_len) {
    7fd8:	b9e3      	cbnz	r3, 8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
	if (chunk_len > 0) {
    7fda:	b1a9      	cbz	r1, 8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
		xfer.p_tx_buffer = ctx->tx_buf;
    7fdc:	6d54      	ldr	r4, [r2, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
    7fde:	6691      	str	r1, [r2, #104]	; 0x68
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7fe0:	461e      	mov	r6, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    7fe2:	460b      	mov	r3, r1
		xfer.p_rx_buffer = ctx->rx_buf;
    7fe4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    7fe6:	9202      	str	r2, [sp, #8]
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7fe8:	e9cd 4600 	strd	r4, r6, [sp]
	return !!(ctx->rx_buf && ctx->rx_len);
    7fec:	b1ea      	cbz	r2, 802a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a>
    7fee:	2900      	cmp	r1, #0
    7ff0:	bf18      	it	ne
    7ff2:	4619      	movne	r1, r3
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    7ff4:	9103      	str	r1, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    7ff6:	2200      	movs	r2, #0
    7ff8:	4669      	mov	r1, sp
    7ffa:	f001 fb63 	bl	96c4 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    7ffe:	4b0d      	ldr	r3, [pc, #52]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    8000:	4298      	cmp	r0, r3
    8002:	d014      	beq.n	802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
		error = -EIO;
    8004:	f06f 0104 	mvn.w	r1, #4
	finish_transaction(dev, error);
    8008:	6928      	ldr	r0, [r5, #16]
}
    800a:	b004      	add	sp, #16
    800c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	finish_transaction(dev, error);
    8010:	f005 bd2f 	b.w	da72 <finish_transaction.isra.0>
	} else if (!ctx->rx_len) {
    8014:	6d54      	ldr	r4, [r2, #84]	; 0x54
    8016:	b111      	cbz	r1, 801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    8018:	428b      	cmp	r3, r1
    801a:	bf28      	it	cs
    801c:	460b      	movcs	r3, r1
		return ctx->tx_len;
    801e:	2c00      	cmp	r4, #0
		dev_data->chunk_len = chunk_len;
    8020:	6693      	str	r3, [r2, #104]	; 0x68
    8022:	bf14      	ite	ne
    8024:	461e      	movne	r6, r3
    8026:	2600      	moveq	r6, #0
    8028:	e7dc      	b.n	7fe4 <transfer_next_chunk+0x18>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    802a:	4611      	mov	r1, r2
    802c:	e7e2      	b.n	7ff4 <transfer_next_chunk+0x28>
}
    802e:	b004      	add	sp, #16
    8030:	bd70      	pop	{r4, r5, r6, pc}
    8032:	bf00      	nop
    8034:	0bad0000 	.word	0x0bad0000

00008038 <event_handler>:
{
    8038:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    803a:	7803      	ldrb	r3, [r0, #0]
{
    803c:	b086      	sub	sp, #24
    803e:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    8040:	2b00      	cmp	r3, #0
    8042:	d15e      	bne.n	8102 <event_handler+0xca>
		if (dev_data->chunk_len == 0) {
    8044:	6e8a      	ldr	r2, [r1, #104]	; 0x68
    8046:	b942      	cbnz	r2, 805a <event_handler+0x22>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    8048:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    804a:	6918      	ldr	r0, [r3, #16]
    804c:	f06f 0173 	mvn.w	r1, #115	; 0x73
}
    8050:	b006      	add	sp, #24
    8052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    8056:	f005 bd0c 	b.w	da72 <finish_transaction.isra.0>
	if (!ctx->tx_len) {
    805a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
    805c:	b15b      	cbz	r3, 8076 <event_handler+0x3e>
	if (len > ctx->tx_len) {
    805e:	429a      	cmp	r2, r3
    8060:	d91e      	bls.n	80a0 <event_handler+0x68>
		LOG_ERR("Update exceeds current buffer");
    8062:	4b29      	ldr	r3, [pc, #164]	; (8108 <event_handler+0xd0>)
    8064:	9305      	str	r3, [sp, #20]
    8066:	4829      	ldr	r0, [pc, #164]	; (810c <event_handler+0xd4>)
    8068:	2302      	movs	r3, #2
    806a:	aa04      	add	r2, sp, #16
    806c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8070:	9304      	str	r3, [sp, #16]
    8072:	f005 fca3 	bl	d9bc <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
    8076:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    8078:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    807a:	b15b      	cbz	r3, 8094 <event_handler+0x5c>
	if (len > ctx->rx_len) {
    807c:	429a      	cmp	r2, r3
    807e:	d927      	bls.n	80d0 <event_handler+0x98>
		LOG_ERR("Update exceeds current buffer");
    8080:	4b21      	ldr	r3, [pc, #132]	; (8108 <event_handler+0xd0>)
    8082:	9305      	str	r3, [sp, #20]
    8084:	4821      	ldr	r0, [pc, #132]	; (810c <event_handler+0xd4>)
    8086:	2302      	movs	r3, #2
    8088:	aa04      	add	r2, sp, #16
    808a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    808e:	9304      	str	r3, [sp, #16]
    8090:	f005 fc94 	bl	d9bc <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    8094:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
    8096:	b006      	add	sp, #24
    8098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    809c:	f7ff bf96 	b.w	7fcc <transfer_next_chunk>
	ctx->tx_len -= len;
    80a0:	1a9b      	subs	r3, r3, r2
    80a2:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
    80a4:	b973      	cbnz	r3, 80c4 <event_handler+0x8c>
		++ctx->current_tx;
    80a6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    80a8:	3308      	adds	r3, #8
    80aa:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
    80ac:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    80ae:	3b01      	subs	r3, #1
    80b0:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
    80b2:	f101 0258 	add.w	r2, r1, #88	; 0x58
    80b6:	f104 0044 	add.w	r0, r4, #68	; 0x44
    80ba:	3148      	adds	r1, #72	; 0x48
    80bc:	f005 fc6b 	bl	d996 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    80c0:	6560      	str	r0, [r4, #84]	; 0x54
    80c2:	e7d8      	b.n	8076 <event_handler+0x3e>
	} else if (ctx->tx_buf) {
    80c4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    80c6:	2b00      	cmp	r3, #0
    80c8:	d0d5      	beq.n	8076 <event_handler+0x3e>
		ctx->tx_buf += dfs * len;
    80ca:	4413      	add	r3, r2
    80cc:	654b      	str	r3, [r1, #84]	; 0x54
    80ce:	e7d2      	b.n	8076 <event_handler+0x3e>
	ctx->rx_len -= len;
    80d0:	1a9b      	subs	r3, r3, r2
    80d2:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
    80d4:	b97b      	cbnz	r3, 80f6 <event_handler+0xbe>
		++ctx->current_rx;
    80d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    80d8:	3308      	adds	r3, #8
    80da:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
    80dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    80de:	3b01      	subs	r3, #1
    80e0:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
    80e2:	f104 0260 	add.w	r2, r4, #96	; 0x60
    80e6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    80ea:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    80ee:	f005 fc52 	bl	d996 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    80f2:	65e0      	str	r0, [r4, #92]	; 0x5c
    80f4:	e7ce      	b.n	8094 <event_handler+0x5c>
	} else if (ctx->rx_buf) {
    80f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0cb      	beq.n	8094 <event_handler+0x5c>
		ctx->rx_buf += dfs * len;
    80fc:	4413      	add	r3, r2
    80fe:	65e3      	str	r3, [r4, #92]	; 0x5c
    8100:	e7c8      	b.n	8094 <event_handler+0x5c>
}
    8102:	b006      	add	sp, #24
    8104:	bd10      	pop	{r4, pc}
    8106:	bf00      	nop
    8108:	00010012 	.word	0x00010012
    810c:	0000eb5c 	.word	0x0000eb5c

00008110 <spi_nrfx_transceive>:
{
    8110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8114:	b08b      	sub	sp, #44	; 0x2c
    8116:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
    8118:	6904      	ldr	r4, [r0, #16]
{
    811a:	60fb      	str	r3, [r7, #12]
	const struct spi_nrfx_config *dev_config = dev->config;
    811c:	6843      	ldr	r3, [r0, #4]
    811e:	603b      	str	r3, [r7, #0]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    8120:	888b      	ldrh	r3, [r1, #4]
    8122:	049b      	lsls	r3, r3, #18
{
    8124:	4606      	mov	r6, r0
    8126:	4688      	mov	r8, r1
    8128:	4691      	mov	r9, r2
    812a:	d437      	bmi.n	819c <spi_nrfx_transceive+0x8c>
	return z_impl_k_sem_take(sem, timeout);
    812c:	f04f 32ff 	mov.w	r2, #4294967295
    8130:	f04f 33ff 	mov.w	r3, #4294967295
    8134:	f104 0010 	add.w	r0, r4, #16
    8138:	f002 fe58 	bl	adec <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    813c:	f8c4 8004 	str.w	r8, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    8140:	f8d6 a010 	ldr.w	sl, [r6, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    8144:	6873      	ldr	r3, [r6, #4]
    8146:	60bb      	str	r3, [r7, #8]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    8148:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
    814c:	607b      	str	r3, [r7, #4]
    814e:	b123      	cbz	r3, 815a <spi_nrfx_transceive+0x4a>
    8150:	f8da 3000 	ldr.w	r3, [sl]
    8154:	4598      	cmp	r8, r3
    8156:	f000 80cb 	beq.w	82f0 <spi_nrfx_transceive+0x1e0>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    815a:	f8b8 c004 	ldrh.w	ip, [r8, #4]
    815e:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    8162:	d022      	beq.n	81aa <spi_nrfx_transceive+0x9a>
		LOG_ERR("Half-duplex not supported");
    8164:	4bae      	ldr	r3, [pc, #696]	; (8420 <spi_nrfx_transceive+0x310>)
    8166:	627b      	str	r3, [r7, #36]	; 0x24
    8168:	2302      	movs	r3, #2
    816a:	48ae      	ldr	r0, [pc, #696]	; (8424 <spi_nrfx_transceive+0x314>)
    816c:	623b      	str	r3, [r7, #32]
    816e:	f107 0220 	add.w	r2, r7, #32
    8172:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    8176:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    817a:	f005 fc1f 	bl	d9bc <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    817e:	6823      	ldr	r3, [r4, #0]
    8180:	889b      	ldrh	r3, [r3, #4]
    8182:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    8186:	d104      	bne.n	8192 <spi_nrfx_transceive+0x82>
		ctx->owner = NULL;
    8188:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    818a:	f104 0010 	add.w	r0, r4, #16
    818e:	f002 fe07 	bl	ada0 <z_impl_k_sem_give>
}
    8192:	4628      	mov	r0, r5
    8194:	372c      	adds	r7, #44	; 0x2c
    8196:	46bd      	mov	sp, r7
    8198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    819c:	69a3      	ldr	r3, [r4, #24]
    819e:	2b00      	cmp	r3, #0
    81a0:	d1c4      	bne.n	812c <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    81a2:	6863      	ldr	r3, [r4, #4]
    81a4:	4299      	cmp	r1, r3
    81a6:	d1c1      	bne.n	812c <spi_nrfx_transceive+0x1c>
    81a8:	e7ca      	b.n	8140 <spi_nrfx_transceive+0x30>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    81aa:	f01c 0f01 	tst.w	ip, #1
    81ae:	d015      	beq.n	81dc <spi_nrfx_transceive+0xcc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    81b0:	466d      	mov	r5, sp
    81b2:	b088      	sub	sp, #32
    81b4:	6833      	ldr	r3, [r6, #0]
    81b6:	466a      	mov	r2, sp
    81b8:	499b      	ldr	r1, [pc, #620]	; (8428 <spi_nrfx_transceive+0x318>)
    81ba:	489a      	ldr	r0, [pc, #616]	; (8424 <spi_nrfx_transceive+0x314>)
    81bc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    81c0:	f44f 7300 	mov.w	r3, #512	; 0x200
    81c4:	8393      	strh	r3, [r2, #28]
    81c6:	4b99      	ldr	r3, [pc, #612]	; (842c <spi_nrfx_transceive+0x31c>)
    81c8:	f842 3f10 	str.w	r3, [r2, #16]!
    81cc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    81d0:	f005 fbf4 	bl	d9bc <z_log_msg_static_create.constprop.0>
    81d4:	46ad      	mov	sp, r5
		return -EINVAL;
    81d6:	f06f 0515 	mvn.w	r5, #21
    81da:	e7d0      	b.n	817e <spi_nrfx_transceive+0x6e>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    81dc:	f01c 0f08 	tst.w	ip, #8
    81e0:	d00b      	beq.n	81fa <spi_nrfx_transceive+0xea>
		LOG_ERR("Loopback mode is not supported");
    81e2:	4b93      	ldr	r3, [pc, #588]	; (8430 <spi_nrfx_transceive+0x320>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    81e4:	627b      	str	r3, [r7, #36]	; 0x24
    81e6:	2302      	movs	r3, #2
    81e8:	488e      	ldr	r0, [pc, #568]	; (8424 <spi_nrfx_transceive+0x314>)
    81ea:	623b      	str	r3, [r7, #32]
    81ec:	f107 0220 	add.w	r2, r7, #32
    81f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    81f4:	f005 fbe2 	bl	d9bc <z_log_msg_static_create.constprop.0>
	if (error == 0) {
    81f8:	e7ed      	b.n	81d6 <spi_nrfx_transceive+0xc6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    81fa:	f3cc 1345 	ubfx	r3, ip, #5, #6
    81fe:	2b08      	cmp	r3, #8
    8200:	d001      	beq.n	8206 <spi_nrfx_transceive+0xf6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    8202:	4b8c      	ldr	r3, [pc, #560]	; (8434 <spi_nrfx_transceive+0x324>)
    8204:	e7ee      	b.n	81e4 <spi_nrfx_transceive+0xd4>
	if (spi_cfg->frequency < 125000) {
    8206:	f8d8 5000 	ldr.w	r5, [r8]
    820a:	4b8b      	ldr	r3, [pc, #556]	; (8438 <spi_nrfx_transceive+0x328>)
    820c:	429d      	cmp	r5, r3
    820e:	d801      	bhi.n	8214 <spi_nrfx_transceive+0x104>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    8210:	4b8a      	ldr	r3, [pc, #552]	; (843c <spi_nrfx_transceive+0x32c>)
    8212:	e7e7      	b.n	81e4 <spi_nrfx_transceive+0xd4>
	config = dev_config->def_config;
    8214:	68bb      	ldr	r3, [r7, #8]
    8216:	f103 0b08 	add.w	fp, r3, #8
    821a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    821e:	f107 0e10 	add.w	lr, r7, #16
    8222:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    8226:	f8db 3000 	ldr.w	r3, [fp]
    822a:	f8ce 3000 	str.w	r3, [lr]
	if (frequency < 250000) {
    822e:	4b84      	ldr	r3, [pc, #528]	; (8440 <spi_nrfx_transceive+0x330>)
    8230:	429d      	cmp	r5, r3
    8232:	d945      	bls.n	82c0 <spi_nrfx_transceive+0x1b0>
	} else if (frequency < 500000) {
    8234:	4b83      	ldr	r3, [pc, #524]	; (8444 <spi_nrfx_transceive+0x334>)
    8236:	429d      	cmp	r5, r3
    8238:	d945      	bls.n	82c6 <spi_nrfx_transceive+0x1b6>
	} else if (frequency < 1000000) {
    823a:	4b83      	ldr	r3, [pc, #524]	; (8448 <spi_nrfx_transceive+0x338>)
    823c:	429d      	cmp	r5, r3
    823e:	d945      	bls.n	82cc <spi_nrfx_transceive+0x1bc>
	} else if (frequency < 2000000) {
    8240:	4b82      	ldr	r3, [pc, #520]	; (844c <spi_nrfx_transceive+0x33c>)
    8242:	429d      	cmp	r5, r3
    8244:	d945      	bls.n	82d2 <spi_nrfx_transceive+0x1c2>
	} else if (frequency < 4000000) {
    8246:	4b82      	ldr	r3, [pc, #520]	; (8450 <spi_nrfx_transceive+0x340>)
    8248:	429d      	cmp	r5, r3
    824a:	d945      	bls.n	82d8 <spi_nrfx_transceive+0x1c8>
		return NRF_SPI_FREQ_4M;
    824c:	4b81      	ldr	r3, [pc, #516]	; (8454 <spi_nrfx_transceive+0x344>)
    824e:	429d      	cmp	r5, r3
    8250:	bf2c      	ite	cs
    8252:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    8256:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    825a:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    825e:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    8260:	f00c 0304 	and.w	r3, ip, #4
    8264:	d03b      	beq.n	82de <spi_nrfx_transceive+0x1ce>
			return NRF_SPI_MODE_2;
    8266:	2b00      	cmp	r3, #0
    8268:	bf14      	ite	ne
    826a:	2303      	movne	r3, #3
    826c:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    826e:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
    8270:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
    8272:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    8276:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
    827a:	b12b      	cbz	r3, 8288 <spi_nrfx_transceive+0x178>
		nrfx_spi_uninit(&dev_config->spi);
    827c:	68b8      	ldr	r0, [r7, #8]
    827e:	f001 f9e9 	bl	9654 <nrfx_spi_uninit>
		dev_data->initialized = false;
    8282:	2300      	movs	r3, #0
    8284:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spi_init(&dev_config->spi, &config,
    8288:	4653      	mov	r3, sl
    828a:	4a73      	ldr	r2, [pc, #460]	; (8458 <spi_nrfx_transceive+0x348>)
    828c:	68b8      	ldr	r0, [r7, #8]
    828e:	f107 0110 	add.w	r1, r7, #16
    8292:	f001 f931 	bl	94f8 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    8296:	4b71      	ldr	r3, [pc, #452]	; (845c <spi_nrfx_transceive+0x34c>)
    8298:	4298      	cmp	r0, r3
    829a:	d024      	beq.n	82e6 <spi_nrfx_transceive+0x1d6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    829c:	466d      	mov	r5, sp
    829e:	b088      	sub	sp, #32
    82a0:	466a      	mov	r2, sp
    82a2:	4b6f      	ldr	r3, [pc, #444]	; (8460 <spi_nrfx_transceive+0x350>)
    82a4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    82a8:	2303      	movs	r3, #3
    82aa:	f842 3f10 	str.w	r3, [r2, #16]!
    82ae:	485d      	ldr	r0, [pc, #372]	; (8424 <spi_nrfx_transceive+0x314>)
    82b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    82b4:	f005 fb82 	bl	d9bc <z_log_msg_static_create.constprop.0>
    82b8:	46ad      	mov	sp, r5
		return -EIO;
    82ba:	f06f 0504 	mvn.w	r5, #4
    82be:	e75e      	b.n	817e <spi_nrfx_transceive+0x6e>
		return NRF_SPI_FREQ_125K;
    82c0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    82c4:	e7c9      	b.n	825a <spi_nrfx_transceive+0x14a>
		return NRF_SPI_FREQ_250K;
    82c6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    82ca:	e7c6      	b.n	825a <spi_nrfx_transceive+0x14a>
		return NRF_SPI_FREQ_500K;
    82cc:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    82d0:	e7c3      	b.n	825a <spi_nrfx_transceive+0x14a>
		return NRF_SPI_FREQ_1M;
    82d2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    82d6:	e7c0      	b.n	825a <spi_nrfx_transceive+0x14a>
		return NRF_SPI_FREQ_2M;
    82d8:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    82dc:	e7bd      	b.n	825a <spi_nrfx_transceive+0x14a>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    82de:	3b00      	subs	r3, #0
    82e0:	bf18      	it	ne
    82e2:	2301      	movne	r3, #1
    82e4:	e7c3      	b.n	826e <spi_nrfx_transceive+0x15e>
	dev_data->initialized = true;
    82e6:	2301      	movs	r3, #1
    82e8:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	ctx->config = spi_cfg;
    82ec:	f8ca 8000 	str.w	r8, [sl]
		dev_data->busy = true;
    82f0:	2301      	movs	r3, #1
    82f2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    82f6:	f1b9 0f00 	cmp.w	r9, #0
    82fa:	d16d      	bne.n	83d8 <spi_nrfx_transceive+0x2c8>
    82fc:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    8300:	2300      	movs	r3, #0
    8302:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    8304:	f104 0258 	add.w	r2, r4, #88	; 0x58
    8308:	f104 0148 	add.w	r1, r4, #72	; 0x48
    830c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8310:	f005 fb41 	bl	d996 <spi_context_get_next_buf.constprop.0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    8314:	68fb      	ldr	r3, [r7, #12]
	ctx->tx_buf = (const uint8_t *)
    8316:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    8318:	2b00      	cmp	r3, #0
    831a:	d165      	bne.n	83e8 <spi_nrfx_transceive+0x2d8>
    831c:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    831e:	2300      	movs	r3, #0
    8320:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    8322:	f104 0260 	add.w	r2, r4, #96	; 0x60
    8326:	f104 0150 	add.w	r1, r4, #80	; 0x50
    832a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    832e:	f005 fb32 	bl	d996 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    8332:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    8334:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    8336:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
    8338:	2101      	movs	r1, #1
    833a:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    833c:	6425      	str	r5, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
    833e:	f005 fb54 	bl	d9ea <_spi_context_cs_control>
		transfer_next_chunk(dev);
    8342:	4630      	mov	r0, r6
    8344:	f7ff fe42 	bl	7fcc <transfer_next_chunk>
static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;

	for (n = 0; n < ctx->tx_count; ++n) {
    8348:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	size_t total_len = 0;
    834a:	462a      	mov	r2, r5
	for (n = 0; n < ctx->tx_count; ++n) {
    834c:	462b      	mov	r3, r5
    834e:	4283      	cmp	r3, r0
    8350:	d152      	bne.n	83f8 <spi_nrfx_transceive+0x2e8>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    8352:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
    8354:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8356:	4619      	mov	r1, r3
    8358:	42a9      	cmp	r1, r5
    835a:	d154      	bne.n	8406 <spi_nrfx_transceive+0x2f6>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    835c:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    835e:	46a0      	mov	r8, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    8360:	bf38      	it	cc
    8362:	4613      	movcc	r3, r2
    8364:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    8368:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    836c:	f858 3b28 	ldr.w	r3, [r8], #40
    8370:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    8374:	681b      	ldr	r3, [r3, #0]
    8376:	fbb5 f5f3 	udiv	r5, r5, r3
    837a:	f240 30e7 	movw	r0, #999	; 0x3e7
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    837e:	35c8      	adds	r5, #200	; 0xc8
    8380:	2100      	movs	r1, #0
    8382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8386:	2300      	movs	r3, #0
    8388:	fbe5 010c 	umlal	r0, r1, r5, ip
    838c:	f7f7 feb8 	bl	100 <__aeabi_uldivmod>
    8390:	4602      	mov	r2, r0
    8392:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    8394:	4640      	mov	r0, r8
    8396:	f002 fd29 	bl	adec <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    839a:	2800      	cmp	r0, #0
    839c:	d03a      	beq.n	8414 <spi_nrfx_transceive+0x304>
			LOG_ERR("Timeout waiting for transfer complete");
    839e:	4b31      	ldr	r3, [pc, #196]	; (8464 <spi_nrfx_transceive+0x354>)
    83a0:	627b      	str	r3, [r7, #36]	; 0x24
    83a2:	2302      	movs	r3, #2
    83a4:	481f      	ldr	r0, [pc, #124]	; (8424 <spi_nrfx_transceive+0x314>)
    83a6:	623b      	str	r3, [r7, #32]
    83a8:	f107 0220 	add.w	r2, r7, #32
    83ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    83b0:	f005 fb04 	bl	d9bc <z_log_msg_static_create.constprop.0>
			dev_data->chunk_len = 0;
    83b4:	2500      	movs	r5, #0
			nrfx_spi_uninit(&dev_config->spi);
    83b6:	6838      	ldr	r0, [r7, #0]
			dev_data->chunk_len = 0;
    83b8:	66a5      	str	r5, [r4, #104]	; 0x68
			nrfx_spi_uninit(&dev_config->spi);
    83ba:	f001 f94b 	bl	9654 <nrfx_spi_uninit>
			dev_data->initialized = false;
    83be:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
			finish_transaction(dev, -ETIMEDOUT);
    83c2:	6930      	ldr	r0, [r6, #16]
    83c4:	f06f 0173 	mvn.w	r1, #115	; 0x73
    83c8:	f005 fb53 	bl	da72 <finish_transaction.isra.0>
	z_impl_k_sem_reset(sem);
    83cc:	4640      	mov	r0, r8
    83ce:	f002 fd35 	bl	ae3c <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    83d2:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    83d6:	e6d2      	b.n	817e <spi_nrfx_transceive+0x6e>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    83d8:	f8d9 3000 	ldr.w	r3, [r9]
    83dc:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    83de:	2b00      	cmp	r3, #0
    83e0:	d08e      	beq.n	8300 <spi_nrfx_transceive+0x1f0>
    83e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
    83e6:	e78c      	b.n	8302 <spi_nrfx_transceive+0x1f2>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    83e8:	68fb      	ldr	r3, [r7, #12]
    83ea:	681b      	ldr	r3, [r3, #0]
    83ec:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    83ee:	2b00      	cmp	r3, #0
    83f0:	d095      	beq.n	831e <spi_nrfx_transceive+0x20e>
    83f2:	68fb      	ldr	r3, [r7, #12]
    83f4:	685b      	ldr	r3, [r3, #4]
    83f6:	e793      	b.n	8320 <spi_nrfx_transceive+0x210>
		total_len += ctx->current_tx[n].len;
    83f8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    83fa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    83fe:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    8400:	6849      	ldr	r1, [r1, #4]
    8402:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    8404:	e7a3      	b.n	834e <spi_nrfx_transceive+0x23e>
		total_len += ctx->current_rx[n].len;
    8406:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    8408:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    840c:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    840e:	6840      	ldr	r0, [r0, #4]
    8410:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    8412:	e7a1      	b.n	8358 <spi_nrfx_transceive+0x248>
		status = ctx->sync_status;
    8414:	6c25      	ldr	r5, [r4, #64]	; 0x40
		if (error == -ETIMEDOUT) {
    8416:	f115 0f74 	cmn.w	r5, #116	; 0x74
    841a:	f47f aeb0 	bne.w	817e <spi_nrfx_transceive+0x6e>
    841e:	e7c9      	b.n	83b4 <spi_nrfx_transceive+0x2a4>
    8420:	00010030 	.word	0x00010030
    8424:	0000eb5c 	.word	0x0000eb5c
    8428:	0001004a 	.word	0x0001004a
    842c:	01000003 	.word	0x01000003
    8430:	0001006c 	.word	0x0001006c
    8434:	0001008b 	.word	0x0001008b
    8438:	0001e847 	.word	0x0001e847
    843c:	000100ba 	.word	0x000100ba
    8440:	0003d08f 	.word	0x0003d08f
    8444:	0007a11f 	.word	0x0007a11f
    8448:	000f423f 	.word	0x000f423f
    844c:	001e847f 	.word	0x001e847f
    8450:	003d08ff 	.word	0x003d08ff
    8454:	007a1200 	.word	0x007a1200
    8458:	00008039 	.word	0x00008039
    845c:	0bad0000 	.word	0x0bad0000
    8460:	000100eb 	.word	0x000100eb
    8464:	00010112 	.word	0x00010112

00008468 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    8468:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    846a:	2301      	movs	r3, #1
    846c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    846e:	4a0e      	ldr	r2, [pc, #56]	; (84a8 <compare_int_lock+0x40>)
    8470:	f3bf 8f5b 	dmb	ish
    8474:	43dc      	mvns	r4, r3
    8476:	e852 1f00 	ldrex	r1, [r2]
    847a:	ea01 0504 	and.w	r5, r1, r4
    847e:	e842 5600 	strex	r6, r5, [r2]
    8482:	2e00      	cmp	r6, #0
    8484:	d1f7      	bne.n	8476 <compare_int_lock+0xe>
    8486:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    848a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    848e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    8490:	4806      	ldr	r0, [pc, #24]	; (84ac <compare_int_lock+0x44>)
    8492:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    8496:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    849a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    849e:	420b      	tst	r3, r1
}
    84a0:	bf14      	ite	ne
    84a2:	2001      	movne	r0, #1
    84a4:	2000      	moveq	r0, #0
    84a6:	bd70      	pop	{r4, r5, r6, pc}
    84a8:	20001f70 	.word	0x20001f70
    84ac:	40011000 	.word	0x40011000

000084b0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    84b0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    84b2:	490e      	ldr	r1, [pc, #56]	; (84ec <sys_clock_timeout_handler+0x3c>)
    84b4:	e9d1 3400 	ldrd	r3, r4, [r1]
    84b8:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    84ba:	18c3      	adds	r3, r0, r3
    84bc:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    84c0:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    84c4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    84c8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    84cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    84d0:	d209      	bcs.n	84e6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    84d2:	4b07      	ldr	r3, [pc, #28]	; (84f0 <sys_clock_timeout_handler+0x40>)
    84d4:	681b      	ldr	r3, [r3, #0]
    84d6:	0a1a      	lsrs	r2, r3, #8
    84d8:	061b      	lsls	r3, r3, #24
    84da:	199c      	adds	r4, r3, r6
    84dc:	4b05      	ldr	r3, [pc, #20]	; (84f4 <sys_clock_timeout_handler+0x44>)
    84de:	f142 0500 	adc.w	r5, r2, #0
    84e2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    84e6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    84e8:	f003 ba6c 	b.w	b9c4 <sys_clock_announce>
    84ec:	20000b10 	.word	0x20000b10
    84f0:	20001f74 	.word	0x20001f74
    84f4:	20000b18 	.word	0x20000b18

000084f8 <compare_int_unlock>:
	if (key) {
    84f8:	b311      	cbz	r1, 8540 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    84fa:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    84fe:	2301      	movs	r3, #1
    8500:	4a10      	ldr	r2, [pc, #64]	; (8544 <compare_int_unlock+0x4c>)
    8502:	4083      	lsls	r3, r0
    8504:	e852 cf00 	ldrex	ip, [r2]
    8508:	ea4c 0c03 	orr.w	ip, ip, r3
    850c:	e842 c100 	strex	r1, ip, [r2]
    8510:	2900      	cmp	r1, #0
    8512:	d1f7      	bne.n	8504 <compare_int_unlock+0xc>
    8514:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    8518:	4a0b      	ldr	r2, [pc, #44]	; (8548 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    851a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    851e:	4083      	lsls	r3, r0
    8520:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8524:	4b09      	ldr	r3, [pc, #36]	; (854c <compare_int_unlock+0x54>)
    8526:	f3bf 8f5b 	dmb	ish
    852a:	681b      	ldr	r3, [r3, #0]
    852c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    8530:	40c3      	lsrs	r3, r0
    8532:	07db      	lsls	r3, r3, #31
    8534:	bf42      	ittt	mi
    8536:	4b06      	ldrmi	r3, [pc, #24]	; (8550 <compare_int_unlock+0x58>)
    8538:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    853c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    8540:	4770      	bx	lr
    8542:	bf00      	nop
    8544:	20001f70 	.word	0x20001f70
    8548:	40011000 	.word	0x40011000
    854c:	20001f6c 	.word	0x20001f6c
    8550:	e000e100 	.word	0xe000e100

00008554 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    8554:	4b0d      	ldr	r3, [pc, #52]	; (858c <z_nrf_rtc_timer_read+0x38>)
    8556:	6818      	ldr	r0, [r3, #0]
    8558:	0a01      	lsrs	r1, r0, #8
    855a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    855c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    8560:	4b0b      	ldr	r3, [pc, #44]	; (8590 <z_nrf_rtc_timer_read+0x3c>)
    8562:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    8566:	1818      	adds	r0, r3, r0
    8568:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    856c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    8570:	d20a      	bcs.n	8588 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    8572:	4b08      	ldr	r3, [pc, #32]	; (8594 <z_nrf_rtc_timer_read+0x40>)
    8574:	e9d3 2300 	ldrd	r2, r3, [r3]
    8578:	4290      	cmp	r0, r2
    857a:	eb71 0303 	sbcs.w	r3, r1, r3
    857e:	d203      	bcs.n	8588 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    8580:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    8584:	f141 0100 	adc.w	r1, r1, #0
}
    8588:	4770      	bx	lr
    858a:	bf00      	nop
    858c:	20001f74 	.word	0x20001f74
    8590:	40011000 	.word	0x40011000
    8594:	20000b18 	.word	0x20000b18

00008598 <compare_set>:
{
    8598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    859c:	4616      	mov	r6, r2
    859e:	461f      	mov	r7, r3
    85a0:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    85a2:	f7ff ff61 	bl	8468 <compare_int_lock>
    85a6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    85a8:	f7ff ffd4 	bl	8554 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    85ac:	42b0      	cmp	r0, r6
    85ae:	eb71 0307 	sbcs.w	r3, r1, r7
    85b2:	d251      	bcs.n	8658 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    85b4:	4b3a      	ldr	r3, [pc, #232]	; (86a0 <compare_set+0x108>)
    85b6:	1a30      	subs	r0, r6, r0
    85b8:	eb67 0101 	sbc.w	r1, r7, r1
    85bc:	4298      	cmp	r0, r3
    85be:	f171 0100 	sbcs.w	r1, r1, #0
    85c2:	d26a      	bcs.n	869a <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    85c4:	4b37      	ldr	r3, [pc, #220]	; (86a4 <compare_set+0x10c>)
    85c6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    85ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    85ce:	429f      	cmp	r7, r3
    85d0:	bf08      	it	eq
    85d2:	4296      	cmpeq	r6, r2
    85d4:	d04e      	beq.n	8674 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    85d6:	4934      	ldr	r1, [pc, #208]	; (86a8 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    85d8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    85dc:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    85e0:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    85e4:	00ad      	lsls	r5, r5, #2
    85e6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    85ea:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    85ec:	b2ad      	uxth	r5, r5
    85ee:	f005 fa51 	bl	da94 <event_clear>
	return absolute_time & COUNTER_MAX;
    85f2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    85f6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    85fa:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    85fe:	4a2b      	ldr	r2, [pc, #172]	; (86ac <compare_set+0x114>)
    8600:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8602:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    8606:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    8608:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    860c:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    860e:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    8612:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    8616:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    861a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    861e:	f06f 0002 	mvn.w	r0, #2
    8622:	eba0 0008 	sub.w	r0, r0, r8
    8626:	4460      	add	r0, ip
    8628:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    862c:	4290      	cmp	r0, r2
    862e:	d921      	bls.n	8674 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8630:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    8632:	b160      	cbz	r0, 864e <compare_set+0xb6>
     return p_reg->COUNTER;
    8634:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    8638:	eba8 000b 	sub.w	r0, r8, fp
    863c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    8640:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8644:	d916      	bls.n	8674 <compare_set+0xdc>
					event_clear(chan);
    8646:	4620      	mov	r0, r4
    8648:	f005 fa24 	bl	da94 <event_clear>
    864c:	4a17      	ldr	r2, [pc, #92]	; (86ac <compare_set+0x114>)
			cc_val = now + cc_inc;
    864e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    8652:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    8656:	e7d9      	b.n	860c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    8658:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    865a:	4a15      	ldr	r2, [pc, #84]	; (86b0 <compare_set+0x118>)
    865c:	f3bf 8f5b 	dmb	ish
    8660:	40a3      	lsls	r3, r4
    8662:	e852 0f00 	ldrex	r0, [r2]
    8666:	4318      	orrs	r0, r3
    8668:	e842 0100 	strex	r1, r0, [r2]
    866c:	2900      	cmp	r1, #0
    866e:	d1f8      	bne.n	8662 <compare_set+0xca>
    8670:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    8674:	490b      	ldr	r1, [pc, #44]	; (86a4 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    8676:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    8678:	0123      	lsls	r3, r4, #4
    867a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    867e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    8682:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    8684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8686:	6053      	str	r3, [r2, #4]
	return ret;
    8688:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    868a:	4620      	mov	r0, r4
    868c:	9900      	ldr	r1, [sp, #0]
    868e:	f7ff ff33 	bl	84f8 <compare_int_unlock>
}
    8692:	4628      	mov	r0, r5
    8694:	b003      	add	sp, #12
    8696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    869a:	f06f 0515 	mvn.w	r5, #21
    869e:	e7f4      	b.n	868a <compare_set+0xf2>
    86a0:	00800001 	.word	0x00800001
    86a4:	20000b00 	.word	0x20000b00
    86a8:	40011000 	.word	0x40011000
    86ac:	007ffffd 	.word	0x007ffffd
    86b0:	20001f6c 	.word	0x20001f6c

000086b4 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    86b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    86b6:	4c1b      	ldr	r4, [pc, #108]	; (8724 <sys_clock_driver_init+0x70>)
    86b8:	4b1b      	ldr	r3, [pc, #108]	; (8728 <sys_clock_driver_init+0x74>)
    86ba:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    86be:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    86c2:	4b1a      	ldr	r3, [pc, #104]	; (872c <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    86c4:	2500      	movs	r5, #0
    86c6:	f04f 30ff 	mov.w	r0, #4294967295
    86ca:	f04f 31ff 	mov.w	r1, #4294967295
    86ce:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    86d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    86d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    86da:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    86de:	4b14      	ldr	r3, [pc, #80]	; (8730 <sys_clock_driver_init+0x7c>)
    86e0:	2602      	movs	r6, #2
    86e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    86e6:	2101      	movs	r1, #1
    86e8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    86ec:	2011      	movs	r0, #17
    86ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    86f2:	462a      	mov	r2, r5
    86f4:	f7fb face 	bl	3c94 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    86f8:	2011      	movs	r0, #17
    86fa:	f7fb fa9b 	bl	3c34 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    86fe:	4a0d      	ldr	r2, [pc, #52]	; (8734 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    8700:	2301      	movs	r3, #1
    8702:	60a3      	str	r3, [r4, #8]
    8704:	6023      	str	r3, [r4, #0]
    8706:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    8708:	4b0b      	ldr	r3, [pc, #44]	; (8738 <sys_clock_driver_init+0x84>)
    870a:	4a0c      	ldr	r2, [pc, #48]	; (873c <sys_clock_driver_init+0x88>)
    870c:	9300      	str	r3, [sp, #0]
    870e:	9501      	str	r5, [sp, #4]
    8710:	2300      	movs	r3, #0
    8712:	4628      	mov	r0, r5
    8714:	f7ff ff40 	bl	8598 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    8718:	4630      	mov	r0, r6
    871a:	f7fd f831 	bl	5780 <z_nrf_clock_control_lf_on>

	return 0;
}
    871e:	4628      	mov	r0, r5
    8720:	b002      	add	sp, #8
    8722:	bd70      	pop	{r4, r5, r6, pc}
    8724:	40011000 	.word	0x40011000
    8728:	000f0003 	.word	0x000f0003
    872c:	20000b00 	.word	0x20000b00
    8730:	e000e100 	.word	0xe000e100
    8734:	20001f70 	.word	0x20001f70
    8738:	000084b1 	.word	0x000084b1
    873c:	007fffff 	.word	0x007fffff

00008740 <rtc_nrf_isr>:
{
    8740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    8744:	4c2f      	ldr	r4, [pc, #188]	; (8804 <rtc_nrf_isr+0xc4>)
    8746:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    874a:	0799      	lsls	r1, r3, #30
    874c:	d50b      	bpl.n	8766 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    874e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    8752:	b143      	cbz	r3, 8766 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    8754:	4a2c      	ldr	r2, [pc, #176]	; (8808 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8756:	2300      	movs	r3, #0
    8758:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    875c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    8760:	6813      	ldr	r3, [r2, #0]
    8762:	3301      	adds	r3, #1
    8764:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    8766:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    876a:	03da      	lsls	r2, r3, #15
    876c:	d52a      	bpl.n	87c4 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    876e:	f3bf 8f5b 	dmb	ish
    8772:	4b26      	ldr	r3, [pc, #152]	; (880c <rtc_nrf_isr+0xcc>)
    8774:	e853 2f00 	ldrex	r2, [r3]
    8778:	f022 0101 	bic.w	r1, r2, #1
    877c:	e843 1000 	strex	r0, r1, [r3]
    8780:	2800      	cmp	r0, #0
    8782:	d1f7      	bne.n	8774 <rtc_nrf_isr+0x34>
    8784:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    8788:	07d3      	lsls	r3, r2, #31
    878a:	d402      	bmi.n	8792 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    878c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8790:	b1c3      	cbz	r3, 87c4 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8792:	2500      	movs	r5, #0
    8794:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    8798:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    879c:	f7ff feda 	bl	8554 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    87a0:	f04f 0320 	mov.w	r3, #32
    87a4:	f3ef 8211 	mrs	r2, BASEPRI
    87a8:	f383 8812 	msr	BASEPRI_MAX, r3
    87ac:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    87b0:	4b17      	ldr	r3, [pc, #92]	; (8810 <rtc_nrf_isr+0xd0>)
    87b2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    87b6:	42b0      	cmp	r0, r6
    87b8:	41b9      	sbcs	r1, r7
    87ba:	d206      	bcs.n	87ca <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    87bc:	f382 8811 	msr	BASEPRI, r2
    87c0:	f3bf 8f6f 	isb	sy
}
    87c4:	b003      	add	sp, #12
    87c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    87ca:	f04f 38ff 	mov.w	r8, #4294967295
    87ce:	f04f 39ff 	mov.w	r9, #4294967295
    87d2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    87d6:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    87da:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    87dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    87e0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    87e4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    87e8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    87ec:	f382 8811 	msr	BASEPRI, r2
    87f0:	f3bf 8f6f 	isb	sy
		if (handler) {
    87f4:	2900      	cmp	r1, #0
    87f6:	d0e5      	beq.n	87c4 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    87f8:	9000      	str	r0, [sp, #0]
    87fa:	4632      	mov	r2, r6
    87fc:	463b      	mov	r3, r7
    87fe:	4628      	mov	r0, r5
    8800:	4788      	blx	r1
    8802:	e7df      	b.n	87c4 <rtc_nrf_isr+0x84>
    8804:	40011000 	.word	0x40011000
    8808:	20001f74 	.word	0x20001f74
    880c:	20001f6c 	.word	0x20001f6c
    8810:	20000b00 	.word	0x20000b00

00008814 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    8814:	1c43      	adds	r3, r0, #1
{
    8816:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    8818:	d022      	beq.n	8860 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    881a:	2801      	cmp	r0, #1
    881c:	dd22      	ble.n	8864 <sys_clock_set_timeout+0x50>
    881e:	4a12      	ldr	r2, [pc, #72]	; (8868 <sys_clock_set_timeout+0x54>)
    8820:	4b12      	ldr	r3, [pc, #72]	; (886c <sys_clock_set_timeout+0x58>)
    8822:	4290      	cmp	r0, r2
    8824:	bfd4      	ite	le
    8826:	4604      	movle	r4, r0
    8828:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    882a:	f7ff fe93 	bl	8554 <z_nrf_rtc_timer_read>
    882e:	4b10      	ldr	r3, [pc, #64]	; (8870 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    8830:	490e      	ldr	r1, [pc, #56]	; (886c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    8832:	e9d3 2300 	ldrd	r2, r3, [r3]
    8836:	1a80      	subs	r0, r0, r2
		cyc = 0;
    8838:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    883c:	bf28      	it	cs
    883e:	2400      	movcs	r4, #0
	cyc += unannounced;
    8840:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    8842:	428c      	cmp	r4, r1
    8844:	bf28      	it	cs
    8846:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    8848:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    884a:	490a      	ldr	r1, [pc, #40]	; (8874 <sys_clock_set_timeout+0x60>)
    884c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    884e:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    8852:	9001      	str	r0, [sp, #4]
    8854:	f143 0300 	adc.w	r3, r3, #0
    8858:	f7ff fe9e 	bl	8598 <compare_set>
}
    885c:	b002      	add	sp, #8
    885e:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    8860:	4c02      	ldr	r4, [pc, #8]	; (886c <sys_clock_set_timeout+0x58>)
    8862:	e7e2      	b.n	882a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    8864:	2401      	movs	r4, #1
    8866:	e7e0      	b.n	882a <sys_clock_set_timeout+0x16>
    8868:	007ffffe 	.word	0x007ffffe
    886c:	007fffff 	.word	0x007fffff
    8870:	20000b10 	.word	0x20000b10
    8874:	000084b1 	.word	0x000084b1

00008878 <sys_clock_elapsed>:
{
    8878:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    887a:	f7ff fe6b 	bl	8554 <z_nrf_rtc_timer_read>
    887e:	4b02      	ldr	r3, [pc, #8]	; (8888 <sys_clock_elapsed+0x10>)
    8880:	681b      	ldr	r3, [r3, #0]
}
    8882:	1ac0      	subs	r0, r0, r3
    8884:	bd08      	pop	{r3, pc}
    8886:	bf00      	nop
    8888:	20000b10 	.word	0x20000b10

0000888c <sys_clock_disable>:
{
    888c:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    888e:	4c08      	ldr	r4, [pc, #32]	; (88b0 <sys_clock_disable+0x24>)
    8890:	2301      	movs	r3, #1
    8892:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    8894:	2011      	movs	r0, #17
    8896:	f7fb f9db 	bl	3c50 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    889a:	4b06      	ldr	r3, [pc, #24]	; (88b4 <sys_clock_disable+0x28>)
    889c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    88a0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    88a4:	4b04      	ldr	r3, [pc, #16]	; (88b8 <sys_clock_disable+0x2c>)
    88a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    88aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    88ae:	bd10      	pop	{r4, pc}
    88b0:	40011000 	.word	0x40011000
    88b4:	000f0003 	.word	0x000f0003
    88b8:	e000e100 	.word	0xe000e100

000088bc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    88bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    88be:	f7f9 f8a1 	bl	1a04 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    88c2:	4b07      	ldr	r3, [pc, #28]	; (88e0 <k_sys_fatal_error_handler+0x24>)
    88c4:	9305      	str	r3, [sp, #20]
    88c6:	2302      	movs	r3, #2
    88c8:	9304      	str	r3, [sp, #16]
    88ca:	4806      	ldr	r0, [pc, #24]	; (88e4 <k_sys_fatal_error_handler+0x28>)
    88cc:	2300      	movs	r3, #0
    88ce:	aa04      	add	r2, sp, #16
    88d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    88d4:	f7f9 f976 	bl	1bc4 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    88d8:	2000      	movs	r0, #0
    88da:	f7fb ff17 	bl	470c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    88de:	bf00      	nop
    88e0:	00010152 	.word	0x00010152
    88e4:	0000eb0c 	.word	0x0000eb0c

000088e8 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    88e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    88ec:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    88f0:	2a08      	cmp	r2, #8
    88f2:	d106      	bne.n	8902 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    88f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    88f8:	2b05      	cmp	r3, #5
    88fa:	d802      	bhi.n	8902 <nrf52_errata_103+0x1a>
    88fc:	4a02      	ldr	r2, [pc, #8]	; (8908 <nrf52_errata_103+0x20>)
    88fe:	5cd0      	ldrb	r0, [r2, r3]
    8900:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
    8902:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    8904:	4770      	bx	lr
    8906:	bf00      	nop
    8908:	00010175 	.word	0x00010175

0000890c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    890c:	4a02      	ldr	r2, [pc, #8]	; (8918 <nvmc_wait+0xc>)
    890e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    8912:	2b00      	cmp	r3, #0
    8914:	d0fb      	beq.n	890e <nvmc_wait+0x2>
}
    8916:	4770      	bx	lr
    8918:	4001e000 	.word	0x4001e000

0000891c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    891c:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    891e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8922:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    8926:	2a08      	cmp	r2, #8
    8928:	d14e      	bne.n	89c8 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    892a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    892e:	2100      	movs	r1, #0
    8930:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    8934:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    8938:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    893c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    8940:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    8944:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    8948:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    894c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    8950:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    8954:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8958:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    895c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8960:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    8964:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8968:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    896c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8970:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    8974:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8978:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    897c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8980:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    8984:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8988:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    898c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8990:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    8994:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8998:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    899c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    89a0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    89a4:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    89a8:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    89ac:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    89b0:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    89b4:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    89b8:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    89bc:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    89c0:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    89c4:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    89c8:	f7ff ff8e 	bl	88e8 <nrf52_errata_103>
    89cc:	b118      	cbz	r0, 89d6 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    89ce:	4b3a      	ldr	r3, [pc, #232]	; (8ab8 <SystemInit+0x19c>)
    89d0:	4a3a      	ldr	r2, [pc, #232]	; (8abc <SystemInit+0x1a0>)
    89d2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    89d6:	f7ff ff87 	bl	88e8 <nrf52_errata_103>
    89da:	b118      	cbz	r0, 89e4 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    89dc:	4b38      	ldr	r3, [pc, #224]	; (8ac0 <SystemInit+0x1a4>)
    89de:	22fb      	movs	r2, #251	; 0xfb
    89e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    89e4:	f7ff ff80 	bl	88e8 <nrf52_errata_103>
    89e8:	b170      	cbz	r0, 8a08 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    89ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    89ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    89f2:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    89f6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    89fa:	f022 020f 	bic.w	r2, r2, #15
    89fe:	f003 030f 	and.w	r3, r3, #15
    8a02:	4313      	orrs	r3, r2
    8a04:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    8a08:	f7ff ff6e 	bl	88e8 <nrf52_errata_103>
    8a0c:	b120      	cbz	r0, 8a18 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    8a0e:	4b2d      	ldr	r3, [pc, #180]	; (8ac4 <SystemInit+0x1a8>)
    8a10:	f44f 7200 	mov.w	r2, #512	; 0x200
    8a14:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8a18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8a1c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    8a20:	2b08      	cmp	r3, #8
    8a22:	d11a      	bne.n	8a5a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    8a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a28:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    8a2c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    8a2e:	bf44      	itt	mi
    8a30:	f06f 0201 	mvnmi.w	r2, #1
    8a34:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8a38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8a3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    8a40:	2b05      	cmp	r3, #5
    8a42:	d802      	bhi.n	8a4a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    8a44:	4a20      	ldr	r2, [pc, #128]	; (8ac8 <SystemInit+0x1ac>)
    8a46:	5cd3      	ldrb	r3, [r2, r3]
    8a48:	b13b      	cbz	r3, 8a5a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    8a4a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8a4e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    8a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a56:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8a5a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8a5e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    8a62:	2a00      	cmp	r2, #0
    8a64:	db03      	blt.n	8a6e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    8a66:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8a6a:	2b00      	cmp	r3, #0
    8a6c:	da22      	bge.n	8ab4 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8a6e:	4917      	ldr	r1, [pc, #92]	; (8acc <SystemInit+0x1b0>)
    8a70:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8a72:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8a76:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8a7a:	2412      	movs	r4, #18
    nvmc_wait();
    8a7c:	f7ff ff46 	bl	890c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8a80:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    8a84:	f7ff ff42 	bl	890c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    8a88:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    8a8c:	f7ff ff3e 	bl	890c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8a90:	2300      	movs	r3, #0
    8a92:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    8a96:	f7ff ff39 	bl	890c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    8a9a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8a9e:	490c      	ldr	r1, [pc, #48]	; (8ad0 <SystemInit+0x1b4>)
    8aa0:	4b0c      	ldr	r3, [pc, #48]	; (8ad4 <SystemInit+0x1b8>)
    8aa2:	68ca      	ldr	r2, [r1, #12]
    8aa4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8aa8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8aaa:	60cb      	str	r3, [r1, #12]
    8aac:	f3bf 8f4f 	dsb	sy
    __NOP();
    8ab0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8ab2:	e7fd      	b.n	8ab0 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    8ab4:	bd10      	pop	{r4, pc}
    8ab6:	bf00      	nop
    8ab8:	40005000 	.word	0x40005000
    8abc:	00038148 	.word	0x00038148
    8ac0:	4000f000 	.word	0x4000f000
    8ac4:	40029000 	.word	0x40029000
    8ac8:	0001016f 	.word	0x0001016f
    8acc:	4001e000 	.word	0x4001e000
    8ad0:	e000ed00 	.word	0xe000ed00
    8ad4:	05fa0004 	.word	0x05fa0004

00008ad8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    8ad8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    8ada:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    8adc:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8ade:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    8ae2:	fab2 f382 	clz	r3, r2
    8ae6:	f1c3 031f 	rsb	r3, r3, #31
    8aea:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    8aec:	fa05 f403 	lsl.w	r4, r5, r3
    8af0:	ea22 0404 	bic.w	r4, r2, r4
    8af4:	e850 6f00 	ldrex	r6, [r0]
    8af8:	4296      	cmp	r6, r2
    8afa:	d104      	bne.n	8b06 <nrfx_flag32_alloc+0x2e>
    8afc:	e840 4c00 	strex	ip, r4, [r0]
    8b00:	f1bc 0f00 	cmp.w	ip, #0
    8b04:	d1f6      	bne.n	8af4 <nrfx_flag32_alloc+0x1c>
    8b06:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8b0a:	d1e7      	bne.n	8adc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    8b0c:	4801      	ldr	r0, [pc, #4]	; (8b14 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    8b0e:	700b      	strb	r3, [r1, #0]
}
    8b10:	bd70      	pop	{r4, r5, r6, pc}
    8b12:	bf00      	nop
    8b14:	0bad0000 	.word	0x0bad0000

00008b18 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    8b18:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    8b1a:	6803      	ldr	r3, [r0, #0]
    8b1c:	40cb      	lsrs	r3, r1
    8b1e:	07db      	lsls	r3, r3, #31
    8b20:	d414      	bmi.n	8b4c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    8b22:	2301      	movs	r3, #1
    8b24:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    8b26:	6802      	ldr	r2, [r0, #0]
    8b28:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    8b2c:	ea43 0102 	orr.w	r1, r3, r2
    8b30:	e850 4f00 	ldrex	r4, [r0]
    8b34:	4294      	cmp	r4, r2
    8b36:	d104      	bne.n	8b42 <nrfx_flag32_free+0x2a>
    8b38:	e840 1c00 	strex	ip, r1, [r0]
    8b3c:	f1bc 0f00 	cmp.w	ip, #0
    8b40:	d1f6      	bne.n	8b30 <nrfx_flag32_free+0x18>
    8b42:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8b46:	d1ee      	bne.n	8b26 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    8b48:	4801      	ldr	r0, [pc, #4]	; (8b50 <nrfx_flag32_free+0x38>)
}
    8b4a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8b4c:	4801      	ldr	r0, [pc, #4]	; (8b54 <nrfx_flag32_free+0x3c>)
    8b4e:	e7fc      	b.n	8b4a <nrfx_flag32_free+0x32>
    8b50:	0bad0000 	.word	0x0bad0000
    8b54:	0bad0004 	.word	0x0bad0004

00008b58 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    8b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    8b5a:	4604      	mov	r4, r0
    8b5c:	b118      	cbz	r0, 8b66 <clock_stop+0xe>
    8b5e:	2801      	cmp	r0, #1
    8b60:	d022      	beq.n	8ba8 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    8b62:	b003      	add	sp, #12
    8b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    8b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b6a:	2202      	movs	r2, #2
    8b6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8b70:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    8b74:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8b78:	2201      	movs	r2, #1
    8b7a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8b7c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    8b7e:	2301      	movs	r3, #1
    8b80:	f88d 3007 	strb.w	r3, [sp, #7]
    8b84:	f242 7510 	movw	r5, #10000	; 0x2710
    8b88:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    8b8c:	b1cc      	cbz	r4, 8bc2 <clock_stop+0x6a>
    8b8e:	2c01      	cmp	r4, #1
    8b90:	d1e7      	bne.n	8b62 <clock_stop+0xa>
            if (p_clk_src != NULL)
    8b92:	b3c7      	cbz	r7, 8c06 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8b94:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8b98:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8b9c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8b9e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8ba2:	03da      	lsls	r2, r3, #15
    8ba4:	d521      	bpl.n	8bea <clock_stop+0x92>
    8ba6:	e016      	b.n	8bd6 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    8ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8bac:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    8bae:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8bb2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8bb6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8bba:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8bbc:	f10d 0707 	add.w	r7, sp, #7
    8bc0:	e7dd      	b.n	8b7e <clock_stop+0x26>
            if (p_clk_src != NULL)
    8bc2:	b1b7      	cbz	r7, 8bf2 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8bc4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8bc8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8bcc:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8bce:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    8bd2:	03d8      	lsls	r0, r3, #15
    8bd4:	d5c5      	bpl.n	8b62 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8bd6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8bda:	2801      	cmp	r0, #1
    8bdc:	d103      	bne.n	8be6 <clock_stop+0x8e>
    8bde:	f004 ff75 	bl	dacc <nrfx_busy_wait>
    8be2:	3d01      	subs	r5, #1
    8be4:	d1d2      	bne.n	8b8c <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    8be6:	2c01      	cmp	r4, #1
    8be8:	d1bb      	bne.n	8b62 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    8bea:	4b0c      	ldr	r3, [pc, #48]	; (8c1c <clock_stop+0xc4>)
    8bec:	2200      	movs	r2, #0
    8bee:	715a      	strb	r2, [r3, #5]
    8bf0:	e7b7      	b.n	8b62 <clock_stop+0xa>
    8bf2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    8bf6:	03d9      	lsls	r1, r3, #15
    8bf8:	d5b3      	bpl.n	8b62 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8bfa:	2001      	movs	r0, #1
    8bfc:	f004 ff66 	bl	dacc <nrfx_busy_wait>
    8c00:	3d01      	subs	r5, #1
    8c02:	d1f6      	bne.n	8bf2 <clock_stop+0x9a>
    8c04:	e7ad      	b.n	8b62 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8c06:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8c0a:	03db      	lsls	r3, r3, #15
    8c0c:	d5ed      	bpl.n	8bea <clock_stop+0x92>
    8c0e:	2001      	movs	r0, #1
    8c10:	f004 ff5c 	bl	dacc <nrfx_busy_wait>
    8c14:	3d01      	subs	r5, #1
    8c16:	d1f6      	bne.n	8c06 <clock_stop+0xae>
    8c18:	e7e7      	b.n	8bea <clock_stop+0x92>
    8c1a:	bf00      	nop
    8c1c:	20001f78 	.word	0x20001f78

00008c20 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    8c20:	4b04      	ldr	r3, [pc, #16]	; (8c34 <nrfx_clock_init+0x14>)
    8c22:	791a      	ldrb	r2, [r3, #4]
    8c24:	b922      	cbnz	r2, 8c30 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    8c26:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    8c28:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    8c2a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    8c2c:	4802      	ldr	r0, [pc, #8]	; (8c38 <nrfx_clock_init+0x18>)
    8c2e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    8c30:	4802      	ldr	r0, [pc, #8]	; (8c3c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8c32:	4770      	bx	lr
    8c34:	20001f78 	.word	0x20001f78
    8c38:	0bad0000 	.word	0x0bad0000
    8c3c:	0bad000c 	.word	0x0bad000c

00008c40 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    8c40:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8c42:	2000      	movs	r0, #0
    8c44:	f7fb f818 	bl	3c78 <arch_irq_is_enabled>
    8c48:	b908      	cbnz	r0, 8c4e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8c4a:	f7fa fff3 	bl	3c34 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c52:	2200      	movs	r2, #0
    8c54:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    8c58:	4b01      	ldr	r3, [pc, #4]	; (8c60 <nrfx_clock_enable+0x20>)
    8c5a:	2201      	movs	r2, #1
    8c5c:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8c5e:	bd08      	pop	{r3, pc}
    8c60:	20002525 	.word	0x20002525

00008c64 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    8c64:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c6a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    8c6e:	b16a      	cbz	r2, 8c8c <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8c70:	2200      	movs	r2, #0
    8c72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8c76:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    8c7a:	2201      	movs	r2, #1
    8c7c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    8c80:	4b11      	ldr	r3, [pc, #68]	; (8cc8 <nrfx_clock_irq_handler+0x64>)
    8c82:	7958      	ldrb	r0, [r3, #5]
    8c84:	b910      	cbnz	r0, 8c8c <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    8c86:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    8c88:	681b      	ldr	r3, [r3, #0]
    8c8a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c90:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    8c94:	b172      	cbz	r2, 8cb4 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8c96:	2200      	movs	r2, #0
    8c98:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8c9c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8ca0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8ca4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    8ca8:	0792      	lsls	r2, r2, #30
    8caa:	d104      	bne.n	8cb6 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8cac:	2201      	movs	r2, #1
    8cae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8cb2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    8cb4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    8cb6:	2202      	movs	r2, #2
    8cb8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    8cbc:	4b02      	ldr	r3, [pc, #8]	; (8cc8 <nrfx_clock_irq_handler+0x64>)
}
    8cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    8cc2:	681b      	ldr	r3, [r3, #0]
    8cc4:	2001      	movs	r0, #1
    8cc6:	4718      	bx	r3
    8cc8:	20001f78 	.word	0x20001f78

00008ccc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    8ccc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    8cce:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    8cd2:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    8cd4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    8cd6:	6002      	str	r2, [r0, #0]
}
    8cd8:	4802      	ldr	r0, [pc, #8]	; (8ce4 <nrf_gpio_pin_port_decode+0x18>)
    8cda:	bf18      	it	ne
    8cdc:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    8ce0:	4770      	bx	lr
    8ce2:	bf00      	nop
    8ce4:	50000300 	.word	0x50000300

00008ce8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    8ce8:	4b03      	ldr	r3, [pc, #12]	; (8cf8 <pin_in_use_by_te+0x10>)
    8cea:	3008      	adds	r0, #8
    8cec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8cf0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    8cf4:	4770      	bx	lr
    8cf6:	bf00      	nop
    8cf8:	200001e4 	.word	0x200001e4

00008cfc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    8cfc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8cfe:	f100 0308 	add.w	r3, r0, #8
    8d02:	4c0c      	ldr	r4, [pc, #48]	; (8d34 <call_handler+0x38>)
    8d04:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    8d08:	05da      	lsls	r2, r3, #23
{
    8d0a:	4605      	mov	r5, r0
    8d0c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8d0e:	d507      	bpl.n	8d20 <call_handler+0x24>
    8d10:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    8d14:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    8d18:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    8d1c:	6852      	ldr	r2, [r2, #4]
    8d1e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    8d20:	68a3      	ldr	r3, [r4, #8]
    8d22:	b12b      	cbz	r3, 8d30 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    8d24:	68e2      	ldr	r2, [r4, #12]
    8d26:	4631      	mov	r1, r6
    8d28:	4628      	mov	r0, r5
    }
}
    8d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    8d2e:	4718      	bx	r3
}
    8d30:	bd70      	pop	{r4, r5, r6, pc}
    8d32:	bf00      	nop
    8d34:	200001e4 	.word	0x200001e4

00008d38 <release_handler>:
{
    8d38:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8d3a:	4a12      	ldr	r2, [pc, #72]	; (8d84 <release_handler+0x4c>)
    8d3c:	3008      	adds	r0, #8
    8d3e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    8d42:	05d9      	lsls	r1, r3, #23
    8d44:	d51b      	bpl.n	8d7e <release_handler+0x46>
    8d46:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    8d4a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    8d4e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8d52:	f102 040e 	add.w	r4, r2, #14
    8d56:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    8d58:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    8d5c:	f413 7f80 	tst.w	r3, #256	; 0x100
    8d60:	d003      	beq.n	8d6a <release_handler+0x32>
    8d62:	f3c3 2343 	ubfx	r3, r3, #9, #4
    8d66:	4299      	cmp	r1, r3
    8d68:	d009      	beq.n	8d7e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8d6a:	3001      	adds	r0, #1
    8d6c:	2830      	cmp	r0, #48	; 0x30
    8d6e:	d1f3      	bne.n	8d58 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    8d70:	2300      	movs	r3, #0
    8d72:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    8d76:	4804      	ldr	r0, [pc, #16]	; (8d88 <release_handler+0x50>)
}
    8d78:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    8d7a:	f7ff becd 	b.w	8b18 <nrfx_flag32_free>
}
    8d7e:	bc10      	pop	{r4}
    8d80:	4770      	bx	lr
    8d82:	bf00      	nop
    8d84:	200001e4 	.word	0x200001e4
    8d88:	20000258 	.word	0x20000258

00008d8c <pin_handler_trigger_uninit>:
{
    8d8c:	b538      	push	{r3, r4, r5, lr}
    8d8e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    8d90:	f7ff ffaa 	bl	8ce8 <pin_in_use_by_te>
    8d94:	4c09      	ldr	r4, [pc, #36]	; (8dbc <pin_handler_trigger_uninit+0x30>)
    8d96:	f102 0508 	add.w	r5, r2, #8
    8d9a:	b140      	cbz	r0, 8dae <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8d9c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    8da0:	4907      	ldr	r1, [pc, #28]	; (8dc0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    8da2:	0b5b      	lsrs	r3, r3, #13
    8da4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    8da8:	2000      	movs	r0, #0
    8daa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    8dae:	4610      	mov	r0, r2
    8db0:	f7ff ffc2 	bl	8d38 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    8db4:	2300      	movs	r3, #0
    8db6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    8dba:	bd38      	pop	{r3, r4, r5, pc}
    8dbc:	200001e4 	.word	0x200001e4
    8dc0:	40006000 	.word	0x40006000

00008dc4 <nrfx_gpiote_input_configure>:
{
    8dc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8dc8:	4604      	mov	r4, r0
    8dca:	4616      	mov	r6, r2
    8dcc:	461d      	mov	r5, r3
    if (p_input_config)
    8dce:	b301      	cbz	r1, 8e12 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8dd0:	4f4e      	ldr	r7, [pc, #312]	; (8f0c <nrfx_gpiote_input_configure+0x148>)
    8dd2:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    8dd6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    8dda:	079b      	lsls	r3, r3, #30
    8ddc:	d502      	bpl.n	8de4 <nrfx_gpiote_input_configure+0x20>
    8dde:	f7ff ff83 	bl	8ce8 <pin_in_use_by_te>
    8de2:	bb10      	cbnz	r0, 8e2a <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    8de4:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    8de6:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    8dea:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    8dee:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    8df2:	f10d 020f 	add.w	r2, sp, #15
    8df6:	460b      	mov	r3, r1
    8df8:	4620      	mov	r0, r4
    8dfa:	f10d 010e 	add.w	r1, sp, #14
    8dfe:	f004 fea5 	bl	db4c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    8e02:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    8e06:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    8e0a:	f043 0301 	orr.w	r3, r3, #1
    8e0e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    8e12:	b346      	cbz	r6, 8e66 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8e14:	4b3d      	ldr	r3, [pc, #244]	; (8f0c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    8e16:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    8e1a:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8e1c:	f104 0708 	add.w	r7, r4, #8
    8e20:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    8e24:	0788      	lsls	r0, r1, #30
    8e26:	d502      	bpl.n	8e2e <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    8e28:	b1aa      	cbz	r2, 8e56 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    8e2a:	4839      	ldr	r0, [pc, #228]	; (8f10 <nrfx_gpiote_input_configure+0x14c>)
    8e2c:	e01d      	b.n	8e6a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    8e2e:	f021 0120 	bic.w	r1, r1, #32
    8e32:	04c9      	lsls	r1, r1, #19
    8e34:	0cc9      	lsrs	r1, r1, #19
    8e36:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    8e3a:	b162      	cbz	r2, 8e56 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    8e3c:	f1bc 0f03 	cmp.w	ip, #3
    8e40:	d8f3      	bhi.n	8e2a <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    8e42:	6872      	ldr	r2, [r6, #4]
    8e44:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    8e46:	f1bc 0f00 	cmp.w	ip, #0
    8e4a:	d111      	bne.n	8e70 <nrfx_gpiote_input_configure+0xac>
    8e4c:	4a31      	ldr	r2, [pc, #196]	; (8f14 <nrfx_gpiote_input_configure+0x150>)
    8e4e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    8e52:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    8e56:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    8e5a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    8e5e:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    8e62:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    8e66:	bb45      	cbnz	r5, 8eba <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    8e68:	482b      	ldr	r0, [pc, #172]	; (8f18 <nrfx_gpiote_input_configure+0x154>)
}
    8e6a:	b004      	add	sp, #16
    8e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8e70:	00b2      	lsls	r2, r6, #2
    8e72:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8e76:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8e7a:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    8e7e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8e82:	f020 0003 	bic.w	r0, r0, #3
    8e86:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8e8a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8e8e:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    8e92:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    8e96:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8e9a:	0220      	lsls	r0, r4, #8
    8e9c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    8ea0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    8ea4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    8ea8:	ea40 000e 	orr.w	r0, r0, lr
    8eac:	f041 0120 	orr.w	r1, r1, #32
    8eb0:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    8eb4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    8eb8:	e7cd      	b.n	8e56 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    8eba:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    8ebe:	4620      	mov	r0, r4
    8ec0:	f7ff ff3a 	bl	8d38 <release_handler>
    if (!handler)
    8ec4:	2e00      	cmp	r6, #0
    8ec6:	d0cf      	beq.n	8e68 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8ec8:	4d10      	ldr	r5, [pc, #64]	; (8f0c <nrfx_gpiote_input_configure+0x148>)
    8eca:	e9d5 2300 	ldrd	r2, r3, [r5]
    8ece:	4296      	cmp	r6, r2
    8ed0:	d101      	bne.n	8ed6 <nrfx_gpiote_input_configure+0x112>
    8ed2:	429f      	cmp	r7, r3
    8ed4:	d018      	beq.n	8f08 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    8ed6:	4811      	ldr	r0, [pc, #68]	; (8f1c <nrfx_gpiote_input_configure+0x158>)
    8ed8:	f10d 010f 	add.w	r1, sp, #15
    8edc:	f7ff fdfc 	bl	8ad8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    8ee0:	4b0d      	ldr	r3, [pc, #52]	; (8f18 <nrfx_gpiote_input_configure+0x154>)
    8ee2:	4298      	cmp	r0, r3
    8ee4:	d1c1      	bne.n	8e6a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    8ee6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    8eea:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    8eee:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8ef2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    8ef4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8ef6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    8efa:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    8efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8f02:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    8f06:	e7af      	b.n	8e68 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8f08:	2200      	movs	r2, #0
    8f0a:	e7ee      	b.n	8eea <nrfx_gpiote_input_configure+0x126>
    8f0c:	200001e4 	.word	0x200001e4
    8f10:	0bad0004 	.word	0x0bad0004
    8f14:	40006000 	.word	0x40006000
    8f18:	0bad0000 	.word	0x0bad0000
    8f1c:	20000258 	.word	0x20000258

00008f20 <nrfx_gpiote_output_configure>:
{
    8f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f22:	4604      	mov	r4, r0
    8f24:	b085      	sub	sp, #20
    8f26:	4615      	mov	r5, r2
    if (p_config)
    8f28:	b319      	cbz	r1, 8f72 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8f2a:	4e33      	ldr	r6, [pc, #204]	; (8ff8 <nrfx_gpiote_output_configure+0xd8>)
    8f2c:	f100 0708 	add.w	r7, r0, #8
    8f30:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    8f34:	0793      	lsls	r3, r2, #30
    8f36:	d403      	bmi.n	8f40 <nrfx_gpiote_output_configure+0x20>
    8f38:	f7ff fed6 	bl	8ce8 <pin_in_use_by_te>
    8f3c:	2800      	cmp	r0, #0
    8f3e:	d158      	bne.n	8ff2 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    8f40:	f012 0f1c 	tst.w	r2, #28
    8f44:	d002      	beq.n	8f4c <nrfx_gpiote_output_configure+0x2c>
    8f46:	784b      	ldrb	r3, [r1, #1]
    8f48:	2b01      	cmp	r3, #1
    8f4a:	d052      	beq.n	8ff2 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    8f4c:	2301      	movs	r3, #1
    8f4e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    8f52:	2300      	movs	r3, #0
    8f54:	e9cd 1300 	strd	r1, r3, [sp]
    8f58:	1c4a      	adds	r2, r1, #1
    8f5a:	1c8b      	adds	r3, r1, #2
    8f5c:	4620      	mov	r0, r4
    8f5e:	f10d 010f 	add.w	r1, sp, #15
    8f62:	f004 fdf3 	bl	db4c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    8f66:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    8f6a:	f043 0303 	orr.w	r3, r3, #3
    8f6e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    8f72:	b915      	cbnz	r5, 8f7a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    8f74:	4821      	ldr	r0, [pc, #132]	; (8ffc <nrfx_gpiote_output_configure+0xdc>)
}
    8f76:	b005      	add	sp, #20
    8f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8f7a:	4e1f      	ldr	r6, [pc, #124]	; (8ff8 <nrfx_gpiote_output_configure+0xd8>)
    8f7c:	f104 0708 	add.w	r7, r4, #8
    8f80:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    8f84:	0783      	lsls	r3, r0, #30
    8f86:	d534      	bpl.n	8ff2 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    8f88:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    8f8c:	4661      	mov	r1, ip
    8f8e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    8f90:	f020 0020 	bic.w	r0, r0, #32
    8f94:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    8f98:	04c0      	lsls	r0, r0, #19
    8f9a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    8f9e:	0cc0      	lsrs	r0, r0, #19
    8fa0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    8fa4:	2300      	movs	r3, #0
    8fa6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    8faa:	786a      	ldrb	r2, [r5, #1]
    8fac:	2a00      	cmp	r2, #0
    8fae:	d0e1      	beq.n	8f74 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    8fb0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    8fb4:	78ad      	ldrb	r5, [r5, #2]
    8fb6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    8fba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    8fbe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8fc2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    8fc6:	0223      	lsls	r3, r4, #8
    8fc8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    8fcc:	0412      	lsls	r2, r2, #16
    8fce:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8fd2:	ea43 030e 	orr.w	r3, r3, lr
    8fd6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    8fd8:	052a      	lsls	r2, r5, #20
    8fda:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8fde:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8fe2:	4313      	orrs	r3, r2
    8fe4:	f040 0020 	orr.w	r0, r0, #32
    8fe8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    8fec:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    8ff0:	e7c0      	b.n	8f74 <nrfx_gpiote_output_configure+0x54>
{
    8ff2:	4803      	ldr	r0, [pc, #12]	; (9000 <nrfx_gpiote_output_configure+0xe0>)
    8ff4:	e7bf      	b.n	8f76 <nrfx_gpiote_output_configure+0x56>
    8ff6:	bf00      	nop
    8ff8:	200001e4 	.word	0x200001e4
    8ffc:	0bad0000 	.word	0x0bad0000
    9000:	0bad0004 	.word	0x0bad0004

00009004 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    9004:	4b01      	ldr	r3, [pc, #4]	; (900c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    9006:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    900a:	4770      	bx	lr
    900c:	200001e4 	.word	0x200001e4

00009010 <nrfx_gpiote_channel_get>:
{
    9010:	b508      	push	{r3, lr}
    9012:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    9014:	f7ff fe68 	bl	8ce8 <pin_in_use_by_te>
    9018:	b138      	cbz	r0, 902a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    901a:	4b05      	ldr	r3, [pc, #20]	; (9030 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    901c:	4805      	ldr	r0, [pc, #20]	; (9034 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    901e:	3208      	adds	r2, #8
    9020:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    9024:	0b5b      	lsrs	r3, r3, #13
    9026:	700b      	strb	r3, [r1, #0]
}
    9028:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    902a:	4803      	ldr	r0, [pc, #12]	; (9038 <nrfx_gpiote_channel_get+0x28>)
    902c:	e7fc      	b.n	9028 <nrfx_gpiote_channel_get+0x18>
    902e:	bf00      	nop
    9030:	200001e4 	.word	0x200001e4
    9034:	0bad0000 	.word	0x0bad0000
    9038:	0bad0004 	.word	0x0bad0004

0000903c <nrfx_gpiote_init>:
{
    903c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    903e:	4c0f      	ldr	r4, [pc, #60]	; (907c <nrfx_gpiote_init+0x40>)
    9040:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    9044:	b9bd      	cbnz	r5, 9076 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    9046:	2260      	movs	r2, #96	; 0x60
    9048:	4629      	mov	r1, r5
    904a:	f104 0010 	add.w	r0, r4, #16
    904e:	f004 f9e2 	bl	d416 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    9052:	2006      	movs	r0, #6
    9054:	f7fa fdee 	bl	3c34 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9058:	4b09      	ldr	r3, [pc, #36]	; (9080 <nrfx_gpiote_init+0x44>)
    return err_code;
    905a:	480a      	ldr	r0, [pc, #40]	; (9084 <nrfx_gpiote_init+0x48>)
    905c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    9060:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    9064:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9068:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    906c:	2301      	movs	r3, #1
    906e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    9072:	6763      	str	r3, [r4, #116]	; 0x74
}
    9074:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    9076:	4804      	ldr	r0, [pc, #16]	; (9088 <nrfx_gpiote_init+0x4c>)
    9078:	e7fc      	b.n	9074 <nrfx_gpiote_init+0x38>
    907a:	bf00      	nop
    907c:	200001e4 	.word	0x200001e4
    9080:	40006000 	.word	0x40006000
    9084:	0bad0000 	.word	0x0bad0000
    9088:	0bad0005 	.word	0x0bad0005

0000908c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    908c:	4b03      	ldr	r3, [pc, #12]	; (909c <nrfx_gpiote_is_init+0x10>)
    908e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    9092:	3800      	subs	r0, #0
    9094:	bf18      	it	ne
    9096:	2001      	movne	r0, #1
    9098:	4770      	bx	lr
    909a:	bf00      	nop
    909c:	200001e4 	.word	0x200001e4

000090a0 <nrfx_gpiote_channel_free>:
{
    90a0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    90a2:	4801      	ldr	r0, [pc, #4]	; (90a8 <nrfx_gpiote_channel_free+0x8>)
    90a4:	f7ff bd38 	b.w	8b18 <nrfx_flag32_free>
    90a8:	20000254 	.word	0x20000254

000090ac <nrfx_gpiote_channel_alloc>:
{
    90ac:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    90ae:	4801      	ldr	r0, [pc, #4]	; (90b4 <nrfx_gpiote_channel_alloc+0x8>)
    90b0:	f7ff bd12 	b.w	8ad8 <nrfx_flag32_alloc>
    90b4:	20000254 	.word	0x20000254

000090b8 <nrfx_gpiote_trigger_enable>:
{
    90b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    90ba:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    90bc:	f7ff fe14 	bl	8ce8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    90c0:	f104 0208 	add.w	r2, r4, #8
    90c4:	4b1e      	ldr	r3, [pc, #120]	; (9140 <nrfx_gpiote_trigger_enable+0x88>)
    90c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    90ca:	b1e8      	cbz	r0, 9108 <nrfx_gpiote_trigger_enable+0x50>
    90cc:	f013 0502 	ands.w	r5, r3, #2
    90d0:	d11a      	bne.n	9108 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    90d2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    90d4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    90d6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    90da:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    90de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    90e2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    90e6:	6005      	str	r5, [r0, #0]
    90e8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    90ea:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    90ee:	f040 0001 	orr.w	r0, r0, #1
    90f2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    90f6:	b129      	cbz	r1, 9104 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    90f8:	2201      	movs	r2, #1
    90fa:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    90fe:	4a11      	ldr	r2, [pc, #68]	; (9144 <nrfx_gpiote_trigger_enable+0x8c>)
    9100:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    9104:	b003      	add	sp, #12
    9106:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9108:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    910c:	2b04      	cmp	r3, #4
    910e:	d012      	beq.n	9136 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    9110:	2b05      	cmp	r3, #5
    9112:	d012      	beq.n	913a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9114:	a801      	add	r0, sp, #4
    9116:	9401      	str	r4, [sp, #4]
    9118:	f7ff fdd8 	bl	8ccc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    911c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    911e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9122:	40d9      	lsrs	r1, r3
    9124:	f001 0101 	and.w	r1, r1, #1
    9128:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    912a:	4620      	mov	r0, r4
}
    912c:	b003      	add	sp, #12
    912e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    9132:	f004 bd54 	b.w	dbde <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    9136:	2103      	movs	r1, #3
    9138:	e7f7      	b.n	912a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    913a:	2102      	movs	r1, #2
    913c:	e7f5      	b.n	912a <nrfx_gpiote_trigger_enable+0x72>
    913e:	bf00      	nop
    9140:	200001e4 	.word	0x200001e4
    9144:	40006000 	.word	0x40006000

00009148 <nrfx_gpiote_trigger_disable>:
{
    9148:	b508      	push	{r3, lr}
    914a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    914c:	f7ff fdcc 	bl	8ce8 <pin_in_use_by_te>
    9150:	b1c0      	cbz	r0, 9184 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9152:	f102 0108 	add.w	r1, r2, #8
    9156:	4b0e      	ldr	r3, [pc, #56]	; (9190 <nrfx_gpiote_trigger_disable+0x48>)
    9158:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    915c:	0799      	lsls	r1, r3, #30
    915e:	d411      	bmi.n	9184 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9160:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    9162:	2201      	movs	r2, #1
    9164:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    9166:	009b      	lsls	r3, r3, #2
    9168:	490a      	ldr	r1, [pc, #40]	; (9194 <nrfx_gpiote_trigger_disable+0x4c>)
    916a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    916e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    9172:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    9176:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    917a:	f022 0203 	bic.w	r2, r2, #3
    917e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    9182:	bd08      	pop	{r3, pc}
    9184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    9188:	2100      	movs	r1, #0
    918a:	4610      	mov	r0, r2
    918c:	f004 bd27 	b.w	dbde <nrf_gpio_cfg_sense_set>
    9190:	200001e4 	.word	0x200001e4
    9194:	40006000 	.word	0x40006000

00009198 <nrfx_gpiote_pin_uninit>:
{
    9198:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    919a:	4b0e      	ldr	r3, [pc, #56]	; (91d4 <nrfx_gpiote_pin_uninit+0x3c>)
    919c:	f100 0208 	add.w	r2, r0, #8
{
    91a0:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    91a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    91a6:	07db      	lsls	r3, r3, #31
    91a8:	d511      	bpl.n	91ce <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    91aa:	f7ff ffcd 	bl	9148 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    91ae:	4620      	mov	r0, r4
    91b0:	f7ff fdec 	bl	8d8c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    91b4:	a801      	add	r0, sp, #4
    91b6:	9401      	str	r4, [sp, #4]
    91b8:	f7ff fd88 	bl	8ccc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    91bc:	9b01      	ldr	r3, [sp, #4]
    91be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    91c2:	2202      	movs	r2, #2
    91c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    91c8:	4803      	ldr	r0, [pc, #12]	; (91d8 <nrfx_gpiote_pin_uninit+0x40>)
}
    91ca:	b002      	add	sp, #8
    91cc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    91ce:	4803      	ldr	r0, [pc, #12]	; (91dc <nrfx_gpiote_pin_uninit+0x44>)
    91d0:	e7fb      	b.n	91ca <nrfx_gpiote_pin_uninit+0x32>
    91d2:	bf00      	nop
    91d4:	200001e4 	.word	0x200001e4
    91d8:	0bad0000 	.word	0x0bad0000
    91dc:	0bad0004 	.word	0x0bad0004

000091e0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    91e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91e4:	4b68      	ldr	r3, [pc, #416]	; (9388 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    91e6:	4869      	ldr	r0, [pc, #420]	; (938c <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    91e8:	4969      	ldr	r1, [pc, #420]	; (9390 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    91ea:	2600      	movs	r6, #0
{
    91ec:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    91ee:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    91f0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    91f2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    91f4:	b135      	cbz	r5, 9204 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    91f6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    91fa:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    91fc:	bf1e      	ittt	ne
    91fe:	601c      	strne	r4, [r3, #0]
    9200:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    9202:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9204:	3304      	adds	r3, #4
    9206:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    9208:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    920c:	d1f1      	bne.n	91f2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    920e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 938c <nrfx_gpiote_irq_handler+0x1ac>
    9212:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    9216:	2b00      	cmp	r3, #0
    9218:	f000 8099 	beq.w	934e <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    921c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9220:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    9224:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    9226:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    922a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    922e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    9230:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    9234:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    9238:	f10d 0a10 	add.w	sl, sp, #16
    923c:	ea4f 1348 	mov.w	r3, r8, lsl #5
    9240:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    9242:	f04f 0b01 	mov.w	fp, #1
    9246:	e049      	b.n	92dc <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    9248:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    924a:	4a52      	ldr	r2, [pc, #328]	; (9394 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    924c:	fa94 f4a4 	rbit	r4, r4
    9250:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    9254:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    9256:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9258:	f104 0308 	add.w	r3, r4, #8
    925c:	9403      	str	r4, [sp, #12]
    925e:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    9262:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    9266:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    926a:	fa0b f202 	lsl.w	r2, fp, r2
    926e:	ea23 0302 	bic.w	r3, r3, r2
    9272:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9276:	a803      	add	r0, sp, #12
    9278:	f7ff fd28 	bl	8ccc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    927c:	9b03      	ldr	r3, [sp, #12]
    927e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9282:	08b9      	lsrs	r1, r7, #2
    9284:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    9288:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    928c:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    928e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    9290:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    9294:	d52c      	bpl.n	92f0 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    9296:	4620      	mov	r0, r4
    9298:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    929a:	b2dd      	uxtb	r5, r3
    929c:	f7ff fd2e 	bl	8cfc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    92a0:	a803      	add	r0, sp, #12
    92a2:	9403      	str	r4, [sp, #12]
    92a4:	f7ff fd12 	bl	8ccc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    92a8:	9b03      	ldr	r3, [sp, #12]
    92aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    92ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    92b2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    92b6:	429d      	cmp	r5, r3
    92b8:	d107      	bne.n	92ca <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    92ba:	2100      	movs	r1, #0
    92bc:	4620      	mov	r0, r4
    92be:	f004 fc8e 	bl	dbde <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    92c2:	4629      	mov	r1, r5
    92c4:	4620      	mov	r0, r4
    92c6:	f004 fc8a 	bl	dbde <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    92ca:	a803      	add	r0, sp, #12
    92cc:	9403      	str	r4, [sp, #12]
    92ce:	f7ff fcfd 	bl	8ccc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    92d2:	9b03      	ldr	r3, [sp, #12]
    92d4:	fa0b f303 	lsl.w	r3, fp, r3
    92d8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    92dc:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    92e0:	2c00      	cmp	r4, #0
    92e2:	d1b1      	bne.n	9248 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    92e4:	f1b8 0f00 	cmp.w	r8, #0
    92e8:	d11d      	bne.n	9326 <nrfx_gpiote_irq_handler+0x146>
    92ea:	f04f 0801 	mov.w	r8, #1
    92ee:	e7a5      	b.n	923c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    92f0:	2b02      	cmp	r3, #2
    92f2:	d10c      	bne.n	930e <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    92f4:	2103      	movs	r1, #3
    92f6:	4620      	mov	r0, r4
    92f8:	f004 fc71 	bl	dbde <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    92fc:	f005 0305 	and.w	r3, r5, #5
    9300:	2b01      	cmp	r3, #1
    9302:	d1e2      	bne.n	92ca <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    9304:	4639      	mov	r1, r7
    9306:	4620      	mov	r0, r4
    9308:	f7ff fcf8 	bl	8cfc <call_handler>
    930c:	e7dd      	b.n	92ca <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    930e:	2102      	movs	r1, #2
    9310:	4620      	mov	r0, r4
    9312:	9301      	str	r3, [sp, #4]
    9314:	f004 fc63 	bl	dbde <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    9318:	2d03      	cmp	r5, #3
    931a:	d0f3      	beq.n	9304 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    931c:	9b01      	ldr	r3, [sp, #4]
    931e:	2b03      	cmp	r3, #3
    9320:	d1d3      	bne.n	92ca <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    9322:	2d02      	cmp	r5, #2
    9324:	e7ed      	b.n	9302 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    9326:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    932a:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    932e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    9332:	4919      	ldr	r1, [pc, #100]	; (9398 <nrfx_gpiote_irq_handler+0x1b8>)
    9334:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    9338:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    933a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    933e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    9342:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    9344:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    9346:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    934a:	f47f af73 	bne.w	9234 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    934e:	2401      	movs	r4, #1
    while (mask)
    9350:	b916      	cbnz	r6, 9358 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    9352:	b007      	add	sp, #28
    9354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    9358:	fa96 f3a6 	rbit	r3, r6
    935c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    9360:	fa04 f203 	lsl.w	r2, r4, r3
    9364:	009b      	lsls	r3, r3, #2
    9366:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    936a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    936e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    9372:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    9376:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    937a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    937e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    9382:	f7ff fcbb 	bl	8cfc <call_handler>
    9386:	e7e3      	b.n	9350 <nrfx_gpiote_irq_handler+0x170>
    9388:	40006100 	.word	0x40006100
    938c:	40006000 	.word	0x40006000
    9390:	40006120 	.word	0x40006120
    9394:	200001e4 	.word	0x200001e4
    9398:	50000300 	.word	0x50000300

0000939c <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    939c:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    939e:	4c18      	ldr	r4, [pc, #96]	; (9400 <nrfx_power_init+0x64>)
    93a0:	7823      	ldrb	r3, [r4, #0]
    93a2:	bb53      	cbnz	r3, 93fa <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    93a4:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    93a6:	f3c2 0340 	ubfx	r3, r2, #1, #1
    93aa:	0792      	lsls	r2, r2, #30
    93ac:	d512      	bpl.n	93d4 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    93ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    93b2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    93b6:	2a08      	cmp	r2, #8
    93b8:	d10b      	bne.n	93d2 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    93ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    93be:	2b05      	cmp	r3, #5
    93c0:	d807      	bhi.n	93d2 <nrfx_power_init+0x36>
    93c2:	4a10      	ldr	r2, [pc, #64]	; (9404 <nrfx_power_init+0x68>)
    93c4:	5cd3      	ldrb	r3, [r2, r3]
    93c6:	b123      	cbz	r3, 93d2 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    93c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    93cc:	2201      	movs	r2, #1
    93ce:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    93d2:	2301      	movs	r3, #1
    93d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    93d8:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    93dc:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    93de:	f003 0301 	and.w	r3, r3, #1
    93e2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    93e6:	2000      	movs	r0, #0
    93e8:	f7fa fc46 	bl	3c78 <arch_irq_is_enabled>
    93ec:	b908      	cbnz	r0, 93f2 <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    93ee:	f7fa fc21 	bl	3c34 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    93f2:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    93f4:	4804      	ldr	r0, [pc, #16]	; (9408 <nrfx_power_init+0x6c>)
    m_initialized = true;
    93f6:	7023      	strb	r3, [r4, #0]
}
    93f8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    93fa:	4804      	ldr	r0, [pc, #16]	; (940c <nrfx_power_init+0x70>)
    93fc:	e7fc      	b.n	93f8 <nrfx_power_init+0x5c>
    93fe:	bf00      	nop
    9400:	20002526 	.word	0x20002526
    9404:	00010192 	.word	0x00010192
    9408:	0bad0000 	.word	0x0bad0000
    940c:	0bad000c 	.word	0x0bad000c

00009410 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    9410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9414:	f44f 7260 	mov.w	r2, #896	; 0x380
    9418:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    941c:	4b01      	ldr	r3, [pc, #4]	; (9424 <nrfx_power_usbevt_uninit+0x14>)
    941e:	2200      	movs	r2, #0
    9420:	601a      	str	r2, [r3, #0]
}
    9422:	4770      	bx	lr
    9424:	20001f80 	.word	0x20001f80

00009428 <nrfx_power_usbevt_init>:
{
    9428:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    942a:	f7ff fff1 	bl	9410 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    942e:	6803      	ldr	r3, [r0, #0]
    9430:	b10b      	cbz	r3, 9436 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    9432:	4a01      	ldr	r2, [pc, #4]	; (9438 <nrfx_power_usbevt_init+0x10>)
    9434:	6013      	str	r3, [r2, #0]
}
    9436:	bd08      	pop	{r3, pc}
    9438:	20001f80 	.word	0x20001f80

0000943c <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    943c:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    943e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9442:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    9446:	0762      	lsls	r2, r4, #29
    9448:	d507      	bpl.n	945a <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    944a:	f44f 7084 	mov.w	r0, #264	; 0x108
    944e:	f004 fbd5 	bl	dbfc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    9452:	b110      	cbz	r0, 945a <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    9454:	4b1e      	ldr	r3, [pc, #120]	; (94d0 <nrfx_power_irq_handler+0x94>)
    9456:	681b      	ldr	r3, [r3, #0]
    9458:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    945a:	06a3      	lsls	r3, r4, #26
    945c:	d508      	bpl.n	9470 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    945e:	f44f 708a 	mov.w	r0, #276	; 0x114
    9462:	f004 fbcb 	bl	dbfc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    9466:	b118      	cbz	r0, 9470 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    9468:	4b1a      	ldr	r3, [pc, #104]	; (94d4 <nrfx_power_irq_handler+0x98>)
    946a:	2000      	movs	r0, #0
    946c:	681b      	ldr	r3, [r3, #0]
    946e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    9470:	0660      	lsls	r0, r4, #25
    9472:	d508      	bpl.n	9486 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    9474:	f44f 708c 	mov.w	r0, #280	; 0x118
    9478:	f004 fbc0 	bl	dbfc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    947c:	b118      	cbz	r0, 9486 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    947e:	4b15      	ldr	r3, [pc, #84]	; (94d4 <nrfx_power_irq_handler+0x98>)
    9480:	2001      	movs	r0, #1
    9482:	681b      	ldr	r3, [r3, #0]
    9484:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    9486:	0621      	lsls	r1, r4, #24
    9488:	d508      	bpl.n	949c <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    948a:	f44f 708e 	mov.w	r0, #284	; 0x11c
    948e:	f004 fbb5 	bl	dbfc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    9492:	b118      	cbz	r0, 949c <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    9494:	4b10      	ldr	r3, [pc, #64]	; (94d8 <nrfx_power_irq_handler+0x9c>)
    9496:	2000      	movs	r0, #0
    9498:	681b      	ldr	r3, [r3, #0]
    949a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    949c:	05e2      	lsls	r2, r4, #23
    949e:	d508      	bpl.n	94b2 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    94a0:	f44f 7090 	mov.w	r0, #288	; 0x120
    94a4:	f004 fbaa 	bl	dbfc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    94a8:	b118      	cbz	r0, 94b2 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    94aa:	4b0b      	ldr	r3, [pc, #44]	; (94d8 <nrfx_power_irq_handler+0x9c>)
    94ac:	2001      	movs	r0, #1
    94ae:	681b      	ldr	r3, [r3, #0]
    94b0:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    94b2:	05a3      	lsls	r3, r4, #22
    94b4:	d50a      	bpl.n	94cc <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    94b6:	f44f 7092 	mov.w	r0, #292	; 0x124
    94ba:	f004 fb9f 	bl	dbfc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    94be:	b128      	cbz	r0, 94cc <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    94c0:	4b05      	ldr	r3, [pc, #20]	; (94d8 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    94c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    94c6:	681b      	ldr	r3, [r3, #0]
    94c8:	2002      	movs	r0, #2
    94ca:	4718      	bx	r3
}
    94cc:	bd10      	pop	{r4, pc}
    94ce:	bf00      	nop
    94d0:	20001f88 	.word	0x20001f88
    94d4:	20001f84 	.word	0x20001f84
    94d8:	20001f80 	.word	0x20001f80

000094dc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    94dc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    94de:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    94e2:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    94e4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    94e6:	6002      	str	r2, [r0, #0]
}
    94e8:	4802      	ldr	r0, [pc, #8]	; (94f4 <nrf_gpio_pin_port_decode+0x18>)
    94ea:	bf18      	it	ne
    94ec:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    94f0:	4770      	bx	lr
    94f2:	bf00      	nop
    94f4:	50000300 	.word	0x50000300

000094f8 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    94f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    94fc:	7907      	ldrb	r7, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    94fe:	4c52      	ldr	r4, [pc, #328]	; (9648 <nrfx_spi_init+0x150>)
    9500:	f04f 0c28 	mov.w	ip, #40	; 0x28
    9504:	fb0c fc07 	mul.w	ip, ip, r7
{
    9508:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    950a:	eb04 000c 	add.w	r0, r4, ip
    950e:	7f05      	ldrb	r5, [r0, #28]
    9510:	2d00      	cmp	r5, #0
    9512:	f040 8096 	bne.w	9642 <nrfx_spi_init+0x14a>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    9516:	6835      	ldr	r5, [r6, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    9518:	f844 200c 	str.w	r2, [r4, ip]
    p_cb->p_context = p_context;
    951c:	6043      	str	r3, [r0, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    951e:	7bcb      	ldrb	r3, [r1, #15]
    9520:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    9524:	78cb      	ldrb	r3, [r1, #3]
    9526:	7783      	strb	r3, [r0, #30]
    p_cb->orc = p_config->orc;
    9528:	794b      	ldrb	r3, [r1, #5]
    952a:	77c3      	strb	r3, [r0, #31]
    if (!p_config->skip_gpio_cfg)
    952c:	7bcb      	ldrb	r3, [r1, #15]
    952e:	2b00      	cmp	r3, #0
    9530:	d140      	bne.n	95b4 <nrfx_spi_init+0xbc>
    if (value == 0)
    9532:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
    9534:	7808      	ldrb	r0, [r1, #0]
    9536:	2b01      	cmp	r3, #1
    9538:	d87a      	bhi.n	9630 <nrfx_spi_init+0x138>
        nrf_gpio_pin_clear(pin_number);
    953a:	f004 fb9b 	bl	dc74 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    953e:	780b      	ldrb	r3, [r1, #0]
    9540:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9542:	a801      	add	r0, sp, #4
    9544:	f7ff ffca 	bl	94dc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9548:	9b01      	ldr	r3, [sp, #4]
    954a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    954e:	2201      	movs	r2, #1
    9550:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    9554:	7848      	ldrb	r0, [r1, #1]
    9556:	28ff      	cmp	r0, #255	; 0xff
    9558:	d00c      	beq.n	9574 <nrfx_spi_init+0x7c>
        nrf_gpio_pin_clear(pin_number);
    955a:	f004 fb8b 	bl	dc74 <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
    955e:	784b      	ldrb	r3, [r1, #1]
    9560:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9562:	a801      	add	r0, sp, #4
    9564:	f7ff ffba 	bl	94dc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9568:	9b01      	ldr	r3, [sp, #4]
    956a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    956e:	2203      	movs	r2, #3
    9570:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    9574:	788b      	ldrb	r3, [r1, #2]
    9576:	2bff      	cmp	r3, #255	; 0xff
    9578:	d00c      	beq.n	9594 <nrfx_spi_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    957a:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
    957c:	f891 800e 	ldrb.w	r8, [r1, #14]
    9580:	9301      	str	r3, [sp, #4]
    9582:	f7ff ffab 	bl	94dc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9586:	9b01      	ldr	r3, [sp, #4]
    9588:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    958c:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    9590:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    9594:	78c8      	ldrb	r0, [r1, #3]
    9596:	28ff      	cmp	r0, #255	; 0xff
    9598:	d00c      	beq.n	95b4 <nrfx_spi_init+0xbc>
        nrf_gpio_pin_set(pin_number);
    959a:	f004 fb5e 	bl	dc5a <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
    959e:	78cb      	ldrb	r3, [r1, #3]
    95a0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    95a2:	a801      	add	r0, sp, #4
    95a4:	f7ff ff9a 	bl	94dc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    95a8:	9b01      	ldr	r3, [sp, #4]
    95aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    95ae:	2203      	movs	r2, #3
    95b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    95b4:	7c0b      	ldrb	r3, [r1, #16]
    95b6:	b993      	cbnz	r3, 95de <nrfx_spi_init+0xe6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    95b8:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    95ba:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    95bc:	2bff      	cmp	r3, #255	; 0xff
    95be:	bf18      	it	ne
    95c0:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    95c2:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
    95c4:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
    95c8:	bf08      	it	eq
    95ca:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
    95ce:	2bff      	cmp	r3, #255	; 0xff
    95d0:	bf08      	it	eq
    95d2:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
    95d6:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
    95da:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    95de:	688b      	ldr	r3, [r1, #8]
    95e0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    95e4:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    95e6:	7b0a      	ldrb	r2, [r1, #12]
    95e8:	3b00      	subs	r3, #0
    95ea:	bf18      	it	ne
    95ec:	2301      	movne	r3, #1
    switch (spi_mode)
    95ee:	2a02      	cmp	r2, #2
    95f0:	d021      	beq.n	9636 <nrfx_spi_init+0x13e>
    95f2:	2a03      	cmp	r2, #3
    95f4:	d022      	beq.n	963c <nrfx_spi_init+0x144>
    95f6:	2a01      	cmp	r2, #1
    95f8:	d101      	bne.n	95fe <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    95fa:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    95fe:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    9602:	2301      	movs	r3, #1
    9604:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    9608:	2328      	movs	r3, #40	; 0x28
    960a:	437b      	muls	r3, r7
    960c:	58e3      	ldr	r3, [r4, r3]
    960e:	b123      	cbz	r3, 961a <nrfx_spi_init+0x122>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    9610:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    9612:	f340 3007 	sbfx	r0, r0, #12, #8
    9616:	f7fa fb0d 	bl	3c34 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    961a:	2328      	movs	r3, #40	; 0x28
    961c:	fb03 4407 	mla	r4, r3, r7, r4
    9620:	2300      	movs	r3, #0
    9622:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    9624:	4809      	ldr	r0, [pc, #36]	; (964c <nrfx_spi_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    9626:	2301      	movs	r3, #1
    9628:	7723      	strb	r3, [r4, #28]
}
    962a:	b002      	add	sp, #8
    962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
    9630:	f004 fb13 	bl	dc5a <nrf_gpio_pin_set>
    9634:	e783      	b.n	953e <nrfx_spi_init+0x46>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    9636:	f043 0304 	orr.w	r3, r3, #4
        break;
    963a:	e7e0      	b.n	95fe <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    963c:	f043 0306 	orr.w	r3, r3, #6
        break;
    9640:	e7dd      	b.n	95fe <nrfx_spi_init+0x106>
        return err_code;
    9642:	4803      	ldr	r0, [pc, #12]	; (9650 <nrfx_spi_init+0x158>)
    9644:	e7f1      	b.n	962a <nrfx_spi_init+0x132>
    9646:	bf00      	nop
    9648:	20001f8c 	.word	0x20001f8c
    964c:	0bad0000 	.word	0x0bad0000
    9650:	0bad0005 	.word	0x0bad0005

00009654 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    9654:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    9656:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
    9658:	4c19      	ldr	r4, [pc, #100]	; (96c0 <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    965a:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    965c:	2328      	movs	r3, #40	; 0x28
    965e:	4373      	muls	r3, r6
    9660:	58e3      	ldr	r3, [r4, r3]
    9662:	b133      	cbz	r3, 9672 <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    9664:	f345 3007 	sbfx	r0, r5, #12, #8
    9668:	f7fa faf2 	bl	3c50 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    966c:	2304      	movs	r3, #4
    966e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    9672:	2300      	movs	r3, #0
    9674:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
    9678:	2328      	movs	r3, #40	; 0x28
    967a:	fb03 4306 	mla	r3, r3, r6, r4
    967e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    9682:	b9bb      	cbnz	r3, 96b4 <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
    9684:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
    9688:	f004 fad9 	bl	dc3e <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
    968c:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    9690:	1c42      	adds	r2, r0, #1
    9692:	d001      	beq.n	9698 <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
    9694:	f004 fad3 	bl	dc3e <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
    9698:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    969c:	1c43      	adds	r3, r0, #1
    969e:	d001      	beq.n	96a4 <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
    96a0:	f004 facd 	bl	dc3e <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    96a4:	2328      	movs	r3, #40	; 0x28
    96a6:	fb03 4306 	mla	r3, r3, r6, r4
    96aa:	7f98      	ldrb	r0, [r3, #30]
    96ac:	28ff      	cmp	r0, #255	; 0xff
    96ae:	d001      	beq.n	96b4 <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
    96b0:	f004 fac5 	bl	dc3e <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    96b4:	2328      	movs	r3, #40	; 0x28
    96b6:	fb03 4406 	mla	r4, r3, r6, r4
    96ba:	2300      	movs	r3, #0
    96bc:	7723      	strb	r3, [r4, #28]
}
    96be:	bd70      	pop	{r4, r5, r6, pc}
    96c0:	20001f8c 	.word	0x20001f8c

000096c4 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    96c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    96c8:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    96ca:	4c39      	ldr	r4, [pc, #228]	; (97b0 <nrfx_spi_xfer+0xec>)
    96cc:	2328      	movs	r3, #40	; 0x28
    96ce:	437b      	muls	r3, r7
{
    96d0:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
    96d2:	18e2      	adds	r2, r4, r3
{
    96d4:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
    96d6:	7f51      	ldrb	r1, [r2, #29]
{
    96d8:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
    96da:	2900      	cmp	r1, #0
    96dc:	d166      	bne.n	97ac <nrfx_spi_xfer+0xe8>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    96de:	58e3      	ldr	r3, [r4, r3]
    96e0:	b10b      	cbz	r3, 96e6 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
    96e2:	2301      	movs	r3, #1
    96e4:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    96e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    96ea:	2528      	movs	r5, #40	; 0x28
    96ec:	fb05 4507 	mla	r5, r5, r7, r4
    96f0:	f105 0c0c 	add.w	ip, r5, #12
    96f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    96f8:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
    96fa:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    96fc:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
    96fe:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    9702:	d001      	beq.n	9708 <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
    9704:	f004 fab6 	bl	dc74 <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    9708:	2328      	movs	r3, #40	; 0x28
    970a:	f1b8 0f00 	cmp.w	r8, #0
    970e:	d006      	beq.n	971e <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
    9710:	fb03 4307 	mla	r3, r3, r7, r4
    9714:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    9716:	4827      	ldr	r0, [pc, #156]	; (97b4 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
    9718:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    971a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    971e:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
    9722:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
    9726:	2204      	movs	r2, #4
    9728:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
    972c:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9730:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
    9734:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    nrf_spi_txd_set(p_spi,
    9738:	6872      	ldr	r2, [r6, #4]
    973a:	b19a      	cbz	r2, 9764 <nrfx_spi_xfer+0xa0>
    973c:	6833      	ldr	r3, [r6, #0]
    973e:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    9740:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    9744:	6873      	ldr	r3, [r6, #4]
    9746:	2b01      	cmp	r3, #1
    9748:	d90e      	bls.n	9768 <nrfx_spi_xfer+0xa4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    974a:	6833      	ldr	r3, [r6, #0]
    974c:	785b      	ldrb	r3, [r3, #1]
    974e:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
    9752:	2328      	movs	r3, #40	; 0x28
    9754:	437b      	muls	r3, r7
    9756:	58e6      	ldr	r6, [r4, r3]
    9758:	b176      	cbz	r6, 9778 <nrfx_spi_xfer+0xb4>
    p_reg->INTENSET = mask;
    975a:	2304      	movs	r3, #4
    975c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    9760:	4815      	ldr	r0, [pc, #84]	; (97b8 <nrfx_spi_xfer+0xf4>)
    9762:	e7da      	b.n	971a <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
    9764:	7fdb      	ldrb	r3, [r3, #31]
    9766:	e7eb      	b.n	9740 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
    9768:	68f3      	ldr	r3, [r6, #12]
    976a:	2b01      	cmp	r3, #1
    976c:	d9f1      	bls.n	9752 <nrfx_spi_xfer+0x8e>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    976e:	2328      	movs	r3, #40	; 0x28
    9770:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
    9774:	7fdb      	ldrb	r3, [r3, #31]
    9776:	e7ea      	b.n	974e <nrfx_spi_xfer+0x8a>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    9778:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    977c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9780:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    9784:	2b00      	cmp	r3, #0
    9786:	d0fb      	beq.n	9780 <nrfx_spi_xfer+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9788:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    978c:	4628      	mov	r0, r5
    978e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    9792:	f004 fa7c 	bl	dc8e <transfer_byte>
    9796:	2800      	cmp	r0, #0
    9798:	d1f2      	bne.n	9780 <nrfx_spi_xfer+0xbc>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    979a:	2328      	movs	r3, #40	; 0x28
    979c:	fb03 4407 	mla	r4, r3, r7, r4
    97a0:	7fa0      	ldrb	r0, [r4, #30]
    97a2:	28ff      	cmp	r0, #255	; 0xff
    97a4:	d0dc      	beq.n	9760 <nrfx_spi_xfer+0x9c>
        nrf_gpio_pin_set(pin_number);
    97a6:	f004 fa58 	bl	dc5a <nrf_gpio_pin_set>
    97aa:	e7d9      	b.n	9760 <nrfx_spi_xfer+0x9c>
        return err_code;
    97ac:	4803      	ldr	r0, [pc, #12]	; (97bc <nrfx_spi_xfer+0xf8>)
    97ae:	e7b4      	b.n	971a <nrfx_spi_xfer+0x56>
    97b0:	20001f8c 	.word	0x20001f8c
    97b4:	0bad0003 	.word	0x0bad0003
    97b8:	0bad0000 	.word	0x0bad0000
    97bc:	0bad000b 	.word	0x0bad000b

000097c0 <nrfx_spi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    97c0:	b510      	push	{r4, lr}
    97c2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    97c6:	2300      	movs	r3, #0
    97c8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
    97cc:	490a      	ldr	r1, [pc, #40]	; (97f8 <nrfx_spi_1_irq_handler+0x38>)
    97ce:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    97d2:	f004 fa5c 	bl	dc8e <transfer_byte>
    97d6:	b968      	cbnz	r0, 97f4 <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    97d8:	7f88      	ldrb	r0, [r1, #30]
    97da:	28ff      	cmp	r0, #255	; 0xff
    97dc:	d001      	beq.n	97e2 <nrfx_spi_1_irq_handler+0x22>
    97de:	f004 fa3c 	bl	dc5a <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
    97e2:	2300      	movs	r3, #0
    97e4:	774b      	strb	r3, [r1, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    97e6:	720b      	strb	r3, [r1, #8]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
    97e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    97ec:	e9d1 3100 	ldrd	r3, r1, [r1]
    97f0:	4802      	ldr	r0, [pc, #8]	; (97fc <nrfx_spi_1_irq_handler+0x3c>)
    97f2:	4718      	bx	r3
}
    97f4:	bd10      	pop	{r4, pc}
    97f6:	bf00      	nop
    97f8:	20001f8c 	.word	0x20001f8c
    97fc:	20001f94 	.word	0x20001f94

00009800 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9800:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9804:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    9808:	2a08      	cmp	r2, #8
    980a:	d106      	bne.n	981a <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    980c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    9810:	2b05      	cmp	r3, #5
    9812:	d804      	bhi.n	981e <nrf52_errata_187+0x1e>
    9814:	4a03      	ldr	r2, [pc, #12]	; (9824 <nrf52_errata_187+0x24>)
    9816:	5cd0      	ldrb	r0, [r2, r3]
    9818:	4770      	bx	lr
                        return false;
    981a:	2000      	movs	r0, #0
    981c:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    981e:	2001      	movs	r0, #1
}
    9820:	4770      	bx	lr
    9822:	bf00      	nop
    9824:	000101a1 	.word	0x000101a1

00009828 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9828:	4b05      	ldr	r3, [pc, #20]	; (9840 <ep_state_access+0x18>)
    982a:	f010 0f80 	tst.w	r0, #128	; 0x80
    982e:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    9832:	bf08      	it	eq
    9834:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    9836:	f000 000f 	and.w	r0, r0, #15
}
    983a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    983e:	4770      	bx	lr
    9840:	2000215c 	.word	0x2000215c

00009844 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    9844:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    9846:	4a07      	ldr	r2, [pc, #28]	; (9864 <ev_usbreset_handler+0x20>)
    9848:	2300      	movs	r3, #0
    984a:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    984c:	4a06      	ldr	r2, [pc, #24]	; (9868 <ev_usbreset_handler+0x24>)
    984e:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    9850:	2301      	movs	r3, #1
    9852:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    9854:	4b05      	ldr	r3, [pc, #20]	; (986c <ev_usbreset_handler+0x28>)
    9856:	a801      	add	r0, sp, #4
    9858:	681b      	ldr	r3, [r3, #0]
    985a:	4798      	blx	r3
}
    985c:	b003      	add	sp, #12
    985e:	f85d fb04 	ldr.w	pc, [sp], #4
    9862:	bf00      	nop
    9864:	20002529 	.word	0x20002529
    9868:	20002528 	.word	0x20002528
    986c:	200021f4 	.word	0x200021f4

00009870 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    9870:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    9872:	4b19      	ldr	r3, [pc, #100]	; (98d8 <ev_usbevent_handler+0x68>)
    9874:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    9878:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    987c:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    987e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    9882:	d508      	bpl.n	9896 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    9884:	4b15      	ldr	r3, [pc, #84]	; (98dc <ev_usbevent_handler+0x6c>)
    9886:	2201      	movs	r2, #1
    9888:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    988a:	2302      	movs	r3, #2
    988c:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    988e:	4b14      	ldr	r3, [pc, #80]	; (98e0 <ev_usbevent_handler+0x70>)
    9890:	a801      	add	r0, sp, #4
    9892:	681b      	ldr	r3, [r3, #0]
    9894:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9896:	05a2      	lsls	r2, r4, #22
    9898:	d508      	bpl.n	98ac <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    989a:	4b10      	ldr	r3, [pc, #64]	; (98dc <ev_usbevent_handler+0x6c>)
    989c:	2200      	movs	r2, #0
    989e:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    98a0:	2303      	movs	r3, #3
    98a2:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    98a4:	4b0e      	ldr	r3, [pc, #56]	; (98e0 <ev_usbevent_handler+0x70>)
    98a6:	a801      	add	r0, sp, #4
    98a8:	681b      	ldr	r3, [r3, #0]
    98aa:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    98ac:	0563      	lsls	r3, r4, #21
    98ae:	d510      	bpl.n	98d2 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    98b0:	4b0a      	ldr	r3, [pc, #40]	; (98dc <ev_usbevent_handler+0x6c>)
    98b2:	781a      	ldrb	r2, [r3, #0]
    98b4:	b16a      	cbz	r2, 98d2 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    98b6:	2200      	movs	r2, #0
    98b8:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    98ba:	4b07      	ldr	r3, [pc, #28]	; (98d8 <ev_usbevent_handler+0x68>)
    98bc:	2201      	movs	r2, #1
    98be:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    98c2:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    98c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    98c6:	2304      	movs	r3, #4
    98c8:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    98ca:	4b05      	ldr	r3, [pc, #20]	; (98e0 <ev_usbevent_handler+0x70>)
    98cc:	a801      	add	r0, sp, #4
    98ce:	681b      	ldr	r3, [r3, #0]
    98d0:	4798      	blx	r3
        }
    }
}
    98d2:	b002      	add	sp, #8
    98d4:	bd10      	pop	{r4, pc}
    98d6:	bf00      	nop
    98d8:	40027000 	.word	0x40027000
    98dc:	20002529 	.word	0x20002529
    98e0:	200021f4 	.word	0x200021f4

000098e4 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    98e4:	f04f 0320 	mov.w	r3, #32
    98e8:	f3ef 8011 	mrs	r0, BASEPRI
    98ec:	f383 8812 	msr	BASEPRI_MAX, r3
    98f0:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    98f4:	4b0a      	ldr	r3, [pc, #40]	; (9920 <usbd_errata_187_211_begin+0x3c>)
    98f6:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    98fa:	2203      	movs	r2, #3
    98fc:	b961      	cbnz	r1, 9918 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    98fe:	f249 3175 	movw	r1, #37749	; 0x9375
    9902:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    9906:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    990a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    990e:	f380 8811 	msr	BASEPRI, r0
    9912:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9916:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    9918:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    991c:	e7f7      	b.n	990e <usbd_errata_187_211_begin+0x2a>
    991e:	bf00      	nop
    9920:	4006e000 	.word	0x4006e000

00009924 <usbd_errata_187_211_end>:
	__asm__ volatile(
    9924:	f04f 0320 	mov.w	r3, #32
    9928:	f3ef 8011 	mrs	r0, BASEPRI
    992c:	f383 8812 	msr	BASEPRI_MAX, r3
    9930:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9934:	4b0a      	ldr	r3, [pc, #40]	; (9960 <usbd_errata_187_211_end+0x3c>)
    9936:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    993a:	b961      	cbnz	r1, 9956 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    993c:	f249 3275 	movw	r2, #37749	; 0x9375
    9940:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    9944:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9948:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    994c:	f380 8811 	msr	BASEPRI, r0
    9950:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9954:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    9956:	2200      	movs	r2, #0
    9958:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    995c:	e7f6      	b.n	994c <usbd_errata_187_211_end+0x28>
    995e:	bf00      	nop
    9960:	4006e000 	.word	0x4006e000

00009964 <nrfx_usbd_feeder_flash>:
{
    9964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9966:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    9968:	4f0b      	ldr	r7, [pc, #44]	; (9998 <nrfx_usbd_feeder_flash+0x34>)
    996a:	429a      	cmp	r2, r3
    996c:	bf28      	it	cs
    996e:	461a      	movcs	r2, r3
{
    9970:	460c      	mov	r4, r1
    9972:	4615      	mov	r5, r2
    9974:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    9976:	6809      	ldr	r1, [r1, #0]
    9978:	4638      	mov	r0, r7
    997a:	f003 fd41 	bl	d400 <memcpy>
    p_next->size = tx_size;
    997e:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    9982:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    9984:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    9986:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    9988:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    998a:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    998c:	6023      	str	r3, [r4, #0]
}
    998e:	3800      	subs	r0, #0
    9990:	bf18      	it	ne
    9992:	2001      	movne	r0, #1
    9994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9996:	bf00      	nop
    9998:	20001fb4 	.word	0x20001fb4

0000999c <nrfx_usbd_feeder_flash_zlp>:
{
    999c:	b570      	push	{r4, r5, r6, lr}
    999e:	684b      	ldr	r3, [r1, #4]
    99a0:	429a      	cmp	r2, r3
    99a2:	bf28      	it	cs
    99a4:	461a      	movcs	r2, r3
    99a6:	4606      	mov	r6, r0
    99a8:	460d      	mov	r5, r1
    99aa:	4614      	mov	r4, r2
    if (tx_size != 0)
    99ac:	b182      	cbz	r2, 99d0 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    99ae:	6809      	ldr	r1, [r1, #0]
    99b0:	4808      	ldr	r0, [pc, #32]	; (99d4 <nrfx_usbd_feeder_flash_zlp+0x38>)
    99b2:	f003 fd25 	bl	d400 <memcpy>
        p_next->p_data.tx = p_buffer;
    99b6:	4b07      	ldr	r3, [pc, #28]	; (99d4 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    99b8:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    99bc:	686b      	ldr	r3, [r5, #4]
    99be:	1b1b      	subs	r3, r3, r4
    99c0:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    99c2:	682b      	ldr	r3, [r5, #0]
    99c4:	4423      	add	r3, r4
}
    99c6:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    99c8:	602b      	str	r3, [r5, #0]
}
    99ca:	bf18      	it	ne
    99cc:	2001      	movne	r0, #1
    99ce:	bd70      	pop	{r4, r5, r6, pc}
    99d0:	4613      	mov	r3, r2
    99d2:	e7f1      	b.n	99b8 <nrfx_usbd_feeder_flash_zlp+0x1c>
    99d4:	20001fb4 	.word	0x20001fb4

000099d8 <ev_sof_handler>:
{
    99d8:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    99da:	2300      	movs	r3, #0
    99dc:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    99e0:	4b0b      	ldr	r3, [pc, #44]	; (9a10 <ev_sof_handler+0x38>)
    99e2:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    99e6:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    99ea:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    99ee:	4a09      	ldr	r2, [pc, #36]	; (9a14 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    99f0:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    99f2:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    99f4:	bf14      	ite	ne
    99f6:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    99fa:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    99fe:	430b      	orrs	r3, r1
    9a00:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    9a02:	4b05      	ldr	r3, [pc, #20]	; (9a18 <ev_sof_handler+0x40>)
    9a04:	a801      	add	r0, sp, #4
    9a06:	681b      	ldr	r3, [r3, #0]
    9a08:	4798      	blx	r3
}
    9a0a:	b003      	add	sp, #12
    9a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    9a10:	40027000 	.word	0x40027000
    9a14:	200021f0 	.word	0x200021f0
    9a18:	200021f4 	.word	0x200021f4

00009a1c <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9a1c:	4b06      	ldr	r3, [pc, #24]	; (9a38 <atomic_and.constprop.0.isra.0+0x1c>)
    9a1e:	f3bf 8f5b 	dmb	ish
    9a22:	e853 1f00 	ldrex	r1, [r3]
    9a26:	4001      	ands	r1, r0
    9a28:	e843 1200 	strex	r2, r1, [r3]
    9a2c:	2a00      	cmp	r2, #0
    9a2e:	d1f8      	bne.n	9a22 <atomic_and.constprop.0.isra.0+0x6>
    9a30:	f3bf 8f5b 	dmb	ish
}
    9a34:	4770      	bx	lr
    9a36:	bf00      	nop
    9a38:	200021ec 	.word	0x200021ec

00009a3c <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9a3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9a40:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    9a44:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9a46:	bf02      	ittt	eq
    9a48:	4b03      	ldreq	r3, [pc, #12]	; (9a58 <usbd_dma_pending_clear+0x1c>)
    9a4a:	2200      	moveq	r2, #0
    9a4c:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    9a50:	4b02      	ldr	r3, [pc, #8]	; (9a5c <usbd_dma_pending_clear+0x20>)
    9a52:	2200      	movs	r2, #0
    9a54:	701a      	strb	r2, [r3, #0]
}
    9a56:	4770      	bx	lr
    9a58:	40027000 	.word	0x40027000
    9a5c:	20002527 	.word	0x20002527

00009a60 <nrf_usbd_ep0in_dma_handler>:
{
    9a60:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    9a62:	f7ff ffeb 	bl	9a3c <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9a66:	4b08      	ldr	r3, [pc, #32]	; (9a88 <nrf_usbd_ep0in_dma_handler+0x28>)
    9a68:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    9a6c:	2a03      	cmp	r2, #3
    9a6e:	d105      	bne.n	9a7c <nrf_usbd_ep0in_dma_handler+0x1c>
}
    9a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9a74:	f06f 0001 	mvn.w	r0, #1
    9a78:	f7ff bfd0 	b.w	9a1c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    9a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9a80:	2b00      	cmp	r3, #0
    9a82:	d0f5      	beq.n	9a70 <nrf_usbd_ep0in_dma_handler+0x10>
}
    9a84:	bd08      	pop	{r3, pc}
    9a86:	bf00      	nop
    9a88:	200020cc 	.word	0x200020cc

00009a8c <usbd_ep_data_handler>:
{
    9a8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    9a8e:	2201      	movs	r2, #1
    9a90:	fa02 f501 	lsl.w	r5, r2, r1
    9a94:	491c      	ldr	r1, [pc, #112]	; (9b08 <usbd_ep_data_handler+0x7c>)
    9a96:	4e1d      	ldr	r6, [pc, #116]	; (9b0c <usbd_ep_data_handler+0x80>)
    9a98:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    9a9a:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    9a9e:	ea43 0305 	orr.w	r3, r3, r5
{
    9aa2:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    9aa4:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    9aa6:	d024      	beq.n	9af2 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9aa8:	f000 020f 	and.w	r2, r0, #15
    9aac:	4b18      	ldr	r3, [pc, #96]	; (9b10 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9aae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9ab2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9ab6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9aba:	681a      	ldr	r2, [r3, #0]
    if (ret)
    9abc:	b132      	cbz	r2, 9acc <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    9abe:	2200      	movs	r2, #0
    9ac0:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    9ac2:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    9ac4:	681b      	ldr	r3, [r3, #0]
    9ac6:	d011      	beq.n	9aec <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    9ac8:	f004 f95b 	bl	dd82 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    9acc:	6833      	ldr	r3, [r6, #0]
    9ace:	402b      	ands	r3, r5
    9ad0:	d10a      	bne.n	9ae8 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9ad2:	2206      	movs	r2, #6
    9ad4:	f88d 2004 	strb.w	r2, [sp, #4]
    9ad8:	f88d 4006 	strb.w	r4, [sp, #6]
    9adc:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9ae0:	4b0c      	ldr	r3, [pc, #48]	; (9b14 <usbd_ep_data_handler+0x88>)
    9ae2:	a801      	add	r0, sp, #4
    9ae4:	681b      	ldr	r3, [r3, #0]
    9ae6:	4798      	blx	r3
}
    9ae8:	b002      	add	sp, #8
    9aea:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    9aec:	f7ff ffb8 	bl	9a60 <nrf_usbd_ep0in_dma_handler>
    9af0:	e7ec      	b.n	9acc <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    9af2:	6833      	ldr	r3, [r6, #0]
    9af4:	421d      	tst	r5, r3
    9af6:	d1f7      	bne.n	9ae8 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    9af8:	2306      	movs	r3, #6
    9afa:	f88d 3004 	strb.w	r3, [sp, #4]
    9afe:	f88d 0006 	strb.w	r0, [sp, #6]
    9b02:	f88d 2007 	strb.w	r2, [sp, #7]
    9b06:	e7eb      	b.n	9ae0 <usbd_ep_data_handler+0x54>
    9b08:	200021f0 	.word	0x200021f0
    9b0c:	200021ec 	.word	0x200021ec
    9b10:	0000f0c2 	.word	0x0000f0c2
    9b14:	200021f4 	.word	0x200021f4

00009b18 <ev_setup_data_handler>:
{
    9b18:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    9b1a:	4b05      	ldr	r3, [pc, #20]	; (9b30 <ev_setup_data_handler+0x18>)
    9b1c:	781a      	ldrb	r2, [r3, #0]
    9b1e:	4610      	mov	r0, r2
    9b20:	f004 f926 	bl	dd70 <ep2bit>
}
    9b24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    9b28:	4601      	mov	r1, r0
    9b2a:	4610      	mov	r0, r2
    9b2c:	f7ff bfae 	b.w	9a8c <usbd_ep_data_handler>
    9b30:	20002528 	.word	0x20002528

00009b34 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    9b34:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    9b36:	f7ff ff81 	bl	9a3c <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9b3a:	4b0c      	ldr	r3, [pc, #48]	; (9b6c <ev_dma_epout8_handler+0x38>)
    9b3c:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    9b40:	2a03      	cmp	r2, #3
    9b42:	d010      	beq.n	9b66 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    9b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    9b48:	b96b      	cbnz	r3, 9b66 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9b4a:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    9b4e:	f7ff ff65 	bl	9a1c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9b52:	2306      	movs	r3, #6
    9b54:	f88d 3004 	strb.w	r3, [sp, #4]
    9b58:	2308      	movs	r3, #8
    9b5a:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    9b5e:	4b04      	ldr	r3, [pc, #16]	; (9b70 <ev_dma_epout8_handler+0x3c>)
    9b60:	a801      	add	r0, sp, #4
    9b62:	681b      	ldr	r3, [r3, #0]
    9b64:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    9b66:	b003      	add	sp, #12
    9b68:	f85d fb04 	ldr.w	pc, [sp], #4
    9b6c:	200020cc 	.word	0x200020cc
    9b70:	200021f4 	.word	0x200021f4

00009b74 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    9b74:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    9b76:	f7ff ff61 	bl	9a3c <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9b7a:	4b10      	ldr	r3, [pc, #64]	; (9bbc <ev_dma_epin8_handler+0x48>)
    9b7c:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    9b80:	2a03      	cmp	r2, #3
    9b82:	d106      	bne.n	9b92 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9b84:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    9b88:	b003      	add	sp, #12
    9b8a:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9b8e:	f7ff bf45 	b.w	9a1c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    9b92:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    9b96:	b96b      	cbnz	r3, 9bb4 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9b98:	f46f 7080 	mvn.w	r0, #256	; 0x100
    9b9c:	f7ff ff3e 	bl	9a1c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9ba0:	2306      	movs	r3, #6
    9ba2:	f88d 3004 	strb.w	r3, [sp, #4]
    9ba6:	2388      	movs	r3, #136	; 0x88
    9ba8:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    9bac:	4b04      	ldr	r3, [pc, #16]	; (9bc0 <ev_dma_epin8_handler+0x4c>)
    9bae:	a801      	add	r0, sp, #4
    9bb0:	681b      	ldr	r3, [r3, #0]
    9bb2:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    9bb4:	b003      	add	sp, #12
    9bb6:	f85d fb04 	ldr.w	pc, [sp], #4
    9bba:	bf00      	nop
    9bbc:	200020cc 	.word	0x200020cc
    9bc0:	200021f4 	.word	0x200021f4

00009bc4 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    9bc4:	4a02      	ldr	r2, [pc, #8]	; (9bd0 <nrfx_usbd_uninit+0xc>)
    9bc6:	2300      	movs	r3, #0
    9bc8:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    9bca:	4a02      	ldr	r2, [pc, #8]	; (9bd4 <nrfx_usbd_uninit+0x10>)
    9bcc:	7013      	strb	r3, [r2, #0]
    return;
}
    9bce:	4770      	bx	lr
    9bd0:	200021f4 	.word	0x200021f4
    9bd4:	2000252a 	.word	0x2000252a

00009bd8 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    9bd8:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    9bda:	4b4c      	ldr	r3, [pc, #304]	; (9d0c <nrfx_usbd_enable+0x134>)
    9bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9be0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    9be4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    9be8:	f7ff fe0a 	bl	9800 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    9bec:	b108      	cbz	r0, 9bf2 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    9bee:	f7ff fe79 	bl	98e4 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9bf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9bf6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    9bfa:	2b08      	cmp	r3, #8
    9bfc:	d119      	bne.n	9c32 <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    9bfe:	f04f 0320 	mov.w	r3, #32
    9c02:	f3ef 8011 	mrs	r0, BASEPRI
    9c06:	f383 8812 	msr	BASEPRI_MAX, r3
    9c0a:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9c0e:	4b40      	ldr	r3, [pc, #256]	; (9d10 <nrfx_usbd_enable+0x138>)
    9c10:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    9c14:	22c0      	movs	r2, #192	; 0xc0
    9c16:	2900      	cmp	r1, #0
    9c18:	d170      	bne.n	9cfc <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9c1a:	f249 3175 	movw	r1, #37749	; 0x9375
    9c1e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    9c22:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9c26:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    9c2a:	f380 8811 	msr	BASEPRI, r0
    9c2e:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    9c32:	4b36      	ldr	r3, [pc, #216]	; (9d0c <nrfx_usbd_enable+0x134>)
    9c34:	2201      	movs	r2, #1
    9c36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9c3a:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    9c3e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    9c42:	0512      	lsls	r2, r2, #20
    9c44:	d5fb      	bpl.n	9c3e <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
    9c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9c4a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    9c4e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9c52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9c56:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    9c5a:	2b08      	cmp	r3, #8
    9c5c:	d118      	bne.n	9c90 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
    9c5e:	f04f 0320 	mov.w	r3, #32
    9c62:	f3ef 8011 	mrs	r0, BASEPRI
    9c66:	f383 8812 	msr	BASEPRI_MAX, r3
    9c6a:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9c6e:	4b28      	ldr	r3, [pc, #160]	; (9d10 <nrfx_usbd_enable+0x138>)
    9c70:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    9c74:	2900      	cmp	r1, #0
    9c76:	d144      	bne.n	9d02 <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9c78:	f249 3275 	movw	r2, #37749	; 0x9375
    9c7c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9c80:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9c84:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    9c88:	f380 8811 	msr	BASEPRI, r0
    9c8c:	f3bf 8f6f 	isb	sy
    9c90:	f7ff fdb6 	bl	9800 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    9c94:	b130      	cbz	r0, 9ca4 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
    9c96:	f7ff fe45 	bl	9924 <usbd_errata_187_211_end>
    9c9a:	f7ff fdb1 	bl	9800 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    9c9e:	b108      	cbz	r0, 9ca4 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
    9ca0:	f7ff fe20 	bl	98e4 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9ca4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9ca8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    9cac:	2b08      	cmp	r3, #8
    9cae:	4b17      	ldr	r3, [pc, #92]	; (9d0c <nrfx_usbd_enable+0x134>)
    9cb0:	d10a      	bne.n	9cc8 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    9cb2:	f240 72e3 	movw	r2, #2019	; 0x7e3
    9cb6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    9cba:	2240      	movs	r2, #64	; 0x40
    9cbc:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    9cc0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    9cc4:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    9cc8:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    9cca:	2280      	movs	r2, #128	; 0x80
    9ccc:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    9cd0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    9cd4:	4b0f      	ldr	r3, [pc, #60]	; (9d14 <nrfx_usbd_enable+0x13c>)
    9cd6:	f240 12ff 	movw	r2, #511	; 0x1ff
    9cda:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    9cdc:	4b0e      	ldr	r3, [pc, #56]	; (9d18 <nrfx_usbd_enable+0x140>)
    9cde:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    9ce0:	f7ff feac 	bl	9a3c <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    9ce4:	4b0d      	ldr	r3, [pc, #52]	; (9d1c <nrfx_usbd_enable+0x144>)
    9ce6:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    9ce8:	4b0d      	ldr	r3, [pc, #52]	; (9d20 <nrfx_usbd_enable+0x148>)
    9cea:	2202      	movs	r2, #2
    9cec:	701a      	strb	r2, [r3, #0]
    9cee:	f7ff fd87 	bl	9800 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    9cf2:	b150      	cbz	r0, 9d0a <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    9cf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    9cf8:	f7ff be14 	b.w	9924 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    9cfc:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    9d00:	e793      	b.n	9c2a <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9d02:	2200      	movs	r2, #0
    9d04:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    9d08:	e7be      	b.n	9c88 <nrfx_usbd_enable+0xb0>
}
    9d0a:	bd08      	pop	{r3, pc}
    9d0c:	40027000 	.word	0x40027000
    9d10:	4006e000 	.word	0x4006e000
    9d14:	200021f0 	.word	0x200021f0
    9d18:	200021ec 	.word	0x200021ec
    9d1c:	20002528 	.word	0x20002528
    9d20:	2000252a 	.word	0x2000252a

00009d24 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    9d24:	4b0a      	ldr	r3, [pc, #40]	; (9d50 <nrfx_usbd_start+0x2c>)
    9d26:	2200      	movs	r2, #0
{
    9d28:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    9d2a:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    9d2c:	4a09      	ldr	r2, [pc, #36]	; (9d54 <nrfx_usbd_start+0x30>)
    9d2e:	4b0a      	ldr	r3, [pc, #40]	; (9d58 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    9d30:	4c0a      	ldr	r4, [pc, #40]	; (9d5c <nrfx_usbd_start+0x38>)
    9d32:	2800      	cmp	r0, #0
    9d34:	bf08      	it	eq
    9d36:	4613      	moveq	r3, r2
    9d38:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    9d3c:	2027      	movs	r0, #39	; 0x27
    9d3e:	f7f9 ff79 	bl	3c34 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    9d42:	2301      	movs	r3, #1
    9d44:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    9d48:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    9d4c:	bd10      	pop	{r4, pc}
    9d4e:	bf00      	nop
    9d50:	20002529 	.word	0x20002529
    9d54:	01c01407 	.word	0x01c01407
    9d58:	01e01407 	.word	0x01e01407
    9d5c:	40027000 	.word	0x40027000

00009d60 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    9d60:	4b03      	ldr	r3, [pc, #12]	; (9d70 <nrfx_usbd_is_enabled+0x10>)
    9d62:	7818      	ldrb	r0, [r3, #0]
}
    9d64:	2801      	cmp	r0, #1
    9d66:	bf94      	ite	ls
    9d68:	2000      	movls	r0, #0
    9d6a:	2001      	movhi	r0, #1
    9d6c:	4770      	bx	lr
    9d6e:	bf00      	nop
    9d70:	2000252a 	.word	0x2000252a

00009d74 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    9d74:	b510      	push	{r4, lr}
	__asm__ volatile(
    9d76:	f04f 0320 	mov.w	r3, #32
    9d7a:	f3ef 8111 	mrs	r1, BASEPRI
    9d7e:	f383 8812 	msr	BASEPRI_MAX, r3
    9d82:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    9d86:	4b0f      	ldr	r3, [pc, #60]	; (9dc4 <nrfx_usbd_suspend+0x50>)
    9d88:	781b      	ldrb	r3, [r3, #0]
    9d8a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9d8e:	b193      	cbz	r3, 9db6 <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    9d90:	4b0d      	ldr	r3, [pc, #52]	; (9dc8 <nrfx_usbd_suspend+0x54>)
    9d92:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    9d96:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    9d9a:	d10c      	bne.n	9db6 <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    9d9c:	2401      	movs	r4, #1
    9d9e:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9da2:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    9da6:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9daa:	05a4      	lsls	r4, r4, #22
    9dac:	d504      	bpl.n	9db8 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    9dae:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9db2:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    9db6:	2000      	movs	r0, #0
	__asm__ volatile(
    9db8:	f381 8811 	msr	BASEPRI, r1
    9dbc:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    9dc0:	bd10      	pop	{r4, pc}
    9dc2:	bf00      	nop
    9dc4:	20002529 	.word	0x20002529
    9dc8:	40027000 	.word	0x40027000

00009dcc <nrfx_usbd_init>:
{
    9dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    9dce:	4b1c      	ldr	r3, [pc, #112]	; (9e40 <nrfx_usbd_init+0x74>)
    9dd0:	781c      	ldrb	r4, [r3, #0]
    9dd2:	bb94      	cbnz	r4, 9e3a <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    9dd4:	4a1b      	ldr	r2, [pc, #108]	; (9e44 <nrfx_usbd_init+0x78>)
    9dd6:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    9dd8:	2201      	movs	r2, #1
    9dda:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9ddc:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    9de0:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    9de2:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9de6:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    9dea:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9dec:	bf14      	ite	ne
    9dee:	4639      	movne	r1, r7
    9df0:	2140      	moveq	r1, #64	; 0x40
    9df2:	4628      	mov	r0, r5
    9df4:	f003 fff4 	bl	dde0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    9df8:	4628      	mov	r0, r5
    9dfa:	f7ff fd15 	bl	9828 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9dfe:	3401      	adds	r4, #1
    9e00:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    9e02:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    9e04:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    9e06:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9e08:	d1eb      	bne.n	9de2 <nrfx_usbd_init+0x16>
    9e0a:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9e0c:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    9e10:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9e12:	f014 0f08 	tst.w	r4, #8
    9e16:	b2e6      	uxtb	r6, r4
    9e18:	bf14      	ite	ne
    9e1a:	4639      	movne	r1, r7
    9e1c:	2140      	moveq	r1, #64	; 0x40
    9e1e:	4630      	mov	r0, r6
    9e20:	f003 ffde 	bl	dde0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    9e24:	4630      	mov	r0, r6
    9e26:	f7ff fcff 	bl	9828 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    9e2a:	3401      	adds	r4, #1
    9e2c:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    9e2e:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    9e30:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    9e32:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    9e34:	d1ed      	bne.n	9e12 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    9e36:	4804      	ldr	r0, [pc, #16]	; (9e48 <nrfx_usbd_init+0x7c>)
}
    9e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    9e3a:	4804      	ldr	r0, [pc, #16]	; (9e4c <nrfx_usbd_init+0x80>)
    9e3c:	e7fc      	b.n	9e38 <nrfx_usbd_init+0x6c>
    9e3e:	bf00      	nop
    9e40:	2000252a 	.word	0x2000252a
    9e44:	200021f4 	.word	0x200021f4
    9e48:	0bad0000 	.word	0x0bad0000
    9e4c:	0bad0005 	.word	0x0bad0005

00009e50 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    9e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e54:	4604      	mov	r4, r0
	__asm__ volatile(
    9e56:	f04f 0320 	mov.w	r3, #32
    9e5a:	f3ef 8611 	mrs	r6, BASEPRI
    9e5e:	f383 8812 	msr	BASEPRI_MAX, r3
    9e62:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    9e66:	f010 090f 	ands.w	r9, r0, #15
    9e6a:	d103      	bne.n	9e74 <nrfx_usbd_ep_transfer+0x24>
    9e6c:	4b27      	ldr	r3, [pc, #156]	; (9f0c <nrfx_usbd_ep_transfer+0xbc>)
    9e6e:	781b      	ldrb	r3, [r3, #0]
    9e70:	4283      	cmp	r3, r0
    9e72:	d147      	bne.n	9f04 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9e74:	4b26      	ldr	r3, [pc, #152]	; (9f10 <nrfx_usbd_ep_transfer+0xc0>)
    9e76:	4f27      	ldr	r7, [pc, #156]	; (9f14 <nrfx_usbd_ep_transfer+0xc4>)
    9e78:	681a      	ldr	r2, [r3, #0]
    9e7a:	683b      	ldr	r3, [r7, #0]
    9e7c:	43d2      	mvns	r2, r2
    9e7e:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    9e80:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9e82:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    9e84:	f003 ff74 	bl	dd70 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9e88:	f04f 0801 	mov.w	r8, #1
    9e8c:	fa08 f800 	lsl.w	r8, r8, r0
    9e90:	ea12 0f08 	tst.w	r2, r8
    9e94:	d138      	bne.n	9f08 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    9e96:	4620      	mov	r0, r4
    9e98:	f7ff fcc6 	bl	9828 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9e9c:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    9e9e:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    9ea0:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9ea2:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    9ea6:	d529      	bpl.n	9efc <nrfx_usbd_ep_transfer+0xac>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    9ea8:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9eaa:	6888      	ldr	r0, [r1, #8]
    9eac:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    9eb0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9eb4:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    9eb8:	d11d      	bne.n	9ef6 <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9eba:	4a17      	ldr	r2, [pc, #92]	; (9f18 <nrfx_usbd_ep_transfer+0xc8>)
    9ebc:	4c17      	ldr	r4, [pc, #92]	; (9f1c <nrfx_usbd_ep_transfer+0xcc>)
    9ebe:	2800      	cmp	r0, #0
    9ec0:	bf08      	it	eq
    9ec2:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9ec4:	4816      	ldr	r0, [pc, #88]	; (9f20 <nrfx_usbd_ep_transfer+0xd0>)
    9ec6:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    9ec8:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    9eca:	c907      	ldmia	r1, {r0, r1, r2}
    9ecc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    9ed0:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    9ed2:	2300      	movs	r3, #0
    9ed4:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    9ed6:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    9ed8:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    9eda:	4812      	ldr	r0, [pc, #72]	; (9f24 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    9edc:	ea43 0308 	orr.w	r3, r3, r8
    9ee0:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9ee2:	4b11      	ldr	r3, [pc, #68]	; (9f28 <nrfx_usbd_ep_transfer+0xd8>)
    9ee4:	2280      	movs	r2, #128	; 0x80
    9ee6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    9eea:	f386 8811 	msr	BASEPRI, r6
    9eee:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    9ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9ef6:	4a0d      	ldr	r2, [pc, #52]	; (9f2c <nrfx_usbd_ep_transfer+0xdc>)
    9ef8:	4c0d      	ldr	r4, [pc, #52]	; (9f30 <nrfx_usbd_ep_transfer+0xe0>)
    9efa:	e7e0      	b.n	9ebe <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    9efc:	4a0d      	ldr	r2, [pc, #52]	; (9f34 <nrfx_usbd_ep_transfer+0xe4>)
    9efe:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    9f00:	4a0d      	ldr	r2, [pc, #52]	; (9f38 <nrfx_usbd_ep_transfer+0xe8>)
    9f02:	e7e1      	b.n	9ec8 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    9f04:	480d      	ldr	r0, [pc, #52]	; (9f3c <nrfx_usbd_ep_transfer+0xec>)
    9f06:	e7f0      	b.n	9eea <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
    9f08:	480d      	ldr	r0, [pc, #52]	; (9f40 <nrfx_usbd_ep_transfer+0xf0>)
    9f0a:	e7ee      	b.n	9eea <nrfx_usbd_ep_transfer+0x9a>
    9f0c:	20002528 	.word	0x20002528
    9f10:	200021f0 	.word	0x200021f0
    9f14:	200021ec 	.word	0x200021ec
    9f18:	0000dd49 	.word	0x0000dd49
    9f1c:	0000dd27 	.word	0x0000dd27
    9f20:	20002060 	.word	0x20002060
    9f24:	0bad0000 	.word	0x0bad0000
    9f28:	e000e100 	.word	0xe000e100
    9f2c:	0000999d 	.word	0x0000999d
    9f30:	00009965 	.word	0x00009965
    9f34:	20001ff4 	.word	0x20001ff4
    9f38:	0000dcf5 	.word	0x0000dcf5
    9f3c:	0bad000a 	.word	0x0bad000a
    9f40:	0bad000b 	.word	0x0bad000b

00009f44 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9f44:	f010 0f08 	tst.w	r0, #8
    9f48:	4b07      	ldr	r3, [pc, #28]	; (9f68 <nrfx_usbd_epout_size_get+0x24>)
    9f4a:	d006      	beq.n	9f5a <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    9f4c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    9f50:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    9f54:	bf18      	it	ne
    9f56:	2000      	movne	r0, #0
    9f58:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    9f5a:	f000 000f 	and.w	r0, r0, #15
    9f5e:	f500 7094 	add.w	r0, r0, #296	; 0x128
    9f62:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    9f66:	4770      	bx	lr
    9f68:	40027000 	.word	0x40027000

00009f6c <usbd_dmareq_process>:
{
    9f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    9f70:	4e59      	ldr	r6, [pc, #356]	; (a0d8 <usbd_dmareq_process+0x16c>)
    9f72:	7833      	ldrb	r3, [r6, #0]
{
    9f74:	b085      	sub	sp, #20
    if (!m_dma_pending)
    9f76:	2b00      	cmp	r3, #0
    9f78:	d173      	bne.n	a062 <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    9f7a:	f8df 8160 	ldr.w	r8, [pc, #352]	; a0dc <usbd_dmareq_process+0x170>
    9f7e:	4d58      	ldr	r5, [pc, #352]	; (a0e0 <usbd_dmareq_process+0x174>)
    9f80:	f8d8 4000 	ldr.w	r4, [r8]
    9f84:	682b      	ldr	r3, [r5, #0]
    9f86:	401c      	ands	r4, r3
    9f88:	d06b      	beq.n	a062 <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    9f8a:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    9f8e:	bf14      	ite	ne
    9f90:	fa93 f4a3 	rbitne	r4, r3
    9f94:	fa94 f4a4 	rbiteq	r4, r4
    9f98:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9f9c:	f04f 0901 	mov.w	r9, #1
    9fa0:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9fa4:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9fa6:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9faa:	d95d      	bls.n	a068 <usbd_dmareq_process+0xfc>
    9fac:	3c10      	subs	r4, #16
    9fae:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    9fb0:	4620      	mov	r0, r4
    9fb2:	f7ff fc39 	bl	9828 <ep_state_access>
    9fb6:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    9fb8:	4620      	mov	r0, r4
    9fba:	f7ff ffc3 	bl	9f44 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    9fbe:	f8da 7000 	ldr.w	r7, [sl]
    9fc2:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    9fc6:	f8da 1004 	ldr.w	r1, [sl, #4]
    9fca:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    9fcc:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    9fce:	a802      	add	r0, sp, #8
    9fd0:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    9fd2:	9b02      	ldr	r3, [sp, #8]
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	d153      	bne.n	a080 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
    9fd8:	b908      	cbnz	r0, 9fde <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    9fda:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9fde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
    9fe2:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
    9fe4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    9fe8:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    9fea:	bf02      	ittt	eq
    9fec:	4b3d      	ldreq	r3, [pc, #244]	; (a0e4 <usbd_dmareq_process+0x178>)
    9fee:	2282      	moveq	r2, #130	; 0x82
    9ff0:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    9ff4:	2301      	movs	r3, #1
    9ff6:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    9ff8:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    9ffa:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    9ffc:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    9ffe:	ea03 0309 	and.w	r3, r3, r9
    a002:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    a004:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    a008:	2900      	cmp	r1, #0
    a00a:	4413      	add	r3, r2
    a00c:	f8ca 3008 	str.w	r3, [sl, #8]
    a010:	f004 0508 	and.w	r5, r4, #8
    a014:	4b33      	ldr	r3, [pc, #204]	; (a0e4 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a016:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    a01a:	da4e      	bge.n	a0ba <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
    a01c:	2d00      	cmp	r5, #0
    a01e:	d044      	beq.n	a0aa <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
    a020:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    a024:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    a028:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a02a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a02e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a032:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a036:	2201      	movs	r2, #1
    a038:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a03a:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    a03c:	4a2a      	ldr	r2, [pc, #168]	; (a0e8 <usbd_dmareq_process+0x17c>)
    a03e:	4b2b      	ldr	r3, [pc, #172]	; (a0ec <usbd_dmareq_process+0x180>)
    a040:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    a044:	bf38      	it	cc
    a046:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a048:	4926      	ldr	r1, [pc, #152]	; (a0e4 <usbd_dmareq_process+0x178>)
    a04a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a04e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a052:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a056:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    a058:	b91a      	cbnz	r2, a062 <usbd_dmareq_process+0xf6>
    a05a:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    a05e:	2a00      	cmp	r2, #0
    a060:	d0f9      	beq.n	a056 <usbd_dmareq_process+0xea>
}
    a062:	b005      	add	sp, #20
    a064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a068:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    a06c:	4620      	mov	r0, r4
    a06e:	f7ff fbdb 	bl	9828 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    a072:	6803      	ldr	r3, [r0, #0]
    a074:	8982      	ldrh	r2, [r0, #12]
    a076:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    a078:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    a07a:	a802      	add	r0, sp, #8
    a07c:	4798      	blx	r3
    a07e:	e7ab      	b.n	9fd8 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    a080:	9b03      	ldr	r3, [sp, #12]
    a082:	459b      	cmp	fp, r3
    a084:	d9a8      	bls.n	9fd8 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    a086:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a088:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    a08a:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a08e:	f7ff fcc5 	bl	9a1c <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a092:	2306      	movs	r3, #6
    a094:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    a098:	4b15      	ldr	r3, [pc, #84]	; (a0f0 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a09a:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    a09e:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a0a0:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    a0a4:	a801      	add	r0, sp, #4
    a0a6:	4798      	blx	r3
                    continue;
    a0a8:	e76a      	b.n	9f80 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    a0aa:	2514      	movs	r5, #20
    a0ac:	fb05 3304 	mla	r3, r5, r4, r3
    a0b0:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    a0b4:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    a0b8:	e7b6      	b.n	a028 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
    a0ba:	b12d      	cbz	r5, a0c8 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
    a0bc:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    a0c0:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    a0c4:	2328      	movs	r3, #40	; 0x28
    a0c6:	e7b0      	b.n	a02a <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
    a0c8:	2514      	movs	r5, #20
    a0ca:	fb05 3304 	mla	r3, r5, r4, r3
    a0ce:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    a0d2:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    a0d6:	e7f5      	b.n	a0c4 <usbd_dmareq_process+0x158>
    a0d8:	20002527 	.word	0x20002527
    a0dc:	200021ec 	.word	0x200021ec
    a0e0:	200021f0 	.word	0x200021f0
    a0e4:	40027000 	.word	0x40027000
    a0e8:	0000f0b0 	.word	0x0000f0b0
    a0ec:	0000f0c2 	.word	0x0000f0c2
    a0f0:	200021f4 	.word	0x200021f4

0000a0f4 <ev_epdata_handler>:
{
    a0f4:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    a0f6:	4b0f      	ldr	r3, [pc, #60]	; (a134 <ev_epdata_handler+0x40>)
    a0f8:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    a0fc:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    a100:	2501      	movs	r5, #1
    while (dataepstatus)
    a102:	b91c      	cbnz	r4, a10c <ev_epdata_handler+0x18>
}
    a104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    a108:	f7ff bf30 	b.w	9f6c <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    a10c:	fa94 f3a4 	rbit	r3, r4
    a110:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a114:	2b0f      	cmp	r3, #15
    a116:	bfc8      	it	gt
    a118:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    a11c:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a11e:	bfd4      	ite	le
    a120:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    a124:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    a126:	fa05 f303 	lsl.w	r3, r5, r3
    a12a:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    a12e:	f7ff fcad 	bl	9a8c <usbd_ep_data_handler>
    a132:	e7e6      	b.n	a102 <ev_epdata_handler+0xe>
    a134:	40027000 	.word	0x40027000

0000a138 <nrf_usbd_epout_dma_handler>:
{
    a138:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
    a13a:	f7ff fc7f 	bl	9a3c <usbd_dma_pending_clear>
{
    a13e:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a140:	f7ff fb72 	bl	9828 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a144:	7b83      	ldrb	r3, [r0, #14]
    a146:	2b03      	cmp	r3, #3
    a148:	d10d      	bne.n	a166 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a14a:	4620      	mov	r0, r4
    a14c:	f003 fe10 	bl	dd70 <ep2bit>
    a150:	2301      	movs	r3, #1
    a152:	fa03 f000 	lsl.w	r0, r3, r0
    a156:	43c0      	mvns	r0, r0
    a158:	f7ff fc60 	bl	9a1c <atomic_and.constprop.0.isra.0>
}
    a15c:	b003      	add	sp, #12
    a15e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    a162:	f7ff bf03 	b.w	9f6c <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    a166:	6805      	ldr	r5, [r0, #0]
    a168:	2d00      	cmp	r5, #0
    a16a:	d1f7      	bne.n	a15c <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a16c:	4620      	mov	r0, r4
    a16e:	f003 fdff 	bl	dd70 <ep2bit>
    a172:	2301      	movs	r3, #1
    a174:	fa03 f000 	lsl.w	r0, r3, r0
    a178:	43c0      	mvns	r0, r0
    a17a:	f7ff fc4f 	bl	9a1c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a17e:	2306      	movs	r3, #6
    a180:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    a184:	4b04      	ldr	r3, [pc, #16]	; (a198 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a186:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    a18a:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a18c:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    a190:	a801      	add	r0, sp, #4
    a192:	4798      	blx	r3
    a194:	e7e2      	b.n	a15c <nrf_usbd_epout_dma_handler+0x24>
    a196:	bf00      	nop
    a198:	200021f4 	.word	0x200021f4

0000a19c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    a19c:	4b02      	ldr	r3, [pc, #8]	; (a1a8 <nrfx_usbd_ep_stall+0xc>)
    a19e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    a1a2:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    a1a6:	4770      	bx	lr
    a1a8:	40027000 	.word	0x40027000

0000a1ac <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    a1ac:	0702      	lsls	r2, r0, #28
    a1ae:	d413      	bmi.n	a1d8 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    a1b0:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    a1b4:	f010 0f80 	tst.w	r0, #128	; 0x80
    a1b8:	4a08      	ldr	r2, [pc, #32]	; (a1dc <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    a1ba:	bf0b      	itete	eq
    a1bc:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    a1c0:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    a1c4:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    a1c8:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    a1cc:	bf08      	it	eq
    a1ce:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    a1d0:	1e43      	subs	r3, r0, #1
    a1d2:	4258      	negs	r0, r3
    a1d4:	4158      	adcs	r0, r3
    a1d6:	4770      	bx	lr
        return false;
    a1d8:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    a1da:	4770      	bx	lr
    a1dc:	40027000 	.word	0x40027000

0000a1e0 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    a1e0:	4b04      	ldr	r3, [pc, #16]	; (a1f4 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    a1e2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    a1e6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    a1ea:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    a1ee:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    a1f2:	4770      	bx	lr
    a1f4:	40027000 	.word	0x40027000

0000a1f8 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    a1f8:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    a1fa:	2208      	movs	r2, #8
    a1fc:	2100      	movs	r1, #0
{
    a1fe:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    a200:	f003 f909 	bl	d416 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    a204:	4b0e      	ldr	r3, [pc, #56]	; (a240 <nrfx_usbd_setup_get+0x48>)
    a206:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    a20a:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    a20c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    a210:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    a212:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    a216:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    a21a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    a21e:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    a220:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    a224:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    a228:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    a22c:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    a22e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    a232:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    a236:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    a23a:	80e3      	strh	r3, [r4, #6]
}
    a23c:	bd10      	pop	{r4, pc}
    a23e:	bf00      	nop
    a240:	40027000 	.word	0x40027000

0000a244 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a244:	4b02      	ldr	r3, [pc, #8]	; (a250 <nrfx_usbd_setup_data_clear+0xc>)
    a246:	2201      	movs	r2, #1
    a248:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a24a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    a24c:	4770      	bx	lr
    a24e:	bf00      	nop
    a250:	40027000 	.word	0x40027000

0000a254 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a254:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    a256:	f7ff fbf1 	bl	9a3c <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a25a:	4b10      	ldr	r3, [pc, #64]	; (a29c <ev_dma_epout0_handler+0x48>)
    a25c:	7b9a      	ldrb	r2, [r3, #14]
    a25e:	2a03      	cmp	r2, #3
    a260:	d106      	bne.n	a270 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a262:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a266:	b002      	add	sp, #8
    a268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a26c:	f7ff bbd6 	b.w	9a1c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    a270:	681c      	ldr	r4, [r3, #0]
    a272:	b974      	cbnz	r4, a292 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a274:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    a278:	f7ff fbd0 	bl	9a1c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a27c:	2306      	movs	r3, #6
    a27e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    a282:	4b07      	ldr	r3, [pc, #28]	; (a2a0 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a284:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    a288:	681b      	ldr	r3, [r3, #0]
    a28a:	a801      	add	r0, sp, #4
    a28c:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a28e:	b002      	add	sp, #8
    a290:	bd10      	pop	{r4, pc}
    a292:	b002      	add	sp, #8
    a294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    a298:	f7ff bfd4 	b.w	a244 <nrfx_usbd_setup_data_clear>
    a29c:	200020cc 	.word	0x200020cc
    a2a0:	200021f4 	.word	0x200021f4

0000a2a4 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a2a4:	4b02      	ldr	r3, [pc, #8]	; (a2b0 <nrfx_usbd_setup_clear+0xc>)
    a2a6:	2201      	movs	r2, #1
    a2a8:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    a2ac:	4770      	bx	lr
    a2ae:	bf00      	nop
    a2b0:	40027000 	.word	0x40027000

0000a2b4 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a2b4:	4b02      	ldr	r3, [pc, #8]	; (a2c0 <nrfx_usbd_setup_stall+0xc>)
    a2b6:	2201      	movs	r2, #1
    a2b8:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    a2bc:	4770      	bx	lr
    a2be:	bf00      	nop
    a2c0:	40027000 	.word	0x40027000

0000a2c4 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    a2c4:	4b01      	ldr	r3, [pc, #4]	; (a2cc <nrfx_usbd_last_setup_dir_get+0x8>)
    a2c6:	7818      	ldrb	r0, [r3, #0]
    a2c8:	4770      	bx	lr
    a2ca:	bf00      	nop
    a2cc:	20002528 	.word	0x20002528

0000a2d0 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    a2d0:	b510      	push	{r4, lr}
    a2d2:	4602      	mov	r2, r0
	__asm__ volatile(
    a2d4:	f04f 0320 	mov.w	r3, #32
    a2d8:	f3ef 8411 	mrs	r4, BASEPRI
    a2dc:	f383 8812 	msr	BASEPRI_MAX, r3
    a2e0:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    a2e4:	f003 fd44 	bl	dd70 <ep2bit>
    a2e8:	490d      	ldr	r1, [pc, #52]	; (a320 <nrfx_usbd_transfer_out_drop+0x50>)
    a2ea:	2301      	movs	r3, #1
    a2ec:	fa03 f000 	lsl.w	r0, r3, r0
    a2f0:	680b      	ldr	r3, [r1, #0]
    a2f2:	ea23 0300 	bic.w	r3, r3, r0
    a2f6:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    a2f8:	f012 0108 	ands.w	r1, r2, #8
    a2fc:	d10a      	bne.n	a314 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    a2fe:	f002 030f 	and.w	r3, r2, #15
    a302:	009b      	lsls	r3, r3, #2
    a304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a308:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    a30c:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    a310:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    a314:	f384 8811 	msr	BASEPRI, r4
    a318:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    a31c:	bd10      	pop	{r4, pc}
    a31e:	bf00      	nop
    a320:	200021f0 	.word	0x200021f0

0000a324 <usbd_ep_abort>:
{
    a324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a326:	4601      	mov	r1, r0
	__asm__ volatile(
    a328:	f04f 0320 	mov.w	r3, #32
    a32c:	f3ef 8511 	mrs	r5, BASEPRI
    a330:	f383 8812 	msr	BASEPRI_MAX, r3
    a334:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a338:	f7ff fa76 	bl	9828 <ep_state_access>
    a33c:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a33e:	4608      	mov	r0, r1
    a340:	f003 fd16 	bl	dd70 <ep2bit>
    a344:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    a346:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a34a:	fa02 f200 	lsl.w	r2, r2, r0
    a34e:	482e      	ldr	r0, [pc, #184]	; (a408 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    a350:	d119      	bne.n	a386 <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a352:	6803      	ldr	r3, [r0, #0]
    a354:	ea32 0303 	bics.w	r3, r2, r3
    a358:	d00a      	beq.n	a370 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    a35a:	4608      	mov	r0, r1
    a35c:	f7ff ffb8 	bl	a2d0 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    a360:	2303      	movs	r3, #3
    a362:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    a364:	f385 8811 	msr	BASEPRI, r5
    a368:	f3bf 8f6f 	isb	sy
}
    a36c:	b003      	add	sp, #12
    a36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    a370:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a372:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a374:	4925      	ldr	r1, [pc, #148]	; (a40c <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a376:	ea23 0302 	bic.w	r3, r3, r2
    a37a:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a37c:	680b      	ldr	r3, [r1, #0]
    a37e:	ea23 0302 	bic.w	r3, r3, r2
    a382:	600b      	str	r3, [r1, #0]
    a384:	e7ec      	b.n	a360 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    a386:	070b      	lsls	r3, r1, #28
    a388:	d415      	bmi.n	a3b6 <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    a38a:	2980      	cmp	r1, #128	; 0x80
    a38c:	4b20      	ldr	r3, [pc, #128]	; (a410 <usbd_ep_abort+0xec>)
    a38e:	d02f      	beq.n	a3f0 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    a390:	f001 040f 	and.w	r4, r1, #15
    a394:	f204 34da 	addw	r4, r4, #986	; 0x3da
    a398:	0064      	lsls	r4, r4, #1
    a39a:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a39e:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a3a2:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a3a6:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a3a8:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a3ac:	433c      	orrs	r4, r7
    a3ae:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    a3b2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    a3b6:	4f15      	ldr	r7, [pc, #84]	; (a40c <usbd_ep_abort+0xe8>)
    a3b8:	6804      	ldr	r4, [r0, #0]
    a3ba:	683b      	ldr	r3, [r7, #0]
    a3bc:	ea64 0c03 	orn	ip, r4, r3
    a3c0:	ea1c 0f02 	tst.w	ip, r2
    a3c4:	d0ce      	beq.n	a364 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    a3c6:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a3c8:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    a3cc:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    a3ce:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a3d0:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    a3d2:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    a3d4:	2303      	movs	r3, #3
    a3d6:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a3d8:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    a3dc:	4b0d      	ldr	r3, [pc, #52]	; (a414 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a3de:	f88d 1006 	strb.w	r1, [sp, #6]
    a3e2:	2206      	movs	r2, #6
            m_event_handler(&evt);
    a3e4:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a3e6:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    a3ea:	a801      	add	r0, sp, #4
    a3ec:	4798      	blx	r3
    a3ee:	e7b9      	b.n	a364 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    a3f0:	f240 74b4 	movw	r4, #1972	; 0x7b4
    a3f4:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a3f8:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a3fc:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a400:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a402:	f044 0404 	orr.w	r4, r4, #4
    a406:	e7d1      	b.n	a3ac <usbd_ep_abort+0x88>
    a408:	200021ec 	.word	0x200021ec
    a40c:	200021f0 	.word	0x200021f0
    a410:	40027000 	.word	0x40027000
    a414:	200021f4 	.word	0x200021f4

0000a418 <ev_setup_handler>:
{
    a418:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    a41a:	4b14      	ldr	r3, [pc, #80]	; (a46c <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a41c:	4c14      	ldr	r4, [pc, #80]	; (a470 <ev_setup_handler+0x58>)
    a41e:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    a422:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    a424:	4e13      	ldr	r6, [pc, #76]	; (a474 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a426:	43da      	mvns	r2, r3
    a428:	4b13      	ldr	r3, [pc, #76]	; (a478 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    a42a:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a42c:	681b      	ldr	r3, [r3, #0]
    a42e:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    a430:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a432:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    a434:	f003 fc9c 	bl	dd70 <ep2bit>
    a438:	2301      	movs	r3, #1
    a43a:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a43c:	4213      	tst	r3, r2
    a43e:	d002      	beq.n	a446 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    a440:	4608      	mov	r0, r1
    a442:	f7ff ff6f 	bl	a324 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    a446:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    a44a:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    a44e:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    a450:	f7ff fae4 	bl	9a1c <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    a454:	6823      	ldr	r3, [r4, #0]
    a456:	f043 0301 	orr.w	r3, r3, #1
    a45a:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    a45c:	2305      	movs	r3, #5
    a45e:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    a460:	4b06      	ldr	r3, [pc, #24]	; (a47c <ev_setup_handler+0x64>)
    a462:	a801      	add	r0, sp, #4
    a464:	681b      	ldr	r3, [r3, #0]
    a466:	4798      	blx	r3
}
    a468:	b002      	add	sp, #8
    a46a:	bd70      	pop	{r4, r5, r6, pc}
    a46c:	40027000 	.word	0x40027000
    a470:	200021f0 	.word	0x200021f0
    a474:	20002528 	.word	0x20002528
    a478:	200021ec 	.word	0x200021ec
    a47c:	200021f4 	.word	0x200021f4

0000a480 <nrfx_usbd_irq_handler>:
{
    a480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    a484:	4b1a      	ldr	r3, [pc, #104]	; (a4f0 <nrfx_usbd_irq_handler+0x70>)
    a486:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    a48a:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    a48c:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a48e:	461d      	mov	r5, r3
    while (to_process)
    a490:	b970      	cbnz	r0, a4b0 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    a492:	4f18      	ldr	r7, [pc, #96]	; (a4f4 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    a494:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    a498:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    a49c:	f04f 0801 	mov.w	r8, #1
    while (active)
    a4a0:	b9bc      	cbnz	r4, a4d2 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    a4a2:	f7ff fd63 	bl	9f6c <usbd_dmareq_process>
    if (setup_active)
    a4a6:	b306      	cbz	r6, a4ea <nrfx_usbd_irq_handler+0x6a>
}
    a4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    a4ac:	f7ff bfb4 	b.w	a418 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    a4b0:	fa90 f2a0 	rbit	r2, r0
    a4b4:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a4b8:	490f      	ldr	r1, [pc, #60]	; (a4f8 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    a4ba:	0096      	lsls	r6, r2, #2
    a4bc:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    a4be:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a4c2:	680e      	ldr	r6, [r1, #0]
    if (ret)
    a4c4:	b116      	cbz	r6, a4cc <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a4c6:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    a4c8:	6809      	ldr	r1, [r1, #0]
    a4ca:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    a4cc:	ea20 0002 	bic.w	r0, r0, r2
    a4d0:	e7de      	b.n	a490 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    a4d2:	fa94 f5a4 	rbit	r5, r4
    a4d6:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    a4da:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    a4de:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    a4e2:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    a4e4:	ea24 0405 	bic.w	r4, r4, r5
    a4e8:	e7da      	b.n	a4a0 <nrfx_usbd_irq_handler+0x20>
}
    a4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4ee:	bf00      	nop
    a4f0:	40027000 	.word	0x40027000
    a4f4:	0000ef94 	.word	0x0000ef94
    a4f8:	40027100 	.word	0x40027100

0000a4fc <nrfx_usbd_stop>:
{
    a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a4fe:	4b1b      	ldr	r3, [pc, #108]	; (a56c <nrfx_usbd_stop+0x70>)
    a500:	2280      	movs	r2, #128	; 0x80
    a502:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    a506:	2027      	movs	r0, #39	; 0x27
    a508:	f7f9 fbb6 	bl	3c78 <arch_irq_is_enabled>
    a50c:	b1b8      	cbz	r0, a53e <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    a50e:	4e18      	ldr	r6, [pc, #96]	; (a570 <nrfx_usbd_stop+0x74>)
    a510:	4b18      	ldr	r3, [pc, #96]	; (a574 <nrfx_usbd_stop+0x78>)
    a512:	6834      	ldr	r4, [r6, #0]
    a514:	681b      	ldr	r3, [r3, #0]
    a516:	0c24      	lsrs	r4, r4, #16
    a518:	0424      	lsls	r4, r4, #16
    a51a:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    a51c:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    a51e:	b97c      	cbnz	r4, a540 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    a520:	4d15      	ldr	r5, [pc, #84]	; (a578 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    a522:	f240 13ff 	movw	r3, #511	; 0x1ff
    a526:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    a528:	2027      	movs	r0, #39	; 0x27
    a52a:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    a52e:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    a532:	f7f9 fb8d 	bl	3c50 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    a536:	f04f 33ff 	mov.w	r3, #4294967295
    a53a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    a53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    a540:	fa94 f5a4 	rbit	r5, r4
    a544:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a548:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    a54a:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a54c:	bfc6      	itte	gt
    a54e:	f1a5 0010 	subgt.w	r0, r5, #16
    a552:	b2c0      	uxtbgt	r0, r0
    a554:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    a558:	0703      	lsls	r3, r0, #28
    a55a:	d401      	bmi.n	a560 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    a55c:	f7ff fee2 	bl	a324 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    a560:	fa07 f505 	lsl.w	r5, r7, r5
    a564:	ea24 0405 	bic.w	r4, r4, r5
    a568:	e7d9      	b.n	a51e <nrfx_usbd_stop+0x22>
    a56a:	bf00      	nop
    a56c:	e000e100 	.word	0xe000e100
    a570:	200021f0 	.word	0x200021f0
    a574:	200021ec 	.word	0x200021ec
    a578:	40027000 	.word	0x40027000

0000a57c <nrfx_usbd_disable>:
{
    a57c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    a57e:	f7ff ffbd 	bl	a4fc <nrfx_usbd_stop>
    return p_reg->INTENSET;
    a582:	4b08      	ldr	r3, [pc, #32]	; (a5a4 <nrfx_usbd_disable+0x28>)
    a584:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    a588:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    a58c:	2200      	movs	r2, #0
    a58e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    a592:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    a596:	f7ff fa51 	bl	9a3c <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    a59a:	4b03      	ldr	r3, [pc, #12]	; (a5a8 <nrfx_usbd_disable+0x2c>)
    a59c:	2201      	movs	r2, #1
    a59e:	701a      	strb	r2, [r3, #0]
}
    a5a0:	bd08      	pop	{r3, pc}
    a5a2:	bf00      	nop
    a5a4:	40027000 	.word	0x40027000
    a5a8:	2000252a 	.word	0x2000252a

0000a5ac <nrfx_usbd_ep_disable>:
{
    a5ac:	b510      	push	{r4, lr}
    a5ae:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    a5b0:	f7ff feb8 	bl	a324 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a5b4:	4a10      	ldr	r2, [pc, #64]	; (a5f8 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    a5b6:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a5ba:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    a5be:	f04f 0301 	mov.w	r3, #1
    a5c2:	bf14      	ite	ne
    a5c4:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    a5c8:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    a5cc:	fa03 f300 	lsl.w	r3, r3, r0
    a5d0:	ea6f 0303 	mvn.w	r3, r3
    a5d4:	bf15      	itete	ne
    a5d6:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    a5d8:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    a5da:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    a5de:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a5e2:	bf14      	ite	ne
    a5e4:	4b05      	ldrne	r3, [pc, #20]	; (a5fc <nrfx_usbd_ep_disable+0x50>)
    a5e6:	4b06      	ldreq	r3, [pc, #24]	; (a600 <nrfx_usbd_ep_disable+0x54>)
    a5e8:	5c1a      	ldrb	r2, [r3, r0]
    a5ea:	2301      	movs	r3, #1
    a5ec:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    a5ee:	4a02      	ldr	r2, [pc, #8]	; (a5f8 <nrfx_usbd_ep_disable+0x4c>)
    a5f0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    a5f4:	bd10      	pop	{r4, pc}
    a5f6:	bf00      	nop
    a5f8:	40027000 	.word	0x40027000
    a5fc:	000101b0 	.word	0x000101b0
    a600:	000101a7 	.word	0x000101a7

0000a604 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a604:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    a608:	b570      	push	{r4, r5, r6, lr}
    a60a:	4924      	ldr	r1, [pc, #144]	; (a69c <nrfx_usbd_ep_enable+0x98>)
    a60c:	4604      	mov	r4, r0
    a60e:	f000 030f 	and.w	r3, r0, #15
    a612:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a616:	d012      	beq.n	a63e <nrfx_usbd_ep_enable+0x3a>
    a618:	4a21      	ldr	r2, [pc, #132]	; (a6a0 <nrfx_usbd_ep_enable+0x9c>)
    a61a:	5cd2      	ldrb	r2, [r2, r3]
    a61c:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    a620:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    a624:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    a628:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    a62a:	07d0      	lsls	r0, r2, #31
    a62c:	d406      	bmi.n	a63c <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    a62e:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    a632:	fa05 f303 	lsl.w	r3, r5, r3
    a636:	4313      	orrs	r3, r2
    a638:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    a63c:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a63e:	4a19      	ldr	r2, [pc, #100]	; (a6a4 <nrfx_usbd_ep_enable+0xa0>)
    a640:	5cd2      	ldrb	r2, [r2, r3]
    a642:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    a646:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    a64a:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    a64e:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    a650:	07d2      	lsls	r2, r2, #31
    a652:	d4f3      	bmi.n	a63c <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    a654:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    a658:	fa05 f203 	lsl.w	r2, r5, r3
    a65c:	4332      	orrs	r2, r6
    a65e:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    a662:	2b00      	cmp	r3, #0
    a664:	d0ea      	beq.n	a63c <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    a666:	0703      	lsls	r3, r0, #28
    a668:	d4e8      	bmi.n	a63c <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    a66a:	f04f 0320 	mov.w	r3, #32
    a66e:	f3ef 8611 	mrs	r6, BASEPRI
    a672:	f383 8812 	msr	BASEPRI_MAX, r3
    a676:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    a67a:	f7ff fe29 	bl	a2d0 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a67e:	4620      	mov	r0, r4
    a680:	f003 fb76 	bl	dd70 <ep2bit>
    a684:	4a08      	ldr	r2, [pc, #32]	; (a6a8 <nrfx_usbd_ep_enable+0xa4>)
    a686:	6813      	ldr	r3, [r2, #0]
    a688:	fa05 f000 	lsl.w	r0, r5, r0
    a68c:	ea23 0300 	bic.w	r3, r3, r0
    a690:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    a692:	f386 8811 	msr	BASEPRI, r6
    a696:	f3bf 8f6f 	isb	sy
}
    a69a:	e7cf      	b.n	a63c <nrfx_usbd_ep_enable+0x38>
    a69c:	40027000 	.word	0x40027000
    a6a0:	000101b0 	.word	0x000101b0
    a6a4:	000101a7 	.word	0x000101a7
    a6a8:	200021ec 	.word	0x200021ec

0000a6ac <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a6ac:	0603      	lsls	r3, r0, #24
{
    a6ae:	b510      	push	{r4, lr}
    a6b0:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a6b2:	d405      	bmi.n	a6c0 <nrfx_usbd_ep_stall_clear+0x14>
    a6b4:	f7ff fd7a 	bl	a1ac <nrfx_usbd_ep_stall_check>
    a6b8:	b110      	cbz	r0, a6c0 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    a6ba:	4620      	mov	r0, r4
    a6bc:	f7ff fe08 	bl	a2d0 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    a6c0:	4b01      	ldr	r3, [pc, #4]	; (a6c8 <nrfx_usbd_ep_stall_clear+0x1c>)
    a6c2:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    a6c6:	bd10      	pop	{r4, pc}
    a6c8:	40027000 	.word	0x40027000

0000a6cc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6d0:	b086      	sub	sp, #24
    a6d2:	4605      	mov	r5, r0
    a6d4:	af00      	add	r7, sp, #0
    a6d6:	460e      	mov	r6, r1
	__asm__ volatile(
    a6d8:	f04f 0320 	mov.w	r3, #32
    a6dc:	f3ef 8811 	mrs	r8, BASEPRI
    a6e0:	f383 8812 	msr	BASEPRI_MAX, r3
    a6e4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a6e8:	f001 f81e 	bl	b728 <z_impl_z_current_get>
    a6ec:	2d04      	cmp	r5, #4
    a6ee:	bf96      	itet	ls
    a6f0:	4b2c      	ldrls	r3, [pc, #176]	; (a7a4 <z_fatal_error+0xd8>)
    a6f2:	4b2d      	ldrhi	r3, [pc, #180]	; (a7a8 <z_fatal_error+0xdc>)
    a6f4:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a6f8:	46e9      	mov	r9, sp
    a6fa:	b08a      	sub	sp, #40	; 0x28
    a6fc:	4604      	mov	r4, r0
    a6fe:	466a      	mov	r2, sp
    a700:	492a      	ldr	r1, [pc, #168]	; (a7ac <z_fatal_error+0xe0>)
    a702:	61d3      	str	r3, [r2, #28]
    a704:	f240 3301 	movw	r3, #769	; 0x301
    a708:	8493      	strh	r3, [r2, #36]	; 0x24
    a70a:	f04f 0a00 	mov.w	sl, #0
    a70e:	4b28      	ldr	r3, [pc, #160]	; (a7b0 <z_fatal_error+0xe4>)
    a710:	f8c2 a020 	str.w	sl, [r2, #32]
    a714:	e9c2 1505 	strd	r1, r5, [r2, #20]
    a718:	f842 3f10 	str.w	r3, [r2, #16]!
    a71c:	4825      	ldr	r0, [pc, #148]	; (a7b4 <z_fatal_error+0xe8>)
    a71e:	4653      	mov	r3, sl
    a720:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    a724:	f7f7 fa4e 	bl	1bc4 <z_impl_z_log_msg_static_create>
    a728:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a72a:	b17e      	cbz	r6, a74c <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a72c:	69f3      	ldr	r3, [r6, #28]
    a72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a732:	b15b      	cbz	r3, a74c <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    a734:	4b20      	ldr	r3, [pc, #128]	; (a7b8 <z_fatal_error+0xec>)
    a736:	617b      	str	r3, [r7, #20]
    a738:	2302      	movs	r3, #2
    a73a:	613b      	str	r3, [r7, #16]
    a73c:	481d      	ldr	r0, [pc, #116]	; (a7b4 <z_fatal_error+0xe8>)
    a73e:	4653      	mov	r3, sl
    a740:	f107 0210 	add.w	r2, r7, #16
    a744:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a748:	f7f7 fa3c 	bl	1bc4 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a74c:	b12c      	cbz	r4, a75a <z_fatal_error+0x8e>
    a74e:	4620      	mov	r0, r4
    a750:	f003 fbdf 	bl	df12 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    a754:	b108      	cbz	r0, a75a <z_fatal_error+0x8e>
    a756:	7803      	ldrb	r3, [r0, #0]
    a758:	b903      	cbnz	r3, a75c <z_fatal_error+0x90>
		thread_name = "unknown";
    a75a:	4818      	ldr	r0, [pc, #96]	; (a7bc <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a75c:	46e9      	mov	r9, sp
    a75e:	b08a      	sub	sp, #40	; 0x28
    a760:	466a      	mov	r2, sp
    a762:	4b17      	ldr	r3, [pc, #92]	; (a7c0 <z_fatal_error+0xf4>)
    a764:	61d0      	str	r0, [r2, #28]
    a766:	e9c2 3405 	strd	r3, r4, [r2, #20]
    a76a:	f240 3301 	movw	r3, #769	; 0x301
    a76e:	8413      	strh	r3, [r2, #32]
    a770:	4b14      	ldr	r3, [pc, #80]	; (a7c4 <z_fatal_error+0xf8>)
    a772:	f842 3f10 	str.w	r3, [r2, #16]!
    a776:	2300      	movs	r3, #0
    a778:	480e      	ldr	r0, [pc, #56]	; (a7b4 <z_fatal_error+0xe8>)
    a77a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    a77e:	f7f7 fa21 	bl	1bc4 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    a782:	4631      	mov	r1, r6
    a784:	46cd      	mov	sp, r9
    a786:	4628      	mov	r0, r5
    a788:	f7fe f898 	bl	88bc <k_sys_fatal_error_handler>
	__asm__ volatile(
    a78c:	f388 8811 	msr	BASEPRI, r8
    a790:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a794:	4620      	mov	r0, r4
    a796:	f7f9 fec3 	bl	4520 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a79a:	3718      	adds	r7, #24
    a79c:	46bd      	mov	sp, r7
    a79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7a2:	bf00      	nop
    a7a4:	0000effc 	.word	0x0000effc
    a7a8:	000101c3 	.word	0x000101c3
    a7ac:	000101d9 	.word	0x000101d9
    a7b0:	01000005 	.word	0x01000005
    a7b4:	0000eb44 	.word	0x0000eb44
    a7b8:	00010201 	.word	0x00010201
    a7bc:	000101d1 	.word	0x000101d1
    a7c0:	00010222 	.word	0x00010222
    a7c4:	01000004 	.word	0x01000004

0000a7c8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a7c8:	4b10      	ldr	r3, [pc, #64]	; (a80c <z_sys_init_run_level+0x44>)
{
    a7ca:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a7cc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a7d0:	3001      	adds	r0, #1
    a7d2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    a7d6:	42a6      	cmp	r6, r4
    a7d8:	d800      	bhi.n	a7dc <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    a7da:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    a7dc:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    a7e0:	b18d      	cbz	r5, a806 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    a7e2:	4628      	mov	r0, r5
    a7e4:	4798      	blx	r3
			if (rc != 0) {
    a7e6:	b138      	cbz	r0, a7f8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    a7e8:	2800      	cmp	r0, #0
    a7ea:	bfb8      	it	lt
    a7ec:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    a7ee:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    a7f0:	28ff      	cmp	r0, #255	; 0xff
    a7f2:	bfa8      	it	ge
    a7f4:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    a7f6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    a7f8:	68ea      	ldr	r2, [r5, #12]
    a7fa:	7853      	ldrb	r3, [r2, #1]
    a7fc:	f043 0301 	orr.w	r3, r3, #1
    a800:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a802:	3408      	adds	r4, #8
    a804:	e7e7      	b.n	a7d6 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    a806:	4798      	blx	r3
    a808:	e7fb      	b.n	a802 <z_sys_init_run_level+0x3a>
    a80a:	bf00      	nop
    a80c:	0000f010 	.word	0x0000f010

0000a810 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    a810:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    a812:	4b0a      	ldr	r3, [pc, #40]	; (a83c <bg_thread_main+0x2c>)
    a814:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    a816:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    a818:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    a81a:	f7ff ffd5 	bl	a7c8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    a81e:	f001 fa9b 	bl	bd58 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    a822:	2004      	movs	r0, #4
    a824:	f7ff ffd0 	bl	a7c8 <z_sys_init_run_level>

	z_init_static_threads();
    a828:	f000 f958 	bl	aadc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    a82c:	f001 fcb6 	bl	c19c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a830:	4a03      	ldr	r2, [pc, #12]	; (a840 <bg_thread_main+0x30>)
    a832:	7b13      	ldrb	r3, [r2, #12]
    a834:	f023 0301 	bic.w	r3, r3, #1
    a838:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a83a:	bd08      	pop	{r3, pc}
    a83c:	2000252b 	.word	0x2000252b
    a840:	20000ba0 	.word	0x20000ba0

0000a844 <z_bss_zero>:
{
    a844:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    a846:	4803      	ldr	r0, [pc, #12]	; (a854 <z_bss_zero+0x10>)
    a848:	4a03      	ldr	r2, [pc, #12]	; (a858 <z_bss_zero+0x14>)
    a84a:	2100      	movs	r1, #0
    a84c:	1a12      	subs	r2, r2, r0
    a84e:	f003 fb06 	bl	de5e <z_early_memset>
}
    a852:	bd08      	pop	{r3, pc}
    a854:	20000500 	.word	0x20000500
    a858:	20002530 	.word	0x20002530

0000a85c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    a85c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    a85e:	2300      	movs	r3, #0
{
    a860:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    a862:	2201      	movs	r2, #1
    a864:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    a868:	4e11      	ldr	r6, [pc, #68]	; (a8b0 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a86a:	4d12      	ldr	r5, [pc, #72]	; (a8b4 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    a86c:	9301      	str	r3, [sp, #4]
    a86e:	220f      	movs	r2, #15
    a870:	e9cd 3202 	strd	r3, r2, [sp, #8]
    a874:	4910      	ldr	r1, [pc, #64]	; (a8b8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a876:	2314      	movs	r3, #20
    a878:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    a87c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
    a880:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
    a884:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    a886:	fb02 1100 	mla	r1, r2, r0, r1
    a88a:	4b0c      	ldr	r3, [pc, #48]	; (a8bc <z_init_cpu+0x60>)
    a88c:	9500      	str	r5, [sp, #0]
    a88e:	4630      	mov	r0, r6
    a890:	f000 f8c8 	bl	aa24 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a894:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    a896:	742c      	strb	r4, [r5, #16]
    a898:	f023 0304 	bic.w	r3, r3, #4
    a89c:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    a89e:	4b08      	ldr	r3, [pc, #32]	; (a8c0 <z_init_cpu+0x64>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    a8a0:	60ee      	str	r6, [r5, #12]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    a8a2:	3401      	adds	r4, #1
    a8a4:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
    a8a8:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    a8aa:	b006      	add	sp, #24
    a8ac:	bd70      	pop	{r4, r5, r6, pc}
    a8ae:	bf00      	nop
    a8b0:	20000b20 	.word	0x20000b20
    a8b4:	200021f8 	.word	0x200021f8
    a8b8:	20003830 	.word	0x20003830
    a8bc:	0000ab95 	.word	0x0000ab95
    a8c0:	20003030 	.word	0x20003030

0000a8c4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    a8c4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    a8c6:	2000      	movs	r0, #0
{
    a8c8:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    a8ca:	f7ff ff7d 	bl	a7c8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    a8ce:	4b2e      	ldr	r3, [pc, #184]	; (a988 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a8d0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    a8d4:	4d2d      	ldr	r5, [pc, #180]	; (a98c <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    a8d6:	4e2e      	ldr	r6, [pc, #184]	; (a990 <z_cstart+0xcc>)
    a8d8:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a8da:	4f2e      	ldr	r7, [pc, #184]	; (a994 <z_cstart+0xd0>)
    a8dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a8e0:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a8e2:	2400      	movs	r4, #0
    a8e4:	23e0      	movs	r3, #224	; 0xe0
    a8e6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    a8ea:	77ec      	strb	r4, [r5, #31]
    a8ec:	762c      	strb	r4, [r5, #24]
    a8ee:	766c      	strb	r4, [r5, #25]
    a8f0:	76ac      	strb	r4, [r5, #26]
    a8f2:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a8f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a8f8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a8fc:	626b      	str	r3, [r5, #36]	; 0x24
    a8fe:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a902:	f7f9 fd81 	bl	4408 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a906:	f7f9 f90f 	bl	3b28 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a90a:	f04f 33ff 	mov.w	r3, #4294967295
    a90e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a910:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a912:	f7f9 fead 	bl	4670 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a916:	f7f9 fe19 	bl	454c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    a91a:	f7f6 ffdf 	bl	18dc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    a91e:	f240 1301 	movw	r3, #257	; 0x101
    a922:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    a926:	ab06      	add	r3, sp, #24
    a928:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    a92a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
    a92e:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a930:	f003 fa89 	bl	de46 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    a934:	2001      	movs	r0, #1
    a936:	f7ff ff47 	bl	a7c8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    a93a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    a93c:	4d16      	ldr	r5, [pc, #88]	; (a998 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    a93e:	f7ff ff43 	bl	a7c8 <z_sys_init_run_level>
	z_sched_init();
    a942:	f000 fe33 	bl	b5ac <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a946:	4b15      	ldr	r3, [pc, #84]	; (a99c <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    a948:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a94a:	9305      	str	r3, [sp, #20]
    a94c:	2301      	movs	r3, #1
    a94e:	4914      	ldr	r1, [pc, #80]	; (a9a0 <z_cstart+0xdc>)
    a950:	9400      	str	r4, [sp, #0]
    a952:	e9cd 4303 	strd	r4, r3, [sp, #12]
    a956:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a95a:	463b      	mov	r3, r7
    a95c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a960:	4628      	mov	r0, r5
    a962:	f000 f85f 	bl	aa24 <z_setup_new_thread>
    a966:	7b6a      	ldrb	r2, [r5, #13]
    a968:	4606      	mov	r6, r0
    a96a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    a96e:	4628      	mov	r0, r5
    a970:	736a      	strb	r2, [r5, #13]
    a972:	f003 fc23 	bl	e1bc <z_ready_thread>
	z_init_cpu(0);
    a976:	4620      	mov	r0, r4
    a978:	f7ff ff70 	bl	a85c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a97c:	463a      	mov	r2, r7
    a97e:	4631      	mov	r1, r6
    a980:	4628      	mov	r0, r5
    a982:	f7f9 fa29 	bl	3dd8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a986:	bf00      	nop
    a988:	20003830 	.word	0x20003830
    a98c:	e000ed00 	.word	0xe000ed00
    a990:	200021f8 	.word	0x200021f8
    a994:	0000a811 	.word	0x0000a811
    a998:	20000ba0 	.word	0x20000ba0
    a99c:	0000f0d4 	.word	0x0000f0d4
    a9a0:	20003970 	.word	0x20003970

0000a9a4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    a9a4:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a9a6:	4c06      	ldr	r4, [pc, #24]	; (a9c0 <init_mem_slab_module+0x1c>)
    a9a8:	4d06      	ldr	r5, [pc, #24]	; (a9c4 <init_mem_slab_module+0x20>)
	int rc = 0;
    a9aa:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a9ac:	42ac      	cmp	r4, r5
    a9ae:	d300      	bcc.n	a9b2 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    a9b0:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    a9b2:	4620      	mov	r0, r4
    a9b4:	f003 fa57 	bl	de66 <create_free_list>
		if (rc < 0) {
    a9b8:	2800      	cmp	r0, #0
    a9ba:	dbf9      	blt.n	a9b0 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a9bc:	341c      	adds	r4, #28
    a9be:	e7f5      	b.n	a9ac <init_mem_slab_module+0x8>
    a9c0:	20000360 	.word	0x20000360
    a9c4:	2000037c 	.word	0x2000037c

0000a9c8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a9c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a9ca:	460c      	mov	r4, r1
	__asm__ volatile(
    a9cc:	f04f 0520 	mov.w	r5, #32
    a9d0:	f3ef 8111 	mrs	r1, BASEPRI
    a9d4:	f385 8812 	msr	BASEPRI_MAX, r5
    a9d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a9dc:	6945      	ldr	r5, [r0, #20]
    a9de:	b15d      	cbz	r5, a9f8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    a9e0:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    a9e2:	682b      	ldr	r3, [r5, #0]
    a9e4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    a9e6:	6983      	ldr	r3, [r0, #24]
    a9e8:	3301      	adds	r3, #1
    a9ea:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a9ec:	2000      	movs	r0, #0
	__asm__ volatile(
    a9ee:	f381 8811 	msr	BASEPRI, r1
    a9f2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    a9f6:	e011      	b.n	aa1c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a9f8:	ea52 0603 	orrs.w	r6, r2, r3
    a9fc:	d103      	bne.n	aa06 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    a9fe:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    aa00:	f06f 000b 	mvn.w	r0, #11
    aa04:	e7f3      	b.n	a9ee <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    aa06:	e9cd 2300 	strd	r2, r3, [sp]
    aa0a:	4602      	mov	r2, r0
    aa0c:	3008      	adds	r0, #8
    aa0e:	f000 fcd7 	bl	b3c0 <z_pend_curr>
		if (result == 0) {
    aa12:	b918      	cbnz	r0, aa1c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    aa14:	4b02      	ldr	r3, [pc, #8]	; (aa20 <k_mem_slab_alloc+0x58>)
    aa16:	689b      	ldr	r3, [r3, #8]
    aa18:	695b      	ldr	r3, [r3, #20]
    aa1a:	6023      	str	r3, [r4, #0]
}
    aa1c:	b002      	add	sp, #8
    aa1e:	bd70      	pop	{r4, r5, r6, pc}
    aa20:	200021f8 	.word	0x200021f8

0000aa24 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    aa24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    aa28:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    aa2a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    aa2c:	2604      	movs	r6, #4
    aa2e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    aa30:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    aa32:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    aa34:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    aa38:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    aa3a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    aa3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    aa40:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    aa42:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    aa46:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    aa4a:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    aa4e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    aa50:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    aa52:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    aa54:	9202      	str	r2, [sp, #8]
    aa56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aa58:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    aa5a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    aa5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    aa60:	9200      	str	r2, [sp, #0]
    aa62:	4642      	mov	r2, r8
{
    aa64:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    aa66:	f7f9 f99b 	bl	3da0 <arch_new_thread>
	if (!_current) {
    aa6a:	4b05      	ldr	r3, [pc, #20]	; (aa80 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    aa6c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    aa6e:	689b      	ldr	r3, [r3, #8]
    aa70:	b103      	cbz	r3, aa74 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    aa72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    aa74:	6763      	str	r3, [r4, #116]	; 0x74
}
    aa76:	4640      	mov	r0, r8
    aa78:	b004      	add	sp, #16
    aa7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa7e:	bf00      	nop
    aa80:	200021f8 	.word	0x200021f8

0000aa84 <z_impl_k_thread_create>:
{
    aa84:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa86:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    aa88:	2500      	movs	r5, #0
    aa8a:	9505      	str	r5, [sp, #20]
    aa8c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    aa8e:	9504      	str	r5, [sp, #16]
    aa90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    aa92:	9503      	str	r5, [sp, #12]
    aa94:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    aa96:	9502      	str	r5, [sp, #8]
{
    aa98:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    aa9c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    aa9e:	9501      	str	r5, [sp, #4]
    aaa0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    aaa2:	9500      	str	r5, [sp, #0]
{
    aaa4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    aaa6:	f7ff ffbd 	bl	aa24 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    aaaa:	f1b6 3fff 	cmp.w	r6, #4294967295
    aaae:	bf08      	it	eq
    aab0:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    aab4:	d005      	beq.n	aac2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    aab6:	ea56 0307 	orrs.w	r3, r6, r7
    aaba:	d105      	bne.n	aac8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    aabc:	4620      	mov	r0, r4
    aabe:	f000 fcf5 	bl	b4ac <z_sched_start>
}
    aac2:	4620      	mov	r0, r4
    aac4:	b007      	add	sp, #28
    aac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    aac8:	4903      	ldr	r1, [pc, #12]	; (aad8 <z_impl_k_thread_create+0x54>)
    aaca:	463a      	mov	r2, r7
    aacc:	4633      	mov	r3, r6
    aace:	f104 0018 	add.w	r0, r4, #24
    aad2:	f000 ff01 	bl	b8d8 <z_add_timeout>
    aad6:	e7f4      	b.n	aac2 <z_impl_k_thread_create+0x3e>
    aad8:	0000e245 	.word	0x0000e245

0000aadc <z_init_static_threads>:
{
    aadc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    aae0:	4c29      	ldr	r4, [pc, #164]	; (ab88 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    aae2:	4d2a      	ldr	r5, [pc, #168]	; (ab8c <z_init_static_threads+0xb0>)
{
    aae4:	b087      	sub	sp, #28
    aae6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    aae8:	42ae      	cmp	r6, r5
    aaea:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    aaee:	d30f      	bcc.n	ab10 <z_init_static_threads+0x34>
	k_sched_lock();
    aaf0:	f000 fd2c 	bl	b54c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    aaf4:	4c24      	ldr	r4, [pc, #144]	; (ab88 <z_init_static_threads+0xac>)
    aaf6:	f8df 9098 	ldr.w	r9, [pc, #152]	; ab90 <z_init_static_threads+0xb4>
    aafa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    aafe:	f240 37e7 	movw	r7, #999	; 0x3e7
    ab02:	42ac      	cmp	r4, r5
    ab04:	d320      	bcc.n	ab48 <z_init_static_threads+0x6c>
}
    ab06:	b007      	add	sp, #28
    ab08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    ab0c:	f000 bd32 	b.w	b574 <k_sched_unlock>
		z_setup_new_thread(
    ab10:	f854 3c04 	ldr.w	r3, [r4, #-4]
    ab14:	9305      	str	r3, [sp, #20]
    ab16:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    ab1a:	9304      	str	r3, [sp, #16]
    ab1c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    ab20:	9303      	str	r3, [sp, #12]
    ab22:	f854 3c14 	ldr.w	r3, [r4, #-20]
    ab26:	9302      	str	r3, [sp, #8]
    ab28:	f854 3c18 	ldr.w	r3, [r4, #-24]
    ab2c:	9301      	str	r3, [sp, #4]
    ab2e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    ab32:	9300      	str	r3, [sp, #0]
    ab34:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    ab38:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    ab3c:	f7ff ff72 	bl	aa24 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    ab40:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    ab44:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    ab46:	e7ce      	b.n	aae6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    ab48:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ab4a:	1c5a      	adds	r2, r3, #1
    ab4c:	d00d      	beq.n	ab6a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    ab4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ab52:	2100      	movs	r1, #0
    ab54:	4638      	mov	r0, r7
    ab56:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    ab5a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    ab5e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    ab62:	d104      	bne.n	ab6e <z_init_static_threads+0x92>
	z_sched_start(thread);
    ab64:	4640      	mov	r0, r8
    ab66:	f000 fca1 	bl	b4ac <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    ab6a:	342c      	adds	r4, #44	; 0x2c
    ab6c:	e7c9      	b.n	ab02 <z_init_static_threads+0x26>
    ab6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ab72:	2300      	movs	r3, #0
    ab74:	f7f5 fac4 	bl	100 <__aeabi_uldivmod>
    ab78:	4602      	mov	r2, r0
    ab7a:	460b      	mov	r3, r1
    ab7c:	f108 0018 	add.w	r0, r8, #24
    ab80:	4649      	mov	r1, r9
    ab82:	f000 fea9 	bl	b8d8 <z_add_timeout>
    ab86:	e7f0      	b.n	ab6a <z_init_static_threads+0x8e>
    ab88:	0000eaa4 	.word	0x0000eaa4
    ab8c:	0000eaa4 	.word	0x0000eaa4
    ab90:	0000e245 	.word	0x0000e245

0000ab94 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    ab94:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    ab96:	4c0b      	ldr	r4, [pc, #44]	; (abc4 <idle+0x30>)
	return !z_sys_post_kernel;
    ab98:	4d0b      	ldr	r5, [pc, #44]	; (abc8 <idle+0x34>)
	__asm__ volatile(
    ab9a:	f04f 0220 	mov.w	r2, #32
    ab9e:	f3ef 8311 	mrs	r3, BASEPRI
    aba2:	f382 8812 	msr	BASEPRI_MAX, r2
    aba6:	f3bf 8f6f 	isb	sy
    abaa:	f003 fbf9 	bl	e3a0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    abae:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    abb0:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    abb2:	b913      	cbnz	r3, abba <idle+0x26>
	arch_cpu_idle();
    abb4:	f7f8 ffbe 	bl	3b34 <arch_cpu_idle>
}
    abb8:	e7ef      	b.n	ab9a <idle+0x6>
    abba:	f7f7 fb5b 	bl	2274 <pm_system_suspend>
    abbe:	2800      	cmp	r0, #0
    abc0:	d1eb      	bne.n	ab9a <idle+0x6>
    abc2:	e7f7      	b.n	abb4 <idle+0x20>
    abc4:	200021f8 	.word	0x200021f8
    abc8:	2000252b 	.word	0x2000252b

0000abcc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    abcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    abd0:	4604      	mov	r4, r0
    abd2:	4617      	mov	r7, r2
    abd4:	461e      	mov	r6, r3
    abd6:	f04f 0320 	mov.w	r3, #32
    abda:	f3ef 8811 	mrs	r8, BASEPRI
    abde:	f383 8812 	msr	BASEPRI_MAX, r3
    abe2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    abe6:	68c3      	ldr	r3, [r0, #12]
    abe8:	4a33      	ldr	r2, [pc, #204]	; (acb8 <z_impl_k_mutex_lock+0xec>)
    abea:	b17b      	cbz	r3, ac0c <z_impl_k_mutex_lock+0x40>
    abec:	6880      	ldr	r0, [r0, #8]
    abee:	6891      	ldr	r1, [r2, #8]
    abf0:	4288      	cmp	r0, r1
    abf2:	d019      	beq.n	ac28 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    abf4:	ea57 0306 	orrs.w	r3, r7, r6
    abf8:	d118      	bne.n	ac2c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    abfa:	f388 8811 	msr	BASEPRI, r8
    abfe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    ac02:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    ac06:	b002      	add	sp, #8
    ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    ac0c:	6891      	ldr	r1, [r2, #8]
    ac0e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    ac12:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    ac14:	3301      	adds	r3, #1
    ac16:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    ac18:	6893      	ldr	r3, [r2, #8]
    ac1a:	60a3      	str	r3, [r4, #8]
    ac1c:	f388 8811 	msr	BASEPRI, r8
    ac20:	f3bf 8f6f 	isb	sy
		return 0;
    ac24:	2000      	movs	r0, #0
    ac26:	e7ee      	b.n	ac06 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    ac28:	6921      	ldr	r1, [r4, #16]
    ac2a:	e7f2      	b.n	ac12 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    ac2c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    ac30:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    ac34:	4299      	cmp	r1, r3
    ac36:	bfa8      	it	ge
    ac38:	4619      	movge	r1, r3
    ac3a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    ac3e:	4291      	cmp	r1, r2
    ac40:	bfb8      	it	lt
    ac42:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    ac44:	428b      	cmp	r3, r1
    ac46:	dd2e      	ble.n	aca6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    ac48:	f003 f96e 	bl	df28 <adjust_owner_prio.isra.0>
    ac4c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    ac4e:	e9cd 7600 	strd	r7, r6, [sp]
    ac52:	481a      	ldr	r0, [pc, #104]	; (acbc <z_impl_k_mutex_lock+0xf0>)
    ac54:	4622      	mov	r2, r4
    ac56:	4641      	mov	r1, r8
    ac58:	f000 fbb2 	bl	b3c0 <z_pend_curr>
	if (got_mutex == 0) {
    ac5c:	2800      	cmp	r0, #0
    ac5e:	d0e1      	beq.n	ac24 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    ac60:	f04f 0320 	mov.w	r3, #32
    ac64:	f3ef 8611 	mrs	r6, BASEPRI
    ac68:	f383 8812 	msr	BASEPRI_MAX, r3
    ac6c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    ac70:	68a0      	ldr	r0, [r4, #8]
    ac72:	b1d0      	cbz	r0, acaa <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ac74:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ac76:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac78:	429c      	cmp	r4, r3
    ac7a:	d00a      	beq.n	ac92 <z_impl_k_mutex_lock+0xc6>
    ac7c:	b14b      	cbz	r3, ac92 <z_impl_k_mutex_lock+0xc6>
    ac7e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    ac82:	4299      	cmp	r1, r3
    ac84:	bfa8      	it	ge
    ac86:	4619      	movge	r1, r3
    ac88:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    ac8c:	4299      	cmp	r1, r3
    ac8e:	bfb8      	it	lt
    ac90:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    ac92:	f003 f949 	bl	df28 <adjust_owner_prio.isra.0>
    ac96:	b140      	cbz	r0, acaa <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    ac98:	4808      	ldr	r0, [pc, #32]	; (acbc <z_impl_k_mutex_lock+0xf0>)
    ac9a:	4631      	mov	r1, r6
    ac9c:	f000 fbf4 	bl	b488 <z_reschedule>
	return -EAGAIN;
    aca0:	f06f 000a 	mvn.w	r0, #10
    aca4:	e7af      	b.n	ac06 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    aca6:	2500      	movs	r5, #0
    aca8:	e7d1      	b.n	ac4e <z_impl_k_mutex_lock+0x82>
	if (resched) {
    acaa:	2d00      	cmp	r5, #0
    acac:	d1f4      	bne.n	ac98 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    acae:	f386 8811 	msr	BASEPRI, r6
    acb2:	f3bf 8f6f 	isb	sy
    acb6:	e7f3      	b.n	aca0 <z_impl_k_mutex_lock+0xd4>
    acb8:	200021f8 	.word	0x200021f8
    acbc:	2000252c 	.word	0x2000252c

0000acc0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    acc0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    acc2:	6883      	ldr	r3, [r0, #8]
{
    acc4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    acc6:	b36b      	cbz	r3, ad24 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    acc8:	4a19      	ldr	r2, [pc, #100]	; (ad30 <z_impl_k_mutex_unlock+0x70>)
    acca:	6892      	ldr	r2, [r2, #8]
    accc:	4293      	cmp	r3, r2
    acce:	d12c      	bne.n	ad2a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    acd0:	68c3      	ldr	r3, [r0, #12]
    acd2:	2b01      	cmp	r3, #1
    acd4:	d903      	bls.n	acde <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    acd6:	3b01      	subs	r3, #1
    acd8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    acda:	2000      	movs	r0, #0
}
    acdc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    acde:	f04f 0320 	mov.w	r3, #32
    ace2:	f3ef 8511 	mrs	r5, BASEPRI
    ace6:	f383 8812 	msr	BASEPRI_MAX, r3
    acea:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    acee:	6901      	ldr	r1, [r0, #16]
    acf0:	6880      	ldr	r0, [r0, #8]
    acf2:	f003 f919 	bl	df28 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    acf6:	4620      	mov	r0, r4
    acf8:	f003 fabf 	bl	e27a <z_unpend_first_thread>
	mutex->owner = new_owner;
    acfc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    acfe:	b158      	cbz	r0, ad18 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    ad00:	f990 200e 	ldrsb.w	r2, [r0, #14]
    ad04:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    ad06:	2200      	movs	r2, #0
    ad08:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    ad0a:	f003 fa57 	bl	e1bc <z_ready_thread>
		z_reschedule(&lock, key);
    ad0e:	4809      	ldr	r0, [pc, #36]	; (ad34 <z_impl_k_mutex_unlock+0x74>)
    ad10:	4629      	mov	r1, r5
    ad12:	f000 fbb9 	bl	b488 <z_reschedule>
    ad16:	e7e0      	b.n	acda <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    ad18:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    ad1a:	f385 8811 	msr	BASEPRI, r5
    ad1e:	f3bf 8f6f 	isb	sy
    ad22:	e7da      	b.n	acda <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    ad24:	f06f 0015 	mvn.w	r0, #21
    ad28:	e7d8      	b.n	acdc <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    ad2a:	f04f 30ff 	mov.w	r0, #4294967295
    ad2e:	e7d5      	b.n	acdc <z_impl_k_mutex_unlock+0x1c>
    ad30:	200021f8 	.word	0x200021f8
    ad34:	2000252c 	.word	0x2000252c

0000ad38 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    ad38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ad3a:	4611      	mov	r1, r2
	__asm__ volatile(
    ad3c:	f04f 0220 	mov.w	r2, #32
    ad40:	f3ef 8511 	mrs	r5, BASEPRI
    ad44:	f382 8812 	msr	BASEPRI_MAX, r2
    ad48:	f3bf 8f6f 	isb	sy
    ad4c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    ad4e:	b19c      	cbz	r4, ad78 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ad50:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    ad52:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ad54:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    ad58:	4294      	cmp	r4, r2
	list->head = node;
    ad5a:	6003      	str	r3, [r0, #0]
	list->tail = node;
    ad5c:	bf08      	it	eq
    ad5e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    ad60:	2101      	movs	r1, #1
    ad62:	4620      	mov	r0, r4
    ad64:	f003 f955 	bl	e012 <z_queue_node_peek>
    ad68:	4604      	mov	r4, r0
	__asm__ volatile(
    ad6a:	f385 8811 	msr	BASEPRI, r5
    ad6e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    ad72:	4620      	mov	r0, r4
    ad74:	b003      	add	sp, #12
    ad76:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ad78:	ea51 0203 	orrs.w	r2, r1, r3
    ad7c:	d0f5      	beq.n	ad6a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    ad7e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    ad82:	e9cd 1300 	strd	r1, r3, [sp]
    ad86:	4610      	mov	r0, r2
    ad88:	4629      	mov	r1, r5
    ad8a:	f000 fb19 	bl	b3c0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    ad8e:	2800      	cmp	r0, #0
    ad90:	d1ef      	bne.n	ad72 <z_impl_k_queue_get+0x3a>
    ad92:	4b02      	ldr	r3, [pc, #8]	; (ad9c <z_impl_k_queue_get+0x64>)
    ad94:	689b      	ldr	r3, [r3, #8]
    ad96:	695c      	ldr	r4, [r3, #20]
    ad98:	e7eb      	b.n	ad72 <z_impl_k_queue_get+0x3a>
    ad9a:	bf00      	nop
    ad9c:	200021f8 	.word	0x200021f8

0000ada0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    ada0:	b538      	push	{r3, r4, r5, lr}
    ada2:	4604      	mov	r4, r0
	__asm__ volatile(
    ada4:	f04f 0320 	mov.w	r3, #32
    ada8:	f3ef 8511 	mrs	r5, BASEPRI
    adac:	f383 8812 	msr	BASEPRI_MAX, r3
    adb0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    adb4:	f003 fa61 	bl	e27a <z_unpend_first_thread>

	if (thread != NULL) {
    adb8:	b148      	cbz	r0, adce <z_impl_k_sem_give+0x2e>
    adba:	2200      	movs	r2, #0
    adbc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    adbe:	f003 f9fd 	bl	e1bc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    adc2:	4629      	mov	r1, r5
    adc4:	4808      	ldr	r0, [pc, #32]	; (ade8 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    adc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    adca:	f000 bb5d 	b.w	b488 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    adce:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    add2:	429a      	cmp	r2, r3
    add4:	bf18      	it	ne
    add6:	3301      	addne	r3, #1
    add8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    adda:	2102      	movs	r1, #2
    addc:	f104 0010 	add.w	r0, r4, #16
    ade0:	f003 fc74 	bl	e6cc <z_handle_obj_poll_events>
}
    ade4:	e7ed      	b.n	adc2 <z_impl_k_sem_give+0x22>
    ade6:	bf00      	nop
    ade8:	2000252c 	.word	0x2000252c

0000adec <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    adec:	b513      	push	{r0, r1, r4, lr}
    adee:	f04f 0420 	mov.w	r4, #32
    adf2:	f3ef 8111 	mrs	r1, BASEPRI
    adf6:	f384 8812 	msr	BASEPRI_MAX, r4
    adfa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    adfe:	6884      	ldr	r4, [r0, #8]
    ae00:	b144      	cbz	r4, ae14 <z_impl_k_sem_take+0x28>
		sem->count--;
    ae02:	3c01      	subs	r4, #1
    ae04:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    ae06:	f381 8811 	msr	BASEPRI, r1
    ae0a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    ae0e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    ae10:	b002      	add	sp, #8
    ae12:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ae14:	ea52 0403 	orrs.w	r4, r2, r3
    ae18:	d106      	bne.n	ae28 <z_impl_k_sem_take+0x3c>
    ae1a:	f381 8811 	msr	BASEPRI, r1
    ae1e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    ae22:	f06f 000f 	mvn.w	r0, #15
    ae26:	e7f3      	b.n	ae10 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ae28:	e9cd 2300 	strd	r2, r3, [sp]
    ae2c:	4602      	mov	r2, r0
    ae2e:	4802      	ldr	r0, [pc, #8]	; (ae38 <z_impl_k_sem_take+0x4c>)
    ae30:	f000 fac6 	bl	b3c0 <z_pend_curr>
	return ret;
    ae34:	e7ec      	b.n	ae10 <z_impl_k_sem_take+0x24>
    ae36:	bf00      	nop
    ae38:	2000252c 	.word	0x2000252c

0000ae3c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
    ae3c:	b570      	push	{r4, r5, r6, lr}
    ae3e:	4604      	mov	r4, r0
	__asm__ volatile(
    ae40:	f04f 0320 	mov.w	r3, #32
    ae44:	f3ef 8511 	mrs	r5, BASEPRI
    ae48:	f383 8812 	msr	BASEPRI_MAX, r3
    ae4c:	f3bf 8f6f 	isb	sy
    ae50:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
    ae54:	4620      	mov	r0, r4
    ae56:	f003 fa10 	bl	e27a <z_unpend_first_thread>
		if (thread == NULL) {
    ae5a:	b118      	cbz	r0, ae64 <z_impl_k_sem_reset+0x28>
    ae5c:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
    ae5e:	f003 f9ad 	bl	e1bc <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
    ae62:	e7f7      	b.n	ae54 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
    ae64:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    ae66:	2102      	movs	r1, #2
    ae68:	f104 0010 	add.w	r0, r4, #16
    ae6c:	f003 fc2e 	bl	e6cc <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
    ae70:	4629      	mov	r1, r5
    ae72:	4802      	ldr	r0, [pc, #8]	; (ae7c <z_impl_k_sem_reset+0x40>)
}
    ae74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    ae78:	f000 bb06 	b.w	b488 <z_reschedule>
    ae7c:	2000252c 	.word	0x2000252c

0000ae80 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    ae84:	4e4a      	ldr	r6, [pc, #296]	; (afb0 <work_queue_main+0x130>)
    ae86:	b085      	sub	sp, #20
    ae88:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    ae8a:	f04f 38ff 	mov.w	r8, #4294967295
    ae8e:	f04f 39ff 	mov.w	r9, #4294967295
    ae92:	f04f 0320 	mov.w	r3, #32
    ae96:	f3ef 8711 	mrs	r7, BASEPRI
    ae9a:	f383 8812 	msr	BASEPRI_MAX, r3
    ae9e:	f3bf 8f6f 	isb	sy
    aea2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    aea6:	b98d      	cbnz	r5, aecc <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    aea8:	2102      	movs	r1, #2
    aeaa:	f104 0098 	add.w	r0, r4, #152	; 0x98
    aeae:	f003 f8d7 	bl	e060 <flag_test_and_clear>
    aeb2:	2800      	cmp	r0, #0
    aeb4:	d143      	bne.n	af3e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    aeb6:	2300      	movs	r3, #0
    aeb8:	e9cd 8900 	strd	r8, r9, [sp]
    aebc:	9302      	str	r3, [sp, #8]
    aebe:	f104 0288 	add.w	r2, r4, #136	; 0x88
    aec2:	4639      	mov	r1, r7
    aec4:	483b      	ldr	r0, [pc, #236]	; (afb4 <work_queue_main+0x134>)
    aec6:	f000 fc95 	bl	b7f4 <z_sched_wait>
			continue;
    aeca:	e7e2      	b.n	ae92 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aecc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    aed0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    aed2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aed6:	4295      	cmp	r5, r2
	list->tail = node;
    aed8:	bf08      	it	eq
    aeda:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    aede:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    aee2:	f043 0302 	orr.w	r3, r3, #2
    aee6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    aeea:	68eb      	ldr	r3, [r5, #12]
    aeec:	f023 0304 	bic.w	r3, r3, #4
    aef0:	f043 0301 	orr.w	r3, r3, #1
    aef4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    aef6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    aef8:	f387 8811 	msr	BASEPRI, r7
    aefc:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    af00:	4628      	mov	r0, r5
    af02:	4798      	blx	r3
	__asm__ volatile(
    af04:	f04f 0320 	mov.w	r3, #32
    af08:	f3ef 8b11 	mrs	fp, BASEPRI
    af0c:	f383 8812 	msr	BASEPRI_MAX, r3
    af10:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    af14:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    af16:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    af18:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    af1c:	d419      	bmi.n	af52 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    af1e:	60ea      	str	r2, [r5, #12]
    af20:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    af24:	f023 0302 	bic.w	r3, r3, #2
    af28:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    af2c:	f38b 8811 	msr	BASEPRI, fp
    af30:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    af34:	05db      	lsls	r3, r3, #23
    af36:	d4ac      	bmi.n	ae92 <work_queue_main+0x12>
	z_impl_k_yield();
    af38:	f000 fb40 	bl	b5bc <z_impl_k_yield>
}
    af3c:	e7a9      	b.n	ae92 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    af3e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    af42:	2200      	movs	r2, #0
    af44:	2101      	movs	r1, #1
    af46:	4628      	mov	r0, r5
    af48:	f003 f9f1 	bl	e32e <z_sched_wake>
    af4c:	2800      	cmp	r0, #0
    af4e:	d1f8      	bne.n	af42 <work_queue_main+0xc2>
    af50:	e7b1      	b.n	aeb6 <work_queue_main+0x36>
	return list->head;
    af52:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    af54:	f023 0303 	bic.w	r3, r3, #3
    af58:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    af5a:	2800      	cmp	r0, #0
    af5c:	d0e0      	beq.n	af20 <work_queue_main+0xa0>
	return node->next;
    af5e:	2700      	movs	r7, #0
    af60:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    af64:	463b      	mov	r3, r7
    af66:	2800      	cmp	r0, #0
    af68:	d0da      	beq.n	af20 <work_queue_main+0xa0>
		if (wc->work == work) {
    af6a:	6842      	ldr	r2, [r0, #4]
    af6c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    af6e:	4601      	mov	r1, r0
		if (wc->work == work) {
    af70:	d10c      	bne.n	af8c <work_queue_main+0x10c>
	return node->next;
    af72:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    af74:	b99f      	cbnz	r7, af9e <work_queue_main+0x11e>
    af76:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    af78:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    af7a:	4282      	cmp	r2, r0
    af7c:	d100      	bne.n	af80 <work_queue_main+0x100>
	list->tail = node;
    af7e:	6071      	str	r1, [r6, #4]
	parent->next = child;
    af80:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    af84:	f7ff ff0c 	bl	ada0 <z_impl_k_sem_give>
}
    af88:	4639      	mov	r1, r7
    af8a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    af8c:	f1ba 0f00 	cmp.w	sl, #0
    af90:	d00b      	beq.n	afaa <work_queue_main+0x12a>
	return node->next;
    af92:	f8da 2000 	ldr.w	r2, [sl]
    af96:	4650      	mov	r0, sl
    af98:	460f      	mov	r7, r1
    af9a:	4692      	mov	sl, r2
    af9c:	e7e3      	b.n	af66 <work_queue_main+0xe6>
	parent->next = child;
    af9e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    afa0:	6872      	ldr	r2, [r6, #4]
    afa2:	4282      	cmp	r2, r0
	list->tail = node;
    afa4:	bf08      	it	eq
    afa6:	6077      	streq	r7, [r6, #4]
}
    afa8:	e7ea      	b.n	af80 <work_queue_main+0x100>
    afaa:	4652      	mov	r2, sl
    afac:	e7f3      	b.n	af96 <work_queue_main+0x116>
    afae:	bf00      	nop
    afb0:	2000221c 	.word	0x2000221c
    afb4:	2000252c 	.word	0x2000252c

0000afb8 <submit_to_queue_locked>:
{
    afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    afba:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    afbc:	079a      	lsls	r2, r3, #30
{
    afbe:	4604      	mov	r4, r0
    afc0:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    afc2:	f3c3 0640 	ubfx	r6, r3, #1, #1
    afc6:	d42c      	bmi.n	b022 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    afc8:	075b      	lsls	r3, r3, #29
    afca:	d41a      	bmi.n	b002 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    afcc:	680b      	ldr	r3, [r1, #0]
    afce:	b90b      	cbnz	r3, afd4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    afd0:	6883      	ldr	r3, [r0, #8]
    afd2:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    afd4:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    afd6:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    afd8:	bf44      	itt	mi
    afda:	68a3      	ldrmi	r3, [r4, #8]
    afdc:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    afde:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    afe0:	bf4c      	ite	mi
    afe2:	2602      	movmi	r6, #2
		ret = 1;
    afe4:	2601      	movpl	r6, #1
	if (queue == NULL) {
    afe6:	2d00      	cmp	r5, #0
    afe8:	d03a      	beq.n	b060 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    afea:	4b1f      	ldr	r3, [pc, #124]	; (b068 <submit_to_queue_locked+0xb0>)
    afec:	689b      	ldr	r3, [r3, #8]
    afee:	42ab      	cmp	r3, r5
    aff0:	d00a      	beq.n	b008 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    aff2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    aff6:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    aff8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    affc:	d414      	bmi.n	b028 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    affe:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    b002:	2300      	movs	r3, #0
    b004:	603b      	str	r3, [r7, #0]
	return ret;
    b006:	e025      	b.n	b054 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    b008:	f002 ff7a 	bl	df00 <k_is_in_isr>
    b00c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    b010:	2800      	cmp	r0, #0
    b012:	d1f0      	bne.n	aff6 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b014:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    b016:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b01a:	d5f0      	bpl.n	affe <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    b01c:	b152      	cbz	r2, b034 <submit_to_queue_locked+0x7c>
    b01e:	075b      	lsls	r3, r3, #29
    b020:	d408      	bmi.n	b034 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    b022:	f06f 060f 	mvn.w	r6, #15
    b026:	e7ec      	b.n	b002 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    b028:	2a00      	cmp	r2, #0
    b02a:	d1fa      	bne.n	b022 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    b02c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    b030:	2b00      	cmp	r3, #0
    b032:	d1f6      	bne.n	b022 <submit_to_queue_locked+0x6a>
	parent->next = child;
    b034:	2300      	movs	r3, #0
    b036:	6023      	str	r3, [r4, #0]
	return list->tail;
    b038:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    b03c:	b963      	cbnz	r3, b058 <submit_to_queue_locked+0xa0>
	list->head = node;
    b03e:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    b042:	4628      	mov	r0, r5
    b044:	f003 f817 	bl	e076 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    b048:	68e3      	ldr	r3, [r4, #12]
    b04a:	f043 0304 	orr.w	r3, r3, #4
    b04e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    b050:	683b      	ldr	r3, [r7, #0]
    b052:	60a3      	str	r3, [r4, #8]
}
    b054:	4630      	mov	r0, r6
    b056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    b058:	601c      	str	r4, [r3, #0]
	list->tail = node;
    b05a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    b05e:	e7f0      	b.n	b042 <submit_to_queue_locked+0x8a>
		return -EINVAL;
    b060:	f06f 0615 	mvn.w	r6, #21
    b064:	e7cd      	b.n	b002 <submit_to_queue_locked+0x4a>
    b066:	bf00      	nop
    b068:	200021f8 	.word	0x200021f8

0000b06c <k_work_submit>:
{
    b06c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    b06e:	4801      	ldr	r0, [pc, #4]	; (b074 <k_work_submit+0x8>)
    b070:	f003 b844 	b.w	e0fc <k_work_submit_to_queue>
    b074:	20000c40 	.word	0x20000c40

0000b078 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    b078:	b5f0      	push	{r4, r5, r6, r7, lr}
    b07a:	b089      	sub	sp, #36	; 0x24
    b07c:	4604      	mov	r4, r0
	list->head = NULL;
    b07e:	2000      	movs	r0, #0
	list->tail = NULL;
    b080:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    b084:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b086:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    b08a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    b08e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    b092:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    b096:	b31d      	cbz	r5, b0e0 <k_work_queue_start+0x68>
    b098:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    b09a:	2800      	cmp	r0, #0
    b09c:	f240 1001 	movw	r0, #257	; 0x101
    b0a0:	bf08      	it	eq
    b0a2:	2001      	moveq	r0, #1
	*flagp = flags;
    b0a4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b0a8:	2000      	movs	r0, #0
    b0aa:	f04f 36ff 	mov.w	r6, #4294967295
    b0ae:	f04f 37ff 	mov.w	r7, #4294967295
    b0b2:	e9cd 3003 	strd	r3, r0, [sp, #12]
    b0b6:	e9cd 0001 	strd	r0, r0, [sp, #4]
    b0ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
    b0be:	4b09      	ldr	r3, [pc, #36]	; (b0e4 <k_work_queue_start+0x6c>)
    b0c0:	9400      	str	r4, [sp, #0]
    b0c2:	4620      	mov	r0, r4
    b0c4:	f7ff fcde 	bl	aa84 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    b0c8:	b125      	cbz	r5, b0d4 <k_work_queue_start+0x5c>
    b0ca:	6829      	ldr	r1, [r5, #0]
    b0cc:	b111      	cbz	r1, b0d4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    b0ce:	4620      	mov	r0, r4
    b0d0:	f002 ff1c 	bl	df0c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    b0d4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    b0d6:	b009      	add	sp, #36	; 0x24
    b0d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    b0dc:	f002 bf1b 	b.w	df16 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    b0e0:	2001      	movs	r0, #1
    b0e2:	e7df      	b.n	b0a4 <k_work_queue_start+0x2c>
    b0e4:	0000ae81 	.word	0x0000ae81

0000b0e8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    b0e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b0ea:	9001      	str	r0, [sp, #4]
    b0ec:	4608      	mov	r0, r1
	__asm__ volatile(
    b0ee:	f04f 0120 	mov.w	r1, #32
    b0f2:	f3ef 8411 	mrs	r4, BASEPRI
    b0f6:	f381 8812 	msr	BASEPRI_MAX, r1
    b0fa:	f3bf 8f6f 	isb	sy
	return *flagp;
    b0fe:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    b100:	f011 0f0e 	tst.w	r1, #14
    b104:	d116      	bne.n	b134 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b106:	ea53 0502 	orrs.w	r5, r3, r2
    b10a:	d108      	bne.n	b11e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    b10c:	a901      	add	r1, sp, #4
    b10e:	f7ff ff53 	bl	afb8 <submit_to_queue_locked>
	__asm__ volatile(
    b112:	f384 8811 	msr	BASEPRI, r4
    b116:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    b11a:	b003      	add	sp, #12
    b11c:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    b11e:	f041 0108 	orr.w	r1, r1, #8
    b122:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    b124:	9901      	ldr	r1, [sp, #4]
    b126:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    b128:	3010      	adds	r0, #16
    b12a:	4903      	ldr	r1, [pc, #12]	; (b138 <k_work_schedule_for_queue+0x50>)
    b12c:	f000 fbd4 	bl	b8d8 <z_add_timeout>
	return ret;
    b130:	2001      	movs	r0, #1
    b132:	e7ee      	b.n	b112 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    b134:	2000      	movs	r0, #0
    b136:	e7ec      	b.n	b112 <k_work_schedule_for_queue+0x2a>
    b138:	0000e085 	.word	0x0000e085

0000b13c <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    b13c:	89c3      	ldrh	r3, [r0, #14]
    b13e:	2b7f      	cmp	r3, #127	; 0x7f
    b140:	d812      	bhi.n	b168 <sliceable+0x2c>
	int ret = slice_ticks;
    b142:	4b0a      	ldr	r3, [pc, #40]	; (b16c <sliceable+0x30>)
    b144:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    b146:	b163      	cbz	r3, b162 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b148:	4b09      	ldr	r3, [pc, #36]	; (b170 <sliceable+0x34>)
    b14a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b14e:	681b      	ldr	r3, [r3, #0]
    b150:	429a      	cmp	r2, r3
    b152:	db09      	blt.n	b168 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    b154:	7b43      	ldrb	r3, [r0, #13]
    b156:	06db      	lsls	r3, r3, #27
    b158:	d106      	bne.n	b168 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    b15a:	4b06      	ldr	r3, [pc, #24]	; (b174 <sliceable+0x38>)
    b15c:	1ac3      	subs	r3, r0, r3
    b15e:	bf18      	it	ne
    b160:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    b162:	f003 0001 	and.w	r0, r3, #1
    b166:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    b168:	2300      	movs	r3, #0
    b16a:	e7fa      	b.n	b162 <sliceable+0x26>
    b16c:	2000222c 	.word	0x2000222c
    b170:	20002228 	.word	0x20002228
    b174:	20000b20 	.word	0x20000b20

0000b178 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    b178:	4b04      	ldr	r3, [pc, #16]	; (b18c <slice_timeout+0x14>)
    b17a:	1ac0      	subs	r0, r0, r3
    b17c:	4b04      	ldr	r3, [pc, #16]	; (b190 <slice_timeout+0x18>)
    b17e:	10c0      	asrs	r0, r0, #3
    b180:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    b182:	4b04      	ldr	r3, [pc, #16]	; (b194 <slice_timeout+0x1c>)
    b184:	2201      	movs	r2, #1
    b186:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    b188:	4770      	bx	lr
    b18a:	bf00      	nop
    b18c:	20000c20 	.word	0x20000c20
    b190:	aaaaaaab 	.word	0xaaaaaaab
    b194:	2000252c 	.word	0x2000252c

0000b198 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    b198:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    b19a:	4b0e      	ldr	r3, [pc, #56]	; (b1d4 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    b19c:	4c0e      	ldr	r4, [pc, #56]	; (b1d8 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    b19e:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    b1a0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    b1a4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    b1a8:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    b1aa:	4620      	mov	r0, r4
    b1ac:	f003 f8e2 	bl	e374 <z_abort_timeout>
	slice_expired[cpu] = false;
    b1b0:	4b0a      	ldr	r3, [pc, #40]	; (b1dc <z_reset_time_slice+0x44>)
    b1b2:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    b1b4:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    b1b6:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    b1b8:	f7ff ffc0 	bl	b13c <sliceable>
    b1bc:	b148      	cbz	r0, b1d2 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    b1be:	4b08      	ldr	r3, [pc, #32]	; (b1e0 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b1c0:	4908      	ldr	r1, [pc, #32]	; (b1e4 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    b1c2:	681a      	ldr	r2, [r3, #0]
    b1c4:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b1c6:	4620      	mov	r0, r4
    b1c8:	17d3      	asrs	r3, r2, #31
	}
}
    b1ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b1ce:	f000 bb83 	b.w	b8d8 <z_add_timeout>
}
    b1d2:	bd70      	pop	{r4, r5, r6, pc}
    b1d4:	200021f8 	.word	0x200021f8
    b1d8:	20000c20 	.word	0x20000c20
    b1dc:	2000252c 	.word	0x2000252c
    b1e0:	2000222c 	.word	0x2000222c
    b1e4:	0000b179 	.word	0x0000b179

0000b1e8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    b1e8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    b1ea:	4d0d      	ldr	r5, [pc, #52]	; (b220 <update_cache+0x38>)
    b1ec:	462b      	mov	r3, r5
    b1ee:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b1f2:	429c      	cmp	r4, r3
    b1f4:	d000      	beq.n	b1f8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b1f6:	b904      	cbnz	r4, b1fa <update_cache+0x12>
    b1f8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    b1fa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    b1fc:	b938      	cbnz	r0, b20e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    b1fe:	7b5a      	ldrb	r2, [r3, #13]
    b200:	06d2      	lsls	r2, r2, #27
    b202:	d104      	bne.n	b20e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    b204:	69a2      	ldr	r2, [r4, #24]
    b206:	b912      	cbnz	r2, b20e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    b208:	89da      	ldrh	r2, [r3, #14]
    b20a:	2a7f      	cmp	r2, #127	; 0x7f
    b20c:	d805      	bhi.n	b21a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    b20e:	429c      	cmp	r4, r3
    b210:	d002      	beq.n	b218 <update_cache+0x30>
			z_reset_time_slice(thread);
    b212:	4620      	mov	r0, r4
    b214:	f7ff ffc0 	bl	b198 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    b218:	4623      	mov	r3, r4
    b21a:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    b21c:	bd38      	pop	{r3, r4, r5, pc}
    b21e:	bf00      	nop
    b220:	200021f8 	.word	0x200021f8

0000b224 <move_thread_to_end_of_prio_q>:
{
    b224:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    b226:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    b22a:	7b43      	ldrb	r3, [r0, #13]
    b22c:	2a00      	cmp	r2, #0
{
    b22e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    b230:	da04      	bge.n	b23c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b236:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    b238:	f002 ff7d 	bl	e136 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    b23c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    b23e:	4a15      	ldr	r2, [pc, #84]	; (b294 <move_thread_to_end_of_prio_q+0x70>)
    b240:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b244:	4610      	mov	r0, r2
    b246:	734b      	strb	r3, [r1, #13]
    b248:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    b24c:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b24e:	4283      	cmp	r3, r0
    b250:	bf08      	it	eq
    b252:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b254:	b923      	cbnz	r3, b260 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    b256:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    b25a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    b25c:	6211      	str	r1, [r2, #32]
}
    b25e:	e00c      	b.n	b27a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    b260:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    b264:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    b268:	42b5      	cmp	r5, r6
    b26a:	d00e      	beq.n	b28a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b26c:	42ae      	cmp	r6, r5
    b26e:	dd0c      	ble.n	b28a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    b270:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    b272:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    b276:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    b278:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    b27a:	6890      	ldr	r0, [r2, #8]
    b27c:	1a43      	subs	r3, r0, r1
    b27e:	4258      	negs	r0, r3
}
    b280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    b284:	4158      	adcs	r0, r3
    b286:	f7ff bfaf 	b.w	b1e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b28a:	429c      	cmp	r4, r3
    b28c:	d0e3      	beq.n	b256 <move_thread_to_end_of_prio_q+0x32>
    b28e:	681b      	ldr	r3, [r3, #0]
    b290:	e7e0      	b.n	b254 <move_thread_to_end_of_prio_q+0x30>
    b292:	bf00      	nop
    b294:	200021f8 	.word	0x200021f8

0000b298 <ready_thread>:
{
    b298:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    b29a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b29e:	7b42      	ldrb	r2, [r0, #13]
    b2a0:	2b00      	cmp	r3, #0
    b2a2:	db29      	blt.n	b2f8 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b2a4:	06d3      	lsls	r3, r2, #27
    b2a6:	d127      	bne.n	b2f8 <ready_thread+0x60>
	return node->next != NULL;
    b2a8:	6983      	ldr	r3, [r0, #24]
    b2aa:	bb2b      	cbnz	r3, b2f8 <ready_thread+0x60>
	return list->head == list;
    b2ac:	4913      	ldr	r1, [pc, #76]	; (b2fc <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    b2ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b2b2:	7342      	strb	r2, [r0, #13]
    b2b4:	460a      	mov	r2, r1
    b2b6:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b2ba:	4294      	cmp	r4, r2
    b2bc:	bf18      	it	ne
    b2be:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    b2c0:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b2c2:	b923      	cbnz	r3, b2ce <ready_thread+0x36>
	node->prev = tail;
    b2c4:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    b2c8:	6020      	str	r0, [r4, #0]
	list->tail = node;
    b2ca:	6208      	str	r0, [r1, #32]
}
    b2cc:	e00c      	b.n	b2e8 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    b2ce:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    b2d2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    b2d6:	42b5      	cmp	r5, r6
    b2d8:	d00a      	beq.n	b2f0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b2da:	42ae      	cmp	r6, r5
    b2dc:	dd08      	ble.n	b2f0 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    b2de:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b2e0:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    b2e4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    b2e6:	6058      	str	r0, [r3, #4]
}
    b2e8:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    b2ea:	2000      	movs	r0, #0
    b2ec:	f7ff bf7c 	b.w	b1e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b2f0:	42a3      	cmp	r3, r4
    b2f2:	d0e7      	beq.n	b2c4 <ready_thread+0x2c>
    b2f4:	681b      	ldr	r3, [r3, #0]
    b2f6:	e7e4      	b.n	b2c2 <ready_thread+0x2a>
}
    b2f8:	bc70      	pop	{r4, r5, r6}
    b2fa:	4770      	bx	lr
    b2fc:	200021f8 	.word	0x200021f8

0000b300 <unready_thread>:
{
    b300:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    b302:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    b306:	7b43      	ldrb	r3, [r0, #13]
    b308:	2a00      	cmp	r2, #0
{
    b30a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    b30c:	da04      	bge.n	b318 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b312:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b314:	f002 ff0f 	bl	e136 <sys_dlist_remove>
	update_cache(thread == _current);
    b318:	4b04      	ldr	r3, [pc, #16]	; (b32c <unready_thread+0x2c>)
    b31a:	6898      	ldr	r0, [r3, #8]
    b31c:	1a43      	subs	r3, r0, r1
    b31e:	4258      	negs	r0, r3
    b320:	4158      	adcs	r0, r3
}
    b322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    b326:	f7ff bf5f 	b.w	b1e8 <update_cache>
    b32a:	bf00      	nop
    b32c:	200021f8 	.word	0x200021f8

0000b330 <pend_locked>:
{
    b330:	b570      	push	{r4, r5, r6, lr}
    b332:	4615      	mov	r5, r2
    b334:	461c      	mov	r4, r3
    b336:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    b338:	f002 ff18 	bl	e16c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b33c:	f1b4 3fff 	cmp.w	r4, #4294967295
    b340:	bf08      	it	eq
    b342:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    b346:	d008      	beq.n	b35a <pend_locked+0x2a>
    b348:	462a      	mov	r2, r5
    b34a:	4623      	mov	r3, r4
    b34c:	f106 0018 	add.w	r0, r6, #24
    b350:	4902      	ldr	r1, [pc, #8]	; (b35c <pend_locked+0x2c>)
}
    b352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b356:	f000 babf 	b.w	b8d8 <z_add_timeout>
    b35a:	bd70      	pop	{r4, r5, r6, pc}
    b35c:	0000e245 	.word	0x0000e245

0000b360 <z_time_slice>:
{
    b360:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b362:	f04f 0320 	mov.w	r3, #32
    b366:	f3ef 8511 	mrs	r5, BASEPRI
    b36a:	f383 8812 	msr	BASEPRI_MAX, r3
    b36e:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    b372:	4b10      	ldr	r3, [pc, #64]	; (b3b4 <z_time_slice+0x54>)
	if (pending_current == curr) {
    b374:	4a10      	ldr	r2, [pc, #64]	; (b3b8 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    b376:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    b378:	6810      	ldr	r0, [r2, #0]
    b37a:	42a0      	cmp	r0, r4
    b37c:	d106      	bne.n	b38c <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    b37e:	f7ff ff0b 	bl	b198 <z_reset_time_slice>
	__asm__ volatile(
    b382:	f385 8811 	msr	BASEPRI, r5
    b386:	f3bf 8f6f 	isb	sy
}
    b38a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    b38c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    b38e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    b390:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    b392:	4a0a      	ldr	r2, [pc, #40]	; (b3bc <z_time_slice+0x5c>)
    b394:	5cd3      	ldrb	r3, [r2, r3]
    b396:	2b00      	cmp	r3, #0
    b398:	d0f3      	beq.n	b382 <z_time_slice+0x22>
    b39a:	4620      	mov	r0, r4
    b39c:	f7ff fece 	bl	b13c <sliceable>
    b3a0:	2800      	cmp	r0, #0
    b3a2:	d0ee      	beq.n	b382 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    b3a4:	7b63      	ldrb	r3, [r4, #13]
    b3a6:	06db      	lsls	r3, r3, #27
    b3a8:	d102      	bne.n	b3b0 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    b3aa:	4620      	mov	r0, r4
    b3ac:	f7ff ff3a 	bl	b224 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    b3b0:	4620      	mov	r0, r4
    b3b2:	e7e4      	b.n	b37e <z_time_slice+0x1e>
    b3b4:	200021f8 	.word	0x200021f8
    b3b8:	20002224 	.word	0x20002224
    b3bc:	2000252c 	.word	0x2000252c

0000b3c0 <z_pend_curr>:
{
    b3c0:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    b3c2:	480c      	ldr	r0, [pc, #48]	; (b3f4 <z_pend_curr+0x34>)
    b3c4:	4d0c      	ldr	r5, [pc, #48]	; (b3f8 <z_pend_curr+0x38>)
    b3c6:	6886      	ldr	r6, [r0, #8]
    b3c8:	602e      	str	r6, [r5, #0]
{
    b3ca:	460c      	mov	r4, r1
    b3cc:	4611      	mov	r1, r2
    b3ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    b3d2:	f04f 0620 	mov.w	r6, #32
    b3d6:	f3ef 8511 	mrs	r5, BASEPRI
    b3da:	f386 8812 	msr	BASEPRI_MAX, r6
    b3de:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    b3e2:	6880      	ldr	r0, [r0, #8]
    b3e4:	f7ff ffa4 	bl	b330 <pend_locked>
	ret = arch_swap(key);
    b3e8:	4620      	mov	r0, r4
}
    b3ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b3ee:	f7f8 bc89 	b.w	3d04 <arch_swap>
    b3f2:	bf00      	nop
    b3f4:	200021f8 	.word	0x200021f8
    b3f8:	20002224 	.word	0x20002224

0000b3fc <z_set_prio>:
{
    b3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3fe:	4604      	mov	r4, r0
    b400:	f04f 0320 	mov.w	r3, #32
    b404:	f3ef 8611 	mrs	r6, BASEPRI
    b408:	f383 8812 	msr	BASEPRI_MAX, r3
    b40c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    b410:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b412:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    b414:	b249      	sxtb	r1, r1
    b416:	d119      	bne.n	b44c <z_set_prio+0x50>
	return node->next != NULL;
    b418:	6985      	ldr	r5, [r0, #24]
    b41a:	b9bd      	cbnz	r5, b44c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b41c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b420:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b422:	f002 fe88 	bl	e136 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    b426:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    b428:	4a16      	ldr	r2, [pc, #88]	; (b484 <z_set_prio+0x88>)
				thread->base.prio = prio;
    b42a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    b42c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b430:	7343      	strb	r3, [r0, #13]
    b432:	4613      	mov	r3, r2
    b434:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b438:	4298      	cmp	r0, r3
    b43a:	bf18      	it	ne
    b43c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    b43e:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b440:	b95d      	cbnz	r5, b45a <z_set_prio+0x5e>
	node->prev = tail;
    b442:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    b446:	6004      	str	r4, [r0, #0]
	list->tail = node;
    b448:	6214      	str	r4, [r2, #32]
}
    b44a:	e011      	b.n	b470 <z_set_prio+0x74>
			thread->base.prio = prio;
    b44c:	73a1      	strb	r1, [r4, #14]
    b44e:	2000      	movs	r0, #0
	__asm__ volatile(
    b450:	f386 8811 	msr	BASEPRI, r6
    b454:	f3bf 8f6f 	isb	sy
}
    b458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    b45a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    b45e:	42b9      	cmp	r1, r7
    b460:	d00b      	beq.n	b47a <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b462:	428f      	cmp	r7, r1
    b464:	dd09      	ble.n	b47a <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    b466:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    b468:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    b46c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b46e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    b470:	2001      	movs	r0, #1
    b472:	f7ff feb9 	bl	b1e8 <update_cache>
    b476:	2001      	movs	r0, #1
    b478:	e7ea      	b.n	b450 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    b47a:	42a8      	cmp	r0, r5
    b47c:	d0e1      	beq.n	b442 <z_set_prio+0x46>
    b47e:	682d      	ldr	r5, [r5, #0]
    b480:	e7de      	b.n	b440 <z_set_prio+0x44>
    b482:	bf00      	nop
    b484:	200021f8 	.word	0x200021f8

0000b488 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b488:	b949      	cbnz	r1, b49e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b48a:	f3ef 8005 	mrs	r0, IPSR
    b48e:	b930      	cbnz	r0, b49e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    b490:	4b05      	ldr	r3, [pc, #20]	; (b4a8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    b492:	699a      	ldr	r2, [r3, #24]
    b494:	689b      	ldr	r3, [r3, #8]
    b496:	429a      	cmp	r2, r3
    b498:	d001      	beq.n	b49e <z_reschedule+0x16>
    b49a:	f7f8 bc33 	b.w	3d04 <arch_swap>
    b49e:	f381 8811 	msr	BASEPRI, r1
    b4a2:	f3bf 8f6f 	isb	sy
}
    b4a6:	4770      	bx	lr
    b4a8:	200021f8 	.word	0x200021f8

0000b4ac <z_sched_start>:
{
    b4ac:	b510      	push	{r4, lr}
	__asm__ volatile(
    b4ae:	f04f 0220 	mov.w	r2, #32
    b4b2:	f3ef 8411 	mrs	r4, BASEPRI
    b4b6:	f382 8812 	msr	BASEPRI_MAX, r2
    b4ba:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    b4be:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    b4c0:	0751      	lsls	r1, r2, #29
    b4c2:	d404      	bmi.n	b4ce <z_sched_start+0x22>
	__asm__ volatile(
    b4c4:	f384 8811 	msr	BASEPRI, r4
    b4c8:	f3bf 8f6f 	isb	sy
}
    b4cc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b4ce:	f022 0204 	bic.w	r2, r2, #4
    b4d2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    b4d4:	f7ff fee0 	bl	b298 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    b4d8:	4621      	mov	r1, r4
    b4da:	4802      	ldr	r0, [pc, #8]	; (b4e4 <z_sched_start+0x38>)
}
    b4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    b4e0:	f7ff bfd2 	b.w	b488 <z_reschedule>
    b4e4:	2000252d 	.word	0x2000252d

0000b4e8 <z_impl_k_thread_suspend>:
{
    b4e8:	b570      	push	{r4, r5, r6, lr}
    b4ea:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    b4ec:	3018      	adds	r0, #24
    b4ee:	f002 ff41 	bl	e374 <z_abort_timeout>
	__asm__ volatile(
    b4f2:	f04f 0320 	mov.w	r3, #32
    b4f6:	f3ef 8611 	mrs	r6, BASEPRI
    b4fa:	f383 8812 	msr	BASEPRI_MAX, r3
    b4fe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    b502:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    b506:	7b63      	ldrb	r3, [r4, #13]
    b508:	2a00      	cmp	r2, #0
    b50a:	da05      	bge.n	b518 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b50c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b510:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b512:	4620      	mov	r0, r4
    b514:	f002 fe0f 	bl	e136 <sys_dlist_remove>
		update_cache(thread == _current);
    b518:	4d0b      	ldr	r5, [pc, #44]	; (b548 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b51a:	7b63      	ldrb	r3, [r4, #13]
    b51c:	68a8      	ldr	r0, [r5, #8]
    b51e:	f043 0310 	orr.w	r3, r3, #16
    b522:	7363      	strb	r3, [r4, #13]
    b524:	1b03      	subs	r3, r0, r4
    b526:	4258      	negs	r0, r3
    b528:	4158      	adcs	r0, r3
    b52a:	f7ff fe5d 	bl	b1e8 <update_cache>
	__asm__ volatile(
    b52e:	f386 8811 	msr	BASEPRI, r6
    b532:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    b536:	68ab      	ldr	r3, [r5, #8]
    b538:	42a3      	cmp	r3, r4
    b53a:	d103      	bne.n	b544 <z_impl_k_thread_suspend+0x5c>
}
    b53c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    b540:	f002 bedb 	b.w	e2fa <z_reschedule_unlocked>
}
    b544:	bd70      	pop	{r4, r5, r6, pc}
    b546:	bf00      	nop
    b548:	200021f8 	.word	0x200021f8

0000b54c <k_sched_lock>:
	__asm__ volatile(
    b54c:	f04f 0320 	mov.w	r3, #32
    b550:	f3ef 8111 	mrs	r1, BASEPRI
    b554:	f383 8812 	msr	BASEPRI_MAX, r3
    b558:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    b55c:	4b04      	ldr	r3, [pc, #16]	; (b570 <k_sched_lock+0x24>)
    b55e:	689a      	ldr	r2, [r3, #8]
    b560:	7bd3      	ldrb	r3, [r2, #15]
    b562:	3b01      	subs	r3, #1
    b564:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    b566:	f381 8811 	msr	BASEPRI, r1
    b56a:	f3bf 8f6f 	isb	sy
}
    b56e:	4770      	bx	lr
    b570:	200021f8 	.word	0x200021f8

0000b574 <k_sched_unlock>:
{
    b574:	b510      	push	{r4, lr}
	__asm__ volatile(
    b576:	f04f 0320 	mov.w	r3, #32
    b57a:	f3ef 8411 	mrs	r4, BASEPRI
    b57e:	f383 8812 	msr	BASEPRI_MAX, r3
    b582:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    b586:	4b08      	ldr	r3, [pc, #32]	; (b5a8 <k_sched_unlock+0x34>)
    b588:	689a      	ldr	r2, [r3, #8]
    b58a:	7bd3      	ldrb	r3, [r2, #15]
    b58c:	3301      	adds	r3, #1
    b58e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    b590:	2000      	movs	r0, #0
    b592:	f7ff fe29 	bl	b1e8 <update_cache>
	__asm__ volatile(
    b596:	f384 8811 	msr	BASEPRI, r4
    b59a:	f3bf 8f6f 	isb	sy
}
    b59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    b5a2:	f002 beaa 	b.w	e2fa <z_reschedule_unlocked>
    b5a6:	bf00      	nop
    b5a8:	200021f8 	.word	0x200021f8

0000b5ac <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    b5ac:	4b02      	ldr	r3, [pc, #8]	; (b5b8 <z_sched_init+0xc>)
    b5ae:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    b5b2:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    b5b6:	4770      	bx	lr
    b5b8:	200021f8 	.word	0x200021f8

0000b5bc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    b5be:	f04f 0320 	mov.w	r3, #32
    b5c2:	f3ef 8511 	mrs	r5, BASEPRI
    b5c6:	f383 8812 	msr	BASEPRI_MAX, r3
    b5ca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    b5ce:	4919      	ldr	r1, [pc, #100]	; (b634 <z_impl_k_yield+0x78>)
    b5d0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b5d2:	7b43      	ldrb	r3, [r0, #13]
    b5d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b5d8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b5da:	f002 fdac 	bl	e136 <sys_dlist_remove>
	}
	queue_thread(_current);
    b5de:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    b5e0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    b5e2:	4608      	mov	r0, r1
    b5e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b5e8:	735a      	strb	r2, [r3, #13]
    b5ea:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    b5ee:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b5f0:	4282      	cmp	r2, r0
    b5f2:	bf08      	it	eq
    b5f4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b5f6:	b922      	cbnz	r2, b602 <z_impl_k_yield+0x46>
	node->prev = tail;
    b5f8:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    b5fc:	6023      	str	r3, [r4, #0]
	list->tail = node;
    b5fe:	620b      	str	r3, [r1, #32]
}
    b600:	e00c      	b.n	b61c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    b602:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    b606:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    b60a:	42be      	cmp	r6, r7
    b60c:	d00e      	beq.n	b62c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b60e:	42b7      	cmp	r7, r6
    b610:	dd0c      	ble.n	b62c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    b612:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    b614:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    b618:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    b61a:	6053      	str	r3, [r2, #4]
	update_cache(1);
    b61c:	2001      	movs	r0, #1
    b61e:	f7ff fde3 	bl	b1e8 <update_cache>
    b622:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    b624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b628:	f7f8 bb6c 	b.w	3d04 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    b62c:	42a2      	cmp	r2, r4
    b62e:	d0e3      	beq.n	b5f8 <z_impl_k_yield+0x3c>
    b630:	6812      	ldr	r2, [r2, #0]
    b632:	e7e0      	b.n	b5f6 <z_impl_k_yield+0x3a>
    b634:	200021f8 	.word	0x200021f8

0000b638 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    b638:	ea50 0301 	orrs.w	r3, r0, r1
{
    b63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b640:	4605      	mov	r5, r0
    b642:	460e      	mov	r6, r1
	if (ticks == 0) {
    b644:	d103      	bne.n	b64e <z_tick_sleep+0x16>
	z_impl_k_yield();
    b646:	f7ff ffb9 	bl	b5bc <z_impl_k_yield>
		k_yield();
		return 0;
    b64a:	2000      	movs	r0, #0
    b64c:	e02c      	b.n	b6a8 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    b64e:	1c83      	adds	r3, r0, #2
    b650:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    b654:	db2a      	blt.n	b6ac <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    b656:	f002 feb3 	bl	e3c0 <sys_clock_tick_get_32>
    b65a:	182c      	adds	r4, r5, r0
    b65c:	f04f 0320 	mov.w	r3, #32
    b660:	f3ef 8811 	mrs	r8, BASEPRI
    b664:	f383 8812 	msr	BASEPRI_MAX, r3
    b668:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    b66c:	4f11      	ldr	r7, [pc, #68]	; (b6b4 <z_tick_sleep+0x7c>)
    b66e:	4b12      	ldr	r3, [pc, #72]	; (b6b8 <z_tick_sleep+0x80>)
    b670:	68b8      	ldr	r0, [r7, #8]
    b672:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    b674:	f7ff fe44 	bl	b300 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    b678:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b67a:	4910      	ldr	r1, [pc, #64]	; (b6bc <z_tick_sleep+0x84>)
    b67c:	462a      	mov	r2, r5
    b67e:	4633      	mov	r3, r6
    b680:	3018      	adds	r0, #24
    b682:	f000 f929 	bl	b8d8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    b686:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b688:	7b53      	ldrb	r3, [r2, #13]
    b68a:	f043 0310 	orr.w	r3, r3, #16
    b68e:	7353      	strb	r3, [r2, #13]
    b690:	4640      	mov	r0, r8
    b692:	f7f8 fb37 	bl	3d04 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    b696:	f002 fe93 	bl	e3c0 <sys_clock_tick_get_32>
    b69a:	1a20      	subs	r0, r4, r0
    b69c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    b6a0:	2801      	cmp	r0, #1
    b6a2:	f173 0300 	sbcs.w	r3, r3, #0
    b6a6:	dbd0      	blt.n	b64a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    b6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    b6ac:	f06f 0401 	mvn.w	r4, #1
    b6b0:	1a24      	subs	r4, r4, r0
    b6b2:	e7d3      	b.n	b65c <z_tick_sleep+0x24>
    b6b4:	200021f8 	.word	0x200021f8
    b6b8:	20002224 	.word	0x20002224
    b6bc:	0000e245 	.word	0x0000e245

0000b6c0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b6c0:	f1b1 3fff 	cmp.w	r1, #4294967295
    b6c4:	bf08      	it	eq
    b6c6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    b6ca:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b6cc:	d106      	bne.n	b6dc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    b6ce:	4b08      	ldr	r3, [pc, #32]	; (b6f0 <z_impl_k_sleep+0x30>)
    b6d0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    b6d2:	f7ff ff09 	bl	b4e8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    b6d6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    b6da:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    b6dc:	f7ff ffac 	bl	b638 <z_tick_sleep>
    b6e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b6e4:	fb80 0303 	smull	r0, r3, r0, r3
    b6e8:	0bc0      	lsrs	r0, r0, #15
    b6ea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    b6ee:	e7f4      	b.n	b6da <z_impl_k_sleep+0x1a>
    b6f0:	200021f8 	.word	0x200021f8

0000b6f4 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    b6f4:	b538      	push	{r3, r4, r5, lr}
    b6f6:	4c0a      	ldr	r4, [pc, #40]	; (b720 <z_impl_k_usleep+0x2c>)
    b6f8:	4a0a      	ldr	r2, [pc, #40]	; (b724 <z_impl_k_usleep+0x30>)
    b6fa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    b6fe:	2100      	movs	r1, #0
    b700:	fbc0 4105 	smlal	r4, r1, r0, r5
    b704:	2300      	movs	r3, #0
    b706:	4620      	mov	r0, r4
    b708:	f7f4 fcfa 	bl	100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    b70c:	17c1      	asrs	r1, r0, #31
    b70e:	f7ff ff93 	bl	b638 <z_tick_sleep>
    b712:	4b04      	ldr	r3, [pc, #16]	; (b724 <z_impl_k_usleep+0x30>)
    b714:	fb80 0303 	smull	r0, r3, r0, r3
    b718:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    b71a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    b71e:	bd38      	pop	{r3, r4, r5, pc}
    b720:	000f423f 	.word	0x000f423f
    b724:	000f4240 	.word	0x000f4240

0000b728 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    b728:	4b01      	ldr	r3, [pc, #4]	; (b730 <z_impl_z_current_get+0x8>)
    b72a:	6898      	ldr	r0, [r3, #8]
    b72c:	4770      	bx	lr
    b72e:	bf00      	nop
    b730:	200021f8 	.word	0x200021f8

0000b734 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    b734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b738:	4604      	mov	r4, r0
    b73a:	f04f 0320 	mov.w	r3, #32
    b73e:	f3ef 8611 	mrs	r6, BASEPRI
    b742:	f383 8812 	msr	BASEPRI_MAX, r3
    b746:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    b74a:	7b03      	ldrb	r3, [r0, #12]
    b74c:	07d9      	lsls	r1, r3, #31
    b74e:	d50b      	bpl.n	b768 <z_thread_abort+0x34>
	__asm__ volatile(
    b750:	f386 8811 	msr	BASEPRI, r6
    b754:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    b758:	4040      	eors	r0, r0
    b75a:	f380 8811 	msr	BASEPRI, r0
    b75e:	f04f 0004 	mov.w	r0, #4
    b762:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    b764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    b768:	7b43      	ldrb	r3, [r0, #13]
    b76a:	071a      	lsls	r2, r3, #28
    b76c:	d504      	bpl.n	b778 <z_thread_abort+0x44>
    b76e:	f386 8811 	msr	BASEPRI, r6
    b772:	f3bf 8f6f 	isb	sy
    b776:	e7f5      	b.n	b764 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b778:	f023 0220 	bic.w	r2, r3, #32
    b77c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    b780:	09d2      	lsrs	r2, r2, #7
    b782:	d120      	bne.n	b7c6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b784:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    b786:	68a3      	ldr	r3, [r4, #8]
    b788:	b113      	cbz	r3, b790 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    b78a:	4620      	mov	r0, r4
    b78c:	f002 fcdb 	bl	e146 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    b790:	f104 0018 	add.w	r0, r4, #24
    b794:	f002 fdee 	bl	e374 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b798:	f104 0758 	add.w	r7, r4, #88	; 0x58
    b79c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    b7a0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b7a2:	42bd      	cmp	r5, r7
    b7a4:	d000      	beq.n	b7a8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b7a6:	b9b5      	cbnz	r5, b7d6 <z_thread_abort+0xa2>
		update_cache(1);
    b7a8:	2001      	movs	r0, #1
    b7aa:	f7ff fd1d 	bl	b1e8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    b7ae:	4b10      	ldr	r3, [pc, #64]	; (b7f0 <z_thread_abort+0xbc>)
    b7b0:	689b      	ldr	r3, [r3, #8]
    b7b2:	42a3      	cmp	r3, r4
    b7b4:	d1db      	bne.n	b76e <z_thread_abort+0x3a>
    b7b6:	f3ef 8305 	mrs	r3, IPSR
    b7ba:	2b00      	cmp	r3, #0
    b7bc:	d1d7      	bne.n	b76e <z_thread_abort+0x3a>
    b7be:	4630      	mov	r0, r6
    b7c0:	f7f8 faa0 	bl	3d04 <arch_swap>
	return ret;
    b7c4:	e7d3      	b.n	b76e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b7c6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    b7ca:	f043 0308 	orr.w	r3, r3, #8
    b7ce:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b7d0:	f002 fcb1 	bl	e136 <sys_dlist_remove>
}
    b7d4:	e7d7      	b.n	b786 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    b7d6:	4628      	mov	r0, r5
    b7d8:	f002 fcb5 	bl	e146 <unpend_thread_no_timeout>
    b7dc:	f105 0018 	add.w	r0, r5, #24
    b7e0:	f002 fdc8 	bl	e374 <z_abort_timeout>
    b7e4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    b7e8:	4628      	mov	r0, r5
    b7ea:	f7ff fd55 	bl	b298 <ready_thread>
    b7ee:	e7d7      	b.n	b7a0 <z_thread_abort+0x6c>
    b7f0:	200021f8 	.word	0x200021f8

0000b7f4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    b7f4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b7f6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    b7fa:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b7fc:	e9cd 6700 	strd	r6, r7, [sp]
    b800:	f7ff fdde 	bl	b3c0 <z_pend_curr>

	if (data != NULL) {
    b804:	b11c      	cbz	r4, b80e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    b806:	4b03      	ldr	r3, [pc, #12]	; (b814 <z_sched_wait+0x20>)
    b808:	689b      	ldr	r3, [r3, #8]
    b80a:	695b      	ldr	r3, [r3, #20]
    b80c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    b80e:	b002      	add	sp, #8
    b810:	bdd0      	pop	{r4, r6, r7, pc}
    b812:	bf00      	nop
    b814:	200021f8 	.word	0x200021f8

0000b818 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    b818:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    b81a:	4806      	ldr	r0, [pc, #24]	; (b834 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    b81c:	4a06      	ldr	r2, [pc, #24]	; (b838 <z_data_copy+0x20>)
    b81e:	4907      	ldr	r1, [pc, #28]	; (b83c <z_data_copy+0x24>)
    b820:	1a12      	subs	r2, r2, r0
    b822:	f002 fb1e 	bl	de62 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    b82a:	4a05      	ldr	r2, [pc, #20]	; (b840 <z_data_copy+0x28>)
    b82c:	4905      	ldr	r1, [pc, #20]	; (b844 <z_data_copy+0x2c>)
    b82e:	4806      	ldr	r0, [pc, #24]	; (b848 <z_data_copy+0x30>)
    b830:	f002 bb17 	b.w	de62 <z_early_memcpy>
    b834:	20000000 	.word	0x20000000
    b838:	200004fc 	.word	0x200004fc
    b83c:	000102c0 	.word	0x000102c0
    b840:	00000000 	.word	0x00000000
    b844:	000102c0 	.word	0x000102c0
    b848:	20000000 	.word	0x20000000

0000b84c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b84c:	4b03      	ldr	r3, [pc, #12]	; (b85c <elapsed+0x10>)
    b84e:	681b      	ldr	r3, [r3, #0]
    b850:	b90b      	cbnz	r3, b856 <elapsed+0xa>
    b852:	f7fd b811 	b.w	8878 <sys_clock_elapsed>
}
    b856:	2000      	movs	r0, #0
    b858:	4770      	bx	lr
    b85a:	bf00      	nop
    b85c:	20002230 	.word	0x20002230

0000b860 <next_timeout>:

static int32_t next_timeout(void)
{
    b860:	b510      	push	{r4, lr}
	return list->head == list;
    b862:	4b0e      	ldr	r3, [pc, #56]	; (b89c <next_timeout+0x3c>)
    b864:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b866:	429c      	cmp	r4, r3
    b868:	d104      	bne.n	b874 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    b86a:	f7ff ffef 	bl	b84c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    b86e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    b872:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    b874:	f7ff ffea 	bl	b84c <elapsed>
	if ((to == NULL) ||
    b878:	2c00      	cmp	r4, #0
    b87a:	d0f8      	beq.n	b86e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    b87c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    b880:	1a1b      	subs	r3, r3, r0
    b882:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    b886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b88a:	f172 0100 	sbcs.w	r1, r2, #0
    b88e:	daee      	bge.n	b86e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    b890:	2a00      	cmp	r2, #0
    b892:	bfac      	ite	ge
    b894:	4618      	movge	r0, r3
    b896:	2000      	movlt	r0, #0
	return ret;
    b898:	e7eb      	b.n	b872 <next_timeout+0x12>
    b89a:	bf00      	nop
    b89c:	20000260 	.word	0x20000260

0000b8a0 <remove_timeout>:
{
    b8a0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b8a2:	b170      	cbz	r0, b8c2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    b8a4:	4b0b      	ldr	r3, [pc, #44]	; (b8d4 <remove_timeout+0x34>)
    b8a6:	685b      	ldr	r3, [r3, #4]
    b8a8:	4298      	cmp	r0, r3
    b8aa:	d00a      	beq.n	b8c2 <remove_timeout+0x22>
    b8ac:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    b8ae:	b143      	cbz	r3, b8c2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    b8b0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    b8b4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    b8b8:	1912      	adds	r2, r2, r4
    b8ba:	eb41 0105 	adc.w	r1, r1, r5
    b8be:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    b8c2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    b8c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b8c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b8ca:	2300      	movs	r3, #0
	node->prev = NULL;
    b8cc:	e9c0 3300 	strd	r3, r3, [r0]
}
    b8d0:	bd30      	pop	{r4, r5, pc}
    b8d2:	bf00      	nop
    b8d4:	20000260 	.word	0x20000260

0000b8d8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
    b8dc:	bf08      	it	eq
    b8de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    b8e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8e4:	4604      	mov	r4, r0
    b8e6:	461d      	mov	r5, r3
    b8e8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b8ea:	d05c      	beq.n	b9a6 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b8ec:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    b8ee:	f04f 0320 	mov.w	r3, #32
    b8f2:	f3ef 8711 	mrs	r7, BASEPRI
    b8f6:	f383 8812 	msr	BASEPRI_MAX, r3
    b8fa:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b8fe:	3201      	adds	r2, #1
    b900:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    b904:	da24      	bge.n	b950 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b906:	492d      	ldr	r1, [pc, #180]	; (b9bc <z_add_timeout+0xe4>)
    b908:	e9d1 2000 	ldrd	r2, r0, [r1]
    b90c:	f06f 0301 	mvn.w	r3, #1
    b910:	1a9b      	subs	r3, r3, r2
    b912:	f04f 32ff 	mov.w	r2, #4294967295
    b916:	eb62 0000 	sbc.w	r0, r2, r0
    b91a:	1b9e      	subs	r6, r3, r6
    b91c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    b920:	2e01      	cmp	r6, #1
    b922:	f170 0300 	sbcs.w	r3, r0, #0
    b926:	da01      	bge.n	b92c <z_add_timeout+0x54>
    b928:	2601      	movs	r6, #1
    b92a:	2000      	movs	r0, #0
    b92c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    b930:	4e23      	ldr	r6, [pc, #140]	; (b9c0 <z_add_timeout+0xe8>)
    b932:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    b936:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b938:	45b4      	cmp	ip, r6
    b93a:	bf08      	it	eq
    b93c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    b940:	f1bc 0f00 	cmp.w	ip, #0
    b944:	d10d      	bne.n	b962 <z_add_timeout+0x8a>
	node->prev = tail;
    b946:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    b94a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    b94c:	6074      	str	r4, [r6, #4]
}
    b94e:	e01c      	b.n	b98a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    b950:	f7ff ff7c 	bl	b84c <elapsed>
    b954:	3601      	adds	r6, #1
    b956:	f145 0500 	adc.w	r5, r5, #0
    b95a:	1836      	adds	r6, r6, r0
    b95c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    b960:	e7e4      	b.n	b92c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    b962:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    b966:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    b96a:	4293      	cmp	r3, r2
    b96c:	eb71 0e00 	sbcs.w	lr, r1, r0
    b970:	da1a      	bge.n	b9a8 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    b972:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    b974:	f8dc 3004 	ldr.w	r3, [ip, #4]
    b978:	eb60 0001 	sbc.w	r0, r0, r1
    b97c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    b980:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    b984:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b986:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    b98a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b98c:	42b3      	cmp	r3, r6
    b98e:	d006      	beq.n	b99e <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b990:	429c      	cmp	r4, r3
    b992:	d104      	bne.n	b99e <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    b994:	f7ff ff64 	bl	b860 <next_timeout>
    b998:	2100      	movs	r1, #0
    b99a:	f7fc ff3b 	bl	8814 <sys_clock_set_timeout>
	__asm__ volatile(
    b99e:	f387 8811 	msr	BASEPRI, r7
    b9a2:	f3bf 8f6f 	isb	sy
		}
	}
}
    b9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    b9a8:	1a9b      	subs	r3, r3, r2
    b9aa:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    b9ae:	45ac      	cmp	ip, r5
    b9b0:	e9c4 3104 	strd	r3, r1, [r4, #16]
    b9b4:	d0c7      	beq.n	b946 <z_add_timeout+0x6e>
    b9b6:	f8dc c000 	ldr.w	ip, [ip]
    b9ba:	e7c1      	b.n	b940 <z_add_timeout+0x68>
    b9bc:	20000c38 	.word	0x20000c38
    b9c0:	20000260 	.word	0x20000260

0000b9c4 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    b9c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    b9c8:	f04f 0320 	mov.w	r3, #32
    b9cc:	f3ef 8c11 	mrs	ip, BASEPRI
    b9d0:	f383 8812 	msr	BASEPRI_MAX, r3
    b9d4:	f3bf 8f6f 	isb	sy
	return list->head == list;
    b9d8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; ba8c <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    b9dc:	f8df 90b0 	ldr.w	r9, [pc, #176]	; ba90 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    b9e0:	4f2c      	ldr	r7, [pc, #176]	; (ba94 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    b9e2:	f8c9 0000 	str.w	r0, [r9]
    b9e6:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    b9ea:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b9ec:	4550      	cmp	r0, sl
    b9ee:	bf08      	it	eq
    b9f0:	2000      	moveq	r0, #0
    b9f2:	2500      	movs	r5, #0
		curr_tick += dt;
    b9f4:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    b9f8:	f8d9 3000 	ldr.w	r3, [r9]
    b9fc:	46e0      	mov	r8, ip
    b9fe:	b380      	cbz	r0, ba62 <sys_clock_announce+0x9e>
    ba00:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    ba04:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    ba08:	42b3      	cmp	r3, r6
    ba0a:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    ba0e:	da05      	bge.n	ba1c <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    ba10:	1af6      	subs	r6, r6, r3
    ba12:	eb6c 040e 	sbc.w	r4, ip, lr
    ba16:	e9c0 6404 	strd	r6, r4, [r0, #16]
    ba1a:	e022      	b.n	ba62 <sys_clock_announce+0x9e>
		curr_tick += dt;
    ba1c:	18b2      	adds	r2, r6, r2
    ba1e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    ba22:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    ba26:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    ba2a:	f7ff ff39 	bl	b8a0 <remove_timeout>
	__asm__ volatile(
    ba2e:	f388 8811 	msr	BASEPRI, r8
    ba32:	f3bf 8f6f 	isb	sy
		t->fn(t);
    ba36:	6883      	ldr	r3, [r0, #8]
    ba38:	4798      	blx	r3
	__asm__ volatile(
    ba3a:	f04f 0320 	mov.w	r3, #32
    ba3e:	f3ef 8811 	mrs	r8, BASEPRI
    ba42:	f383 8812 	msr	BASEPRI_MAX, r3
    ba46:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    ba4a:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    ba4e:	f8da 0000 	ldr.w	r0, [sl]
    ba52:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba54:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    ba56:	46c4      	mov	ip, r8
    ba58:	f8c9 3000 	str.w	r3, [r9]
    ba5c:	d1ca      	bne.n	b9f4 <sys_clock_announce+0x30>
		curr_tick += dt;
    ba5e:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    ba62:	189a      	adds	r2, r3, r2
    ba64:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    ba68:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    ba6a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    ba6e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    ba72:	f7ff fef5 	bl	b860 <next_timeout>
    ba76:	4621      	mov	r1, r4
    ba78:	f7fc fecc 	bl	8814 <sys_clock_set_timeout>
	__asm__ volatile(
    ba7c:	f388 8811 	msr	BASEPRI, r8
    ba80:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    ba84:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    ba88:	f7ff bc6a 	b.w	b360 <z_time_slice>
    ba8c:	20000260 	.word	0x20000260
    ba90:	20002230 	.word	0x20002230
    ba94:	20000c38 	.word	0x20000c38

0000ba98 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    ba98:	b510      	push	{r4, lr}
	__asm__ volatile(
    ba9a:	f04f 0320 	mov.w	r3, #32
    ba9e:	f3ef 8411 	mrs	r4, BASEPRI
    baa2:	f383 8812 	msr	BASEPRI_MAX, r3
    baa6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    baaa:	f7ff fecf 	bl	b84c <elapsed>
    baae:	4a06      	ldr	r2, [pc, #24]	; (bac8 <sys_clock_tick_get+0x30>)
    bab0:	4603      	mov	r3, r0
    bab2:	e9d2 0100 	ldrd	r0, r1, [r2]
    bab6:	1818      	adds	r0, r3, r0
    bab8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    babc:	f384 8811 	msr	BASEPRI, r4
    bac0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    bac4:	bd10      	pop	{r4, pc}
    bac6:	bf00      	nop
    bac8:	20000c38 	.word	0x20000c38

0000bacc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bace:	4604      	mov	r4, r0
	__asm__ volatile(
    bad0:	f04f 0320 	mov.w	r3, #32
    bad4:	f3ef 8711 	mrs	r7, BASEPRI
    bad8:	f383 8812 	msr	BASEPRI_MAX, r3
    badc:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    bae0:	6802      	ldr	r2, [r0, #0]
    bae2:	b122      	cbz	r2, baee <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    bae4:	f387 8811 	msr	BASEPRI, r7
    bae8:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    baec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    baee:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    baf2:	1c58      	adds	r0, r3, #1
    baf4:	f146 0100 	adc.w	r1, r6, #0
    baf8:	2802      	cmp	r0, #2
    bafa:	f171 0100 	sbcs.w	r1, r1, #0
    bafe:	d327      	bcc.n	bb50 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    bb00:	2b01      	cmp	r3, #1
    bb02:	f176 0100 	sbcs.w	r1, r6, #0
    bb06:	bfbc      	itt	lt
    bb08:	2301      	movlt	r3, #1
    bb0a:	4616      	movlt	r6, r2
    bb0c:	1e5d      	subs	r5, r3, #1
    bb0e:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
    bb12:	f002 fc59 	bl	e3c8 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    bb16:	3001      	adds	r0, #1
    bb18:	f141 0100 	adc.w	r1, r1, #0
    bb1c:	1940      	adds	r0, r0, r5
    bb1e:	eb46 0101 	adc.w	r1, r6, r1
    bb22:	2801      	cmp	r0, #1
    bb24:	f171 0100 	sbcs.w	r1, r1, #0
    bb28:	db3a      	blt.n	bba0 <z_timer_expiration_handler+0xd4>
    bb2a:	f002 fc4d 	bl	e3c8 <z_impl_k_uptime_ticks>
    bb2e:	3001      	adds	r0, #1
    bb30:	f141 0100 	adc.w	r1, r1, #0
    bb34:	f06f 0201 	mvn.w	r2, #1
    bb38:	1940      	adds	r0, r0, r5
    bb3a:	eb46 0301 	adc.w	r3, r6, r1
    bb3e:	1a12      	subs	r2, r2, r0
    bb40:	f04f 31ff 	mov.w	r1, #4294967295
    bb44:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    bb48:	4918      	ldr	r1, [pc, #96]	; (bbac <z_timer_expiration_handler+0xe0>)
    bb4a:	4620      	mov	r0, r4
    bb4c:	f7ff fec4 	bl	b8d8 <z_add_timeout>
	timer->status += 1U;
    bb50:	6b23      	ldr	r3, [r4, #48]	; 0x30
    bb52:	3301      	adds	r3, #1
    bb54:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    bb56:	6a23      	ldr	r3, [r4, #32]
    bb58:	b173      	cbz	r3, bb78 <z_timer_expiration_handler+0xac>
    bb5a:	f387 8811 	msr	BASEPRI, r7
    bb5e:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    bb62:	6a23      	ldr	r3, [r4, #32]
    bb64:	4620      	mov	r0, r4
    bb66:	4798      	blx	r3
	__asm__ volatile(
    bb68:	f04f 0320 	mov.w	r3, #32
    bb6c:	f3ef 8711 	mrs	r7, BASEPRI
    bb70:	f383 8812 	msr	BASEPRI_MAX, r3
    bb74:	f3bf 8f6f 	isb	sy
	return list->head == list;
    bb78:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb7c:	42a5      	cmp	r5, r4
    bb7e:	d0b1      	beq.n	bae4 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    bb80:	2d00      	cmp	r5, #0
    bb82:	d0af      	beq.n	bae4 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    bb84:	4628      	mov	r0, r5
    bb86:	f002 fb29 	bl	e1dc <z_unpend_thread_no_timeout>
    bb8a:	2300      	movs	r3, #0
    bb8c:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
    bb8e:	f387 8811 	msr	BASEPRI, r7
    bb92:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    bb96:	4628      	mov	r0, r5
}
    bb98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    bb9c:	f002 bb0e 	b.w	e1bc <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    bba0:	f06f 0201 	mvn.w	r2, #1
    bba4:	f04f 33ff 	mov.w	r3, #4294967295
    bba8:	e7ce      	b.n	bb48 <z_timer_expiration_handler+0x7c>
    bbaa:	bf00      	nop
    bbac:	0000bacd 	.word	0x0000bacd

0000bbb0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    bbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    bbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
    bbb8:	bf08      	it	eq
    bbba:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    bbbe:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    bbc2:	4605      	mov	r5, r0
    bbc4:	461c      	mov	r4, r3
    bbc6:	4691      	mov	r9, r2
    bbc8:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    bbca:	d01c      	beq.n	bc06 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    bbcc:	1c53      	adds	r3, r2, #1
    bbce:	f174 33ff 	sbcs.w	r3, r4, #4294967295
    bbd2:	db09      	blt.n	bbe8 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    bbd4:	2a01      	cmp	r2, #1
    bbd6:	f174 0300 	sbcs.w	r3, r4, #0
    bbda:	bfbc      	itt	lt
    bbdc:	2201      	movlt	r2, #1
    bbde:	2400      	movlt	r4, #0
    bbe0:	f112 39ff 	adds.w	r9, r2, #4294967295
    bbe4:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    bbe8:	4628      	mov	r0, r5
    bbea:	f002 fbc3 	bl	e374 <z_abort_timeout>
	timer->period = period;
    bbee:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    bbf2:	2300      	movs	r3, #0
    bbf4:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    bbf6:	464a      	mov	r2, r9
    bbf8:	4643      	mov	r3, r8
    bbfa:	4628      	mov	r0, r5
    bbfc:	4903      	ldr	r1, [pc, #12]	; (bc0c <z_impl_k_timer_start+0x5c>)
		     duration);
}
    bbfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    bc02:	f7ff be69 	b.w	b8d8 <z_add_timeout>
}
    bc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bc0a:	bf00      	nop
    bc0c:	0000bacd 	.word	0x0000bacd

0000bc10 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    bc10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    bc14:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    bc16:	4b29      	ldr	r3, [pc, #164]	; (bcbc <z_impl_k_poll+0xac>)
    bc18:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
    bc1a:	2301      	movs	r3, #1
    bc1c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
    bc20:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    bc24:	ea52 0305 	orrs.w	r3, r2, r5
{
    bc28:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    bc2a:	bf0c      	ite	eq
    bc2c:	2301      	moveq	r3, #1
    bc2e:	2300      	movne	r3, #0
    bc30:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
    bc34:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    bc36:	f002 fc49 	bl	e4cc <register_events>
    bc3a:	4681      	mov	r9, r0
	__asm__ volatile(
    bc3c:	f04f 0320 	mov.w	r3, #32
    bc40:	f3ef 8a11 	mrs	sl, BASEPRI
    bc44:	f383 8812 	msr	BASEPRI_MAX, r3
    bc48:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    bc4c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
    bc50:	b964      	cbnz	r4, bc6c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    bc52:	4601      	mov	r1, r0
    bc54:	4652      	mov	r2, sl
    bc56:	4640      	mov	r0, r8
    bc58:	f002 fd09 	bl	e66e <clear_event_registrations>
	__asm__ volatile(
    bc5c:	f38a 8811 	msr	BASEPRI, sl
    bc60:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    bc64:	4620      	mov	r0, r4
    bc66:	b002      	add	sp, #8
    bc68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    bc6c:	2300      	movs	r3, #0
    bc6e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    bc72:	ea56 0305 	orrs.w	r3, r6, r5
    bc76:	d106      	bne.n	bc86 <z_impl_k_poll+0x76>
    bc78:	f38a 8811 	msr	BASEPRI, sl
    bc7c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    bc80:	f06f 040a 	mvn.w	r4, #10
    bc84:	e7ee      	b.n	bc64 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    bc86:	e9cd 6500 	strd	r6, r5, [sp]
    bc8a:	4a0d      	ldr	r2, [pc, #52]	; (bcc0 <z_impl_k_poll+0xb0>)
    bc8c:	480d      	ldr	r0, [pc, #52]	; (bcc4 <z_impl_k_poll+0xb4>)
    bc8e:	4651      	mov	r1, sl
    bc90:	f7ff fb96 	bl	b3c0 <z_pend_curr>
    bc94:	4604      	mov	r4, r0
	__asm__ volatile(
    bc96:	f04f 0320 	mov.w	r3, #32
    bc9a:	f3ef 8511 	mrs	r5, BASEPRI
    bc9e:	f383 8812 	msr	BASEPRI_MAX, r3
    bca2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    bca6:	462a      	mov	r2, r5
    bca8:	4649      	mov	r1, r9
    bcaa:	4640      	mov	r0, r8
    bcac:	f002 fcdf 	bl	e66e <clear_event_registrations>
	__asm__ volatile(
    bcb0:	f385 8811 	msr	BASEPRI, r5
    bcb4:	f3bf 8f6f 	isb	sy
	return swap_rc;
    bcb8:	e7d4      	b.n	bc64 <z_impl_k_poll+0x54>
    bcba:	bf00      	nop
    bcbc:	200021f8 	.word	0x200021f8
    bcc0:	20000268 	.word	0x20000268
    bcc4:	2000252d 	.word	0x2000252d

0000bcc8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    bcc8:	b538      	push	{r3, r4, r5, lr}
    bcca:	4603      	mov	r3, r0
	__asm__ volatile(
    bccc:	f04f 0220 	mov.w	r2, #32
    bcd0:	f3ef 8511 	mrs	r5, BASEPRI
    bcd4:	f382 8812 	msr	BASEPRI_MAX, r2
    bcd8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    bcdc:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    bcde:	2101      	movs	r1, #1
    bce0:	6081      	str	r1, [r0, #8]
	return list->head == list;
    bce2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    bce4:	4283      	cmp	r3, r0
    bce6:	d106      	bne.n	bcf6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    bce8:	f385 8811 	msr	BASEPRI, r5
    bcec:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    bcf0:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    bcf2:	4620      	mov	r0, r4
    bcf4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    bcf6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    bcfa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    bcfc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    bcfe:	2300      	movs	r3, #0
	node->prev = NULL;
    bd00:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    bd04:	f002 fc59 	bl	e5ba <signal_poll_event>
	z_reschedule(&lock, key);
    bd08:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    bd0a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    bd0c:	4801      	ldr	r0, [pc, #4]	; (bd14 <z_impl_k_poll_signal_raise+0x4c>)
    bd0e:	f7ff fbbb 	bl	b488 <z_reschedule>
	return rc;
    bd12:	e7ee      	b.n	bcf2 <z_impl_k_poll_signal_raise+0x2a>
    bd14:	2000252d 	.word	0x2000252d

0000bd18 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    bd18:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bd1a:	4606      	mov	r6, r0
    bd1c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    bd1e:	f002 f8ef 	bl	df00 <k_is_in_isr>
    bd22:	b978      	cbnz	r0, bd44 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    bd24:	4b0b      	ldr	r3, [pc, #44]	; (bd54 <z_thread_aligned_alloc+0x3c>)
    bd26:	689b      	ldr	r3, [r3, #8]
    bd28:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
    bd2a:	b17c      	cbz	r4, bd4c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    bd2c:	1d2a      	adds	r2, r5, #4
    bd2e:	d209      	bcs.n	bd44 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    bd30:	2000      	movs	r0, #0
    bd32:	2100      	movs	r1, #0
    bd34:	e9cd 0100 	strd	r0, r1, [sp]
    bd38:	f046 0104 	orr.w	r1, r6, #4
    bd3c:	4620      	mov	r0, r4
    bd3e:	f002 fce2 	bl	e706 <k_heap_aligned_alloc>
	if (mem == NULL) {
    bd42:	b908      	cbnz	r0, bd48 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    bd44:	2400      	movs	r4, #0
	}

	return ret;
    bd46:	e001      	b.n	bd4c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    bd48:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    bd4a:	1d04      	adds	r4, r0, #4
}
    bd4c:	4620      	mov	r0, r4
    bd4e:	b002      	add	sp, #8
    bd50:	bd70      	pop	{r4, r5, r6, pc}
    bd52:	bf00      	nop
    bd54:	200021f8 	.word	0x200021f8

0000bd58 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    bd58:	4801      	ldr	r0, [pc, #4]	; (bd60 <boot_banner+0x8>)
    bd5a:	f000 ba98 	b.w	c28e <printk>
    bd5e:	bf00      	nop
    bd60:	00010287 	.word	0x00010287

0000bd64 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    bd64:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    bd66:	4c06      	ldr	r4, [pc, #24]	; (bd80 <statics_init+0x1c>)
    bd68:	4d06      	ldr	r5, [pc, #24]	; (bd84 <statics_init+0x20>)
    bd6a:	42ac      	cmp	r4, r5
    bd6c:	d301      	bcc.n	bd72 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    bd6e:	2000      	movs	r0, #0
    bd70:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    bd72:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    bd76:	4620      	mov	r0, r4
    bd78:	f002 fcbd 	bl	e6f6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    bd7c:	3414      	adds	r4, #20
    bd7e:	e7f4      	b.n	bd6a <statics_init+0x6>
    bd80:	2000037c 	.word	0x2000037c
    bd84:	2000037c 	.word	0x2000037c

0000bd88 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    bd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    bd8a:	4b09      	ldr	r3, [pc, #36]	; (bdb0 <k_sys_work_q_init+0x28>)
    bd8c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    bd8e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    bd90:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    bd92:	9300      	str	r3, [sp, #0]
    bd94:	4907      	ldr	r1, [pc, #28]	; (bdb4 <k_sys_work_q_init+0x2c>)
    bd96:	4808      	ldr	r0, [pc, #32]	; (bdb8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    bd98:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    bd9c:	f04f 33ff 	mov.w	r3, #4294967295
    bda0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bda4:	f7ff f968 	bl	b078 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    bda8:	4620      	mov	r0, r4
    bdaa:	b004      	add	sp, #16
    bdac:	bd10      	pop	{r4, pc}
    bdae:	bf00      	nop
    bdb0:	000102b5 	.word	0x000102b5
    bdb4:	20003d70 	.word	0x20003d70
    bdb8:	20000c40 	.word	0x20000c40

0000bdbc <nrf_cc3xx_platform_init_no_rng>:
    bdbc:	b510      	push	{r4, lr}
    bdbe:	4c0a      	ldr	r4, [pc, #40]	; (bde8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    bdc0:	6823      	ldr	r3, [r4, #0]
    bdc2:	b11b      	cbz	r3, bdcc <nrf_cc3xx_platform_init_no_rng+0x10>
    bdc4:	2301      	movs	r3, #1
    bdc6:	6023      	str	r3, [r4, #0]
    bdc8:	2000      	movs	r0, #0
    bdca:	bd10      	pop	{r4, pc}
    bdcc:	f000 f8ea 	bl	bfa4 <CC_LibInitNoRng>
    bdd0:	2800      	cmp	r0, #0
    bdd2:	d0f7      	beq.n	bdc4 <nrf_cc3xx_platform_init_no_rng+0x8>
    bdd4:	3801      	subs	r0, #1
    bdd6:	2806      	cmp	r0, #6
    bdd8:	d803      	bhi.n	bde2 <nrf_cc3xx_platform_init_no_rng+0x26>
    bdda:	4b04      	ldr	r3, [pc, #16]	; (bdec <nrf_cc3xx_platform_init_no_rng+0x30>)
    bddc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    bde0:	bd10      	pop	{r4, pc}
    bde2:	4803      	ldr	r0, [pc, #12]	; (bdf0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    bde4:	bd10      	pop	{r4, pc}
    bde6:	bf00      	nop
    bde8:	20002234 	.word	0x20002234
    bdec:	0000f028 	.word	0x0000f028
    bdf0:	ffff8ffe 	.word	0xffff8ffe

0000bdf4 <nrf_cc3xx_platform_abort>:
    bdf4:	f3bf 8f4f 	dsb	sy
    bdf8:	4905      	ldr	r1, [pc, #20]	; (be10 <nrf_cc3xx_platform_abort+0x1c>)
    bdfa:	4b06      	ldr	r3, [pc, #24]	; (be14 <nrf_cc3xx_platform_abort+0x20>)
    bdfc:	68ca      	ldr	r2, [r1, #12]
    bdfe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    be02:	4313      	orrs	r3, r2
    be04:	60cb      	str	r3, [r1, #12]
    be06:	f3bf 8f4f 	dsb	sy
    be0a:	bf00      	nop
    be0c:	e7fd      	b.n	be0a <nrf_cc3xx_platform_abort+0x16>
    be0e:	bf00      	nop
    be10:	e000ed00 	.word	0xe000ed00
    be14:	05fa0004 	.word	0x05fa0004

0000be18 <CC_PalAbort>:
    be18:	b410      	push	{r4}
    be1a:	4b09      	ldr	r3, [pc, #36]	; (be40 <CC_PalAbort+0x28>)
    be1c:	4909      	ldr	r1, [pc, #36]	; (be44 <CC_PalAbort+0x2c>)
    be1e:	4c0a      	ldr	r4, [pc, #40]	; (be48 <CC_PalAbort+0x30>)
    be20:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    be24:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    be28:	6849      	ldr	r1, [r1, #4]
    be2a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    be2e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    be32:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    be36:	2300      	movs	r3, #0
    be38:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    be3c:	bc10      	pop	{r4}
    be3e:	4708      	bx	r1
    be40:	5002b000 	.word	0x5002b000
    be44:	20000270 	.word	0x20000270
    be48:	5002a000 	.word	0x5002a000

0000be4c <nrf_cc3xx_platform_set_abort>:
    be4c:	e9d0 1200 	ldrd	r1, r2, [r0]
    be50:	4b01      	ldr	r3, [pc, #4]	; (be58 <nrf_cc3xx_platform_set_abort+0xc>)
    be52:	e9c3 1200 	strd	r1, r2, [r3]
    be56:	4770      	bx	lr
    be58:	20000270 	.word	0x20000270

0000be5c <mutex_free>:
    be5c:	b510      	push	{r4, lr}
    be5e:	4604      	mov	r4, r0
    be60:	b150      	cbz	r0, be78 <mutex_free+0x1c>
    be62:	6863      	ldr	r3, [r4, #4]
    be64:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    be68:	d005      	beq.n	be76 <mutex_free+0x1a>
    be6a:	4a06      	ldr	r2, [pc, #24]	; (be84 <mutex_free+0x28>)
    be6c:	4293      	cmp	r3, r2
    be6e:	d002      	beq.n	be76 <mutex_free+0x1a>
    be70:	2300      	movs	r3, #0
    be72:	6023      	str	r3, [r4, #0]
    be74:	6062      	str	r2, [r4, #4]
    be76:	bd10      	pop	{r4, pc}
    be78:	4b03      	ldr	r3, [pc, #12]	; (be88 <mutex_free+0x2c>)
    be7a:	4804      	ldr	r0, [pc, #16]	; (be8c <mutex_free+0x30>)
    be7c:	685b      	ldr	r3, [r3, #4]
    be7e:	4798      	blx	r3
    be80:	e7ef      	b.n	be62 <mutex_free+0x6>
    be82:	bf00      	nop
    be84:	a95c5f2c 	.word	0xa95c5f2c
    be88:	20000270 	.word	0x20000270
    be8c:	0000f044 	.word	0x0000f044

0000be90 <mutex_lock>:
    be90:	b1c8      	cbz	r0, bec6 <mutex_lock+0x36>
    be92:	6843      	ldr	r3, [r0, #4]
    be94:	4a0d      	ldr	r2, [pc, #52]	; (becc <mutex_lock+0x3c>)
    be96:	4293      	cmp	r3, r2
    be98:	d013      	beq.n	bec2 <mutex_lock+0x32>
    be9a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    be9e:	d00e      	beq.n	bebe <mutex_lock+0x2e>
    bea0:	2301      	movs	r3, #1
    bea2:	e850 2f00 	ldrex	r2, [r0]
    bea6:	4619      	mov	r1, r3
    bea8:	e840 1c00 	strex	ip, r1, [r0]
    beac:	f09c 0f00 	teq	ip, #0
    beb0:	d1f7      	bne.n	bea2 <mutex_lock+0x12>
    beb2:	2a01      	cmp	r2, #1
    beb4:	d0f5      	beq.n	bea2 <mutex_lock+0x12>
    beb6:	f3bf 8f5f 	dmb	sy
    beba:	2000      	movs	r0, #0
    bebc:	4770      	bx	lr
    bebe:	4804      	ldr	r0, [pc, #16]	; (bed0 <mutex_lock+0x40>)
    bec0:	4770      	bx	lr
    bec2:	4804      	ldr	r0, [pc, #16]	; (bed4 <mutex_lock+0x44>)
    bec4:	4770      	bx	lr
    bec6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    beca:	4770      	bx	lr
    becc:	a95c5f2c 	.word	0xa95c5f2c
    bed0:	ffff8fe9 	.word	0xffff8fe9
    bed4:	ffff8fea 	.word	0xffff8fea

0000bed8 <mutex_unlock>:
    bed8:	b180      	cbz	r0, befc <mutex_unlock+0x24>
    beda:	6843      	ldr	r3, [r0, #4]
    bedc:	4a09      	ldr	r2, [pc, #36]	; (bf04 <mutex_unlock+0x2c>)
    bede:	4293      	cmp	r3, r2
    bee0:	d00a      	beq.n	bef8 <mutex_unlock+0x20>
    bee2:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    bee6:	d005      	beq.n	bef4 <mutex_unlock+0x1c>
    bee8:	f3bf 8f5f 	dmb	sy
    beec:	2300      	movs	r3, #0
    beee:	6003      	str	r3, [r0, #0]
    bef0:	4618      	mov	r0, r3
    bef2:	4770      	bx	lr
    bef4:	4804      	ldr	r0, [pc, #16]	; (bf08 <mutex_unlock+0x30>)
    bef6:	4770      	bx	lr
    bef8:	4804      	ldr	r0, [pc, #16]	; (bf0c <mutex_unlock+0x34>)
    befa:	4770      	bx	lr
    befc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    bf00:	4770      	bx	lr
    bf02:	bf00      	nop
    bf04:	a95c5f2c 	.word	0xa95c5f2c
    bf08:	ffff8fe9 	.word	0xffff8fe9
    bf0c:	ffff8fea 	.word	0xffff8fea

0000bf10 <mutex_init>:
    bf10:	b510      	push	{r4, lr}
    bf12:	4604      	mov	r4, r0
    bf14:	b120      	cbz	r0, bf20 <mutex_init+0x10>
    bf16:	4b04      	ldr	r3, [pc, #16]	; (bf28 <mutex_init+0x18>)
    bf18:	6063      	str	r3, [r4, #4]
    bf1a:	2200      	movs	r2, #0
    bf1c:	6022      	str	r2, [r4, #0]
    bf1e:	bd10      	pop	{r4, pc}
    bf20:	4802      	ldr	r0, [pc, #8]	; (bf2c <mutex_init+0x1c>)
    bf22:	f7ff ff79 	bl	be18 <CC_PalAbort>
    bf26:	e7f6      	b.n	bf16 <mutex_init+0x6>
    bf28:	3a00003a 	.word	0x3a00003a
    bf2c:	0000f06c 	.word	0x0000f06c

0000bf30 <nrf_cc3xx_platform_set_mutexes>:
    bf30:	b570      	push	{r4, r5, r6, lr}
    bf32:	e9d0 2300 	ldrd	r2, r3, [r0]
    bf36:	4c17      	ldr	r4, [pc, #92]	; (bf94 <nrf_cc3xx_platform_set_mutexes+0x64>)
    bf38:	4d17      	ldr	r5, [pc, #92]	; (bf98 <nrf_cc3xx_platform_set_mutexes+0x68>)
    bf3a:	6063      	str	r3, [r4, #4]
    bf3c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    bf40:	e9c4 3002 	strd	r3, r0, [r4, #8]
    bf44:	6022      	str	r2, [r4, #0]
    bf46:	6848      	ldr	r0, [r1, #4]
    bf48:	f8d1 c000 	ldr.w	ip, [r1]
    bf4c:	4b13      	ldr	r3, [pc, #76]	; (bf9c <nrf_cc3xx_platform_set_mutexes+0x6c>)
    bf4e:	e9c3 c000 	strd	ip, r0, [r3]
    bf52:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    bf56:	f8d1 c008 	ldr.w	ip, [r1, #8]
    bf5a:	f8c3 c008 	str.w	ip, [r3, #8]
    bf5e:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    bf62:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    bf66:	6909      	ldr	r1, [r1, #16]
    bf68:	f8c3 c00c 	str.w	ip, [r3, #12]
    bf6c:	6119      	str	r1, [r3, #16]
    bf6e:	d010      	beq.n	bf92 <nrf_cc3xx_platform_set_mutexes+0x62>
    bf70:	490b      	ldr	r1, [pc, #44]	; (bfa0 <nrf_cc3xx_platform_set_mutexes+0x70>)
    bf72:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    bf76:	2300      	movs	r3, #0
    bf78:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    bf7c:	f505 708a 	add.w	r0, r5, #276	; 0x114
    bf80:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    bf84:	4790      	blx	r2
    bf86:	6823      	ldr	r3, [r4, #0]
    bf88:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    bf8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bf90:	4718      	bx	r3
    bf92:	bd70      	pop	{r4, r5, r6, pc}
    bf94:	2000028c 	.word	0x2000028c
    bf98:	2000224c 	.word	0x2000224c
    bf9c:	20000278 	.word	0x20000278
    bfa0:	a95c5f2c 	.word	0xa95c5f2c

0000bfa4 <CC_LibInitNoRng>:
    bfa4:	b538      	push	{r3, r4, r5, lr}
    bfa6:	f000 f82f 	bl	c008 <CC_HalInit>
    bfaa:	b120      	cbz	r0, bfb6 <CC_LibInitNoRng+0x12>
    bfac:	2403      	movs	r4, #3
    bfae:	f000 f863 	bl	c078 <CC_PalTerminate>
    bfb2:	4620      	mov	r0, r4
    bfb4:	bd38      	pop	{r3, r4, r5, pc}
    bfb6:	f000 f831 	bl	c01c <CC_PalInit>
    bfba:	b998      	cbnz	r0, bfe4 <CC_LibInitNoRng+0x40>
    bfbc:	f000 f8ac 	bl	c118 <CC_PalPowerSaveModeSelect>
    bfc0:	b998      	cbnz	r0, bfea <CC_LibInitNoRng+0x46>
    bfc2:	4d0f      	ldr	r5, [pc, #60]	; (c000 <CC_LibInitNoRng+0x5c>)
    bfc4:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    bfc8:	0e1b      	lsrs	r3, r3, #24
    bfca:	2bf0      	cmp	r3, #240	; 0xf0
    bfcc:	d108      	bne.n	bfe0 <CC_LibInitNoRng+0x3c>
    bfce:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    bfd2:	4b0c      	ldr	r3, [pc, #48]	; (c004 <CC_LibInitNoRng+0x60>)
    bfd4:	429a      	cmp	r2, r3
    bfd6:	d00a      	beq.n	bfee <CC_LibInitNoRng+0x4a>
    bfd8:	2407      	movs	r4, #7
    bfda:	f000 f817 	bl	c00c <CC_HalTerminate>
    bfde:	e7e6      	b.n	bfae <CC_LibInitNoRng+0xa>
    bfe0:	2406      	movs	r4, #6
    bfe2:	e7fa      	b.n	bfda <CC_LibInitNoRng+0x36>
    bfe4:	2404      	movs	r4, #4
    bfe6:	4620      	mov	r0, r4
    bfe8:	bd38      	pop	{r3, r4, r5, pc}
    bfea:	2400      	movs	r4, #0
    bfec:	e7f5      	b.n	bfda <CC_LibInitNoRng+0x36>
    bfee:	2001      	movs	r0, #1
    bff0:	f000 f892 	bl	c118 <CC_PalPowerSaveModeSelect>
    bff4:	4604      	mov	r4, r0
    bff6:	2800      	cmp	r0, #0
    bff8:	d1f7      	bne.n	bfea <CC_LibInitNoRng+0x46>
    bffa:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    bffe:	e7d8      	b.n	bfb2 <CC_LibInitNoRng+0xe>
    c000:	5002b000 	.word	0x5002b000
    c004:	20e00000 	.word	0x20e00000

0000c008 <CC_HalInit>:
    c008:	2000      	movs	r0, #0
    c00a:	4770      	bx	lr

0000c00c <CC_HalTerminate>:
    c00c:	2000      	movs	r0, #0
    c00e:	4770      	bx	lr

0000c010 <CC_HalMaskInterrupt>:
    c010:	4b01      	ldr	r3, [pc, #4]	; (c018 <CC_HalMaskInterrupt+0x8>)
    c012:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    c016:	4770      	bx	lr
    c018:	5002b000 	.word	0x5002b000

0000c01c <CC_PalInit>:
    c01c:	b510      	push	{r4, lr}
    c01e:	4811      	ldr	r0, [pc, #68]	; (c064 <CC_PalInit+0x48>)
    c020:	f000 f848 	bl	c0b4 <CC_PalMutexCreate>
    c024:	b100      	cbz	r0, c028 <CC_PalInit+0xc>
    c026:	bd10      	pop	{r4, pc}
    c028:	480f      	ldr	r0, [pc, #60]	; (c068 <CC_PalInit+0x4c>)
    c02a:	f000 f843 	bl	c0b4 <CC_PalMutexCreate>
    c02e:	2800      	cmp	r0, #0
    c030:	d1f9      	bne.n	c026 <CC_PalInit+0xa>
    c032:	4c0e      	ldr	r4, [pc, #56]	; (c06c <CC_PalInit+0x50>)
    c034:	4620      	mov	r0, r4
    c036:	f000 f83d 	bl	c0b4 <CC_PalMutexCreate>
    c03a:	2800      	cmp	r0, #0
    c03c:	d1f3      	bne.n	c026 <CC_PalInit+0xa>
    c03e:	4b0c      	ldr	r3, [pc, #48]	; (c070 <CC_PalInit+0x54>)
    c040:	480c      	ldr	r0, [pc, #48]	; (c074 <CC_PalInit+0x58>)
    c042:	601c      	str	r4, [r3, #0]
    c044:	f000 f836 	bl	c0b4 <CC_PalMutexCreate>
    c048:	4601      	mov	r1, r0
    c04a:	2800      	cmp	r0, #0
    c04c:	d1eb      	bne.n	c026 <CC_PalInit+0xa>
    c04e:	f000 f82d 	bl	c0ac <CC_PalDmaInit>
    c052:	4604      	mov	r4, r0
    c054:	b108      	cbz	r0, c05a <CC_PalInit+0x3e>
    c056:	4620      	mov	r0, r4
    c058:	bd10      	pop	{r4, pc}
    c05a:	f000 f83f 	bl	c0dc <CC_PalPowerSaveModeInit>
    c05e:	4620      	mov	r0, r4
    c060:	e7fa      	b.n	c058 <CC_PalInit+0x3c>
    c062:	bf00      	nop
    c064:	200002cc 	.word	0x200002cc
    c068:	200002c8 	.word	0x200002c8
    c06c:	200002c4 	.word	0x200002c4
    c070:	200002bc 	.word	0x200002bc
    c074:	200002c0 	.word	0x200002c0

0000c078 <CC_PalTerminate>:
    c078:	b508      	push	{r3, lr}
    c07a:	4808      	ldr	r0, [pc, #32]	; (c09c <CC_PalTerminate+0x24>)
    c07c:	f000 f824 	bl	c0c8 <CC_PalMutexDestroy>
    c080:	4807      	ldr	r0, [pc, #28]	; (c0a0 <CC_PalTerminate+0x28>)
    c082:	f000 f821 	bl	c0c8 <CC_PalMutexDestroy>
    c086:	4807      	ldr	r0, [pc, #28]	; (c0a4 <CC_PalTerminate+0x2c>)
    c088:	f000 f81e 	bl	c0c8 <CC_PalMutexDestroy>
    c08c:	4806      	ldr	r0, [pc, #24]	; (c0a8 <CC_PalTerminate+0x30>)
    c08e:	f000 f81b 	bl	c0c8 <CC_PalMutexDestroy>
    c092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c096:	f000 b80b 	b.w	c0b0 <CC_PalDmaTerminate>
    c09a:	bf00      	nop
    c09c:	200002cc 	.word	0x200002cc
    c0a0:	200002c8 	.word	0x200002c8
    c0a4:	200002c4 	.word	0x200002c4
    c0a8:	200002c0 	.word	0x200002c0

0000c0ac <CC_PalDmaInit>:
    c0ac:	2000      	movs	r0, #0
    c0ae:	4770      	bx	lr

0000c0b0 <CC_PalDmaTerminate>:
    c0b0:	4770      	bx	lr
    c0b2:	bf00      	nop

0000c0b4 <CC_PalMutexCreate>:
    c0b4:	b508      	push	{r3, lr}
    c0b6:	4b03      	ldr	r3, [pc, #12]	; (c0c4 <CC_PalMutexCreate+0x10>)
    c0b8:	6802      	ldr	r2, [r0, #0]
    c0ba:	681b      	ldr	r3, [r3, #0]
    c0bc:	6810      	ldr	r0, [r2, #0]
    c0be:	4798      	blx	r3
    c0c0:	2000      	movs	r0, #0
    c0c2:	bd08      	pop	{r3, pc}
    c0c4:	2000028c 	.word	0x2000028c

0000c0c8 <CC_PalMutexDestroy>:
    c0c8:	b508      	push	{r3, lr}
    c0ca:	4b03      	ldr	r3, [pc, #12]	; (c0d8 <CC_PalMutexDestroy+0x10>)
    c0cc:	6802      	ldr	r2, [r0, #0]
    c0ce:	685b      	ldr	r3, [r3, #4]
    c0d0:	6810      	ldr	r0, [r2, #0]
    c0d2:	4798      	blx	r3
    c0d4:	2000      	movs	r0, #0
    c0d6:	bd08      	pop	{r3, pc}
    c0d8:	2000028c 	.word	0x2000028c

0000c0dc <CC_PalPowerSaveModeInit>:
    c0dc:	b570      	push	{r4, r5, r6, lr}
    c0de:	4c09      	ldr	r4, [pc, #36]	; (c104 <CC_PalPowerSaveModeInit+0x28>)
    c0e0:	4d09      	ldr	r5, [pc, #36]	; (c108 <CC_PalPowerSaveModeInit+0x2c>)
    c0e2:	6920      	ldr	r0, [r4, #16]
    c0e4:	68ab      	ldr	r3, [r5, #8]
    c0e6:	4798      	blx	r3
    c0e8:	b118      	cbz	r0, c0f2 <CC_PalPowerSaveModeInit+0x16>
    c0ea:	4b08      	ldr	r3, [pc, #32]	; (c10c <CC_PalPowerSaveModeInit+0x30>)
    c0ec:	4808      	ldr	r0, [pc, #32]	; (c110 <CC_PalPowerSaveModeInit+0x34>)
    c0ee:	685b      	ldr	r3, [r3, #4]
    c0f0:	4798      	blx	r3
    c0f2:	4a08      	ldr	r2, [pc, #32]	; (c114 <CC_PalPowerSaveModeInit+0x38>)
    c0f4:	68eb      	ldr	r3, [r5, #12]
    c0f6:	6920      	ldr	r0, [r4, #16]
    c0f8:	2100      	movs	r1, #0
    c0fa:	6011      	str	r1, [r2, #0]
    c0fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c100:	4718      	bx	r3
    c102:	bf00      	nop
    c104:	20000278 	.word	0x20000278
    c108:	2000028c 	.word	0x2000028c
    c10c:	20000270 	.word	0x20000270
    c110:	0000f090 	.word	0x0000f090
    c114:	20002248 	.word	0x20002248

0000c118 <CC_PalPowerSaveModeSelect>:
    c118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c11a:	4d1a      	ldr	r5, [pc, #104]	; (c184 <CC_PalPowerSaveModeSelect+0x6c>)
    c11c:	4e1a      	ldr	r6, [pc, #104]	; (c188 <CC_PalPowerSaveModeSelect+0x70>)
    c11e:	4604      	mov	r4, r0
    c120:	68b2      	ldr	r2, [r6, #8]
    c122:	6928      	ldr	r0, [r5, #16]
    c124:	4790      	blx	r2
    c126:	b9e8      	cbnz	r0, c164 <CC_PalPowerSaveModeSelect+0x4c>
    c128:	4f18      	ldr	r7, [pc, #96]	; (c18c <CC_PalPowerSaveModeSelect+0x74>)
    c12a:	683b      	ldr	r3, [r7, #0]
    c12c:	b14c      	cbz	r4, c142 <CC_PalPowerSaveModeSelect+0x2a>
    c12e:	b1a3      	cbz	r3, c15a <CC_PalPowerSaveModeSelect+0x42>
    c130:	2b01      	cmp	r3, #1
    c132:	d019      	beq.n	c168 <CC_PalPowerSaveModeSelect+0x50>
    c134:	3b01      	subs	r3, #1
    c136:	603b      	str	r3, [r7, #0]
    c138:	6928      	ldr	r0, [r5, #16]
    c13a:	68f3      	ldr	r3, [r6, #12]
    c13c:	4798      	blx	r3
    c13e:	2000      	movs	r0, #0
    c140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c142:	b943      	cbnz	r3, c156 <CC_PalPowerSaveModeSelect+0x3e>
    c144:	4a12      	ldr	r2, [pc, #72]	; (c190 <CC_PalPowerSaveModeSelect+0x78>)
    c146:	2101      	movs	r1, #1
    c148:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    c14c:	4911      	ldr	r1, [pc, #68]	; (c194 <CC_PalPowerSaveModeSelect+0x7c>)
    c14e:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    c152:	2a00      	cmp	r2, #0
    c154:	d1fb      	bne.n	c14e <CC_PalPowerSaveModeSelect+0x36>
    c156:	3301      	adds	r3, #1
    c158:	603b      	str	r3, [r7, #0]
    c15a:	68f3      	ldr	r3, [r6, #12]
    c15c:	6928      	ldr	r0, [r5, #16]
    c15e:	4798      	blx	r3
    c160:	2000      	movs	r0, #0
    c162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c164:	480c      	ldr	r0, [pc, #48]	; (c198 <CC_PalPowerSaveModeSelect+0x80>)
    c166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c168:	4a0a      	ldr	r2, [pc, #40]	; (c194 <CC_PalPowerSaveModeSelect+0x7c>)
    c16a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    c16e:	2b00      	cmp	r3, #0
    c170:	d1fb      	bne.n	c16a <CC_PalPowerSaveModeSelect+0x52>
    c172:	4a07      	ldr	r2, [pc, #28]	; (c190 <CC_PalPowerSaveModeSelect+0x78>)
    c174:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    c178:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    c17c:	f7ff ff48 	bl	c010 <CC_HalMaskInterrupt>
    c180:	683b      	ldr	r3, [r7, #0]
    c182:	e7d7      	b.n	c134 <CC_PalPowerSaveModeSelect+0x1c>
    c184:	20000278 	.word	0x20000278
    c188:	2000028c 	.word	0x2000028c
    c18c:	20002248 	.word	0x20002248
    c190:	5002a000 	.word	0x5002a000
    c194:	5002b000 	.word	0x5002b000
    c198:	ffff8fe9 	.word	0xffff8fe9

0000c19c <main>:

#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(main);

int main(void)
{
    c19c:	b508      	push	{r3, lr}
	

	if (usb_enable(NULL)) {
    c19e:	2000      	movs	r0, #0
    c1a0:	f7f6 fdee 	bl	2d80 <usb_enable>
    c1a4:	b108      	cbz	r0, c1aa <main+0xe>
		return 0;
    c1a6:	2000      	movs	r0, #0
	if(Initialize_LoRa(false) == 1){
		Setup_LoRa_receive();
	}


}
    c1a8:	bd08      	pop	{r3, pc}
	if(Initialize_LoRa(false) == 1){
    c1aa:	f7f4 f953 	bl	454 <Initialize_LoRa>
    c1ae:	2800      	cmp	r0, #0
    c1b0:	d0fa      	beq.n	c1a8 <main+0xc>
		Setup_LoRa_receive();
    c1b2:	f7f4 f9a5 	bl	500 <Setup_LoRa_receive>
}
    c1b6:	e7f7      	b.n	c1a8 <main+0xc>

0000c1b8 <cbpprintf_external>:
{
    c1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c1bc:	4606      	mov	r6, r0
    c1be:	460d      	mov	r5, r1
    c1c0:	4617      	mov	r7, r2
	if (buf == NULL) {
    c1c2:	4698      	mov	r8, r3
    c1c4:	b32b      	cbz	r3, c212 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    c1c6:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    c1ca:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c1ce:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    c1d0:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c1d2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    c1d6:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c1da:	441c      	add	r4, r3
    c1dc:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    c1de:	f04f 0a00 	mov.w	sl, #0
    c1e2:	45ca      	cmp	sl, r9
    c1e4:	d309      	bcc.n	c1fa <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    c1e6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    c1ea:	f108 0308 	add.w	r3, r8, #8
    c1ee:	4639      	mov	r1, r7
    c1f0:	4630      	mov	r0, r6
    c1f2:	46ac      	mov	ip, r5
}
    c1f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    c1f8:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    c1fa:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    c1fe:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    c202:	4620      	mov	r0, r4
    c204:	f001 f8ec 	bl	d3e0 <strlen>
    c208:	3001      	adds	r0, #1
    c20a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    c20c:	f10a 0a01 	add.w	sl, sl, #1
    c210:	e7e7      	b.n	c1e2 <cbpprintf_external+0x2a>
}
    c212:	f06f 0015 	mvn.w	r0, #21
    c216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c21a <is_ptr>:
{
    c21a:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    c21c:	2500      	movs	r5, #0
{
    c21e:	4602      	mov	r2, r0
	bool mod = false;
    c220:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    c222:	4614      	mov	r4, r2
    c224:	f814 3b01 	ldrb.w	r3, [r4], #1
    c228:	b90b      	cbnz	r3, c22e <is_ptr+0x14>
					return false;
    c22a:	4618      	mov	r0, r3
    c22c:	e009      	b.n	c242 <is_ptr+0x28>
		if (mod) {
    c22e:	b198      	cbz	r0, c258 <is_ptr+0x3e>
			if (cnt == n) {
    c230:	428d      	cmp	r5, r1
    c232:	d107      	bne.n	c244 <is_ptr+0x2a>
				if (c == 'p') {
    c234:	2b70      	cmp	r3, #112	; 0x70
    c236:	d004      	beq.n	c242 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    c238:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    c23c:	2a3a      	cmp	r2, #58	; 0x3a
    c23e:	d80b      	bhi.n	c258 <is_ptr+0x3e>
					return false;
    c240:	2000      	movs	r0, #0
}
    c242:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    c244:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    c248:	2e3a      	cmp	r6, #58	; 0x3a
    c24a:	d805      	bhi.n	c258 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    c24c:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    c24e:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    c250:	1c94      	adds	r4, r2, #2
    c252:	2b00      	cmp	r3, #0
    c254:	d0e9      	beq.n	c22a <is_ptr+0x10>
    c256:	2000      	movs	r0, #0
		if (c == '%') {
    c258:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    c25a:	bf08      	it	eq
    c25c:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    c260:	4622      	mov	r2, r4
    c262:	e7de      	b.n	c222 <is_ptr+0x8>

0000c264 <arch_printk_char_out>:
}
    c264:	2000      	movs	r0, #0
    c266:	4770      	bx	lr

0000c268 <str_out>:
{
    c268:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    c26a:	688a      	ldr	r2, [r1, #8]
    c26c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    c26e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    c270:	b114      	cbz	r4, c278 <str_out+0x10>
    c272:	684b      	ldr	r3, [r1, #4]
    c274:	4293      	cmp	r3, r2
    c276:	dc01      	bgt.n	c27c <str_out+0x14>
		ctx->count++;
    c278:	608d      	str	r5, [r1, #8]
}
    c27a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    c27c:	3b01      	subs	r3, #1
    c27e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    c280:	bf08      	it	eq
    c282:	2200      	moveq	r2, #0
    c284:	608d      	str	r5, [r1, #8]
    c286:	bf0c      	ite	eq
    c288:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    c28a:	54a0      	strbne	r0, [r4, r2]
    c28c:	e7f5      	b.n	c27a <str_out+0x12>

0000c28e <printk>:
{
    c28e:	b40f      	push	{r0, r1, r2, r3}
    c290:	b507      	push	{r0, r1, r2, lr}
    c292:	a904      	add	r1, sp, #16
    c294:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    c298:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    c29a:	f000 fea0 	bl	cfde <z_log_vprintk>
}
    c29e:	b003      	add	sp, #12
    c2a0:	f85d eb04 	ldr.w	lr, [sp], #4
    c2a4:	b004      	add	sp, #16
    c2a6:	4770      	bx	lr

0000c2a8 <snprintk>:
{
    c2a8:	b40c      	push	{r2, r3}
    c2aa:	b507      	push	{r0, r1, r2, lr}
    c2ac:	ab04      	add	r3, sp, #16
    c2ae:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    c2b2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    c2b4:	f7f4 fd00 	bl	cb8 <vsnprintk>
}
    c2b8:	b003      	add	sp, #12
    c2ba:	f85d eb04 	ldr.w	lr, [sp], #4
    c2be:	b002      	add	sp, #8
    c2c0:	4770      	bx	lr

0000c2c2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    c2c2:	4604      	mov	r4, r0
    c2c4:	b508      	push	{r3, lr}
    c2c6:	4608      	mov	r0, r1
    c2c8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    c2ca:	461a      	mov	r2, r3
    c2cc:	47a0      	blx	r4
	return z_impl_z_current_get();
    c2ce:	f7ff fa2b 	bl	b728 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    c2d2:	f7f8 f925 	bl	4520 <z_impl_k_thread_abort>

0000c2d6 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    c2d6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    c2da:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    c2dc:	0840      	lsrs	r0, r0, #1
    c2de:	4770      	bx	lr

0000c2e0 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    c2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2e2:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    c2e4:	f7ff fff7 	bl	c2d6 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    c2e8:	fab0 f080 	clz	r0, r0
    c2ec:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    c2f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    c2f4:	00ca      	lsls	r2, r1, #3
    c2f6:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    c2fa:	1d17      	adds	r7, r2, #4
{
    c2fc:	460c      	mov	r4, r1
    c2fe:	3206      	adds	r2, #6
    c300:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    c302:	b956      	cbnz	r6, c31a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    c304:	2101      	movs	r1, #1
    c306:	fa01 f000 	lsl.w	r0, r1, r0
    c30a:	68d9      	ldr	r1, [r3, #12]
    c30c:	4301      	orrs	r1, r0
    c30e:	60d9      	str	r1, [r3, #12]
		b->next = c;
    c310:	f8cc 4010 	str.w	r4, [ip, #16]
    c314:	53dd      	strh	r5, [r3, r7]
    c316:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    c318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    c31a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    c31c:	3104      	adds	r1, #4
    c31e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    c320:	53d8      	strh	r0, [r3, r7]
    c322:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    c326:	529e      	strh	r6, [r3, r2]
    c328:	80c5      	strh	r5, [r0, #6]
    c32a:	525d      	strh	r5, [r3, r1]
    c32c:	e7f4      	b.n	c318 <free_list_add+0x38>

0000c32e <free_list_remove_bidx>:
{
    c32e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    c330:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    c334:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    c336:	4299      	cmp	r1, r3
    c338:	f102 0104 	add.w	r1, r2, #4
    c33c:	d10a      	bne.n	c354 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    c33e:	2301      	movs	r3, #1
    c340:	fa03 f202 	lsl.w	r2, r3, r2
    c344:	68c3      	ldr	r3, [r0, #12]
    c346:	ea23 0302 	bic.w	r3, r3, r2
    c34a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    c34c:	2300      	movs	r3, #0
    c34e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    c352:	bd10      	pop	{r4, pc}
    c354:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    c356:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    c35a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    c35e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    c362:	80cb      	strh	r3, [r1, #6]
    c364:	8082      	strh	r2, [r0, #4]
}
    c366:	e7f4      	b.n	c352 <free_list_remove_bidx+0x24>

0000c368 <free_list_remove>:
{
    c368:	b508      	push	{r3, lr}
    c36a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    c36c:	f7ff ffb3 	bl	c2d6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    c370:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    c374:	f1c2 021f 	rsb	r2, r2, #31
    c378:	4618      	mov	r0, r3
}
    c37a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    c37e:	f7ff bfd6 	b.w	c32e <free_list_remove_bidx>

0000c382 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    c382:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c386:	fab1 f581 	clz	r5, r1
    c38a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    c38e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    c392:	4603      	mov	r3, r0
	if (b->next) {
    c394:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    c398:	460e      	mov	r6, r1
	if (b->next) {
    c39a:	b1c2      	cbz	r2, c3ce <alloc_chunk+0x4c>
    c39c:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    c39e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    c3a2:	4618      	mov	r0, r3
    c3a4:	4621      	mov	r1, r4
    c3a6:	f7ff ff96 	bl	c2d6 <chunk_size>
    c3aa:	42b0      	cmp	r0, r6
    c3ac:	d306      	bcc.n	c3bc <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    c3ae:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    c3b0:	4618      	mov	r0, r3
    c3b2:	f7ff ffbc 	bl	c32e <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    c3b6:	4620      	mov	r0, r4
    c3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    c3bc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    c3c0:	3f01      	subs	r7, #1
    c3c2:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    c3c4:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    c3c8:	d001      	beq.n	c3ce <alloc_chunk+0x4c>
    c3ca:	4282      	cmp	r2, r0
    c3cc:	d1e7      	bne.n	c39e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    c3ce:	f1c5 0220 	rsb	r2, r5, #32
    c3d2:	f04f 34ff 	mov.w	r4, #4294967295
    c3d6:	4094      	lsls	r4, r2
    c3d8:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    c3da:	4014      	ands	r4, r2
    c3dc:	d0eb      	beq.n	c3b6 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    c3de:	fa94 f2a4 	rbit	r2, r4
    c3e2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    c3e6:	1d11      	adds	r1, r2, #4
    c3e8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    c3ec:	4621      	mov	r1, r4
    c3ee:	e7df      	b.n	c3b0 <alloc_chunk+0x2e>

0000c3f0 <merge_chunks>:
{
    c3f0:	b538      	push	{r3, r4, r5, lr}
    c3f2:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    c3f4:	f7ff ff6f 	bl	c2d6 <chunk_size>
{
    c3f8:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    c3fa:	4604      	mov	r4, r0
    c3fc:	4611      	mov	r1, r2
    c3fe:	4618      	mov	r0, r3
    c400:	f7ff ff69 	bl	c2d6 <chunk_size>
		((uint16_t *)cmem)[f] = val;
    c404:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    c408:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c40a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    c40c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    c40e:	4618      	mov	r0, r3
    c410:	f7ff ff61 	bl	c2d6 <chunk_size>
	void *cmem = &buf[c];
    c414:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    c416:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    c41a:	bd38      	pop	{r3, r4, r5, pc}

0000c41c <split_chunks>:
{
    c41c:	b538      	push	{r3, r4, r5, lr}
    c41e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    c420:	f7ff ff59 	bl	c2d6 <chunk_size>
{
    c424:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    c426:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    c428:	1a51      	subs	r1, r2, r1
    c42a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    c42e:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c430:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    c432:	8060      	strh	r0, [r4, #2]
    c434:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c438:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    c43a:	8044      	strh	r4, [r0, #2]
    c43c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    c440:	4618      	mov	r0, r3
    c442:	4611      	mov	r1, r2
    c444:	f7ff ff47 	bl	c2d6 <chunk_size>
	void *cmem = &buf[c];
    c448:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    c44a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    c44e:	bd38      	pop	{r3, r4, r5, pc}

0000c450 <free_chunk>:
{
    c450:	b538      	push	{r3, r4, r5, lr}
    c452:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    c454:	f7ff ff3f 	bl	c2d6 <chunk_size>
    c458:	460c      	mov	r4, r1
    c45a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    c45c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c460:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    c462:	07da      	lsls	r2, r3, #31
    c464:	d40a      	bmi.n	c47c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    c466:	4628      	mov	r0, r5
    c468:	f7ff ff7e 	bl	c368 <free_list_remove>
	return c + chunk_size(h, c);
    c46c:	4621      	mov	r1, r4
    c46e:	4628      	mov	r0, r5
    c470:	f7ff ff31 	bl	c2d6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    c474:	1822      	adds	r2, r4, r0
    c476:	4628      	mov	r0, r5
    c478:	f7ff ffba 	bl	c3f0 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    c47c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    c480:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    c482:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c486:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    c488:	07db      	lsls	r3, r3, #31
    c48a:	d40c      	bmi.n	c4a6 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    c48c:	4628      	mov	r0, r5
    c48e:	f7ff ff6b 	bl	c368 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    c492:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    c496:	4622      	mov	r2, r4
    c498:	1a61      	subs	r1, r4, r1
    c49a:	4628      	mov	r0, r5
    c49c:	f7ff ffa8 	bl	c3f0 <merge_chunks>
    c4a0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    c4a4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    c4a6:	4621      	mov	r1, r4
    c4a8:	4628      	mov	r0, r5
}
    c4aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    c4ae:	f7ff bf17 	b.w	c2e0 <free_list_add>

0000c4b2 <sys_heap_free>:
	if (mem == NULL) {
    c4b2:	b161      	cbz	r1, c4ce <sys_heap_free+0x1c>
    c4b4:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c4b6:	3904      	subs	r1, #4
    c4b8:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    c4ba:	f021 0307 	bic.w	r3, r1, #7
    c4be:	4403      	add	r3, r0
	free_chunk(h, c);
    c4c0:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    c4c2:	885a      	ldrh	r2, [r3, #2]
    c4c4:	f022 0201 	bic.w	r2, r2, #1
    c4c8:	805a      	strh	r2, [r3, #2]
    c4ca:	f7ff bfc1 	b.w	c450 <free_chunk>
}
    c4ce:	4770      	bx	lr

0000c4d0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    c4d0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    c4d2:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    c4d4:	b909      	cbnz	r1, c4da <sys_heap_alloc+0xa>
		return NULL;
    c4d6:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    c4d8:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    c4da:	68ab      	ldr	r3, [r5, #8]
    c4dc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    c4e0:	d9f9      	bls.n	c4d6 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c4e2:	310b      	adds	r1, #11
    c4e4:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    c4e6:	4621      	mov	r1, r4
    c4e8:	4628      	mov	r0, r5
    c4ea:	f7ff ff4a 	bl	c382 <alloc_chunk>
	if (c == 0U) {
    c4ee:	4606      	mov	r6, r0
    c4f0:	2800      	cmp	r0, #0
    c4f2:	d0f0      	beq.n	c4d6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    c4f4:	4601      	mov	r1, r0
    c4f6:	4628      	mov	r0, r5
    c4f8:	f7ff feed 	bl	c2d6 <chunk_size>
    c4fc:	42a0      	cmp	r0, r4
    c4fe:	d907      	bls.n	c510 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    c500:	1932      	adds	r2, r6, r4
    c502:	4628      	mov	r0, r5
    c504:	f7ff ff8a 	bl	c41c <split_chunks>
		free_list_add(h, c + chunk_sz);
    c508:	4611      	mov	r1, r2
    c50a:	4628      	mov	r0, r5
    c50c:	f7ff fee8 	bl	c2e0 <free_list_add>
	void *cmem = &buf[c];
    c510:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    c514:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c516:	8853      	ldrh	r3, [r2, #2]
    c518:	f043 0301 	orr.w	r3, r3, #1
    c51c:	8053      	strh	r3, [r2, #2]
    c51e:	3004      	adds	r0, #4
	return mem;
    c520:	e7da      	b.n	c4d8 <sys_heap_alloc+0x8>

0000c522 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    c522:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c526:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    c52a:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    c52e:	6806      	ldr	r6, [r0, #0]
{
    c530:	460f      	mov	r7, r1
    c532:	4614      	mov	r4, r2
	if (align != rew) {
    c534:	d00c      	beq.n	c550 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    c536:	424b      	negs	r3, r1
    c538:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    c53a:	2b04      	cmp	r3, #4
    c53c:	461a      	mov	r2, r3
    c53e:	464f      	mov	r7, r9
    c540:	bf28      	it	cs
    c542:	2204      	movcs	r2, #4
	rew = align & -align;
    c544:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    c546:	b964      	cbnz	r4, c562 <sys_heap_aligned_alloc+0x40>
		return NULL;
    c548:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    c54a:	4628      	mov	r0, r5
    c54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    c550:	2904      	cmp	r1, #4
    c552:	d804      	bhi.n	c55e <sys_heap_aligned_alloc+0x3c>
}
    c554:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    c558:	4611      	mov	r1, r2
    c55a:	f7ff bfb9 	b.w	c4d0 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    c55e:	2204      	movs	r2, #4
    c560:	e7f1      	b.n	c546 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    c562:	68b3      	ldr	r3, [r6, #8]
    c564:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    c568:	d9ee      	bls.n	c548 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c56a:	f104 010b 	add.w	r1, r4, #11
    c56e:	4439      	add	r1, r7
    c570:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    c572:	08c9      	lsrs	r1, r1, #3
    c574:	4630      	mov	r0, r6
    c576:	f7ff ff04 	bl	c382 <alloc_chunk>
	if (c0 == 0) {
    c57a:	4680      	mov	r8, r0
    c57c:	2800      	cmp	r0, #0
    c57e:	d0e3      	beq.n	c548 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    c580:	f109 0504 	add.w	r5, r9, #4
    c584:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    c588:	1e7b      	subs	r3, r7, #1
    c58a:	4435      	add	r5, r6
    c58c:	441d      	add	r5, r3
    c58e:	427f      	negs	r7, r7
    c590:	403d      	ands	r5, r7
    c592:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c596:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c598:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c59a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c59c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c59e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    c5a2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    c5a4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c5a8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    c5ac:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    c5b0:	d208      	bcs.n	c5c4 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    c5b2:	4601      	mov	r1, r0
    c5b4:	463a      	mov	r2, r7
    c5b6:	4630      	mov	r0, r6
    c5b8:	f7ff ff30 	bl	c41c <split_chunks>
		free_list_add(h, c0);
    c5bc:	4641      	mov	r1, r8
    c5be:	4630      	mov	r0, r6
    c5c0:	f7ff fe8e 	bl	c2e0 <free_list_add>
	return c + chunk_size(h, c);
    c5c4:	4639      	mov	r1, r7
    c5c6:	4630      	mov	r0, r6
    c5c8:	f7ff fe85 	bl	c2d6 <chunk_size>
    c5cc:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    c5ce:	4284      	cmp	r4, r0
    c5d0:	d207      	bcs.n	c5e2 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    c5d2:	4630      	mov	r0, r6
    c5d4:	4622      	mov	r2, r4
    c5d6:	f7ff ff21 	bl	c41c <split_chunks>
		free_list_add(h, c_end);
    c5da:	4621      	mov	r1, r4
    c5dc:	4630      	mov	r0, r6
    c5de:	f7ff fe7f 	bl	c2e0 <free_list_add>
	void *cmem = &buf[c];
    c5e2:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c5e6:	8873      	ldrh	r3, [r6, #2]
    c5e8:	f043 0301 	orr.w	r3, r3, #1
    c5ec:	8073      	strh	r3, [r6, #2]
    c5ee:	e7ac      	b.n	c54a <sys_heap_aligned_alloc+0x28>

0000c5f0 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    c5f0:	3a04      	subs	r2, #4
{
    c5f2:	b4f0      	push	{r4, r5, r6, r7}
    c5f4:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c5f6:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c5f8:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c5fa:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c5fe:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    c602:	1a0e      	subs	r6, r1, r0
    c604:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    c606:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    c608:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    c60c:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    c60e:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    c612:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    c614:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    c616:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    c618:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c61c:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    c61e:	f1c2 0220 	rsb	r2, r2, #32
    c622:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    c624:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    c628:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    c62c:	4294      	cmp	r4, r2
    c62e:	d1fb      	bne.n	c628 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c630:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c632:	f042 0201 	orr.w	r2, r2, #1
    c636:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    c638:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    c63c:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c63e:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    c640:	8007      	strh	r7, [r0, #0]
    c642:	8065      	strh	r5, [r4, #2]
    c644:	1984      	adds	r4, r0, r6
    c646:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    c64a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    c64e:	8067      	strh	r7, [r4, #2]
    c650:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c652:	885a      	ldrh	r2, [r3, #2]
    c654:	f042 0201 	orr.w	r2, r2, #1
    c658:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    c65a:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    c65c:	f7ff be40 	b.w	c2e0 <free_list_add>

0000c660 <sys_slist_find_and_remove>:
	return list->head;
    c660:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c662:	2200      	movs	r2, #0
    c664:	b90b      	cbnz	r3, c66a <sys_slist_find_and_remove+0xa>
    c666:	4618      	mov	r0, r3
    c668:	4770      	bx	lr
    c66a:	428b      	cmp	r3, r1
    c66c:	d110      	bne.n	c690 <sys_slist_find_and_remove+0x30>
	return node->next;
    c66e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    c670:	b942      	cbnz	r2, c684 <sys_slist_find_and_remove+0x24>
    c672:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    c674:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    c676:	4291      	cmp	r1, r2
    c678:	d100      	bne.n	c67c <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    c67a:	6043      	str	r3, [r0, #4]
	parent->next = child;
    c67c:	2300      	movs	r3, #0
    c67e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c680:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    c682:	4770      	bx	lr
	parent->next = child;
    c684:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    c686:	6843      	ldr	r3, [r0, #4]
    c688:	4299      	cmp	r1, r3
	list->tail = node;
    c68a:	bf08      	it	eq
    c68c:	6042      	streq	r2, [r0, #4]
}
    c68e:	e7f5      	b.n	c67c <sys_slist_find_and_remove+0x1c>
	return node->next;
    c690:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c692:	681b      	ldr	r3, [r3, #0]
    c694:	e7e6      	b.n	c664 <sys_slist_find_and_remove+0x4>

0000c696 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c696:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    c698:	f013 0307 	ands.w	r3, r3, #7
    c69c:	d105      	bne.n	c6aa <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    c69e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    c6a0:	2b00      	cmp	r3, #0
    c6a2:	bf0c      	ite	eq
    c6a4:	2000      	moveq	r0, #0
    c6a6:	2003      	movne	r0, #3
    c6a8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    c6aa:	2b02      	cmp	r3, #2
    c6ac:	d105      	bne.n	c6ba <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    c6ae:	8b40      	ldrh	r0, [r0, #26]
    c6b0:	fab0 f080 	clz	r0, r0
    c6b4:	0940      	lsrs	r0, r0, #5
    c6b6:	0080      	lsls	r0, r0, #2
    c6b8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    c6ba:	2b01      	cmp	r3, #1
    c6bc:	d105      	bne.n	c6ca <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    c6be:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    c6c0:	2b00      	cmp	r3, #0
    c6c2:	bf0c      	ite	eq
    c6c4:	2000      	moveq	r0, #0
    c6c6:	2005      	movne	r0, #5
    c6c8:	4770      	bx	lr
	int evt = EVT_NOP;
    c6ca:	2000      	movs	r0, #0
}
    c6cc:	4770      	bx	lr

0000c6ce <validate_args>:
{
    c6ce:	b510      	push	{r4, lr}
    c6d0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    c6d2:	b100      	cbz	r0, c6d6 <validate_args+0x8>
    c6d4:	b911      	cbnz	r1, c6dc <validate_args+0xe>
		return -EINVAL;
    c6d6:	f06f 0015 	mvn.w	r0, #21
}
    c6da:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    c6dc:	1d08      	adds	r0, r1, #4
    c6de:	f000 f8d6 	bl	c88e <sys_notify_validate>
	if ((rv == 0)
    c6e2:	2800      	cmp	r0, #0
    c6e4:	d1f9      	bne.n	c6da <validate_args+0xc>
	    && ((cli->notify.flags
    c6e6:	68a3      	ldr	r3, [r4, #8]
    c6e8:	2b03      	cmp	r3, #3
    c6ea:	d9f6      	bls.n	c6da <validate_args+0xc>
    c6ec:	e7f3      	b.n	c6d6 <validate_args+0x8>

0000c6ee <notify_one>:
{
    c6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6f2:	460d      	mov	r5, r1
    c6f4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    c6f6:	4619      	mov	r1, r3
    c6f8:	1d28      	adds	r0, r5, #4
{
    c6fa:	4690      	mov	r8, r2
    c6fc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    c6fe:	f000 f8da 	bl	c8b6 <sys_notify_finalize>
	if (cb) {
    c702:	4604      	mov	r4, r0
    c704:	b138      	cbz	r0, c716 <notify_one+0x28>
		cb(mgr, cli, state, res);
    c706:	4633      	mov	r3, r6
    c708:	4642      	mov	r2, r8
    c70a:	4629      	mov	r1, r5
    c70c:	4638      	mov	r0, r7
    c70e:	46a4      	mov	ip, r4
}
    c710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    c714:	4760      	bx	ip
}
    c716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c71a <transition_complete>:
{
    c71a:	b410      	push	{r4}
	__asm__ volatile(
    c71c:	f04f 0420 	mov.w	r4, #32
    c720:	f3ef 8211 	mrs	r2, BASEPRI
    c724:	f384 8812 	msr	BASEPRI_MAX, r4
    c728:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    c72c:	6141      	str	r1, [r0, #20]
}
    c72e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    c730:	2101      	movs	r1, #1
    c732:	f7f4 bad7 	b.w	ce4 <process_event>

0000c736 <onoff_manager_init>:
{
    c736:	b538      	push	{r3, r4, r5, lr}
    c738:	460c      	mov	r4, r1
	if ((mgr == NULL)
    c73a:	4605      	mov	r5, r0
    c73c:	b158      	cbz	r0, c756 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    c73e:	b151      	cbz	r1, c756 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    c740:	680b      	ldr	r3, [r1, #0]
    c742:	b143      	cbz	r3, c756 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    c744:	684b      	ldr	r3, [r1, #4]
    c746:	b133      	cbz	r3, c756 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    c748:	221c      	movs	r2, #28
    c74a:	2100      	movs	r1, #0
    c74c:	f000 fe63 	bl	d416 <memset>
    c750:	612c      	str	r4, [r5, #16]
	return 0;
    c752:	2000      	movs	r0, #0
}
    c754:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    c756:	f06f 0015 	mvn.w	r0, #21
    c75a:	e7fb      	b.n	c754 <onoff_manager_init+0x1e>

0000c75c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    c75c:	b570      	push	{r4, r5, r6, lr}
    c75e:	4605      	mov	r5, r0
    c760:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    c762:	f7ff ffb4 	bl	c6ce <validate_args>

	if (rv < 0) {
    c766:	1e04      	subs	r4, r0, #0
    c768:	db15      	blt.n	c796 <onoff_request+0x3a>
    c76a:	f04f 0320 	mov.w	r3, #32
    c76e:	f3ef 8211 	mrs	r2, BASEPRI
    c772:	f383 8812 	msr	BASEPRI_MAX, r3
    c776:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    c77a:	8b6b      	ldrh	r3, [r5, #26]
    c77c:	8b2c      	ldrh	r4, [r5, #24]
    c77e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c782:	428b      	cmp	r3, r1
    c784:	f004 0407 	and.w	r4, r4, #7
    c788:	d107      	bne.n	c79a <onoff_request+0x3e>
	__asm__ volatile(
    c78a:	f382 8811 	msr	BASEPRI, r2
    c78e:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    c792:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    c796:	4620      	mov	r0, r4
    c798:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    c79a:	2c02      	cmp	r4, #2
    c79c:	d10c      	bne.n	c7b8 <onoff_request+0x5c>
		mgr->refs += 1U;
    c79e:	3301      	adds	r3, #1
    c7a0:	836b      	strh	r3, [r5, #26]
    c7a2:	f382 8811 	msr	BASEPRI, r2
    c7a6:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    c7aa:	2300      	movs	r3, #0
    c7ac:	4622      	mov	r2, r4
    c7ae:	4631      	mov	r1, r6
    c7b0:	4628      	mov	r0, r5
    c7b2:	f7ff ff9c 	bl	c6ee <notify_one>
    c7b6:	e7ee      	b.n	c796 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    c7b8:	2c06      	cmp	r4, #6
    c7ba:	d814      	bhi.n	c7e6 <onoff_request+0x8a>
    c7bc:	e8df f004 	tbb	[pc, r4]
    c7c0:	13131304 	.word	0x13131304
    c7c4:	1a04      	.short	0x1a04
    c7c6:	04          	.byte	0x04
    c7c7:	00          	.byte	0x00
	parent->next = child;
    c7c8:	2300      	movs	r3, #0
    c7ca:	6033      	str	r3, [r6, #0]
	return list->tail;
    c7cc:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    c7ce:	b93b      	cbnz	r3, c7e0 <onoff_request+0x84>
	list->head = node;
    c7d0:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    c7d4:	b9ac      	cbnz	r4, c802 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    c7d6:	2102      	movs	r1, #2
    c7d8:	4628      	mov	r0, r5
    c7da:	f7f4 fa83 	bl	ce4 <process_event>
    c7de:	e7da      	b.n	c796 <onoff_request+0x3a>
	parent->next = child;
    c7e0:	601e      	str	r6, [r3, #0]
	list->tail = node;
    c7e2:	606e      	str	r6, [r5, #4]
}
    c7e4:	e7f6      	b.n	c7d4 <onoff_request+0x78>
    c7e6:	f382 8811 	msr	BASEPRI, r2
    c7ea:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    c7ee:	f06f 0404 	mvn.w	r4, #4
    c7f2:	e7d0      	b.n	c796 <onoff_request+0x3a>
    c7f4:	f382 8811 	msr	BASEPRI, r2
    c7f8:	f3bf 8f6f 	isb	sy
    c7fc:	f06f 0485 	mvn.w	r4, #133	; 0x85
    c800:	e7c9      	b.n	c796 <onoff_request+0x3a>
    c802:	f382 8811 	msr	BASEPRI, r2
    c806:	f3bf 8f6f 	isb	sy
		if (notify) {
    c80a:	e7c4      	b.n	c796 <onoff_request+0x3a>

0000c80c <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    c80c:	b510      	push	{r4, lr}
	__asm__ volatile(
    c80e:	f04f 0320 	mov.w	r3, #32
    c812:	f3ef 8211 	mrs	r2, BASEPRI
    c816:	f383 8812 	msr	BASEPRI_MAX, r3
    c81a:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c81e:	8b04      	ldrh	r4, [r0, #24]
    c820:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    c824:	2c02      	cmp	r4, #2
    c826:	d00a      	beq.n	c83e <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    c828:	2c01      	cmp	r4, #1
    c82a:	bf0c      	ite	eq
    c82c:	f06f 0004 	mvneq.w	r0, #4
    c830:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    c834:	f382 8811 	msr	BASEPRI, r2
    c838:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    c83c:	e008      	b.n	c850 <onoff_release+0x44>
	mgr->refs -= 1U;
    c83e:	8b43      	ldrh	r3, [r0, #26]
    c840:	3b01      	subs	r3, #1
    c842:	b29b      	uxth	r3, r3
    c844:	8343      	strh	r3, [r0, #26]
	if (stop) {
    c846:	b923      	cbnz	r3, c852 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    c848:	4621      	mov	r1, r4
    c84a:	f7f4 fa4b 	bl	ce4 <process_event>
	int rv = state;
    c84e:	4620      	mov	r0, r4
}
    c850:	bd10      	pop	{r4, pc}
	int rv = state;
    c852:	4620      	mov	r0, r4
    c854:	e7ee      	b.n	c834 <onoff_release+0x28>

0000c856 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    c856:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    c858:	b1b0      	cbz	r0, c888 <onoff_cancel+0x32>
    c85a:	b1a9      	cbz	r1, c888 <onoff_cancel+0x32>
	__asm__ volatile(
    c85c:	f04f 0220 	mov.w	r2, #32
    c860:	f3ef 8511 	mrs	r5, BASEPRI
    c864:	f382 8812 	msr	BASEPRI_MAX, r2
    c868:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c86c:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    c86e:	f7ff fef7 	bl	c660 <sys_slist_find_and_remove>
    c872:	b130      	cbz	r0, c882 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    c874:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    c878:	f385 8811 	msr	BASEPRI, r5
    c87c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    c880:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    c882:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c886:	e7f7      	b.n	c878 <onoff_cancel+0x22>
		return -EINVAL;
    c888:	f06f 0015 	mvn.w	r0, #21
    c88c:	e7f8      	b.n	c880 <onoff_cancel+0x2a>

0000c88e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    c88e:	4603      	mov	r3, r0
    c890:	b140      	cbz	r0, c8a4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c892:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    c894:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    c898:	2a02      	cmp	r2, #2
    c89a:	d006      	beq.n	c8aa <sys_notify_validate+0x1c>
    c89c:	2a03      	cmp	r2, #3
    c89e:	d004      	beq.n	c8aa <sys_notify_validate+0x1c>
    c8a0:	2a01      	cmp	r2, #1
    c8a2:	d005      	beq.n	c8b0 <sys_notify_validate+0x22>
    c8a4:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    c8a8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    c8aa:	681a      	ldr	r2, [r3, #0]
    c8ac:	2a00      	cmp	r2, #0
    c8ae:	d0f9      	beq.n	c8a4 <sys_notify_validate+0x16>
		notify->result = 0;
    c8b0:	2000      	movs	r0, #0
    c8b2:	6098      	str	r0, [r3, #8]
    c8b4:	4770      	bx	lr

0000c8b6 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    c8b6:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c8b8:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    c8ba:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    c8bc:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    c8c0:	2a02      	cmp	r2, #2
{
    c8c2:	4603      	mov	r3, r0
	switch (method) {
    c8c4:	f04f 0400 	mov.w	r4, #0
    c8c8:	d007      	beq.n	c8da <sys_notify_finalize+0x24>
    c8ca:	2a03      	cmp	r2, #3
    c8cc:	d002      	beq.n	c8d4 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    c8ce:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
    c8d0:	2000      	movs	r0, #0
    c8d2:	e001      	b.n	c8d8 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
    c8d4:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    c8d6:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    c8d8:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    c8da:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    c8dc:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    c8de:	2800      	cmp	r0, #0
    c8e0:	d0f6      	beq.n	c8d0 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
    c8e2:	f7ff f9f1 	bl	bcc8 <z_impl_k_poll_signal_raise>
    c8e6:	e7f3      	b.n	c8d0 <sys_notify_finalize+0x1a>

0000c8e8 <encode_uint>:
{
    c8e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8ec:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    c8ee:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    c8f0:	2b6f      	cmp	r3, #111	; 0x6f
{
    c8f2:	4680      	mov	r8, r0
    c8f4:	460f      	mov	r7, r1
    c8f6:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c8f8:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c8fc:	d029      	beq.n	c952 <encode_uint+0x6a>
    c8fe:	d824      	bhi.n	c94a <encode_uint+0x62>
		return 10;
    c900:	2b58      	cmp	r3, #88	; 0x58
    c902:	bf0c      	ite	eq
    c904:	2610      	moveq	r6, #16
    c906:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    c908:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    c90c:	4632      	mov	r2, r6
    c90e:	2300      	movs	r3, #0
    c910:	4640      	mov	r0, r8
    c912:	4639      	mov	r1, r7
    c914:	f7f3 fbf4 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c918:	2a09      	cmp	r2, #9
    c91a:	b2d4      	uxtb	r4, r2
    c91c:	d81e      	bhi.n	c95c <encode_uint+0x74>
    c91e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    c920:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c922:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    c924:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c928:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    c92c:	d301      	bcc.n	c932 <encode_uint+0x4a>
    c92e:	45d1      	cmp	r9, sl
    c930:	d811      	bhi.n	c956 <encode_uint+0x6e>
	if (conv->flag_hash) {
    c932:	782b      	ldrb	r3, [r5, #0]
    c934:	069b      	lsls	r3, r3, #26
    c936:	d505      	bpl.n	c944 <encode_uint+0x5c>
		if (radix == 8) {
    c938:	2e08      	cmp	r6, #8
    c93a:	d115      	bne.n	c968 <encode_uint+0x80>
			conv->altform_0 = true;
    c93c:	78ab      	ldrb	r3, [r5, #2]
    c93e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    c942:	70ab      	strb	r3, [r5, #2]
}
    c944:	4648      	mov	r0, r9
    c946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    c94a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    c94e:	2b70      	cmp	r3, #112	; 0x70
    c950:	e7d7      	b.n	c902 <encode_uint+0x1a>
	switch (specifier) {
    c952:	2608      	movs	r6, #8
    c954:	e7d8      	b.n	c908 <encode_uint+0x20>
		value /= radix;
    c956:	4680      	mov	r8, r0
    c958:	460f      	mov	r7, r1
    c95a:	e7d7      	b.n	c90c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c95c:	f1bb 0f19 	cmp.w	fp, #25
    c960:	bf94      	ite	ls
    c962:	3437      	addls	r4, #55	; 0x37
    c964:	3457      	addhi	r4, #87	; 0x57
    c966:	e7db      	b.n	c920 <encode_uint+0x38>
		} else if (radix == 16) {
    c968:	2e10      	cmp	r6, #16
    c96a:	d1eb      	bne.n	c944 <encode_uint+0x5c>
			conv->altform_0c = true;
    c96c:	78ab      	ldrb	r3, [r5, #2]
    c96e:	f043 0310 	orr.w	r3, r3, #16
    c972:	e7e6      	b.n	c942 <encode_uint+0x5a>

0000c974 <outs>:
{
    c974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c978:	4607      	mov	r7, r0
    c97a:	4688      	mov	r8, r1
    c97c:	4615      	mov	r5, r2
    c97e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c980:	4614      	mov	r4, r2
    c982:	42b4      	cmp	r4, r6
    c984:	d305      	bcc.n	c992 <outs+0x1e>
    c986:	b10e      	cbz	r6, c98c <outs+0x18>
	return (int)count;
    c988:	1b60      	subs	r0, r4, r5
    c98a:	e008      	b.n	c99e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c98c:	7823      	ldrb	r3, [r4, #0]
    c98e:	2b00      	cmp	r3, #0
    c990:	d0fa      	beq.n	c988 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    c992:	f814 0b01 	ldrb.w	r0, [r4], #1
    c996:	4641      	mov	r1, r8
    c998:	47b8      	blx	r7
		if (rc < 0) {
    c99a:	2800      	cmp	r0, #0
    c99c:	daf1      	bge.n	c982 <outs+0xe>
}
    c99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c9a2 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
    c9a4:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    c9a6:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
    c9a8:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
    c9aa:	1baf      	subs	r7, r5, r6
{
    c9ac:	4604      	mov	r4, r0
    c9ae:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
    c9b0:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    c9b2:	bf98      	it	ls
    c9b4:	1aff      	subls	r7, r7, r3
    c9b6:	eba5 0000 	sub.w	r0, r5, r0
{
    c9ba:	4694      	mov	ip, r2
		base += buf->size;
    c9bc:	bf98      	it	ls
    c9be:	18f6      	addls	r6, r6, r3
    c9c0:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
    c9c2:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
    c9c4:	6823      	ldr	r3, [r4, #0]
    c9c6:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
    c9c8:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    c9ca:	442b      	add	r3, r5
	size = MIN(size, free_space);
    c9cc:	bf28      	it	cs
    c9ce:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    c9d0:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    c9d2:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
    c9d4:	4290      	cmp	r0, r2
    c9d6:	bf28      	it	cs
    c9d8:	4610      	movcs	r0, r2
	buf->put_head += size;
    c9da:	4403      	add	r3, r0
    c9dc:	6063      	str	r3, [r4, #4]

	return size;
}
    c9de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c9e0 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    c9e0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    c9e4:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    c9e6:	428a      	cmp	r2, r1
    c9e8:	d30c      	bcc.n	ca04 <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    c9ea:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    c9ec:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    c9ee:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    c9f0:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    c9f4:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    c9f6:	428a      	cmp	r2, r1
    c9f8:	d901      	bls.n	c9fe <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    c9fa:	2000      	movs	r0, #0
    c9fc:	4770      	bx	lr
		buf->put_base += buf->size;
    c9fe:	4413      	add	r3, r2
    ca00:	60c3      	str	r3, [r0, #12]
    ca02:	e7fa      	b.n	c9fa <ring_buf_put_finish+0x1a>
		return -EINVAL;
    ca04:	f06f 0015 	mvn.w	r0, #21
}
    ca08:	4770      	bx	lr

0000ca0a <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    ca0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ca0e:	4680      	mov	r8, r0
    ca10:	460e      	mov	r6, r1
    ca12:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    ca14:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    ca16:	462a      	mov	r2, r5
    ca18:	a901      	add	r1, sp, #4
    ca1a:	4640      	mov	r0, r8
    ca1c:	f7ff ffc1 	bl	c9a2 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    ca20:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    ca22:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    ca24:	4602      	mov	r2, r0
    ca26:	9801      	ldr	r0, [sp, #4]
    ca28:	f000 fcea 	bl	d400 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    ca2c:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    ca2e:	4427      	add	r7, r4
		data += partial_size;
    ca30:	4426      	add	r6, r4
	} while (size && partial_size);
    ca32:	d001      	beq.n	ca38 <ring_buf_put+0x2e>
    ca34:	2c00      	cmp	r4, #0
    ca36:	d1ee      	bne.n	ca16 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    ca38:	4639      	mov	r1, r7
    ca3a:	4640      	mov	r0, r8
    ca3c:	f7ff ffd0 	bl	c9e0 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    ca40:	4638      	mov	r0, r7
    ca42:	b002      	add	sp, #8
    ca44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ca48 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    ca48:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca4a:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    ca4c:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    ca4e:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
    ca50:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    ca52:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
    ca54:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    ca56:	42b8      	cmp	r0, r7
{
    ca58:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    ca5a:	bf98      	it	ls
    ca5c:	1836      	addls	r6, r6, r0
    ca5e:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
    ca62:	6823      	ldr	r3, [r4, #0]
    ca64:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
    ca68:	bf98      	it	ls
    ca6a:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
    ca6c:	442b      	add	r3, r5
	size = MIN(size, available_size);
    ca6e:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
    ca70:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
    ca74:	bf28      	it	cs
    ca76:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
    ca78:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    ca7a:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
    ca7c:	4290      	cmp	r0, r2
    ca7e:	bf28      	it	cs
    ca80:	4610      	movcs	r0, r2
	buf->get_head += size;
    ca82:	4403      	add	r3, r0
    ca84:	6123      	str	r3, [r4, #16]

	return size;
}
    ca86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ca88 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    ca88:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    ca8c:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    ca8e:	428a      	cmp	r2, r1
    ca90:	d30c      	bcc.n	caac <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    ca92:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    ca94:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
    ca98:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
    ca9c:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    ca9e:	428a      	cmp	r2, r1
    caa0:	d901      	bls.n	caa6 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    caa2:	2000      	movs	r0, #0
    caa4:	4770      	bx	lr
		buf->get_base += buf->size;
    caa6:	4413      	add	r3, r2
    caa8:	6183      	str	r3, [r0, #24]
    caaa:	e7fa      	b.n	caa2 <ring_buf_get_finish+0x1a>
		return -EINVAL;
    caac:	f06f 0015 	mvn.w	r0, #21
}
    cab0:	4770      	bx	lr

0000cab2 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    cab2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cab6:	4680      	mov	r8, r0
    cab8:	460d      	mov	r5, r1
    caba:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    cabc:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    cabe:	4632      	mov	r2, r6
    cac0:	a901      	add	r1, sp, #4
    cac2:	4640      	mov	r0, r8
    cac4:	f7ff ffc0 	bl	ca48 <ring_buf_get_claim>
    cac8:	4604      	mov	r4, r0
		if (data) {
    caca:	b12d      	cbz	r5, cad8 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    cacc:	4602      	mov	r2, r0
    cace:	9901      	ldr	r1, [sp, #4]
    cad0:	4628      	mov	r0, r5
    cad2:	f000 fc95 	bl	d400 <memcpy>
			data += partial_size;
    cad6:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    cad8:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    cada:	4427      	add	r7, r4
	} while (size && partial_size);
    cadc:	d001      	beq.n	cae2 <ring_buf_get+0x30>
    cade:	2c00      	cmp	r4, #0
    cae0:	d1ed      	bne.n	cabe <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    cae2:	4639      	mov	r1, r7
    cae4:	4640      	mov	r0, r8
    cae6:	f7ff ffcf 	bl	ca88 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    caea:	4638      	mov	r0, r7
    caec:	b002      	add	sp, #8
    caee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000caf2 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    caf2:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    caf4:	6903      	ldr	r3, [r0, #16]
{
    caf6:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    caf8:	f013 0008 	ands.w	r0, r3, #8
    cafc:	d109      	bne.n	cb12 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    cafe:	6813      	ldr	r3, [r2, #0]
    cb00:	68d4      	ldr	r4, [r2, #12]
    cb02:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    cb04:	bf97      	itett	ls
    cb06:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    cb08:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    cb0a:	1ad3      	subls	r3, r2, r3

	return true;
    cb0c:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    cb0e:	600b      	str	r3, [r1, #0]
}
    cb10:	bd10      	pop	{r4, pc}
    cb12:	2300      	movs	r3, #0
		return false;
    cb14:	4618      	mov	r0, r3
    cb16:	e7fa      	b.n	cb0e <free_space+0x1c>

0000cb18 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    cb18:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    cb1a:	a901      	add	r1, sp, #4
{
    cb1c:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    cb1e:	f7ff ffe8 	bl	caf2 <free_space>
    cb22:	b120      	cbz	r0, cb2e <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    cb24:	9b01      	ldr	r3, [sp, #4]
    cb26:	68e2      	ldr	r2, [r4, #12]
    cb28:	3b01      	subs	r3, #1
    cb2a:	4413      	add	r3, r2
    cb2c:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    cb2e:	6a20      	ldr	r0, [r4, #32]
    cb30:	9b01      	ldr	r3, [sp, #4]
    cb32:	1ac0      	subs	r0, r0, r3
}
    cb34:	3801      	subs	r0, #1
    cb36:	b002      	add	sp, #8
    cb38:	bd10      	pop	{r4, pc}

0000cb3a <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    cb3a:	b510      	push	{r4, lr}
    cb3c:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    cb3e:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    cb40:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    cb42:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    cb44:	07d2      	lsls	r2, r2, #31
    cb46:	d502      	bpl.n	cb4e <idx_inc+0x14>
		return i & (buffer->size - 1);
    cb48:	3b01      	subs	r3, #1
    cb4a:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    cb4c:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    cb4e:	4298      	cmp	r0, r3
    cb50:	bf28      	it	cs
    cb52:	1ac0      	subcs	r0, r0, r3
    cb54:	e7fa      	b.n	cb4c <idx_inc+0x12>

0000cb56 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    cb56:	b510      	push	{r4, lr}
    cb58:	4604      	mov	r4, r0
    cb5a:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    cb5c:	68c1      	ldr	r1, [r0, #12]
    cb5e:	f7ff ffec 	bl	cb3a <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    cb62:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    cb64:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    cb66:	f023 0308 	bic.w	r3, r3, #8
    cb6a:	6123      	str	r3, [r4, #16]
}
    cb6c:	bd10      	pop	{r4, pc}

0000cb6e <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    cb6e:	b538      	push	{r3, r4, r5, lr}
    cb70:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    cb72:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    cb74:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    cb76:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    cb78:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    cb7c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    cb80:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    cb82:	6801      	ldr	r1, [r0, #0]
    cb84:	462a      	mov	r2, r5
    cb86:	f7ff ffd8 	bl	cb3a <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    cb8a:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    cb8c:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    cb8e:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    cb90:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    cb92:	bf02      	ittt	eq
    cb94:	6923      	ldreq	r3, [r4, #16]
    cb96:	f043 0308 	orreq.w	r3, r3, #8
    cb9a:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    cb9c:	462a      	mov	r2, r5
    cb9e:	4620      	mov	r0, r4
    cba0:	f7ff ffcb 	bl	cb3a <idx_inc>
    cba4:	6060      	str	r0, [r4, #4]
}
    cba6:	bd38      	pop	{r3, r4, r5, pc}

0000cba8 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    cba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    cbac:	68c7      	ldr	r7, [r0, #12]
    cbae:	69c6      	ldr	r6, [r0, #28]
{
    cbb0:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    cbb2:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    cbb6:	f003 0303 	and.w	r3, r3, #3
    cbba:	2b02      	cmp	r3, #2
{
    cbbc:	4604      	mov	r4, r0
    cbbe:	4688      	mov	r8, r1
    cbc0:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    cbc2:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    cbc6:	f04f 0300 	mov.w	r3, #0
    cbca:	d009      	beq.n	cbe0 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    cbcc:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    cbce:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    cbd2:	6923      	ldr	r3, [r4, #16]
    cbd4:	0799      	lsls	r1, r3, #30
    cbd6:	d410      	bmi.n	cbfa <drop_item_locked+0x52>
		return false;
    cbd8:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    cbda:	b003      	add	sp, #12
    cbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    cbe0:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    cbe4:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    cbe6:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    cbe8:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    cbec:	d0f1      	beq.n	cbd2 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    cbee:	f7ff ffb2 	bl	cb56 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    cbf2:	68e3      	ldr	r3, [r4, #12]
    cbf4:	60a3      	str	r3, [r4, #8]
		return true;
    cbf6:	2001      	movs	r0, #1
    cbf8:	e7ef      	b.n	cbda <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    cbfa:	69a3      	ldr	r3, [r4, #24]
    cbfc:	4650      	mov	r0, sl
    cbfe:	4798      	blx	r3
	return item->hdr.valid;
    cc00:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    cc04:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    cc06:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    cc08:	d5e6      	bpl.n	cbd8 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    cc0a:	f013 0302 	ands.w	r3, r3, #2
    cc0e:	d01d      	beq.n	cc4c <drop_item_locked+0xa4>
		if (free_wlen) {
    cc10:	f1b8 0f00 	cmp.w	r8, #0
    cc14:	d003      	beq.n	cc1e <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    cc16:	4641      	mov	r1, r8
    cc18:	4620      	mov	r0, r4
    cc1a:	f7ff ffa8 	bl	cb6e <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    cc1e:	6861      	ldr	r1, [r4, #4]
    cc20:	462a      	mov	r2, r5
    cc22:	4620      	mov	r0, r4
    cc24:	f7ff ff89 	bl	cb3a <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    cc28:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    cc2c:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    cc2e:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    cc30:	d104      	bne.n	cc3c <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    cc32:	462a      	mov	r2, r5
    cc34:	4620      	mov	r0, r4
    cc36:	f7ff ff80 	bl	cb3a <idx_inc>
    cc3a:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    cc3c:	68a3      	ldr	r3, [r4, #8]
    cc3e:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    cc40:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    cc42:	6923      	ldr	r3, [r4, #16]
    cc44:	f043 0308 	orr.w	r3, r3, #8
    cc48:	6123      	str	r3, [r4, #16]
    cc4a:	e7d4      	b.n	cbf6 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    cc4c:	4601      	mov	r1, r0
    cc4e:	4620      	mov	r0, r4
    cc50:	9301      	str	r3, [sp, #4]
    cc52:	f7ff ff80 	bl	cb56 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    cc56:	68e2      	ldr	r2, [r4, #12]
    cc58:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    cc5a:	f1b8 0f00 	cmp.w	r8, #0
    cc5e:	d004      	beq.n	cc6a <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    cc60:	6821      	ldr	r1, [r4, #0]
    cc62:	69e2      	ldr	r2, [r4, #28]
    cc64:	9b01      	ldr	r3, [sp, #4]
    cc66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    cc6a:	eb05 0208 	add.w	r2, r5, r8
    cc6e:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    cc72:	6821      	ldr	r1, [r4, #0]
    cc74:	4620      	mov	r0, r4
    cc76:	f7ff ff60 	bl	cb3a <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    cc7a:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    cc7c:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    cc7e:	f043 0308 	orr.w	r3, r3, #8
    cc82:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    cc84:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    cc88:	f36f 0300 	bfc	r3, #0, #1
    cc8c:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    cc90:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    cc94:	e7af      	b.n	cbf6 <drop_item_locked+0x4e>

0000cc96 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    cc96:	b570      	push	{r4, r5, r6, lr}
    cc98:	4604      	mov	r4, r0
    cc9a:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    cc9c:	f7ff ff4d 	bl	cb3a <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    cca0:	6823      	ldr	r3, [r4, #0]
    cca2:	4283      	cmp	r3, r0
    cca4:	d105      	bne.n	ccb2 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    cca6:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    cca8:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    ccaa:	f023 0308 	bic.w	r3, r3, #8
    ccae:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    ccb0:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    ccb2:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    ccb4:	00ab      	lsls	r3, r5, #2
    ccb6:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    ccba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    ccbe:	4620      	mov	r0, r4
    ccc0:	6861      	ldr	r1, [r4, #4]
    ccc2:	462a      	mov	r2, r5
    ccc4:	f7ff ff39 	bl	cb3a <idx_inc>
    ccc8:	6060      	str	r0, [r4, #4]
    ccca:	e7f1      	b.n	ccb0 <post_drop_action+0x1a>

0000cccc <max_utilization_update>:
{
    cccc:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    ccce:	6903      	ldr	r3, [r0, #16]
    ccd0:	075b      	lsls	r3, r3, #29
{
    ccd2:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    ccd4:	d506      	bpl.n	cce4 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    ccd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ccd8:	f7ff ff1e 	bl	cb18 <get_usage>
    ccdc:	4285      	cmp	r5, r0
    ccde:	bf2c      	ite	cs
    cce0:	6265      	strcs	r5, [r4, #36]	; 0x24
    cce2:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    cce4:	bd38      	pop	{r3, r4, r5, pc}

0000cce6 <mpsc_pbuf_init>:
{
    cce6:	b538      	push	{r3, r4, r5, lr}
    cce8:	460d      	mov	r5, r1
    ccea:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    ccec:	221c      	movs	r2, #28
    ccee:	2100      	movs	r1, #0
    ccf0:	f000 fb91 	bl	d416 <memset>
	buffer->get_wlen = cfg->get_wlen;
    ccf4:	68eb      	ldr	r3, [r5, #12]
    ccf6:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    ccf8:	68ab      	ldr	r3, [r5, #8]
    ccfa:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    ccfc:	682b      	ldr	r3, [r5, #0]
    ccfe:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    cd00:	686b      	ldr	r3, [r5, #4]
    cd02:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    cd04:	2200      	movs	r2, #0
    cd06:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    cd08:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    cd0a:	b123      	cbz	r3, cd16 <mpsc_pbuf_init+0x30>
    cd0c:	1e59      	subs	r1, r3, #1
    cd0e:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    cd10:	bf08      	it	eq
    cd12:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    cd16:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    cd18:	2201      	movs	r2, #1
    cd1a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    cd1e:	2100      	movs	r1, #0
}
    cd20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cd24:	f001 b98c 	b.w	e040 <z_impl_k_sem_init>

0000cd28 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    cd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd2c:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    cd2e:	2500      	movs	r5, #0
{
    cd30:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    cd32:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    cd34:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    cd36:	428b      	cmp	r3, r1
{
    cd38:	4604      	mov	r4, r0
    cd3a:	460e      	mov	r6, r1
    cd3c:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    cd3e:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    cd40:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    cd42:	d33a      	bcc.n	cdba <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    cd44:	f04f 0320 	mov.w	r3, #32
    cd48:	f3ef 8b11 	mrs	fp, BASEPRI
    cd4c:	f383 8812 	msr	BASEPRI_MAX, r3
    cd50:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    cd54:	9a05      	ldr	r2, [sp, #20]
    cd56:	46d8      	mov	r8, fp
    cd58:	b12a      	cbz	r2, cd66 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    cd5a:	4629      	mov	r1, r5
    cd5c:	4620      	mov	r0, r4
    cd5e:	f7ff ff9a 	bl	cc96 <post_drop_action>
			tmp_wr_idx_shift = 0;
    cd62:	2300      	movs	r3, #0
    cd64:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    cd66:	a904      	add	r1, sp, #16
    cd68:	4620      	mov	r0, r4
    cd6a:	f7ff fec2 	bl	caf2 <free_space>

		if (free_wlen >= wlen) {
    cd6e:	9904      	ldr	r1, [sp, #16]
    cd70:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    cd72:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    cd74:	d32a      	bcc.n	cdcc <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    cd76:	6822      	ldr	r2, [r4, #0]
			item =
    cd78:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    cd7a:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    cd7e:	f021 0103 	bic.w	r1, r1, #3
    cd82:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    cd86:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    cd8a:	6821      	ldr	r1, [r4, #0]
    cd8c:	4632      	mov	r2, r6
    cd8e:	4620      	mov	r0, r4
    cd90:	f7ff fed3 	bl	cb3a <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    cd94:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    cd96:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    cd98:	4298      	cmp	r0, r3
    cd9a:	d012      	beq.n	cdc2 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    cd9c:	2700      	movs	r7, #0
	__asm__ volatile(
    cd9e:	f388 8811 	msr	BASEPRI, r8
    cda2:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    cda6:	9903      	ldr	r1, [sp, #12]
    cda8:	b129      	cbz	r1, cdb6 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    cdaa:	6962      	ldr	r2, [r4, #20]
    cdac:	b10a      	cbz	r2, cdb2 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    cdae:	4620      	mov	r0, r4
    cdb0:	4790      	blx	r2
			}
			dropped_item = NULL;
    cdb2:	2300      	movs	r3, #0
    cdb4:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    cdb6:	2f00      	cmp	r7, #0
    cdb8:	d1c4      	bne.n	cd44 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    cdba:	4648      	mov	r0, r9
    cdbc:	b007      	add	sp, #28
    cdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    cdc2:	6923      	ldr	r3, [r4, #16]
    cdc4:	f043 0308 	orr.w	r3, r3, #8
    cdc8:	6123      	str	r3, [r4, #16]
    cdca:	e7e7      	b.n	cd9c <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    cdcc:	b118      	cbz	r0, cdd6 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    cdce:	4620      	mov	r0, r4
    cdd0:	f7ff fecd 	bl	cb6e <add_skip_item>
			cont = true;
    cdd4:	e7e3      	b.n	cd9e <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    cdd6:	9b00      	ldr	r3, [sp, #0]
    cdd8:	ea5a 0303 	orrs.w	r3, sl, r3
    cddc:	d01a      	beq.n	ce14 <mpsc_pbuf_alloc+0xec>
    cdde:	9101      	str	r1, [sp, #4]
    cde0:	f001 f88e 	bl	df00 <k_is_in_isr>
    cde4:	9901      	ldr	r1, [sp, #4]
    cde6:	b9a8      	cbnz	r0, ce14 <mpsc_pbuf_alloc+0xec>
    cde8:	f38b 8811 	msr	BASEPRI, fp
    cdec:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    cdf0:	9b00      	ldr	r3, [sp, #0]
    cdf2:	4652      	mov	r2, sl
    cdf4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    cdf8:	f7fd fff8 	bl	adec <z_impl_k_sem_take>
	__asm__ volatile(
    cdfc:	f04f 0320 	mov.w	r3, #32
    ce00:	f3ef 8811 	mrs	r8, BASEPRI
    ce04:	f383 8812 	msr	BASEPRI_MAX, r3
    ce08:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    ce0c:	fab0 f780 	clz	r7, r0
    ce10:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    ce12:	e7c4      	b.n	cd9e <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    ce14:	ab05      	add	r3, sp, #20
    ce16:	aa03      	add	r2, sp, #12
    ce18:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    ce1a:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    ce1c:	f7ff fec4 	bl	cba8 <drop_item_locked>
    ce20:	4607      	mov	r7, r0
    ce22:	e7bc      	b.n	cd9e <mpsc_pbuf_alloc+0x76>

0000ce24 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    ce24:	b570      	push	{r4, r5, r6, lr}
    ce26:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    ce28:	6983      	ldr	r3, [r0, #24]
    ce2a:	4608      	mov	r0, r1
{
    ce2c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    ce2e:	4798      	blx	r3
    ce30:	4602      	mov	r2, r0
    ce32:	f04f 0320 	mov.w	r3, #32
    ce36:	f3ef 8611 	mrs	r6, BASEPRI
    ce3a:	f383 8812 	msr	BASEPRI_MAX, r3
    ce3e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    ce42:	782b      	ldrb	r3, [r5, #0]
    ce44:	f043 0301 	orr.w	r3, r3, #1
    ce48:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ce4a:	6861      	ldr	r1, [r4, #4]
    ce4c:	4620      	mov	r0, r4
    ce4e:	f7ff fe74 	bl	cb3a <idx_inc>
    ce52:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    ce54:	4620      	mov	r0, r4
    ce56:	f7ff ff39 	bl	cccc <max_utilization_update>
	__asm__ volatile(
    ce5a:	f386 8811 	msr	BASEPRI, r6
    ce5e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    ce62:	bd70      	pop	{r4, r5, r6, pc}

0000ce64 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce66:	4604      	mov	r4, r0
	__asm__ volatile(
    ce68:	f04f 0320 	mov.w	r3, #32
    ce6c:	f3ef 8611 	mrs	r6, BASEPRI
    ce70:	f383 8812 	msr	BASEPRI_MAX, r3
    ce74:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    ce78:	6923      	ldr	r3, [r4, #16]
    ce7a:	f013 0f08 	tst.w	r3, #8
    ce7e:	68a3      	ldr	r3, [r4, #8]
    ce80:	d102      	bne.n	ce88 <mpsc_pbuf_claim+0x24>
    ce82:	6862      	ldr	r2, [r4, #4]
    ce84:	4293      	cmp	r3, r2
    ce86:	d900      	bls.n	ce8a <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    ce88:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    ce8a:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    ce8c:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    ce8e:	b92a      	cbnz	r2, ce9c <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    ce90:	f386 8811 	msr	BASEPRI, r6
    ce94:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    ce98:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    ce9a:	e033      	b.n	cf04 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    ce9c:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    cea0:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    cea4:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    cea8:	d0f2      	beq.n	ce90 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    ceaa:	2802      	cmp	r0, #2
    ceac:	d103      	bne.n	ceb6 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    ceae:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    ceb2:	08ad      	lsrs	r5, r5, #2
    ceb4:	d105      	bne.n	cec2 <mpsc_pbuf_claim+0x5e>
    ceb6:	07d0      	lsls	r0, r2, #31
    ceb8:	d412      	bmi.n	cee0 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    ceba:	69a3      	ldr	r3, [r4, #24]
    cebc:	4638      	mov	r0, r7
    cebe:	4798      	blx	r3
    cec0:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    cec2:	68a1      	ldr	r1, [r4, #8]
    cec4:	462a      	mov	r2, r5
    cec6:	4620      	mov	r0, r4
    cec8:	f7ff fe37 	bl	cb3a <idx_inc>
				rd_idx_inc(buffer, inc);
    cecc:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    cece:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    ced0:	4620      	mov	r0, r4
    ced2:	f7ff fe40 	bl	cb56 <rd_idx_inc>
    ced6:	f386 8811 	msr	BASEPRI, r6
    ceda:	f3bf 8f6f 	isb	sy
	} while (cont);
    cede:	e7c3      	b.n	ce68 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    cee0:	f042 0202 	orr.w	r2, r2, #2
    cee4:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    cee8:	4638      	mov	r0, r7
    ceea:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    ceec:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    ceee:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    cef0:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    cef2:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    cef4:	4620      	mov	r0, r4
    cef6:	f7ff fe20 	bl	cb3a <idx_inc>
				buffer->tmp_rd_idx =
    cefa:	60a0      	str	r0, [r4, #8]
    cefc:	f386 8811 	msr	BASEPRI, r6
    cf00:	f3bf 8f6f 	isb	sy
}
    cf04:	4638      	mov	r0, r7
    cf06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cf08 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    cf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf0a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    cf0c:	6983      	ldr	r3, [r0, #24]
    cf0e:	4608      	mov	r0, r1
{
    cf10:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    cf12:	4798      	blx	r3
    cf14:	4606      	mov	r6, r0
	__asm__ volatile(
    cf16:	f04f 0320 	mov.w	r3, #32
    cf1a:	f3ef 8711 	mrs	r7, BASEPRI
    cf1e:	f383 8812 	msr	BASEPRI_MAX, r3
    cf22:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    cf26:	782b      	ldrb	r3, [r5, #0]
    cf28:	f36f 0300 	bfc	r3, #0, #1
    cf2c:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    cf2e:	6923      	ldr	r3, [r4, #16]
    cf30:	079b      	lsls	r3, r3, #30
    cf32:	d505      	bpl.n	cf40 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    cf34:	68e2      	ldr	r2, [r4, #12]
    cf36:	69e3      	ldr	r3, [r4, #28]
    cf38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    cf3c:	429d      	cmp	r5, r3
    cf3e:	d11a      	bne.n	cf76 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    cf40:	782b      	ldrb	r3, [r5, #0]
    cf42:	f36f 0341 	bfc	r3, #1, #1
    cf46:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    cf48:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    cf4c:	4299      	cmp	r1, r3
    cf4e:	d104      	bne.n	cf5a <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    cf50:	4632      	mov	r2, r6
    cf52:	4620      	mov	r0, r4
    cf54:	f7ff fdf1 	bl	cb3a <idx_inc>
    cf58:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    cf5a:	4631      	mov	r1, r6
    cf5c:	4620      	mov	r0, r4
    cf5e:	f7ff fdfa 	bl	cb56 <rd_idx_inc>
	__asm__ volatile(
    cf62:	f387 8811 	msr	BASEPRI, r7
    cf66:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    cf6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    cf6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cf72:	f7fd bf15 	b.w	ada0 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    cf76:	682b      	ldr	r3, [r5, #0]
    cf78:	f360 039f 	bfi	r3, r0, #2, #30
    cf7c:	602b      	str	r3, [r5, #0]
    cf7e:	e7f0      	b.n	cf62 <mpsc_pbuf_free+0x5a>

0000cf80 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    cf80:	6902      	ldr	r2, [r0, #16]
    cf82:	6883      	ldr	r3, [r0, #8]
    cf84:	0712      	lsls	r2, r2, #28
    cf86:	d402      	bmi.n	cf8e <mpsc_pbuf_is_pending+0xe>
    cf88:	6842      	ldr	r2, [r0, #4]
    cf8a:	429a      	cmp	r2, r3
    cf8c:	d200      	bcs.n	cf90 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    cf8e:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    cf90:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    cf92:	1e18      	subs	r0, r3, #0
    cf94:	bf18      	it	ne
    cf96:	2001      	movne	r0, #1
    cf98:	4770      	bx	lr

0000cf9a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    cf9a:	4770      	bx	lr

0000cf9c <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    cf9c:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    cf9e:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    cfa0:	bf5f      	itttt	pl
    cfa2:	6803      	ldrpl	r3, [r0, #0]
    cfa4:	8842      	ldrhpl	r2, [r0, #2]
    cfa6:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    cfaa:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    cfae:	bf5d      	ittte	pl
    cfb0:	3017      	addpl	r0, #23
    cfb2:	f020 0007 	bicpl.w	r0, r0, #7
    cfb6:	0880      	lsrpl	r0, r0, #2
	return 0;
    cfb8:	2000      	movmi	r0, #0
}
    cfba:	4770      	bx	lr

0000cfbc <dummy_timestamp>:
}
    cfbc:	2000      	movs	r0, #0
    cfbe:	4770      	bx	lr

0000cfc0 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    cfc0:	f000 bd74 	b.w	daac <sys_clock_cycle_get_32>

0000cfc4 <atomic_inc>:
{
    cfc4:	4603      	mov	r3, r0
}
    cfc6:	f3bf 8f5b 	dmb	ish
    cfca:	e853 0f00 	ldrex	r0, [r3]
    cfce:	1c42      	adds	r2, r0, #1
    cfd0:	e843 2100 	strex	r1, r2, [r3]
    cfd4:	2900      	cmp	r1, #0
    cfd6:	d1f8      	bne.n	cfca <atomic_inc+0x6>
    cfd8:	f3bf 8f5b 	dmb	ish
    cfdc:	4770      	bx	lr

0000cfde <z_log_vprintk>:
{
    cfde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    cfe0:	2300      	movs	r3, #0
    cfe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cfe6:	e9cd 3300 	strd	r3, r3, [sp]
    cfea:	461a      	mov	r2, r3
    cfec:	4619      	mov	r1, r3
    cfee:	4618      	mov	r0, r3
    cff0:	f7f4 fe6c 	bl	1ccc <z_impl_z_log_msg_runtime_vcreate>
}
    cff4:	b005      	add	sp, #20
    cff6:	f85d fb04 	ldr.w	pc, [sp], #4

0000cffa <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    cffa:	2001      	movs	r0, #1
    cffc:	f7f4 bc1e 	b.w	183c <z_log_dropped>

0000d000 <z_log_get_tag>:
}
    d000:	2000      	movs	r0, #0
    d002:	4770      	bx	lr

0000d004 <z_cbprintf_cpy>:
{
    d004:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    d006:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    d00a:	1b9b      	subs	r3, r3, r6
    d00c:	428b      	cmp	r3, r1
{
    d00e:	460c      	mov	r4, r1
    d010:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    d012:	d30a      	bcc.n	d02a <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    d014:	6813      	ldr	r3, [r2, #0]
    d016:	460a      	mov	r2, r1
    d018:	4601      	mov	r1, r0
    d01a:	1998      	adds	r0, r3, r6
    d01c:	f000 f9f0 	bl	d400 <memcpy>
	desc->off += len;
    d020:	68ab      	ldr	r3, [r5, #8]
    d022:	4423      	add	r3, r4
    d024:	60ab      	str	r3, [r5, #8]
	return len;
    d026:	4620      	mov	r0, r4
}
    d028:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    d02a:	f06f 001b 	mvn.w	r0, #27
    d02e:	e7fb      	b.n	d028 <z_cbprintf_cpy+0x24>

0000d030 <z_log_msg_finalize>:
{
    d030:	b570      	push	{r4, r5, r6, lr}
    d032:	460e      	mov	r6, r1
    d034:	4615      	mov	r5, r2
    d036:	4619      	mov	r1, r3
	if (!msg) {
    d038:	4604      	mov	r4, r0
    d03a:	b918      	cbnz	r0, d044 <z_log_msg_finalize+0x14>
}
    d03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    d040:	f7f4 bbfc 	b.w	183c <z_log_dropped>
	if (data) {
    d044:	b133      	cbz	r3, d054 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    d046:	f3c2 234a 	ubfx	r3, r2, #9, #11
    d04a:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    d04c:	0d12      	lsrs	r2, r2, #20
    d04e:	4418      	add	r0, r3
    d050:	f000 f9d6 	bl	d400 <memcpy>
	msg->hdr.source = source;
    d054:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    d058:	4620      	mov	r0, r4
}
    d05a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    d05e:	f7f4 bd7d 	b.w	1b5c <z_log_msg_commit>

0000d062 <buffer_write>:
{
    d062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d064:	4606      	mov	r6, r0
    d066:	460d      	mov	r5, r1
    d068:	4614      	mov	r4, r2
    d06a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    d06c:	4621      	mov	r1, r4
    d06e:	4628      	mov	r0, r5
    d070:	463a      	mov	r2, r7
    d072:	47b0      	blx	r6
	} while (len != 0);
    d074:	1a24      	subs	r4, r4, r0
		buf += processed;
    d076:	4405      	add	r5, r0
	} while (len != 0);
    d078:	d1f8      	bne.n	d06c <buffer_write+0xa>
}
    d07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d07c <cbvprintf>:
{
    d07c:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    d07e:	2400      	movs	r4, #0
    d080:	9400      	str	r4, [sp, #0]
    d082:	f7f3 ff3d 	bl	f00 <z_cbvprintf_impl>
}
    d086:	b002      	add	sp, #8
    d088:	bd10      	pop	{r4, pc}

0000d08a <log_output_flush>:
{
    d08a:	b510      	push	{r4, lr}
		     output->control_block->offset,
    d08c:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    d08e:	6881      	ldr	r1, [r0, #8]
{
    d090:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    d092:	e9d2 2300 	ldrd	r2, r3, [r2]
    d096:	6800      	ldr	r0, [r0, #0]
    d098:	f7ff ffe3 	bl	d062 <buffer_write>
	output->control_block->offset = 0;
    d09c:	6863      	ldr	r3, [r4, #4]
    d09e:	2200      	movs	r2, #0
    d0a0:	601a      	str	r2, [r3, #0]
}
    d0a2:	bd10      	pop	{r4, pc}

0000d0a4 <out_func>:
{
    d0a4:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    d0a6:	684b      	ldr	r3, [r1, #4]
    d0a8:	681a      	ldr	r2, [r3, #0]
    d0aa:	68cb      	ldr	r3, [r1, #12]
    d0ac:	429a      	cmp	r2, r3
{
    d0ae:	4605      	mov	r5, r0
    d0b0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    d0b2:	d102      	bne.n	d0ba <out_func+0x16>
		log_output_flush(out_ctx);
    d0b4:	4608      	mov	r0, r1
    d0b6:	f7ff ffe8 	bl	d08a <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d0ba:	6863      	ldr	r3, [r4, #4]
    d0bc:	f3bf 8f5b 	dmb	ish
    d0c0:	e853 2f00 	ldrex	r2, [r3]
    d0c4:	1c51      	adds	r1, r2, #1
    d0c6:	e843 1000 	strex	r0, r1, [r3]
    d0ca:	2800      	cmp	r0, #0
    d0cc:	d1f8      	bne.n	d0c0 <out_func+0x1c>
    d0ce:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    d0d2:	68a3      	ldr	r3, [r4, #8]
    d0d4:	549d      	strb	r5, [r3, r2]
}
    d0d6:	2000      	movs	r0, #0
    d0d8:	bd38      	pop	{r3, r4, r5, pc}

0000d0da <cr_out_func>:
	if (c == '\n') {
    d0da:	280a      	cmp	r0, #10
{
    d0dc:	b538      	push	{r3, r4, r5, lr}
    d0de:	4604      	mov	r4, r0
    d0e0:	460d      	mov	r5, r1
	if (c == '\n') {
    d0e2:	d102      	bne.n	d0ea <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    d0e4:	200d      	movs	r0, #13
    d0e6:	f7ff ffdd 	bl	d0a4 <out_func>
	out_func(c, ctx);
    d0ea:	4629      	mov	r1, r5
    d0ec:	4620      	mov	r0, r4
    d0ee:	f7ff ffd9 	bl	d0a4 <out_func>
}
    d0f2:	2000      	movs	r0, #0
    d0f4:	bd38      	pop	{r3, r4, r5, pc}

0000d0f6 <log_backend_uart_init>:
}
    d0f6:	4770      	bx	lr

0000d0f8 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    d0f8:	2300      	movs	r3, #0
    d0fa:	f7f4 bd63 	b.w	1bc4 <z_impl_z_log_msg_static_create>

0000d0fe <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    d0fe:	f010 0f70 	tst.w	r0, #112	; 0x70
	ep_idx = ep & (~USB_EP_DIR_IN);
    d102:	f000 027f 	and.w	r2, r0, #127	; 0x7f
	if (ep_idx > 15) {
    d106:	d001      	beq.n	d10c <get_ep_bm_from_addr+0xe>
    d108:	f7f5 ba3e 	b.w	2588 <get_ep_bm_from_addr.part.0>
	if (ep & USB_EP_DIR_IN) {
    d10c:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    d110:	bf18      	it	ne
    d112:	3210      	addne	r2, #16
    d114:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    d116:	4090      	lsls	r0, r2
}
    d118:	4770      	bx	lr

0000d11a <usb_get_dev_data_by_cfg>:
	return list->head;
    d11a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d11c:	b140      	cbz	r0, d130 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    d11e:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    d122:	685b      	ldr	r3, [r3, #4]
    d124:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d126:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    d12a:	d001      	beq.n	d130 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    d12c:	6840      	ldr	r0, [r0, #4]
    d12e:	e7f5      	b.n	d11c <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    d130:	4770      	bx	lr

0000d132 <usb_get_dev_data_by_iface>:
	return list->head;
    d132:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d134:	b150      	cbz	r0, d14c <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    d136:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    d13a:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    d13c:	685b      	ldr	r3, [r3, #4]
    d13e:	789b      	ldrb	r3, [r3, #2]
    d140:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d142:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    d146:	d001      	beq.n	d14c <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    d148:	6840      	ldr	r0, [r0, #4]
    d14a:	e7f3      	b.n	d134 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    d14c:	4770      	bx	lr

0000d14e <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    d14e:	b530      	push	{r4, r5, lr}
	return list->head;
    d150:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d152:	b188      	cbz	r0, d178 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    d154:	f850 3c04 	ldr.w	r3, [r0, #-4]
    d158:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    d15a:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    d15c:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d15e:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    d160:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    d162:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    d164:	b2dc      	uxtb	r4, r3
    d166:	42a5      	cmp	r5, r4
    d168:	d801      	bhi.n	d16e <usb_get_dev_data_by_ep+0x20>
	return node->next;
    d16a:	6840      	ldr	r0, [r0, #4]
    d16c:	e7f1      	b.n	d152 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    d16e:	3301      	adds	r3, #1
    d170:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    d174:	428c      	cmp	r4, r1
    d176:	d1f5      	bne.n	d164 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    d178:	bd30      	pop	{r4, r5, pc}

0000d17a <usb_transfer_is_busy>:
{
    d17a:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    d17c:	f7f5 fffa 	bl	3174 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    d180:	b128      	cbz	r0, d18e <usb_transfer_is_busy+0x14>
    d182:	6840      	ldr	r0, [r0, #4]
    d184:	f110 0f10 	cmn.w	r0, #16
    d188:	bf14      	ite	ne
    d18a:	2000      	movne	r0, #0
    d18c:	2001      	moveq	r0, #1
}
    d18e:	bd08      	pop	{r3, pc}

0000d190 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    d190:	1c4b      	adds	r3, r1, #1
    d192:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    d194:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    d196:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    d198:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    d19c:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    d19e:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    d1a2:	4770      	bx	lr

0000d1a4 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    d1a4:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    d1a8:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    d1ac:	4718      	bx	r3

0000d1ae <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d1ae:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    d1b0:	2200      	movs	r2, #0
    d1b2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
    d1b6:	4770      	bx	lr

0000d1b8 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d1b8:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    d1ba:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    d1be:	b108      	cbz	r0, d1c4 <cdc_acm_irq_tx_ready+0xc>
    d1c0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    d1c4:	4770      	bx	lr

0000d1c6 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d1c6:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    d1c8:	2200      	movs	r2, #0
    d1ca:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
    d1ce:	4770      	bx	lr

0000d1d0 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    d1d0:	6903      	ldr	r3, [r0, #16]
}
    d1d2:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    d1d6:	4770      	bx	lr

0000d1d8 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d1d8:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    d1da:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    d1de:	b112      	cbz	r2, d1e6 <cdc_acm_irq_is_pending+0xe>
    d1e0:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    d1e4:	b92a      	cbnz	r2, d1f2 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    d1e6:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    d1ea:	b118      	cbz	r0, d1f4 <cdc_acm_irq_is_pending+0x1c>
    d1ec:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
    d1f0:	4770      	bx	lr
		return 1;
    d1f2:	2001      	movs	r0, #1
}
    d1f4:	4770      	bx	lr

0000d1f6 <cdc_acm_irq_update>:
}
    d1f6:	2001      	movs	r0, #1
    d1f8:	4770      	bx	lr

0000d1fa <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d1fa:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    d1fc:	e9c3 1200 	strd	r1, r2, [r3]
}
    d200:	4770      	bx	lr

0000d202 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    d202:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d204:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    d206:	d008      	beq.n	d21a <cdc_acm_line_ctrl_get+0x18>
    d208:	2904      	cmp	r1, #4
    d20a:	d00b      	beq.n	d224 <cdc_acm_line_ctrl_get+0x22>
    d20c:	2901      	cmp	r1, #1
    d20e:	d10e      	bne.n	d22e <cdc_acm_line_ctrl_get+0x2c>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    d210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		*val = (dev_data->line_state &
    d214:	6013      	str	r3, [r2, #0]
		return 0;
    d216:	2000      	movs	r0, #0
    d218:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    d21a:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    d21e:	f3c3 0340 	ubfx	r3, r3, #1, #1
		return 0;
    d222:	e7f7      	b.n	d214 <cdc_acm_line_ctrl_get+0x12>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    d224:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    d228:	f003 0301 	and.w	r3, r3, #1
		return 0;
    d22c:	e7f2      	b.n	d214 <cdc_acm_line_ctrl_get+0x12>
	switch (ctrl) {
    d22e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    d232:	4770      	bx	lr

0000d234 <cdc_acm_configure>:
}
    d234:	2000      	movs	r0, #0
    d236:	4770      	bx	lr

0000d238 <cdc_acm_config_get>:
{
    d238:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d23a:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    d23c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    d240:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    d242:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    d246:	b16a      	cbz	r2, d264 <cdc_acm_config_get+0x2c>
    d248:	2a01      	cmp	r2, #1
    d24a:	bf0c      	ite	eq
    d24c:	2202      	moveq	r2, #2
    d24e:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    d250:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    d252:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
    d256:	1e50      	subs	r0, r2, #1
    d258:	2803      	cmp	r0, #3
    d25a:	d805      	bhi.n	d268 <cdc_acm_config_get+0x30>
    d25c:	e8df f000 	tbb	[pc, r0]
    d260:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
    d264:	2201      	movs	r2, #1
    d266:	e7f3      	b.n	d250 <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
    d268:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
    d26a:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    d26c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    d270:	2b06      	cmp	r3, #6
    d272:	d009      	beq.n	d288 <cdc_acm_config_get+0x50>
    d274:	2b07      	cmp	r3, #7
    d276:	d009      	beq.n	d28c <cdc_acm_config_get+0x54>
    d278:	2b05      	cmp	r3, #5
    d27a:	bf0c      	ite	eq
    d27c:	2300      	moveq	r3, #0
    d27e:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    d280:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    d282:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    d284:	71c8      	strb	r0, [r1, #7]
}
    d286:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
    d288:	2301      	movs	r3, #1
    d28a:	e7f9      	b.n	d280 <cdc_acm_config_get+0x48>
    d28c:	2302      	movs	r3, #2
    d28e:	e7f7      	b.n	d280 <cdc_acm_config_get+0x48>

0000d290 <cdc_acm_line_ctrl_set>:
{
    d290:	b508      	push	{r3, lr}
	switch (ctrl) {
    d292:	2940      	cmp	r1, #64	; 0x40
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d294:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    d296:	d03f      	beq.n	d318 <cdc_acm_line_ctrl_set+0x88>
    d298:	d813      	bhi.n	d2c2 <cdc_acm_line_ctrl_set+0x32>
    d29a:	2910      	cmp	r1, #16
    d29c:	d032      	beq.n	d304 <cdc_acm_line_ctrl_set+0x74>
    d29e:	d806      	bhi.n	d2ae <cdc_acm_line_ctrl_set+0x1e>
    d2a0:	2901      	cmp	r1, #1
    d2a2:	d01e      	beq.n	d2e2 <cdc_acm_line_ctrl_set+0x52>
    d2a4:	2908      	cmp	r1, #8
    d2a6:	d020      	beq.n	d2ea <cdc_acm_line_ctrl_set+0x5a>
    d2a8:	f06f 0012 	mvn.w	r0, #18
}
    d2ac:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    d2ae:	2920      	cmp	r1, #32
    d2b0:	d1fa      	bne.n	d2a8 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    d2b2:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    d2b6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    d2ba:	b352      	cbz	r2, d312 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    d2bc:	f041 0104 	orr.w	r1, r1, #4
    d2c0:	e027      	b.n	d312 <cdc_acm_line_ctrl_set+0x82>
	switch (ctrl) {
    d2c2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    d2c6:	d030      	beq.n	d32a <cdc_acm_line_ctrl_set+0x9a>
    d2c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d2cc:	d036      	beq.n	d33c <cdc_acm_line_ctrl_set+0xac>
    d2ce:	2980      	cmp	r1, #128	; 0x80
    d2d0:	d1ea      	bne.n	d2a8 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    d2d2:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    d2d6:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    d2da:	b1d2      	cbz	r2, d312 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    d2dc:	f041 0110 	orr.w	r1, r1, #16
    d2e0:	e017      	b.n	d312 <cdc_acm_line_ctrl_set+0x82>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    d2e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		return 0;
    d2e6:	2000      	movs	r0, #0
    d2e8:	e7e0      	b.n	d2ac <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    d2ea:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    d2ee:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    d2f2:	b10a      	cbz	r2, d2f8 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    d2f4:	f041 0101 	orr.w	r1, r1, #1
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    d2f8:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    d2fc:	2101      	movs	r1, #1
    d2fe:	f7f6 fa71 	bl	37e4 <cdc_acm_send_notification.isra.0>
		return 0;
    d302:	e7f0      	b.n	d2e6 <cdc_acm_line_ctrl_set+0x56>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    d304:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    d308:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    d30c:	b10a      	cbz	r2, d312 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    d30e:	f041 0102 	orr.w	r1, r1, #2
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    d312:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d316:	e7f2      	b.n	d2fe <cdc_acm_line_ctrl_set+0x6e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    d318:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    d31c:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    d320:	2a00      	cmp	r2, #0
    d322:	d0f6      	beq.n	d312 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    d324:	f041 0108 	orr.w	r1, r1, #8
    d328:	e7f3      	b.n	d312 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    d32a:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    d32e:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    d332:	2a00      	cmp	r2, #0
    d334:	d0ed      	beq.n	d312 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    d336:	f041 0120 	orr.w	r1, r1, #32
    d33a:	e7ea      	b.n	d312 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    d33c:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    d340:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    d344:	2a00      	cmp	r2, #0
    d346:	d0e4      	beq.n	d312 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    d348:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    d34c:	e7e1      	b.n	d312 <cdc_acm_line_ctrl_set+0x82>

0000d34e <cdc_acm_fifo_read>:
{
    d34e:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    d350:	6904      	ldr	r4, [r0, #16]
{
    d352:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    d354:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d358:	f7ff fbab 	bl	cab2 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    d35c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d360:	691a      	ldr	r2, [r3, #16]
    d362:	6899      	ldr	r1, [r3, #8]
    d364:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
    d366:	bf04      	itt	eq
    d368:	2200      	moveq	r2, #0
    d36a:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
    d36e:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    d372:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
    d374:	b19a      	cbz	r2, d39e <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
    d376:	685a      	ldr	r2, [r3, #4]
    d378:	6959      	ldr	r1, [r3, #20]
    d37a:	69db      	ldr	r3, [r3, #28]
    d37c:	1a52      	subs	r2, r2, r1
    d37e:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    d380:	2b3f      	cmp	r3, #63	; 0x3f
    d382:	d90c      	bls.n	d39e <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
    d384:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    d388:	b133      	cbz	r3, d398 <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    d38a:	686b      	ldr	r3, [r5, #4]
    d38c:	6a1b      	ldr	r3, [r3, #32]
    d38e:	4622      	mov	r2, r4
    d390:	7b18      	ldrb	r0, [r3, #12]
    d392:	2100      	movs	r1, #0
    d394:	f7f6 fa48 	bl	3828 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
    d398:	2300      	movs	r3, #0
    d39a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    d39e:	4630      	mov	r0, r6
    d3a0:	bd70      	pop	{r4, r5, r6, pc}

0000d3a2 <cdc_acm_poll_in>:
{
    d3a2:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    d3a4:	2201      	movs	r2, #1
    d3a6:	f7ff ffd2 	bl	d34e <cdc_acm_fifo_read>
}
    d3aa:	3801      	subs	r0, #1
    d3ac:	bf18      	it	ne
    d3ae:	f04f 30ff 	movne.w	r0, #4294967295
    d3b2:	bd08      	pop	{r3, pc}

0000d3b4 <abort_function>:
{
    d3b4:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    d3b6:	2000      	movs	r0, #0
    d3b8:	f7f4 f954 	bl	1664 <sys_reboot>

0000d3bc <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    d3bc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    d3be:	6800      	ldr	r0, [r0, #0]
    d3c0:	f7f6 bbd2 	b.w	3b68 <z_arm_fatal_error>

0000d3c4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    d3c4:	2100      	movs	r1, #0
    d3c6:	2001      	movs	r0, #1
    d3c8:	f7f6 bbce 	b.w	3b68 <z_arm_fatal_error>

0000d3cc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    d3cc:	b508      	push	{r3, lr}
	handler();
    d3ce:	f7f6 fc79 	bl	3cc4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    d3d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    d3d6:	f7f6 bd31 	b.w	3e3c <z_arm_exc_exit>

0000d3da <z_log_msg_static_create.constprop.0>:
    d3da:	2300      	movs	r3, #0
    d3dc:	f7f4 bbf2 	b.w	1bc4 <z_impl_z_log_msg_static_create>

0000d3e0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    d3e0:	4603      	mov	r3, r0
	size_t n = 0;
    d3e2:	2000      	movs	r0, #0

	while (*s != '\0') {
    d3e4:	5c1a      	ldrb	r2, [r3, r0]
    d3e6:	b902      	cbnz	r2, d3ea <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    d3e8:	4770      	bx	lr
		n++;
    d3ea:	3001      	adds	r0, #1
    d3ec:	e7fa      	b.n	d3e4 <strlen+0x4>

0000d3ee <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    d3ee:	4603      	mov	r3, r0
	size_t n = 0;
    d3f0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    d3f2:	5c1a      	ldrb	r2, [r3, r0]
    d3f4:	b10a      	cbz	r2, d3fa <strnlen+0xc>
    d3f6:	4288      	cmp	r0, r1
    d3f8:	d100      	bne.n	d3fc <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    d3fa:	4770      	bx	lr
		n++;
    d3fc:	3001      	adds	r0, #1
    d3fe:	e7f8      	b.n	d3f2 <strnlen+0x4>

0000d400 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    d400:	b510      	push	{r4, lr}
    d402:	1e43      	subs	r3, r0, #1
    d404:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    d406:	4291      	cmp	r1, r2
    d408:	d100      	bne.n	d40c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    d40a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    d40c:	f811 4b01 	ldrb.w	r4, [r1], #1
    d410:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    d414:	e7f7      	b.n	d406 <memcpy+0x6>

0000d416 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    d416:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    d418:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    d41a:	4603      	mov	r3, r0
	while (n > 0) {
    d41c:	4293      	cmp	r3, r2
    d41e:	d100      	bne.n	d422 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    d420:	4770      	bx	lr
		*(d_byte++) = c_byte;
    d422:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    d426:	e7f9      	b.n	d41c <memset+0x6>

0000d428 <_stdout_hook_default>:
}
    d428:	f04f 30ff 	mov.w	r0, #4294967295
    d42c:	4770      	bx	lr

0000d42e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    d42e:	2806      	cmp	r0, #6
    d430:	d108      	bne.n	d444 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    d432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d436:	2201      	movs	r2, #1
    d438:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    d43c:	f3bf 8f4f 	dsb	sy
        __WFE();
    d440:	bf20      	wfe
    while (true)
    d442:	e7fd      	b.n	d440 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    d444:	4770      	bx	lr

0000d446 <pm_state_exit_post_ops>:
    d446:	2300      	movs	r3, #0
    d448:	f383 8811 	msr	BASEPRI, r3
    d44c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    d450:	4770      	bx	lr

0000d452 <ep_ctx_reset>:
{
    d452:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    d454:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    d456:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    d45a:	2300      	movs	r3, #0
    d45c:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    d45e:	7f83      	ldrb	r3, [r0, #30]
{
    d460:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    d462:	b113      	cbz	r3, d46a <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d464:	7a40      	ldrb	r0, [r0, #9]
    d466:	f000 fcec 	bl	de42 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    d46a:	2301      	movs	r3, #1
    d46c:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    d46e:	2300      	movs	r3, #0
    d470:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    d472:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    d474:	77a3      	strb	r3, [r4, #30]
}
    d476:	bd10      	pop	{r4, pc}

0000d478 <z_log_msg_static_create.constprop.0>:
    d478:	2300      	movs	r3, #0
    d47a:	f7f4 bba3 	b.w	1bc4 <z_impl_z_log_msg_static_create>

0000d47e <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    d47e:	f7fd bba5 	b.w	abcc <z_impl_k_mutex_lock>

0000d482 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    d482:	f7fd bc1d 	b.w	acc0 <z_impl_k_mutex_unlock>

0000d486 <usb_dc_ep_disable>:
{
    d486:	b538      	push	{r3, r4, r5, lr}
    d488:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    d48a:	f7f7 f95f 	bl	474c <endpoint_ctx>
	if (!ep_ctx) {
    d48e:	4605      	mov	r5, r0
    d490:	b160      	cbz	r0, d4ac <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    d492:	7a03      	ldrb	r3, [r0, #8]
    d494:	b16b      	cbz	r3, d4b2 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    d496:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    d498:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    d49a:	f7fd f887 	bl	a5ac <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    d49e:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    d4a0:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    d4a2:	f7ff ffd6 	bl	d452 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    d4a6:	722c      	strb	r4, [r5, #8]
	return 0;
    d4a8:	4620      	mov	r0, r4
}
    d4aa:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    d4ac:	f06f 0015 	mvn.w	r0, #21
    d4b0:	e7fb      	b.n	d4aa <usb_dc_ep_disable+0x24>
		return -EALREADY;
    d4b2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d4b6:	e7f8      	b.n	d4aa <usb_dc_ep_disable+0x24>

0000d4b8 <usb_dc_ep_read>:
{
    d4b8:	b570      	push	{r4, r5, r6, lr}
    d4ba:	4604      	mov	r4, r0
    d4bc:	460e      	mov	r6, r1
    d4be:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    d4c0:	f7f7 ff74 	bl	53ac <usb_dc_ep_read_wait>
	if (ret) {
    d4c4:	b930      	cbnz	r0, d4d4 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    d4c6:	b906      	cbnz	r6, d4ca <usb_dc_ep_read+0x12>
    d4c8:	b125      	cbz	r5, d4d4 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    d4ca:	4620      	mov	r0, r4
}
    d4cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    d4d0:	f7f7 bfd2 	b.w	5478 <usb_dc_ep_read_continue>
}
    d4d4:	bd70      	pop	{r4, r5, r6, pc}

0000d4d6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    d4d6:	6903      	ldr	r3, [r0, #16]
    d4d8:	b2c9      	uxtb	r1, r1
    d4da:	220c      	movs	r2, #12
    d4dc:	fb01 3302 	mla	r3, r1, r2, r3
    d4e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    d4e2:	f000 0007 	and.w	r0, r0, #7
    d4e6:	4770      	bx	lr

0000d4e8 <set_on_state>:
	__asm__ volatile(
    d4e8:	f04f 0320 	mov.w	r3, #32
    d4ec:	f3ef 8211 	mrs	r2, BASEPRI
    d4f0:	f383 8812 	msr	BASEPRI_MAX, r3
    d4f4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    d4f8:	6803      	ldr	r3, [r0, #0]
    d4fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d4fe:	f043 0302 	orr.w	r3, r3, #2
    d502:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    d504:	f382 8811 	msr	BASEPRI, r2
    d508:	f3bf 8f6f 	isb	sy
}
    d50c:	4770      	bx	lr

0000d50e <stop>:
{
    d50e:	b570      	push	{r4, r5, r6, lr}
    d510:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    d512:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    d514:	f04f 0420 	mov.w	r4, #32
    d518:	f3ef 8511 	mrs	r5, BASEPRI
    d51c:	f384 8812 	msr	BASEPRI_MAX, r4
    d520:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d524:	260c      	movs	r6, #12
    d526:	fb06 3401 	mla	r4, r6, r1, r3
    d52a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    d52c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    d530:	d008      	beq.n	d544 <stop+0x36>
    d532:	42a2      	cmp	r2, r4
    d534:	d006      	beq.n	d544 <stop+0x36>
	__asm__ volatile(
    d536:	f385 8811 	msr	BASEPRI, r5
    d53a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    d53e:	f04f 30ff 	mov.w	r0, #4294967295
}
    d542:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    d544:	4371      	muls	r1, r6
    d546:	440b      	add	r3, r1
    d548:	2201      	movs	r2, #1
    d54a:	641a      	str	r2, [r3, #64]	; 0x40
    d54c:	f385 8811 	msr	BASEPRI, r5
    d550:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    d554:	6843      	ldr	r3, [r0, #4]
    d556:	440b      	add	r3, r1
    d558:	685b      	ldr	r3, [r3, #4]
    d55a:	4798      	blx	r3
	return 0;
    d55c:	2000      	movs	r0, #0
    d55e:	e7f0      	b.n	d542 <stop+0x34>

0000d560 <api_stop>:
	return stop(dev, subsys, CTX_API);
    d560:	2280      	movs	r2, #128	; 0x80
    d562:	f7ff bfd4 	b.w	d50e <stop>

0000d566 <async_start>:
{
    d566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d568:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    d56a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    d56c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    d56e:	f04f 0520 	mov.w	r5, #32
    d572:	f3ef 8611 	mrs	r6, BASEPRI
    d576:	f385 8812 	msr	BASEPRI_MAX, r5
    d57a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d57e:	250c      	movs	r5, #12
    d580:	4369      	muls	r1, r5
    d582:	440c      	add	r4, r1
    d584:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    d586:	f005 0c07 	and.w	ip, r5, #7
    d58a:	f1bc 0f01 	cmp.w	ip, #1
    d58e:	d10b      	bne.n	d5a8 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    d590:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    d592:	f386 8811 	msr	BASEPRI, r6
    d596:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    d59a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    d59e:	6843      	ldr	r3, [r0, #4]
    d5a0:	585b      	ldr	r3, [r3, r1]
    d5a2:	4798      	blx	r3
	return 0;
    d5a4:	2000      	movs	r0, #0
}
    d5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    d5a8:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    d5ac:	42af      	cmp	r7, r5
    d5ae:	f386 8811 	msr	BASEPRI, r6
    d5b2:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    d5b6:	bf0c      	ite	eq
    d5b8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    d5bc:	f04f 30ff 	movne.w	r0, #4294967295
    d5c0:	e7f1      	b.n	d5a6 <async_start+0x40>

0000d5c2 <api_start>:
{
    d5c2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    d5c4:	2480      	movs	r4, #128	; 0x80
    d5c6:	9400      	str	r4, [sp, #0]
    d5c8:	f7ff ffcd 	bl	d566 <async_start>
}
    d5cc:	b002      	add	sp, #8
    d5ce:	bd10      	pop	{r4, pc}

0000d5d0 <onoff_started_callback>:
{
    d5d0:	b410      	push	{r4}
	return &data->mgr[type];
    d5d2:	6900      	ldr	r0, [r0, #16]
    d5d4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    d5d6:	241c      	movs	r4, #28
    d5d8:	fb03 0004 	mla	r0, r3, r4, r0
    d5dc:	2100      	movs	r1, #0
}
    d5de:	bc10      	pop	{r4}
	notify(mgr, 0);
    d5e0:	4710      	bx	r2

0000d5e2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    d5e2:	2000      	movs	r0, #0
    d5e4:	f000 ba74 	b.w	dad0 <nrfx_clock_start>

0000d5e8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d5e8:	2000      	movs	r0, #0
    d5ea:	f000 baad 	b.w	db48 <nrfx_clock_stop>

0000d5ee <blocking_start_callback>:
{
    d5ee:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    d5f0:	f7fd bbd6 	b.w	ada0 <z_impl_k_sem_give>

0000d5f4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d5f4:	6843      	ldr	r3, [r0, #4]
    d5f6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    d5f8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    d5fc:	600b      	str	r3, [r1, #0]
}
    d5fe:	2000      	movs	r0, #0
    d600:	4770      	bx	lr

0000d602 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d602:	6843      	ldr	r3, [r0, #4]
    d604:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    d606:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    d60a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    d60e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    d612:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    d616:	2000      	movs	r0, #0
    d618:	4770      	bx	lr

0000d61a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d61a:	6843      	ldr	r3, [r0, #4]
    d61c:	685b      	ldr	r3, [r3, #4]
}
    d61e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    d620:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    d624:	4770      	bx	lr

0000d626 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d626:	6843      	ldr	r3, [r0, #4]
    d628:	685b      	ldr	r3, [r3, #4]
}
    d62a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    d62c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    d630:	4770      	bx	lr

0000d632 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d632:	6843      	ldr	r3, [r0, #4]
    d634:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    d636:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    d63a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    d63e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    d640:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    d644:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    d648:	2000      	movs	r0, #0
    d64a:	4770      	bx	lr

0000d64c <gpio_nrfx_manage_callback>:
{
    d64c:	b510      	push	{r4, lr}
	return port->data;
    d64e:	6903      	ldr	r3, [r0, #16]
	return list->head;
    d650:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    d652:	b1f8      	cbz	r0, d694 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d654:	4288      	cmp	r0, r1
    d656:	d119      	bne.n	d68c <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    d658:	689c      	ldr	r4, [r3, #8]
	return node->next;
    d65a:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    d65c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    d65e:	42a1      	cmp	r1, r4
    d660:	d100      	bne.n	d664 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    d662:	6098      	str	r0, [r3, #8]
	parent->next = child;
    d664:	2000      	movs	r0, #0
    d666:	6008      	str	r0, [r1, #0]
	if (set) {
    d668:	b12a      	cbz	r2, d676 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    d66a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    d66c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    d66e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    d670:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    d672:	b902      	cbnz	r2, d676 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    d674:	6099      	str	r1, [r3, #8]
	return 0;
    d676:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d678:	e010      	b.n	d69c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d67a:	4281      	cmp	r1, r0
    d67c:	d106      	bne.n	d68c <gpio_nrfx_manage_callback+0x40>
	return node->next;
    d67e:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    d680:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    d682:	6898      	ldr	r0, [r3, #8]
    d684:	4281      	cmp	r1, r0
    d686:	d1ed      	bne.n	d664 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    d688:	609c      	str	r4, [r3, #8]
}
    d68a:	e7eb      	b.n	d664 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    d68c:	4604      	mov	r4, r0
    d68e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d690:	2800      	cmp	r0, #0
    d692:	d1f2      	bne.n	d67a <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    d694:	2a00      	cmp	r2, #0
    d696:	d1e8      	bne.n	d66a <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    d698:	f06f 0015 	mvn.w	r0, #21
}
    d69c:	bd10      	pop	{r4, pc}

0000d69e <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    d69e:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    d6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    d6a4:	2908      	cmp	r1, #8
    d6a6:	6e13      	ldr	r3, [r2, #96]	; 0x60
    d6a8:	6e52      	ldr	r2, [r2, #100]	; 0x64
    d6aa:	bf28      	it	cs
    d6ac:	2108      	movcs	r1, #8
    d6ae:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    d6b0:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    d6b2:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    d6b4:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    d6b6:	460a      	mov	r2, r1
    d6b8:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    d6ba:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    d6bc:	f7ff fea0 	bl	d400 <memcpy>

	return length;
}
    d6c0:	4620      	mov	r0, r4
    d6c2:	b002      	add	sp, #8
    d6c4:	bd10      	pop	{r4, pc}

0000d6c6 <timer_work_handler>:
	TimerIrqHandler();
    d6c6:	f7f8 bf75 	b.w	65b4 <TimerIrqHandler>

0000d6ca <k_uptime_get_32>:
{
    d6ca:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    d6cc:	f000 fe7c 	bl	e3c8 <z_impl_k_uptime_ticks>
    d6d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d6d4:	fba0 0302 	umull	r0, r3, r0, r2
    d6d8:	fb02 3301 	mla	r3, r2, r1, r3
    d6dc:	0bc0      	lsrs	r0, r0, #15
}
    d6de:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    d6e2:	bd08      	pop	{r3, pc}

0000d6e4 <RtcGetTimerValue>:
	return k_uptime_get_32();
    d6e4:	f7ff bff1 	b.w	d6ca <k_uptime_get_32>

0000d6e8 <RtcGetMinimumTimeout>:
}
    d6e8:	2001      	movs	r0, #1
    d6ea:	4770      	bx	lr

0000d6ec <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
    d6ec:	4601      	mov	r1, r0
    d6ee:	f240 30e7 	movw	r0, #999	; 0x3e7
    d6f2:	b508      	push	{r3, lr}
    d6f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d6f8:	2300      	movs	r3, #0
    d6fa:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    d6fe:	0c49      	lsrs	r1, r1, #17
    d700:	f7f2 fcfe 	bl	100 <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
    d704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    d708:	f7fd bfda 	b.w	b6c0 <z_impl_k_sleep>

0000d70c <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
    d70c:	4770      	bx	lr

0000d70e <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
    d70e:	4770      	bx	lr

0000d710 <BoardCriticalSectionBegin>:
	__asm__ volatile(
    d710:	f04f 0220 	mov.w	r2, #32
    d714:	f3ef 8311 	mrs	r3, BASEPRI
    d718:	f382 8812 	msr	BASEPRI_MAX, r2
    d71c:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
    d720:	6003      	str	r3, [r0, #0]
}
    d722:	4770      	bx	lr

0000d724 <BoardCriticalSectionEnd>:
	__asm__ volatile(
    d724:	6803      	ldr	r3, [r0, #0]
    d726:	f383 8811 	msr	BASEPRI, r3
    d72a:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
    d72e:	4770      	bx	lr

0000d730 <sx12xx_ev_tx_timed_out>:
	modem_release(&dev_data);
    d730:	f7f8 baa0 	b.w	5c74 <modem_release.constprop.0>

0000d734 <SX1276CheckRfFrequency>:
}
    d734:	2001      	movs	r0, #1
    d736:	4770      	bx	lr

0000d738 <z_log_msg_static_create.constprop.0>:
    d738:	2300      	movs	r3, #0
    d73a:	f7f4 ba43 	b.w	1bc4 <z_impl_z_log_msg_static_create>

0000d73e <SX1276GetBoardTcxoWakeupTime>:
}
    d73e:	2000      	movs	r0, #0
    d740:	4770      	bx	lr

0000d742 <SX1276SetAntSwLowPower>:
}
    d742:	4770      	bx	lr

0000d744 <SX1276SetBoardTcxo>:
}
    d744:	4770      	bx	lr

0000d746 <SX1276SetAntSw>:
void SX127xSetAntSw(uint8_t opMode)
    d746:	4770      	bx	lr

0000d748 <SX1276Reset>:
{
    d748:	b508      	push	{r3, lr}
	gpio_pin_set_dt(&dev_config.reset, 1);
    d74a:	2001      	movs	r0, #1
    d74c:	f7f8 fd62 	bl	6214 <gpio_pin_set_dt.constprop.0.isra.0>
    d750:	2100      	movs	r1, #0
    d752:	2021      	movs	r0, #33	; 0x21
    d754:	f7fd ffb4 	bl	b6c0 <z_impl_k_sleep>
	gpio_pin_set_dt(&dev_config.reset, 0);
    d758:	2000      	movs	r0, #0
    d75a:	f7f8 fd5b 	bl	6214 <gpio_pin_set_dt.constprop.0.isra.0>
    d75e:	20c5      	movs	r0, #197	; 0xc5
}
    d760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d764:	2100      	movs	r1, #0
    d766:	f7fd bfab 	b.w	b6c0 <z_impl_k_sleep>

0000d76a <SX1276ReadBuffer>:
{
    d76a:	b510      	push	{r4, lr}
    d76c:	4604      	mov	r4, r0
	ret = sx127x_read(addr, buffer, size);
    d76e:	b2c0      	uxtb	r0, r0
    d770:	f7f8 fdce 	bl	6310 <sx127x_read>
	if (ret < 0) {
    d774:	2800      	cmp	r0, #0
    d776:	da04      	bge.n	d782 <SX1276ReadBuffer+0x18>
    d778:	4620      	mov	r0, r4
}
    d77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d77e:	f7f8 bd33 	b.w	61e8 <SX1276ReadBuffer.part.0>
    d782:	bd10      	pop	{r4, pc}

0000d784 <SX1276WriteBuffer>:
{
    d784:	b510      	push	{r4, lr}
    d786:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
    d788:	b2c0      	uxtb	r0, r0
    d78a:	f7f8 fe59 	bl	6440 <sx127x_write>
	if (ret < 0) {
    d78e:	2800      	cmp	r0, #0
    d790:	da04      	bge.n	d79c <SX1276WriteBuffer+0x18>
    d792:	4620      	mov	r0, r4
}
    d794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d798:	f7f8 bd10 	b.w	61bc <SX1276WriteBuffer.part.0>
    d79c:	bd10      	pop	{r4, pc}

0000d79e <SX1276GetDio1PinState>:
uint32_t SX127xGetDio1PinState(void)
    d79e:	2000      	movs	r0, #0
    d7a0:	4770      	bx	lr

0000d7a2 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
    d7a2:	3801      	subs	r0, #1
    d7a4:	440a      	add	r2, r1
    d7a6:	4291      	cmp	r1, r2
    d7a8:	d100      	bne.n	d7ac <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
    d7aa:	4770      	bx	lr
        *dst++ = *src++;
    d7ac:	f811 3b01 	ldrb.w	r3, [r1], #1
    d7b0:	f800 3f01 	strb.w	r3, [r0, #1]!
    d7b4:	e7f7      	b.n	d7a6 <memcpy1+0x4>

0000d7b6 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
    d7b6:	b570      	push	{r4, r5, r6, lr}
    d7b8:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
    d7ba:	f7ff ff95 	bl	d6e8 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
    d7be:	2301      	movs	r3, #1
    d7c0:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
    d7c2:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
    d7c4:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
    d7c6:	f7f8 f9c7 	bl	5b58 <RtcGetTimerElapsedTime>
    d7ca:	4428      	add	r0, r5
    d7cc:	4286      	cmp	r6, r0
    d7ce:	d203      	bcs.n	d7d8 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    d7d0:	f7f8 f9c2 	bl	5b58 <RtcGetTimerElapsedTime>
    d7d4:	4405      	add	r5, r0
    d7d6:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
    d7d8:	6820      	ldr	r0, [r4, #0]
}
    d7da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
    d7de:	f7f8 b9cb 	b.w	5b78 <RtcSetAlarm>

0000d7e2 <TimerInit>:
    obj->Timestamp = 0;
    d7e2:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
    d7e4:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
    d7e8:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
    d7ec:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
    d7ee:	6143      	str	r3, [r0, #20]
}
    d7f0:	4770      	bx	lr

0000d7f2 <TimerSetValue>:
{
    d7f2:	b538      	push	{r3, r4, r5, lr}
    d7f4:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
    d7f6:	4608      	mov	r0, r1
    d7f8:	f7ff ff88 	bl	d70c <RtcMs2Tick>
    d7fc:	4604      	mov	r4, r0
    TimerStop( obj );
    d7fe:	4628      	mov	r0, r5
    d800:	f7f8 ff16 	bl	6630 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
    d804:	f7ff ff70 	bl	d6e8 <RtcGetMinimumTimeout>
    if( ticks < minValue )
    d808:	42a0      	cmp	r0, r4
    d80a:	bf38      	it	cc
    d80c:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
    d80e:	e9c5 0000 	strd	r0, r0, [r5]
}
    d812:	bd38      	pop	{r3, r4, r5, pc}

0000d814 <TimerGetCurrentTime>:
{
    d814:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
    d816:	f7ff ff65 	bl	d6e4 <RtcGetTimerValue>
}
    d81a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
    d81e:	f7ff bf76 	b.w	d70e <RtcTick2Ms>

0000d822 <TimerGetElapsedTime>:
{
    d822:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
    d824:	4604      	mov	r4, r0
    d826:	b150      	cbz	r0, d83e <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
    d828:	f7ff ff5c 	bl	d6e4 <RtcGetTimerValue>
    d82c:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
    d82e:	4620      	mov	r0, r4
    d830:	f7ff ff6c 	bl	d70c <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
    d834:	1a28      	subs	r0, r5, r0
}
    d836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
    d83a:	f7ff bf68 	b.w	d70e <RtcTick2Ms>
}
    d83e:	bd38      	pop	{r3, r4, r5, pc}

0000d840 <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
    d840:	f7ff bf54 	b.w	d6ec <DelayMsMcu>

0000d844 <SX1276Write>:
{
    d844:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
    d846:	2201      	movs	r2, #1
{
    d848:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
    d84c:	f10d 0107 	add.w	r1, sp, #7
    d850:	f7ff ff98 	bl	d784 <SX1276WriteBuffer>
}
    d854:	b003      	add	sp, #12
    d856:	f85d fb04 	ldr.w	pc, [sp], #4

0000d85a <SX1276Read>:
{
    d85a:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
    d85c:	2201      	movs	r2, #1
    d85e:	f10d 0107 	add.w	r1, sp, #7
    d862:	f7ff ff82 	bl	d76a <SX1276ReadBuffer>
}
    d866:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d86a:	b003      	add	sp, #12
    d86c:	f85d fb04 	ldr.w	pc, [sp], #4

0000d870 <SX1276SetOpMode>:
{
    d870:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
    d872:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
    d874:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
    d876:	b964      	cbnz	r4, d892 <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
    d878:	f7ff ff63 	bl	d742 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    d87c:	2001      	movs	r0, #1
    d87e:	f7ff ffec 	bl	d85a <SX1276Read>
    d882:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    d886:	4321      	orrs	r1, r4
    d888:	2001      	movs	r0, #1
}
    d88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    d88e:	f7ff bfd9 	b.w	d844 <SX1276Write>
        SX1276SetBoardTcxo( true );
    d892:	f7ff ff57 	bl	d744 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
    d896:	2000      	movs	r0, #0
    d898:	f7ff ff53 	bl	d742 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
    d89c:	4620      	mov	r0, r4
    d89e:	f7ff ff52 	bl	d746 <SX1276SetAntSw>
    d8a2:	e7eb      	b.n	d87c <SX1276SetOpMode+0xc>

0000d8a4 <SX1276IsChannelFree>:
{
    d8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8a6:	4616      	mov	r6, r2
    d8a8:	461d      	mov	r5, r3
    d8aa:	460c      	mov	r4, r1
    d8ac:	4607      	mov	r7, r0
    SX1276SetSleep( );
    d8ae:	f7f9 fa3d 	bl	6d2c <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
    d8b2:	2000      	movs	r0, #0
    d8b4:	f7f9 fc70 	bl	7198 <SX1276SetModem>
    SX1276SetChannel( freq );
    d8b8:	4638      	mov	r0, r7
    d8ba:	f7f8 ff7b 	bl	67b4 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
    d8be:	4620      	mov	r0, r4
    d8c0:	f7f8 fee0 	bl	6684 <GetFskBandwidthRegValue>
    d8c4:	4604      	mov	r4, r0
    d8c6:	4601      	mov	r1, r0
    d8c8:	2012      	movs	r0, #18
    d8ca:	f7ff ffbb 	bl	d844 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
    d8ce:	4621      	mov	r1, r4
    d8d0:	2013      	movs	r0, #19
    d8d2:	f7ff ffb7 	bl	d844 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
    d8d6:	2005      	movs	r0, #5
    d8d8:	f7ff ffca 	bl	d870 <SX1276SetOpMode>
    DelayMs( 1 );
    d8dc:	2001      	movs	r0, #1
    d8de:	f7ff ffaf 	bl	d840 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
    d8e2:	f7ff ff97 	bl	d814 <TimerGetCurrentTime>
    d8e6:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
    d8e8:	4620      	mov	r0, r4
    d8ea:	f7ff ff9a 	bl	d822 <TimerGetElapsedTime>
    d8ee:	42a8      	cmp	r0, r5
    d8f0:	d304      	bcc.n	d8fc <SX1276IsChannelFree+0x58>
    bool status = true;
    d8f2:	2401      	movs	r4, #1
    SX1276SetSleep( );
    d8f4:	f7f9 fa1a 	bl	6d2c <SX1276SetSleep>
}
    d8f8:	4620      	mov	r0, r4
    d8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
    d8fc:	2000      	movs	r0, #0
    d8fe:	f7f9 fc27 	bl	7150 <SX1276ReadRssi>
        if( rssi > rssiThresh )
    d902:	42b0      	cmp	r0, r6
    d904:	ddf0      	ble.n	d8e8 <SX1276IsChannelFree+0x44>
            status = false;
    d906:	2400      	movs	r4, #0
    d908:	e7f4      	b.n	d8f4 <SX1276IsChannelFree+0x50>

0000d90a <SX1276Random>:
{
    d90a:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
    d90c:	2001      	movs	r0, #1
    d90e:	f7f9 fc43 	bl	7198 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    d912:	21ff      	movs	r1, #255	; 0xff
    d914:	2011      	movs	r0, #17
    d916:	f7ff ff95 	bl	d844 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
    d91a:	2005      	movs	r0, #5
    d91c:	f7ff ffa8 	bl	d870 <SX1276SetOpMode>
    d920:	2400      	movs	r4, #0
    uint32_t rnd = 0;
    d922:	4625      	mov	r5, r4
        DelayMs( 1 );
    d924:	2001      	movs	r0, #1
    d926:	f7ff ff8b 	bl	d840 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
    d92a:	202c      	movs	r0, #44	; 0x2c
    d92c:	f7ff ff95 	bl	d85a <SX1276Read>
    d930:	f000 0001 	and.w	r0, r0, #1
    d934:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
    d936:	3401      	adds	r4, #1
    d938:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
    d93a:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
    d93e:	d1f1      	bne.n	d924 <SX1276Random+0x1a>
    SX1276SetSleep( );
    d940:	f7f9 f9f4 	bl	6d2c <SX1276SetSleep>
}
    d944:	4628      	mov	r0, r5
    d946:	bd38      	pop	{r3, r4, r5, pc}

0000d948 <SX1276GetWakeupTime>:
{
    d948:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
    d94a:	f7ff fef8 	bl	d73e <SX1276GetBoardTcxoWakeupTime>
}
    d94e:	3001      	adds	r0, #1
    d950:	bd08      	pop	{r3, pc}

0000d952 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    d952:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    d954:	6843      	ldr	r3, [r0, #4]
    d956:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    d958:	7a05      	ldrb	r5, [r0, #8]
    d95a:	6844      	ldr	r4, [r0, #4]
    d95c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    d960:	42a3      	cmp	r3, r4
    d962:	d302      	bcc.n	d96a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    d964:	f06f 0001 	mvn.w	r0, #1
}
    d968:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    d96a:	795c      	ldrb	r4, [r3, #5]
    d96c:	428c      	cmp	r4, r1
    d96e:	d001      	beq.n	d974 <pinctrl_lookup_state+0x22>
		(*state)++;
    d970:	3308      	adds	r3, #8
    d972:	e7f0      	b.n	d956 <pinctrl_lookup_state+0x4>
			return 0;
    d974:	2000      	movs	r0, #0
    d976:	e7f7      	b.n	d968 <pinctrl_lookup_state+0x16>

0000d978 <uart_nrfx_config_get>:
	struct uart_nrfx_data *data = dev->data;
    d978:	6902      	ldr	r2, [r0, #16]
{
    d97a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    d97c:	e892 0003 	ldmia.w	r2, {r0, r1}
    d980:	e883 0003 	stmia.w	r3, {r0, r1}
}
    d984:	2000      	movs	r0, #0
    d986:	4770      	bx	lr

0000d988 <uart_nrfx_irq_update>:
}
    d988:	2001      	movs	r0, #1
    d98a:	4770      	bx	lr

0000d98c <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
    d98c:	2200      	movs	r2, #0
    d98e:	2101      	movs	r1, #1
    d990:	2004      	movs	r0, #4
    d992:	f7f6 b97f 	b.w	3c94 <z_arm_irq_priority_set>

0000d996 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    d996:	b510      	push	{r4, lr}
	while (*count) {
    d998:	680b      	ldr	r3, [r1, #0]
    d99a:	b913      	cbnz	r3, d9a2 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    d99c:	6013      	str	r3, [r2, #0]
	return NULL;
    d99e:	4618      	mov	r0, r3
    d9a0:	e005      	b.n	d9ae <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    d9a2:	6803      	ldr	r3, [r0, #0]
    d9a4:	685c      	ldr	r4, [r3, #4]
    d9a6:	b11c      	cbz	r4, d9b0 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    d9a8:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    d9aa:	6803      	ldr	r3, [r0, #0]
    d9ac:	6818      	ldr	r0, [r3, #0]
}
    d9ae:	bd10      	pop	{r4, pc}
		++(*current);
    d9b0:	3308      	adds	r3, #8
    d9b2:	6003      	str	r3, [r0, #0]
		--(*count);
    d9b4:	680b      	ldr	r3, [r1, #0]
    d9b6:	3b01      	subs	r3, #1
    d9b8:	600b      	str	r3, [r1, #0]
    d9ba:	e7ed      	b.n	d998 <spi_context_get_next_buf.constprop.0+0x2>

0000d9bc <z_log_msg_static_create.constprop.0>:
    d9bc:	2300      	movs	r3, #0
    d9be:	f7f4 b901 	b.w	1bc4 <z_impl_z_log_msg_static_create>

0000d9c2 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    d9c2:	4603      	mov	r3, r0
    d9c4:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    d9c6:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    d9c8:	7919      	ldrb	r1, [r3, #4]
    d9ca:	2301      	movs	r3, #1
    d9cc:	fa03 f101 	lsl.w	r1, r3, r1
    d9d0:	6903      	ldr	r3, [r0, #16]
    d9d2:	681b      	ldr	r3, [r3, #0]
    d9d4:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    d9d6:	bf18      	it	ne
    d9d8:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    d9dc:	b112      	cbz	r2, d9e4 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    d9de:	6883      	ldr	r3, [r0, #8]
    d9e0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    d9e2:	4718      	bx	r3
    d9e4:	6883      	ldr	r3, [r0, #8]
    d9e6:	691b      	ldr	r3, [r3, #16]
    d9e8:	e7fb      	b.n	d9e2 <gpio_pin_set_dt.isra.0+0x20>

0000d9ea <_spi_context_cs_control>:
{
    d9ea:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    d9ec:	6803      	ldr	r3, [r0, #0]
{
    d9ee:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    d9f0:	b1e3      	cbz	r3, da2c <_spi_context_cs_control+0x42>
    d9f2:	6898      	ldr	r0, [r3, #8]
    d9f4:	b1d0      	cbz	r0, da2c <_spi_context_cs_control+0x42>
    d9f6:	6805      	ldr	r5, [r0, #0]
    d9f8:	b1c5      	cbz	r5, da2c <_spi_context_cs_control+0x42>
		if (on) {
    d9fa:	b149      	cbz	r1, da10 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    d9fc:	2101      	movs	r1, #1
    d9fe:	f7ff ffe0 	bl	d9c2 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    da02:	6823      	ldr	r3, [r4, #0]
    da04:	689b      	ldr	r3, [r3, #8]
    da06:	6898      	ldr	r0, [r3, #8]
}
    da08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    da0c:	f000 bcde 	b.w	e3cc <z_impl_k_busy_wait>
			if (!force_off &&
    da10:	b912      	cbnz	r2, da18 <_spi_context_cs_control+0x2e>
    da12:	889b      	ldrh	r3, [r3, #4]
    da14:	04db      	lsls	r3, r3, #19
    da16:	d409      	bmi.n	da2c <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    da18:	6880      	ldr	r0, [r0, #8]
    da1a:	f000 fcd7 	bl	e3cc <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    da1e:	6823      	ldr	r3, [r4, #0]
    da20:	2100      	movs	r1, #0
    da22:	6898      	ldr	r0, [r3, #8]
}
    da24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    da28:	f7ff bfcb 	b.w	d9c2 <gpio_pin_set_dt.isra.0>
}
    da2c:	bd38      	pop	{r3, r4, r5, pc}

0000da2e <spi_context_unlock_unconditionally>:
{
    da2e:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    da30:	2201      	movs	r2, #1
    da32:	2100      	movs	r1, #0
{
    da34:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    da36:	f7ff ffd8 	bl	d9ea <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    da3a:	69a3      	ldr	r3, [r4, #24]
    da3c:	b933      	cbnz	r3, da4c <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    da3e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    da40:	f104 0010 	add.w	r0, r4, #16
}
    da44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da48:	f7fd b9aa 	b.w	ada0 <z_impl_k_sem_give>
    da4c:	bd10      	pop	{r4, pc}

0000da4e <spi_nrfx_release>:
{
    da4e:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    da50:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    da52:	6803      	ldr	r3, [r0, #0]
    da54:	428b      	cmp	r3, r1
    da56:	d106      	bne.n	da66 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    da58:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
    da5c:	b934      	cbnz	r4, da6c <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    da5e:	f7ff ffe6 	bl	da2e <spi_context_unlock_unconditionally>
	return 0;
    da62:	4620      	mov	r0, r4
}
    da64:	bd10      	pop	{r4, pc}
		return -EINVAL;
    da66:	f06f 0015 	mvn.w	r0, #21
    da6a:	e7fb      	b.n	da64 <spi_nrfx_release+0x16>
		return -EBUSY;
    da6c:	f06f 000f 	mvn.w	r0, #15
    da70:	e7f8      	b.n	da64 <spi_nrfx_release+0x16>

0000da72 <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
    da72:	b538      	push	{r3, r4, r5, lr}
	_spi_context_cs_control(ctx, on, false);
    da74:	2200      	movs	r2, #0
    da76:	4604      	mov	r4, r0
    da78:	460d      	mov	r5, r1
    da7a:	4611      	mov	r1, r2
    da7c:	f7ff ffb5 	bl	d9ea <_spi_context_cs_control>
	ctx->sync_status = status;
    da80:	6425      	str	r5, [r4, #64]	; 0x40
    da82:	f104 0028 	add.w	r0, r4, #40	; 0x28
    da86:	f7fd f98b 	bl	ada0 <z_impl_k_sem_give>
	dev_data->busy = false;
    da8a:	2300      	movs	r3, #0
    da8c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
    da90:	bd38      	pop	{r3, r4, r5, pc}

0000da92 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    da92:	4770      	bx	lr

0000da94 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    da94:	f100 0350 	add.w	r3, r0, #80	; 0x50
    da98:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    da9a:	b29b      	uxth	r3, r3
    da9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    daa0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    daa4:	2200      	movs	r2, #0
    daa6:	601a      	str	r2, [r3, #0]
    daa8:	681b      	ldr	r3, [r3, #0]
}
    daaa:	4770      	bx	lr

0000daac <sys_clock_cycle_get_32>:
{
    daac:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    daae:	f7fa fd51 	bl	8554 <z_nrf_rtc_timer_read>
}
    dab2:	bd08      	pop	{r3, pc}

0000dab4 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    dab4:	f7fe b982 	b.w	bdbc <nrf_cc3xx_platform_init_no_rng>

0000dab8 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    dab8:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    daba:	f7f5 ff49 	bl	3950 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    dabe:	f7f6 f81d 	bl	3afc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    dac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    dac6:	f7fe b979 	b.w	bdbc <nrf_cc3xx_platform_init_no_rng>

0000daca <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    daca:	4700      	bx	r0

0000dacc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    dacc:	f000 bc7e 	b.w	e3cc <z_impl_k_busy_wait>

0000dad0 <nrfx_clock_start>:
{
    dad0:	b508      	push	{r3, lr}
    switch (domain)
    dad2:	b110      	cbz	r0, dada <nrfx_clock_start+0xa>
    dad4:	2801      	cmp	r0, #1
    dad6:	d02c      	beq.n	db32 <nrfx_clock_start+0x62>
}
    dad8:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    dada:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    dade:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    dae2:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    dae6:	03c8      	lsls	r0, r1, #15
    dae8:	d40b      	bmi.n	db02 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    daea:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    daee:	07d9      	lsls	r1, r3, #31
    daf0:	d50f      	bpl.n	db12 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    daf2:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    daf6:	079b      	lsls	r3, r3, #30
    daf8:	d408      	bmi.n	db0c <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    dafa:	2302      	movs	r3, #2
    dafc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    db00:	e7ea      	b.n	dad8 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    db02:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    db06:	2b01      	cmp	r3, #1
    db08:	d004      	beq.n	db14 <nrfx_clock_start+0x44>
    db0a:	b113      	cbz	r3, db12 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    db0c:	2000      	movs	r0, #0
    db0e:	f7fb f823 	bl	8b58 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    db12:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    db14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    db18:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db1c:	2300      	movs	r3, #0
    db1e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    db22:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    db26:	2302      	movs	r3, #2
    db28:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db2c:	2301      	movs	r3, #1
    db2e:	6093      	str	r3, [r2, #8]
}
    db30:	e7d2      	b.n	dad8 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    db36:	2200      	movs	r2, #0
    db38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    db3c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    db40:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db44:	6018      	str	r0, [r3, #0]
}
    db46:	e7c7      	b.n	dad8 <nrfx_clock_start+0x8>

0000db48 <nrfx_clock_stop>:
    clock_stop(domain);
    db48:	f7fb b806 	b.w	8b58 <clock_stop>

0000db4c <nrf_gpio_reconfigure>:
{
    db4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    db4e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    db50:	a801      	add	r0, sp, #4
{
    db52:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    db56:	4616      	mov	r6, r2
    db58:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    db5a:	f7fb f8b7 	bl	8ccc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    db5e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    db60:	f1b6 0c00 	subs.w	ip, r6, #0
    db64:	bf18      	it	ne
    db66:	f04f 0c01 	movne.w	ip, #1
    db6a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    db6e:	1e0b      	subs	r3, r1, #0
    db70:	bf18      	it	ne
    db72:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    db74:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    db76:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    db7a:	bf14      	ite	ne
    db7c:	f04f 0c0c 	movne.w	ip, #12
    db80:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    db84:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    db86:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    db8a:	bf14      	ite	ne
    db8c:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    db90:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    db94:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    db96:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    db9a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    db9e:	bf14      	ite	ne
    dba0:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    dba4:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    dba8:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    dbac:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    dbb0:	b101      	cbz	r1, dbb4 <nrf_gpio_reconfigure+0x68>
    dbb2:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    dbb4:	b10e      	cbz	r6, dbba <nrf_gpio_reconfigure+0x6e>
    dbb6:	7836      	ldrb	r6, [r6, #0]
    dbb8:	0076      	lsls	r6, r6, #1
    dbba:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    dbbc:	b10d      	cbz	r5, dbc2 <nrf_gpio_reconfigure+0x76>
    dbbe:	782d      	ldrb	r5, [r5, #0]
    dbc0:	00ad      	lsls	r5, r5, #2
    dbc2:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    dbc4:	b10c      	cbz	r4, dbca <nrf_gpio_reconfigure+0x7e>
    dbc6:	7824      	ldrb	r4, [r4, #0]
    dbc8:	0224      	lsls	r4, r4, #8
    dbca:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    dbcc:	b10f      	cbz	r7, dbd2 <nrf_gpio_reconfigure+0x86>
    dbce:	783f      	ldrb	r7, [r7, #0]
    dbd0:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    dbd2:	430c      	orrs	r4, r1
    dbd4:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    dbd6:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    dbda:	b003      	add	sp, #12
    dbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dbde <nrf_gpio_cfg_sense_set>:
{
    dbde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    dbe0:	f10d 030f 	add.w	r3, sp, #15
    dbe4:	9301      	str	r3, [sp, #4]
    dbe6:	2300      	movs	r3, #0
{
    dbe8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    dbec:	9300      	str	r3, [sp, #0]
    dbee:	461a      	mov	r2, r3
    dbf0:	4619      	mov	r1, r3
    dbf2:	f7ff ffab 	bl	db4c <nrf_gpio_reconfigure>
}
    dbf6:	b005      	add	sp, #20
    dbf8:	f85d fb04 	ldr.w	pc, [sp], #4

0000dbfc <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dbfc:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    dc00:	681a      	ldr	r2, [r3, #0]
    dc02:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc04:	bf1f      	itttt	ne
    dc06:	2200      	movne	r2, #0
    dc08:	601a      	strne	r2, [r3, #0]
    dc0a:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dc0c:	2001      	movne	r0, #1
    dc0e:	bf08      	it	eq
    dc10:	2000      	moveq	r0, #0
}
    dc12:	4770      	bx	lr

0000dc14 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    dc14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dc18:	f44f 7260 	mov.w	r2, #896	; 0x380
    dc1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    dc20:	4770      	bx	lr

0000dc22 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    dc22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dc26:	f44f 7260 	mov.w	r2, #896	; 0x380
    dc2a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    dc2e:	4770      	bx	lr

0000dc30 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    dc30:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    dc32:	f7fb fc03 	bl	943c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    dc36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    dc3a:	f7fb b813 	b.w	8c64 <nrfx_clock_irq_handler>

0000dc3e <nrf_gpio_cfg_default>:
{
    dc3e:	b507      	push	{r0, r1, r2, lr}
    dc40:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dc42:	a801      	add	r0, sp, #4
    dc44:	f7fb fc4a 	bl	94dc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    dc48:	9b01      	ldr	r3, [sp, #4]
    dc4a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    dc4e:	2202      	movs	r2, #2
    dc50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    dc54:	b003      	add	sp, #12
    dc56:	f85d fb04 	ldr.w	pc, [sp], #4

0000dc5a <nrf_gpio_pin_set>:
{
    dc5a:	b507      	push	{r0, r1, r2, lr}
    dc5c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dc5e:	a801      	add	r0, sp, #4
    dc60:	f7fb fc3c 	bl	94dc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    dc64:	9a01      	ldr	r2, [sp, #4]
    dc66:	2301      	movs	r3, #1
    dc68:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    dc6a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    dc6e:	b003      	add	sp, #12
    dc70:	f85d fb04 	ldr.w	pc, [sp], #4

0000dc74 <nrf_gpio_pin_clear>:
{
    dc74:	b507      	push	{r0, r1, r2, lr}
    dc76:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dc78:	a801      	add	r0, sp, #4
    dc7a:	f7fb fc2f 	bl	94dc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    dc7e:	9a01      	ldr	r2, [sp, #4]
    dc80:	2301      	movs	r3, #1
    dc82:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    dc84:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    dc88:	b003      	add	sp, #12
    dc8a:	f85d fb04 	ldr.w	pc, [sp], #4

0000dc8e <transfer_byte>:
{
    dc8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    dc90:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    dc94:	698a      	ldr	r2, [r1, #24]
    dc96:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    dc98:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    dc9c:	6a0b      	ldr	r3, [r1, #32]
    dc9e:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    dca0:	bf3e      	ittt	cc
    dca2:	694a      	ldrcc	r2, [r1, #20]
    dca4:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    dca8:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    dcaa:	6a0b      	ldr	r3, [r1, #32]
    if (p_cb->abort)
    dcac:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    dcb0:	690c      	ldr	r4, [r1, #16]
    ++p_cb->bytes_transferred;
    dcb2:	1c5a      	adds	r2, r3, #1
    dcb4:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    dcb6:	3302      	adds	r3, #2
    if (p_cb->abort)
    dcb8:	b135      	cbz	r5, dcc8 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    dcba:	42a3      	cmp	r3, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    dcbc:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    dcbe:	bf38      	it	cc
    dcc0:	610b      	strcc	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    dcc2:	429c      	cmp	r4, r3
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    dcc4:	bf88      	it	hi
    dcc6:	618b      	strhi	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    dcc8:	690d      	ldr	r5, [r1, #16]
    dcca:	429d      	cmp	r5, r3
    dccc:	d905      	bls.n	dcda <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    dcce:	68ca      	ldr	r2, [r1, #12]
    p_reg->TXD = data;
    dcd0:	5cd3      	ldrb	r3, [r2, r3]
    dcd2:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    dcd6:	2001      	movs	r0, #1
    dcd8:	e00a      	b.n	dcf0 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    dcda:	698c      	ldr	r4, [r1, #24]
    dcdc:	429c      	cmp	r4, r3
    dcde:	d901      	bls.n	dce4 <transfer_byte+0x56>
    dce0:	7fcb      	ldrb	r3, [r1, #31]
    dce2:	e7f6      	b.n	dcd2 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    dce4:	42aa      	cmp	r2, r5
    dce6:	d3f6      	bcc.n	dcd6 <transfer_byte+0x48>
    dce8:	42a2      	cmp	r2, r4
    dcea:	bf2c      	ite	cs
    dcec:	2000      	movcs	r0, #0
    dcee:	2001      	movcc	r0, #1
}
    dcf0:	b003      	add	sp, #12
    dcf2:	bd30      	pop	{r4, r5, pc}

0000dcf4 <nrfx_usbd_consumer>:
{
    dcf4:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    dcf6:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    dcf8:	429c      	cmp	r4, r3
    dcfa:	d209      	bcs.n	dd10 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    dcfc:	2500      	movs	r5, #0
    dcfe:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    dd00:	6809      	ldr	r1, [r1, #0]
    dd02:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    dd04:	429a      	cmp	r2, r3
    dd06:	d10c      	bne.n	dd22 <nrfx_usbd_consumer+0x2e>
    dd08:	1e20      	subs	r0, r4, #0
    dd0a:	bf18      	it	ne
    dd0c:	2001      	movne	r0, #1
}
    dd0e:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    dd10:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    dd12:	680d      	ldr	r5, [r1, #0]
    dd14:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    dd16:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    dd18:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    dd1a:	4418      	add	r0, r3
        p_transfer->size = size;
    dd1c:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    dd1e:	6008      	str	r0, [r1, #0]
    dd20:	e7f0      	b.n	dd04 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    dd22:	2000      	movs	r0, #0
    dd24:	e7f3      	b.n	dd0e <nrfx_usbd_consumer+0x1a>

0000dd26 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    dd26:	684b      	ldr	r3, [r1, #4]
    dd28:	429a      	cmp	r2, r3
    dd2a:	bf28      	it	cs
    dd2c:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    dd2e:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    dd30:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    dd34:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    dd36:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    dd38:	1a80      	subs	r0, r0, r2
    dd3a:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    dd3c:	4413      	add	r3, r2
}
    dd3e:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    dd40:	600b      	str	r3, [r1, #0]
}
    dd42:	bf18      	it	ne
    dd44:	2001      	movne	r0, #1
    dd46:	4770      	bx	lr

0000dd48 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    dd48:	684b      	ldr	r3, [r1, #4]
    dd4a:	429a      	cmp	r2, r3
    dd4c:	bf28      	it	cs
    dd4e:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    dd50:	b162      	cbz	r2, dd6c <nrfx_usbd_feeder_ram_zlp+0x24>
    dd52:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    dd54:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    dd58:	684b      	ldr	r3, [r1, #4]
    dd5a:	1a9b      	subs	r3, r3, r2
    dd5c:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    dd5e:	680b      	ldr	r3, [r1, #0]
}
    dd60:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    dd62:	4413      	add	r3, r2
    dd64:	600b      	str	r3, [r1, #0]
}
    dd66:	bf18      	it	ne
    dd68:	2001      	movne	r0, #1
    dd6a:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    dd6c:	4613      	mov	r3, r2
    dd6e:	e7f1      	b.n	dd54 <nrfx_usbd_feeder_ram_zlp+0xc>

0000dd70 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    dd70:	43c3      	mvns	r3, r0
    dd72:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    dd76:	f000 000f 	and.w	r0, r0, #15
}
    dd7a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    dd7e:	4770      	bx	lr

0000dd80 <ev_started_handler>:
}
    dd80:	4770      	bx	lr

0000dd82 <nrf_usbd_epin_dma_handler>:
{
    dd82:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    dd84:	f7fb fe5a 	bl	9a3c <usbd_dma_pending_clear>
{
    dd88:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    dd8a:	f7fb fd4d 	bl	9828 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    dd8e:	7b83      	ldrb	r3, [r0, #14]
    dd90:	2b03      	cmp	r3, #3
    dd92:	d10a      	bne.n	ddaa <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    dd94:	4608      	mov	r0, r1
    dd96:	f7ff ffeb 	bl	dd70 <ep2bit>
    dd9a:	2301      	movs	r3, #1
    dd9c:	fa03 f000 	lsl.w	r0, r3, r0
    dda0:	43c0      	mvns	r0, r0
}
    dda2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    dda6:	f7fb be39 	b.w	9a1c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    ddaa:	6803      	ldr	r3, [r0, #0]
    ddac:	2b00      	cmp	r3, #0
    ddae:	d0f1      	beq.n	dd94 <nrf_usbd_epin_dma_handler+0x12>
}
    ddb0:	bd08      	pop	{r3, pc}

0000ddb2 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    ddb2:	2087      	movs	r0, #135	; 0x87
    ddb4:	f7ff bfe5 	b.w	dd82 <nrf_usbd_epin_dma_handler>

0000ddb8 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    ddb8:	2086      	movs	r0, #134	; 0x86
    ddba:	f7ff bfe2 	b.w	dd82 <nrf_usbd_epin_dma_handler>

0000ddbe <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    ddbe:	2085      	movs	r0, #133	; 0x85
    ddc0:	f7ff bfdf 	b.w	dd82 <nrf_usbd_epin_dma_handler>

0000ddc4 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    ddc4:	2084      	movs	r0, #132	; 0x84
    ddc6:	f7ff bfdc 	b.w	dd82 <nrf_usbd_epin_dma_handler>

0000ddca <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    ddca:	2083      	movs	r0, #131	; 0x83
    ddcc:	f7ff bfd9 	b.w	dd82 <nrf_usbd_epin_dma_handler>

0000ddd0 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    ddd0:	2082      	movs	r0, #130	; 0x82
    ddd2:	f7ff bfd6 	b.w	dd82 <nrf_usbd_epin_dma_handler>

0000ddd6 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    ddd6:	2081      	movs	r0, #129	; 0x81
    ddd8:	f7ff bfd3 	b.w	dd82 <nrf_usbd_epin_dma_handler>

0000dddc <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    dddc:	f7fb be40 	b.w	9a60 <nrf_usbd_ep0in_dma_handler>

0000dde0 <nrfx_usbd_ep_max_packet_size_set>:
{
    dde0:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    dde2:	f7fb fd21 	bl	9828 <ep_state_access>
    p_state->max_packet_size = size;
    dde6:	8181      	strh	r1, [r0, #12]
}
    dde8:	bd08      	pop	{r3, pc}

0000ddea <nrfx_usbd_ep_status_get>:
{
    ddea:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    ddec:	f7fb fd1c 	bl	9828 <ep_state_access>
	__asm__ volatile(
    ddf0:	f04f 0220 	mov.w	r2, #32
    ddf4:	f3ef 8311 	mrs	r3, BASEPRI
    ddf8:	f382 8812 	msr	BASEPRI_MAX, r2
    ddfc:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    de00:	6882      	ldr	r2, [r0, #8]
    de02:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    de04:	6802      	ldr	r2, [r0, #0]
    de06:	b92a      	cbnz	r2, de14 <nrfx_usbd_ep_status_get+0x2a>
    de08:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    de0a:	f383 8811 	msr	BASEPRI, r3
    de0e:	f3bf 8f6f 	isb	sy
}
    de12:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    de14:	2004      	movs	r0, #4
    de16:	e7f8      	b.n	de0a <nrfx_usbd_ep_status_get+0x20>

0000de18 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    de18:	2007      	movs	r0, #7
    de1a:	f7fc b98d 	b.w	a138 <nrf_usbd_epout_dma_handler>

0000de1e <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    de1e:	2006      	movs	r0, #6
    de20:	f7fc b98a 	b.w	a138 <nrf_usbd_epout_dma_handler>

0000de24 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    de24:	2005      	movs	r0, #5
    de26:	f7fc b987 	b.w	a138 <nrf_usbd_epout_dma_handler>

0000de2a <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    de2a:	2004      	movs	r0, #4
    de2c:	f7fc b984 	b.w	a138 <nrf_usbd_epout_dma_handler>

0000de30 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    de30:	2003      	movs	r0, #3
    de32:	f7fc b981 	b.w	a138 <nrf_usbd_epout_dma_handler>

0000de36 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    de36:	2002      	movs	r0, #2
    de38:	f7fc b97e 	b.w	a138 <nrf_usbd_epout_dma_handler>

0000de3c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    de3c:	2001      	movs	r0, #1
    de3e:	f7fc b97b 	b.w	a138 <nrf_usbd_epout_dma_handler>

0000de42 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    de42:	f7fc ba6f 	b.w	a324 <usbd_ep_abort>

0000de46 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    de46:	4770      	bx	lr

0000de48 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    de48:	b140      	cbz	r0, de5c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    de4a:	68c3      	ldr	r3, [r0, #12]
    de4c:	7858      	ldrb	r0, [r3, #1]
    de4e:	f010 0001 	ands.w	r0, r0, #1
    de52:	bf1e      	ittt	ne
    de54:	7818      	ldrbne	r0, [r3, #0]
    de56:	fab0 f080 	clzne	r0, r0
    de5a:	0940      	lsrne	r0, r0, #5
}
    de5c:	4770      	bx	lr

0000de5e <z_early_memset>:
	(void) memset(dst, c, n);
    de5e:	f7ff bada 	b.w	d416 <memset>

0000de62 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    de62:	f7ff bacd 	b.w	d400 <memcpy>

0000de66 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    de66:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    de6a:	4313      	orrs	r3, r2
    de6c:	f013 0303 	ands.w	r3, r3, #3
    de70:	d10c      	bne.n	de8c <create_free_list+0x26>
	slab->free_list = NULL;
    de72:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    de74:	6881      	ldr	r1, [r0, #8]
    de76:	4299      	cmp	r1, r3
    de78:	d801      	bhi.n	de7e <create_free_list+0x18>
	return 0;
    de7a:	2000      	movs	r0, #0
    de7c:	4770      	bx	lr
		*(char **)p = slab->free_list;
    de7e:	6941      	ldr	r1, [r0, #20]
    de80:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    de82:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    de84:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    de86:	3301      	adds	r3, #1
		p += slab->block_size;
    de88:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    de8a:	e7f3      	b.n	de74 <create_free_list+0xe>
		return -EINVAL;
    de8c:	f06f 0015 	mvn.w	r0, #21
}
    de90:	4770      	bx	lr

0000de92 <k_mem_slab_init>:
{
    de92:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    de94:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    de98:	2300      	movs	r3, #0
	slab->buffer = buffer;
    de9a:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    de9c:	6183      	str	r3, [r0, #24]
{
    de9e:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    dea0:	f7ff ffe1 	bl	de66 <create_free_list>
	if (rc < 0) {
    dea4:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    dea6:	bfa8      	it	ge
    dea8:	e9c4 4400 	strdge	r4, r4, [r4]
}
    deac:	bd10      	pop	{r4, pc}

0000deae <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    deae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    deb0:	4604      	mov	r4, r0
    deb2:	460d      	mov	r5, r1
	__asm__ volatile(
    deb4:	f04f 0320 	mov.w	r3, #32
    deb8:	f3ef 8611 	mrs	r6, BASEPRI
    debc:	f383 8812 	msr	BASEPRI_MAX, r3
    dec0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    dec4:	6947      	ldr	r7, [r0, #20]
    dec6:	b977      	cbnz	r7, dee6 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    dec8:	f000 f9d7 	bl	e27a <z_unpend_first_thread>

		if (pending_thread != NULL) {
    decc:	b158      	cbz	r0, dee6 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    dece:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    ded0:	6142      	str	r2, [r0, #20]
    ded2:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    ded4:	f000 f972 	bl	e1bc <z_ready_thread>
			z_reschedule(&slab->lock, key);
    ded8:	4631      	mov	r1, r6
    deda:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    dede:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    dee2:	f7fd bad1 	b.w	b488 <z_reschedule>
	**(char ***) mem = slab->free_list;
    dee6:	682b      	ldr	r3, [r5, #0]
    dee8:	6962      	ldr	r2, [r4, #20]
    deea:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    deec:	682b      	ldr	r3, [r5, #0]
    deee:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    def0:	69a3      	ldr	r3, [r4, #24]
    def2:	3b01      	subs	r3, #1
    def4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    def6:	f386 8811 	msr	BASEPRI, r6
    defa:	f3bf 8f6f 	isb	sy
}
    defe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000df00 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    df00:	f3ef 8005 	mrs	r0, IPSR
}
    df04:	3800      	subs	r0, #0
    df06:	bf18      	it	ne
    df08:	2001      	movne	r0, #1
    df0a:	4770      	bx	lr

0000df0c <z_impl_k_thread_name_set>:
}
    df0c:	f06f 0057 	mvn.w	r0, #87	; 0x57
    df10:	4770      	bx	lr

0000df12 <k_thread_name_get>:
}
    df12:	2000      	movs	r0, #0
    df14:	4770      	bx	lr

0000df16 <z_impl_k_thread_start>:
	z_sched_start(thread);
    df16:	f7fd bac9 	b.w	b4ac <z_sched_start>

0000df1a <z_pm_save_idle_exit>:
{
    df1a:	b508      	push	{r3, lr}
	pm_system_resume();
    df1c:	f7f4 f96e 	bl	21fc <pm_system_resume>
}
    df20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    df24:	f7ff bdb5 	b.w	da92 <sys_clock_idle_exit>

0000df28 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    df28:	f990 300e 	ldrsb.w	r3, [r0, #14]
    df2c:	428b      	cmp	r3, r1
    df2e:	d001      	beq.n	df34 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    df30:	f7fd ba64 	b.w	b3fc <z_set_prio>
}
    df34:	2000      	movs	r0, #0
    df36:	4770      	bx	lr

0000df38 <z_impl_k_mutex_init>:
{
    df38:	4603      	mov	r3, r0
	mutex->owner = NULL;
    df3a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    df3c:	e9c3 0002 	strd	r0, r0, [r3, #8]
    df40:	e9c3 3300 	strd	r3, r3, [r3]
}
    df44:	4770      	bx	lr

0000df46 <queue_insert>:
{
    df46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    df4a:	4699      	mov	r9, r3
    df4c:	4604      	mov	r4, r0
    df4e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    df52:	460d      	mov	r5, r1
    df54:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    df56:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    df5a:	f04f 0220 	mov.w	r2, #32
    df5e:	f3ef 8711 	mrs	r7, BASEPRI
    df62:	f382 8812 	msr	BASEPRI_MAX, r2
    df66:	f3bf 8f6f 	isb	sy
	if (is_append) {
    df6a:	b103      	cbz	r3, df6e <queue_insert+0x28>
	return list->tail;
    df6c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    df6e:	4630      	mov	r0, r6
    df70:	f000 f983 	bl	e27a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    df74:	b158      	cbz	r0, df8e <queue_insert+0x48>
    df76:	2300      	movs	r3, #0
    df78:	67c3      	str	r3, [r0, #124]	; 0x7c
    df7a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    df7e:	f000 f91d 	bl	e1bc <z_ready_thread>
	z_reschedule(&queue->lock, key);
    df82:	4630      	mov	r0, r6
    df84:	4639      	mov	r1, r7
    df86:	f7fd fa7f 	bl	b488 <z_reschedule>
		return 0;
    df8a:	2000      	movs	r0, #0
    df8c:	e00c      	b.n	dfa8 <queue_insert+0x62>
	if (alloc) {
    df8e:	f1b9 0f00 	cmp.w	r9, #0
    df92:	d01b      	beq.n	dfcc <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
    df94:	2108      	movs	r1, #8
    df96:	f7fd febf 	bl	bd18 <z_thread_aligned_alloc>
		if (anode == NULL) {
    df9a:	b938      	cbnz	r0, dfac <queue_insert+0x66>
	__asm__ volatile(
    df9c:	f387 8811 	msr	BASEPRI, r7
    dfa0:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    dfa4:	f06f 000b 	mvn.w	r0, #11
}
    dfa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    dfac:	2201      	movs	r2, #1
		anode->data = data;
    dfae:	f8c0 8004 	str.w	r8, [r0, #4]
    dfb2:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    dfb4:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    dfb6:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    dfba:	b95d      	cbnz	r5, dfd4 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
    dfbc:	6822      	ldr	r2, [r4, #0]
    dfbe:	430a      	orrs	r2, r1
    dfc0:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    dfc2:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    dfc4:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    dfc6:	b96a      	cbnz	r2, dfe4 <queue_insert+0x9e>
	list->tail = node;
    dfc8:	6060      	str	r0, [r4, #4]
}
    dfca:	e00b      	b.n	dfe4 <queue_insert+0x9e>
	node->next_and_flags = flags;
    dfcc:	f8c8 9000 	str.w	r9, [r8]
}
    dfd0:	4640      	mov	r0, r8
    dfd2:	e7ef      	b.n	dfb4 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    dfd4:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    dfd6:	2a03      	cmp	r2, #3
    dfd8:	d810      	bhi.n	dffc <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
    dfda:	6001      	str	r1, [r0, #0]
	return list->tail;
    dfdc:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    dfde:	b939      	cbnz	r1, dff0 <queue_insert+0xaa>
	list->head = node;
    dfe0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    dfe4:	2104      	movs	r1, #4
    dfe6:	f104 0010 	add.w	r0, r4, #16
    dfea:	f000 fb6f 	bl	e6cc <z_handle_obj_poll_events>
    dfee:	e7c8      	b.n	df82 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    dff0:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    dff2:	f002 0203 	and.w	r2, r2, #3
    dff6:	4302      	orrs	r2, r0
    dff8:	600a      	str	r2, [r1, #0]
    dffa:	e7e5      	b.n	dfc8 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    dffc:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e000:	430a      	orrs	r2, r1
    e002:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e004:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e006:	f002 0203 	and.w	r2, r2, #3
    e00a:	ea40 0302 	orr.w	r3, r0, r2
    e00e:	602b      	str	r3, [r5, #0]
}
    e010:	e7e8      	b.n	dfe4 <queue_insert+0x9e>

0000e012 <z_queue_node_peek>:
{
    e012:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    e014:	4604      	mov	r4, r0
    e016:	b130      	cbz	r0, e026 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e018:	6802      	ldr	r2, [r0, #0]
    e01a:	0793      	lsls	r3, r2, #30
    e01c:	d003      	beq.n	e026 <z_queue_node_peek+0x14>
		ret = anode->data;
    e01e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    e020:	b109      	cbz	r1, e026 <z_queue_node_peek+0x14>
			k_free(anode);
    e022:	f000 fb61 	bl	e6e8 <k_free>
}
    e026:	4620      	mov	r0, r4
    e028:	bd10      	pop	{r4, pc}

0000e02a <k_queue_append>:
{
    e02a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    e02c:	2301      	movs	r3, #1
    e02e:	9300      	str	r3, [sp, #0]
    e030:	2300      	movs	r3, #0
{
    e032:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    e034:	4619      	mov	r1, r3
    e036:	f7ff ff86 	bl	df46 <queue_insert>
}
    e03a:	b003      	add	sp, #12
    e03c:	f85d fb04 	ldr.w	pc, [sp], #4

0000e040 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    e040:	b15a      	cbz	r2, e05a <z_impl_k_sem_init+0x1a>
    e042:	428a      	cmp	r2, r1
    e044:	d309      	bcc.n	e05a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    e046:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    e04a:	e9c0 1202 	strd	r1, r2, [r0, #8]
    e04e:	e9c0 0000 	strd	r0, r0, [r0]
    e052:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    e056:	2000      	movs	r0, #0
    e058:	4770      	bx	lr
		return -EINVAL;
    e05a:	f06f 0015 	mvn.w	r0, #21
}
    e05e:	4770      	bx	lr

0000e060 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    e060:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    e062:	2301      	movs	r3, #1
    e064:	408b      	lsls	r3, r1
    e066:	ea22 0303 	bic.w	r3, r2, r3
    e06a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    e06c:	fa22 f001 	lsr.w	r0, r2, r1
}
    e070:	f000 0001 	and.w	r0, r0, #1
    e074:	4770      	bx	lr

0000e076 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    e076:	b120      	cbz	r0, e082 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    e078:	2200      	movs	r2, #0
    e07a:	4611      	mov	r1, r2
    e07c:	3088      	adds	r0, #136	; 0x88
    e07e:	f000 b956 	b.w	e32e <z_sched_wake>
}
    e082:	4770      	bx	lr

0000e084 <work_timeout>:
{
    e084:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e086:	4604      	mov	r4, r0
	__asm__ volatile(
    e088:	f04f 0320 	mov.w	r3, #32
    e08c:	f3ef 8511 	mrs	r5, BASEPRI
    e090:	f383 8812 	msr	BASEPRI_MAX, r3
    e094:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    e098:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    e09a:	f1a0 0610 	sub.w	r6, r0, #16
    e09e:	2103      	movs	r1, #3
    e0a0:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    e0a2:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    e0a4:	f7ff ffdc 	bl	e060 <flag_test_and_clear>
    e0a8:	b128      	cbz	r0, e0b6 <work_timeout+0x32>
		queue = dw->queue;
    e0aa:	69a3      	ldr	r3, [r4, #24]
    e0ac:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    e0ae:	a901      	add	r1, sp, #4
    e0b0:	4630      	mov	r0, r6
    e0b2:	f7fc ff81 	bl	afb8 <submit_to_queue_locked>
	__asm__ volatile(
    e0b6:	f385 8811 	msr	BASEPRI, r5
    e0ba:	f3bf 8f6f 	isb	sy
}
    e0be:	b002      	add	sp, #8
    e0c0:	bd70      	pop	{r4, r5, r6, pc}

0000e0c2 <k_work_init>:
{
    e0c2:	b538      	push	{r3, r4, r5, lr}
    e0c4:	4604      	mov	r4, r0
    e0c6:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e0c8:	2210      	movs	r2, #16
    e0ca:	2100      	movs	r1, #0
    e0cc:	f7ff f9a3 	bl	d416 <memset>
    e0d0:	6065      	str	r5, [r4, #4]
}
    e0d2:	bd38      	pop	{r3, r4, r5, pc}

0000e0d4 <z_work_submit_to_queue>:
{
    e0d4:	b513      	push	{r0, r1, r4, lr}
    e0d6:	9001      	str	r0, [sp, #4]
    e0d8:	4608      	mov	r0, r1
	__asm__ volatile(
    e0da:	f04f 0320 	mov.w	r3, #32
    e0de:	f3ef 8411 	mrs	r4, BASEPRI
    e0e2:	f383 8812 	msr	BASEPRI_MAX, r3
    e0e6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    e0ea:	a901      	add	r1, sp, #4
    e0ec:	f7fc ff64 	bl	afb8 <submit_to_queue_locked>
	__asm__ volatile(
    e0f0:	f384 8811 	msr	BASEPRI, r4
    e0f4:	f3bf 8f6f 	isb	sy
}
    e0f8:	b002      	add	sp, #8
    e0fa:	bd10      	pop	{r4, pc}

0000e0fc <k_work_submit_to_queue>:
{
    e0fc:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    e0fe:	f7ff ffe9 	bl	e0d4 <z_work_submit_to_queue>
	if (ret > 0) {
    e102:	1e04      	subs	r4, r0, #0
    e104:	dd09      	ble.n	e11a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    e106:	f04f 0320 	mov.w	r3, #32
    e10a:	f3ef 8011 	mrs	r0, BASEPRI
    e10e:	f383 8812 	msr	BASEPRI_MAX, r3
    e112:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e116:	f000 f8e4 	bl	e2e2 <z_reschedule_irqlock>
}
    e11a:	4620      	mov	r0, r4
    e11c:	bd10      	pop	{r4, pc}

0000e11e <k_work_init_delayable>:
{
    e11e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    e120:	2230      	movs	r2, #48	; 0x30
{
    e122:	4604      	mov	r4, r0
    e124:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    e126:	2100      	movs	r1, #0
    e128:	f7ff f975 	bl	d416 <memset>
    e12c:	f44f 7380 	mov.w	r3, #256	; 0x100
    e130:	6065      	str	r5, [r4, #4]
    e132:	60e3      	str	r3, [r4, #12]
}
    e134:	bd38      	pop	{r3, r4, r5, pc}

0000e136 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    e136:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    e13a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e13c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e13e:	2300      	movs	r3, #0
	node->prev = NULL;
    e140:	e9c0 3300 	strd	r3, r3, [r0]
}
    e144:	4770      	bx	lr

0000e146 <unpend_thread_no_timeout>:
{
    e146:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    e148:	f7ff fff5 	bl	e136 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e14c:	7b43      	ldrb	r3, [r0, #13]
    e14e:	f023 0302 	bic.w	r3, r3, #2
    e152:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    e154:	2300      	movs	r3, #0
    e156:	6083      	str	r3, [r0, #8]
}
    e158:	bd08      	pop	{r3, pc}

0000e15a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    e15a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    e15e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    e162:	4283      	cmp	r3, r0
		return b2 - b1;
    e164:	bf14      	ite	ne
    e166:	1ac0      	subne	r0, r0, r3
	return 0;
    e168:	2000      	moveq	r0, #0
}
    e16a:	4770      	bx	lr

0000e16c <add_to_waitq_locked>:
{
    e16c:	b538      	push	{r3, r4, r5, lr}
    e16e:	4604      	mov	r4, r0
    e170:	460d      	mov	r5, r1
	unready_thread(thread);
    e172:	f7fd f8c5 	bl	b300 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    e176:	7b63      	ldrb	r3, [r4, #13]
    e178:	f043 0302 	orr.w	r3, r3, #2
    e17c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    e17e:	b1e5      	cbz	r5, e1ba <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    e180:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    e182:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e184:	429d      	cmp	r5, r3
    e186:	d109      	bne.n	e19c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    e188:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    e18a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    e18e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e190:	606c      	str	r4, [r5, #4]
}
    e192:	e012      	b.n	e1ba <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    e194:	686a      	ldr	r2, [r5, #4]
    e196:	4293      	cmp	r3, r2
    e198:	d0f6      	beq.n	e188 <add_to_waitq_locked+0x1c>
    e19a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e19c:	2b00      	cmp	r3, #0
    e19e:	d0f3      	beq.n	e188 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    e1a0:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    e1a4:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    e1a8:	428a      	cmp	r2, r1
    e1aa:	d0f3      	beq.n	e194 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e1ac:	4291      	cmp	r1, r2
    e1ae:	ddf1      	ble.n	e194 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    e1b0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    e1b2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    e1b6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    e1b8:	605c      	str	r4, [r3, #4]
}
    e1ba:	bd38      	pop	{r3, r4, r5, pc}

0000e1bc <z_ready_thread>:
{
    e1bc:	b510      	push	{r4, lr}
    e1be:	f04f 0320 	mov.w	r3, #32
    e1c2:	f3ef 8411 	mrs	r4, BASEPRI
    e1c6:	f383 8812 	msr	BASEPRI_MAX, r3
    e1ca:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    e1ce:	f7fd f863 	bl	b298 <ready_thread>
	__asm__ volatile(
    e1d2:	f384 8811 	msr	BASEPRI, r4
    e1d6:	f3bf 8f6f 	isb	sy
}
    e1da:	bd10      	pop	{r4, pc}

0000e1dc <z_unpend_thread_no_timeout>:
{
    e1dc:	b508      	push	{r3, lr}
	__asm__ volatile(
    e1de:	f04f 0220 	mov.w	r2, #32
    e1e2:	f3ef 8111 	mrs	r1, BASEPRI
    e1e6:	f382 8812 	msr	BASEPRI_MAX, r2
    e1ea:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    e1ee:	6883      	ldr	r3, [r0, #8]
    e1f0:	b10b      	cbz	r3, e1f6 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    e1f2:	f7ff ffa8 	bl	e146 <unpend_thread_no_timeout>
	__asm__ volatile(
    e1f6:	f381 8811 	msr	BASEPRI, r1
    e1fa:	f3bf 8f6f 	isb	sy
}
    e1fe:	bd08      	pop	{r3, pc}

0000e200 <z_sched_wake_thread>:
{
    e200:	b538      	push	{r3, r4, r5, lr}
    e202:	4604      	mov	r4, r0
	__asm__ volatile(
    e204:	f04f 0320 	mov.w	r3, #32
    e208:	f3ef 8511 	mrs	r5, BASEPRI
    e20c:	f383 8812 	msr	BASEPRI_MAX, r3
    e210:	f3bf 8f6f 	isb	sy
		if (!killed) {
    e214:	7b43      	ldrb	r3, [r0, #13]
    e216:	f013 0f28 	tst.w	r3, #40	; 0x28
    e21a:	d10b      	bne.n	e234 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    e21c:	6883      	ldr	r3, [r0, #8]
    e21e:	b10b      	cbz	r3, e224 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    e220:	f7ff ff91 	bl	e146 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e224:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    e226:	b951      	cbnz	r1, e23e <z_sched_wake_thread+0x3e>
    e228:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e22c:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    e22e:	4620      	mov	r0, r4
    e230:	f7fd f832 	bl	b298 <ready_thread>
	__asm__ volatile(
    e234:	f385 8811 	msr	BASEPRI, r5
    e238:	f3bf 8f6f 	isb	sy
}
    e23c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    e23e:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    e242:	e7f3      	b.n	e22c <z_sched_wake_thread+0x2c>

0000e244 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    e244:	2101      	movs	r1, #1
    e246:	3818      	subs	r0, #24
    e248:	f7ff bfda 	b.w	e200 <z_sched_wake_thread>

0000e24c <z_unpend1_no_timeout>:
{
    e24c:	b508      	push	{r3, lr}
    e24e:	4603      	mov	r3, r0
	__asm__ volatile(
    e250:	f04f 0220 	mov.w	r2, #32
    e254:	f3ef 8111 	mrs	r1, BASEPRI
    e258:	f382 8812 	msr	BASEPRI_MAX, r2
    e25c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e260:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e262:	4283      	cmp	r3, r0
    e264:	d007      	beq.n	e276 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    e266:	b108      	cbz	r0, e26c <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    e268:	f7ff ff6d 	bl	e146 <unpend_thread_no_timeout>
	__asm__ volatile(
    e26c:	f381 8811 	msr	BASEPRI, r1
    e270:	f3bf 8f6f 	isb	sy
}
    e274:	bd08      	pop	{r3, pc}
    e276:	2000      	movs	r0, #0
    e278:	e7f8      	b.n	e26c <z_unpend1_no_timeout+0x20>

0000e27a <z_unpend_first_thread>:
{
    e27a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    e27c:	f04f 0320 	mov.w	r3, #32
    e280:	f3ef 8511 	mrs	r5, BASEPRI
    e284:	f383 8812 	msr	BASEPRI_MAX, r3
    e288:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e28c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e28e:	42a0      	cmp	r0, r4
    e290:	d00d      	beq.n	e2ae <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    e292:	b134      	cbz	r4, e2a2 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    e294:	4620      	mov	r0, r4
    e296:	f7ff ff56 	bl	e146 <unpend_thread_no_timeout>
    e29a:	f104 0018 	add.w	r0, r4, #24
    e29e:	f000 f869 	bl	e374 <z_abort_timeout>
	__asm__ volatile(
    e2a2:	f385 8811 	msr	BASEPRI, r5
    e2a6:	f3bf 8f6f 	isb	sy
}
    e2aa:	4620      	mov	r0, r4
    e2ac:	bd38      	pop	{r3, r4, r5, pc}
    e2ae:	2400      	movs	r4, #0
    e2b0:	e7f7      	b.n	e2a2 <z_unpend_first_thread+0x28>

0000e2b2 <z_unpend_thread>:
{
    e2b2:	b510      	push	{r4, lr}
    e2b4:	4601      	mov	r1, r0
	__asm__ volatile(
    e2b6:	f04f 0320 	mov.w	r3, #32
    e2ba:	f3ef 8411 	mrs	r4, BASEPRI
    e2be:	f383 8812 	msr	BASEPRI_MAX, r3
    e2c2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    e2c6:	6883      	ldr	r3, [r0, #8]
    e2c8:	b10b      	cbz	r3, e2ce <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    e2ca:	f7ff ff3c 	bl	e146 <unpend_thread_no_timeout>
	__asm__ volatile(
    e2ce:	f384 8811 	msr	BASEPRI, r4
    e2d2:	f3bf 8f6f 	isb	sy
}
    e2d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2da:	f101 0018 	add.w	r0, r1, #24
    e2de:	f000 b849 	b.w	e374 <z_abort_timeout>

0000e2e2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e2e2:	4603      	mov	r3, r0
    e2e4:	b920      	cbnz	r0, e2f0 <z_reschedule_irqlock+0xe>
    e2e6:	f3ef 8205 	mrs	r2, IPSR
    e2ea:	b90a      	cbnz	r2, e2f0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    e2ec:	f7f5 bd0a 	b.w	3d04 <arch_swap>
    e2f0:	f383 8811 	msr	BASEPRI, r3
    e2f4:	f3bf 8f6f 	isb	sy
}
    e2f8:	4770      	bx	lr

0000e2fa <z_reschedule_unlocked>:
	__asm__ volatile(
    e2fa:	f04f 0320 	mov.w	r3, #32
    e2fe:	f3ef 8011 	mrs	r0, BASEPRI
    e302:	f383 8812 	msr	BASEPRI_MAX, r3
    e306:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e30a:	f7ff bfea 	b.w	e2e2 <z_reschedule_irqlock>

0000e30e <z_unpend_all>:
{
    e30e:	b538      	push	{r3, r4, r5, lr}
    e310:	4605      	mov	r5, r0
	int need_sched = 0;
    e312:	2000      	movs	r0, #0
	return list->head == list;
    e314:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e316:	42a5      	cmp	r5, r4
    e318:	d000      	beq.n	e31c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e31a:	b904      	cbnz	r4, e31e <z_unpend_all+0x10>
}
    e31c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    e31e:	4620      	mov	r0, r4
    e320:	f7ff ffc7 	bl	e2b2 <z_unpend_thread>
		z_ready_thread(thread);
    e324:	4620      	mov	r0, r4
    e326:	f7ff ff49 	bl	e1bc <z_ready_thread>
		need_sched = 1;
    e32a:	2001      	movs	r0, #1
    e32c:	e7f2      	b.n	e314 <z_unpend_all+0x6>

0000e32e <z_sched_wake>:
{
    e32e:	b538      	push	{r3, r4, r5, lr}
    e330:	f04f 0320 	mov.w	r3, #32
    e334:	f3ef 8511 	mrs	r5, BASEPRI
    e338:	f383 8812 	msr	BASEPRI_MAX, r3
    e33c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e340:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e342:	42a0      	cmp	r0, r4
    e344:	d012      	beq.n	e36c <z_sched_wake+0x3e>
		if (thread != NULL) {
    e346:	b19c      	cbz	r4, e370 <z_sched_wake+0x42>
    e348:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
    e34a:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    e34c:	4620      	mov	r0, r4
    e34e:	f7ff fefa 	bl	e146 <unpend_thread_no_timeout>
    e352:	f104 0018 	add.w	r0, r4, #24
    e356:	f000 f80d 	bl	e374 <z_abort_timeout>
			ready_thread(thread);
    e35a:	4620      	mov	r0, r4
    e35c:	f7fc ff9c 	bl	b298 <ready_thread>
			ret = true;
    e360:	2001      	movs	r0, #1
	__asm__ volatile(
    e362:	f385 8811 	msr	BASEPRI, r5
    e366:	f3bf 8f6f 	isb	sy
}
    e36a:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    e36c:	2000      	movs	r0, #0
    e36e:	e7f8      	b.n	e362 <z_sched_wake+0x34>
    e370:	4620      	mov	r0, r4
    e372:	e7f6      	b.n	e362 <z_sched_wake+0x34>

0000e374 <z_abort_timeout>:
{
    e374:	b510      	push	{r4, lr}
	__asm__ volatile(
    e376:	f04f 0220 	mov.w	r2, #32
    e37a:	f3ef 8411 	mrs	r4, BASEPRI
    e37e:	f382 8812 	msr	BASEPRI_MAX, r2
    e382:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    e386:	6803      	ldr	r3, [r0, #0]
    e388:	b13b      	cbz	r3, e39a <z_abort_timeout+0x26>
			remove_timeout(to);
    e38a:	f7fd fa89 	bl	b8a0 <remove_timeout>
			ret = 0;
    e38e:	2000      	movs	r0, #0
	__asm__ volatile(
    e390:	f384 8811 	msr	BASEPRI, r4
    e394:	f3bf 8f6f 	isb	sy
}
    e398:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    e39a:	f06f 0015 	mvn.w	r0, #21
    e39e:	e7f7      	b.n	e390 <z_abort_timeout+0x1c>

0000e3a0 <z_get_next_timeout_expiry>:
{
    e3a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    e3a2:	f04f 0320 	mov.w	r3, #32
    e3a6:	f3ef 8411 	mrs	r4, BASEPRI
    e3aa:	f383 8812 	msr	BASEPRI_MAX, r3
    e3ae:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    e3b2:	f7fd fa55 	bl	b860 <next_timeout>
	__asm__ volatile(
    e3b6:	f384 8811 	msr	BASEPRI, r4
    e3ba:	f3bf 8f6f 	isb	sy
}
    e3be:	bd10      	pop	{r4, pc}

0000e3c0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    e3c0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    e3c2:	f7fd fb69 	bl	ba98 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    e3c6:	bd08      	pop	{r3, pc}

0000e3c8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    e3c8:	f7fd bb66 	b.w	ba98 <sys_clock_tick_get>

0000e3cc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    e3cc:	b108      	cbz	r0, e3d2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    e3ce:	f7f6 b9b3 	b.w	4738 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    e3d2:	4770      	bx	lr

0000e3d4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e3d4:	f1b1 3fff 	cmp.w	r1, #4294967295
    e3d8:	bf08      	it	eq
    e3da:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    e3de:	b538      	push	{r3, r4, r5, lr}
    e3e0:	460c      	mov	r4, r1
    e3e2:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e3e4:	d014      	beq.n	e410 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e3e6:	4308      	orrs	r0, r1
    e3e8:	d103      	bne.n	e3f2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    e3ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    e3ee:	f7fd bb53 	b.w	ba98 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    e3f2:	f06f 0001 	mvn.w	r0, #1
    e3f6:	1b40      	subs	r0, r0, r5
    e3f8:	f04f 33ff 	mov.w	r3, #4294967295
    e3fc:	eb63 0101 	sbc.w	r1, r3, r1
    e400:	2900      	cmp	r1, #0
    e402:	da04      	bge.n	e40e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    e404:	f7fd fb48 	bl	ba98 <sys_clock_tick_get>
    e408:	1940      	adds	r0, r0, r5
    e40a:	eb41 0104 	adc.w	r1, r1, r4
}
    e40e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    e410:	f04f 30ff 	mov.w	r0, #4294967295
    e414:	4601      	mov	r1, r0
    e416:	e7fa      	b.n	e40e <sys_clock_timeout_end_calc+0x3a>

0000e418 <k_timer_init>:
	timer->status = 0U;
    e418:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    e41a:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    e41e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    e422:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    e426:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    e42a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    e42c:	6343      	str	r3, [r0, #52]	; 0x34
}
    e42e:	4770      	bx	lr

0000e430 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    e430:	b510      	push	{r4, lr}
    e432:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    e434:	f7ff ff9e 	bl	e374 <z_abort_timeout>

	if (inactive) {
    e438:	b9b0      	cbnz	r0, e468 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    e43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e43c:	b10b      	cbz	r3, e442 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    e43e:	4620      	mov	r0, r4
    e440:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    e442:	f104 0018 	add.w	r0, r4, #24
    e446:	f7ff ff01 	bl	e24c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    e44a:	b168      	cbz	r0, e468 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    e44c:	f7ff feb6 	bl	e1bc <z_ready_thread>
	__asm__ volatile(
    e450:	f04f 0320 	mov.w	r3, #32
    e454:	f3ef 8011 	mrs	r0, BASEPRI
    e458:	f383 8812 	msr	BASEPRI_MAX, r3
    e45c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    e460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e464:	f7ff bf3d 	b.w	e2e2 <z_reschedule_irqlock>
    e468:	bd10      	pop	{r4, pc}

0000e46a <add_event>:
{
    e46a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e46c:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    e46e:	e9d0 1300 	ldrd	r1, r3, [r0]
    e472:	4288      	cmp	r0, r1
    e474:	4604      	mov	r4, r0
    e476:	d105      	bne.n	e484 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
    e478:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
    e47a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
    e47e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    e480:	6065      	str	r5, [r4, #4]
    e482:	e01d      	b.n	e4c0 <add_event+0x56>
	if ((pending == NULL) ||
    e484:	2b00      	cmp	r3, #0
    e486:	d0f7      	beq.n	e478 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
    e488:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    e48a:	b100      	cbz	r0, e48e <add_event+0x24>
    e48c:	3860      	subs	r0, #96	; 0x60
    e48e:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
    e492:	4639      	mov	r1, r7
    e494:	f7ff fe61 	bl	e15a <z_sched_prio_cmp>
	if ((pending == NULL) ||
    e498:	2800      	cmp	r0, #0
    e49a:	dced      	bgt.n	e478 <add_event+0xe>
	return list->head == list;
    e49c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e49e:	42b4      	cmp	r4, r6
    e4a0:	d0ea      	beq.n	e478 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    e4a2:	2e00      	cmp	r6, #0
    e4a4:	d0e8      	beq.n	e478 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
    e4a6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    e4a8:	b101      	cbz	r1, e4ac <add_event+0x42>
    e4aa:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
    e4ac:	4638      	mov	r0, r7
    e4ae:	f7ff fe54 	bl	e15a <z_sched_prio_cmp>
    e4b2:	2800      	cmp	r0, #0
    e4b4:	dd05      	ble.n	e4c2 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
    e4b6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    e4b8:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
    e4bc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e4be:	6075      	str	r5, [r6, #4]
}
    e4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    e4c2:	6863      	ldr	r3, [r4, #4]
    e4c4:	429e      	cmp	r6, r3
    e4c6:	d0d7      	beq.n	e478 <add_event+0xe>
    e4c8:	6836      	ldr	r6, [r6, #0]
    e4ca:	e7ea      	b.n	e4a2 <add_event+0x38>

0000e4cc <register_events>:
{
    e4cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    e4d0:	2500      	movs	r5, #0
{
    e4d2:	468b      	mov	fp, r1
    e4d4:	4614      	mov	r4, r2
    e4d6:	461f      	mov	r7, r3
    e4d8:	4682      	mov	sl, r0
	int events_registered = 0;
    e4da:	462e      	mov	r6, r5
	event->poller = NULL;
    e4dc:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
    e4de:	455d      	cmp	r5, fp
    e4e0:	db02      	blt.n	e4e8 <register_events+0x1c>
}
    e4e2:	4630      	mov	r0, r6
    e4e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4e8:	f04f 0320 	mov.w	r3, #32
    e4ec:	f3ef 8911 	mrs	r9, BASEPRI
    e4f0:	f383 8812 	msr	BASEPRI_MAX, r3
    e4f4:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    e4f8:	f89a 300d 	ldrb.w	r3, [sl, #13]
    e4fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e500:	3b01      	subs	r3, #1
    e502:	2b07      	cmp	r3, #7
    e504:	d80f      	bhi.n	e526 <register_events+0x5a>
    e506:	e8df f003 	tbb	[pc, r3]
    e50a:	041e      	.short	0x041e
    e50c:	0e0e0a0e 	.word	0x0e0e0a0e
    e510:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
    e512:	f8da 3010 	ldr.w	r3, [sl, #16]
    e516:	689b      	ldr	r3, [r3, #8]
    e518:	b12b      	cbz	r3, e526 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
    e51a:	2302      	movs	r3, #2
    e51c:	e020      	b.n	e560 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
    e51e:	f8da 3010 	ldr.w	r3, [sl, #16]
    e522:	681b      	ldr	r3, [r3, #0]
    e524:	bb8b      	cbnz	r3, e58a <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
    e526:	bb47      	cbnz	r7, e57a <register_events+0xae>
    e528:	7823      	ldrb	r3, [r4, #0]
    e52a:	b333      	cbz	r3, e57a <register_events+0xae>
	switch (event->type) {
    e52c:	f89a 300d 	ldrb.w	r3, [sl, #13]
    e530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e534:	3b01      	subs	r3, #1
    e536:	2b07      	cmp	r3, #7
    e538:	d830      	bhi.n	e59c <register_events+0xd0>
    e53a:	e8df f003 	tbb	[pc, r3]
    e53e:	2833      	.short	0x2833
    e540:	2f2f282f 	.word	0x2f2f282f
    e544:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
    e546:	f8da 3010 	ldr.w	r3, [sl, #16]
    e54a:	689b      	ldr	r3, [r3, #8]
    e54c:	2b00      	cmp	r3, #0
    e54e:	d0ea      	beq.n	e526 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
    e550:	2301      	movs	r3, #1
    e552:	e005      	b.n	e560 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
    e554:	f8da 3010 	ldr.w	r3, [sl, #16]
    e558:	6a1b      	ldr	r3, [r3, #32]
    e55a:	2b00      	cmp	r3, #0
    e55c:	d0e3      	beq.n	e526 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
    e55e:	2310      	movs	r3, #16
	event->state |= state;
    e560:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
    e564:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
    e568:	f3c2 3186 	ubfx	r1, r2, #14, #7
    e56c:	430b      	orrs	r3, r1
    e56e:	f363 3294 	bfi	r2, r3, #14, #7
    e572:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
    e576:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    e57a:	f389 8811 	msr	BASEPRI, r9
    e57e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    e582:	3501      	adds	r5, #1
    e584:	f10a 0a14 	add.w	sl, sl, #20
    e588:	e7a9      	b.n	e4de <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
    e58a:	2304      	movs	r3, #4
    e58c:	e7e8      	b.n	e560 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
    e58e:	f8da 0010 	ldr.w	r0, [sl, #16]
    e592:	4622      	mov	r2, r4
    e594:	4651      	mov	r1, sl
    e596:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
    e598:	f7ff ff67 	bl	e46a <add_event>
	event->poller = poller;
    e59c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
    e5a0:	3601      	adds	r6, #1
    e5a2:	e7ea      	b.n	e57a <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
    e5a4:	f8da 0010 	ldr.w	r0, [sl, #16]
    e5a8:	4622      	mov	r2, r4
    e5aa:	4651      	mov	r1, sl
    e5ac:	e7f4      	b.n	e598 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
    e5ae:	f8da 0010 	ldr.w	r0, [sl, #16]
    e5b2:	4622      	mov	r2, r4
    e5b4:	4651      	mov	r1, sl
    e5b6:	3024      	adds	r0, #36	; 0x24
    e5b8:	e7ee      	b.n	e598 <register_events+0xcc>

0000e5ba <signal_poll_event>:
{
    e5ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    e5be:	6884      	ldr	r4, [r0, #8]
{
    e5c0:	4605      	mov	r5, r0
    e5c2:	460e      	mov	r6, r1
	if (poller != NULL) {
    e5c4:	b144      	cbz	r4, e5d8 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    e5c6:	7863      	ldrb	r3, [r4, #1]
    e5c8:	2b01      	cmp	r3, #1
    e5ca:	d12e      	bne.n	e62a <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
    e5cc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    e5d0:	f013 0302 	ands.w	r3, r3, #2
    e5d4:	d10a      	bne.n	e5ec <signal_poll_event+0x32>
		poller->is_polling = false;
    e5d6:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    e5d8:	68eb      	ldr	r3, [r5, #12]
    e5da:	f3c3 3286 	ubfx	r2, r3, #14, #7
    e5de:	4316      	orrs	r6, r2
	event->poller = NULL;
    e5e0:	2000      	movs	r0, #0
	event->state |= state;
    e5e2:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
    e5e6:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    e5e8:	60eb      	str	r3, [r5, #12]
	return retcode;
    e5ea:	e03e      	b.n	e66a <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
    e5ec:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    e5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
    e5f4:	bf08      	it	eq
    e5f6:	f112 0f02 	cmneq.w	r2, #2
    e5fa:	d032      	beq.n	e662 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    e5fc:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    e600:	4640      	mov	r0, r8
    e602:	f7ff fe56 	bl	e2b2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    e606:	2e08      	cmp	r6, #8
    e608:	bf0c      	ite	eq
    e60a:	f06f 0303 	mvneq.w	r3, #3
    e60e:	2300      	movne	r3, #0
    e610:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    e612:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    e616:	06db      	lsls	r3, r3, #27
    e618:	d109      	bne.n	e62e <signal_poll_event+0x74>
    e61a:	f854 7c48 	ldr.w	r7, [r4, #-72]
    e61e:	b937      	cbnz	r7, e62e <signal_poll_event+0x74>
	z_ready_thread(thread);
    e620:	4640      	mov	r0, r8
    e622:	f7ff fdcb 	bl	e1bc <z_ready_thread>
		poller->is_polling = false;
    e626:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    e628:	e7d6      	b.n	e5d8 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    e62a:	2b02      	cmp	r3, #2
    e62c:	d001      	beq.n	e632 <signal_poll_event+0x78>
		poller->is_polling = false;
    e62e:	2300      	movs	r3, #0
    e630:	e7d1      	b.n	e5d6 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    e632:	7823      	ldrb	r3, [r4, #0]
    e634:	2b00      	cmp	r3, #0
    e636:	d0cf      	beq.n	e5d8 <signal_poll_event+0x1e>
    e638:	f854 7c04 	ldr.w	r7, [r4, #-4]
    e63c:	2f00      	cmp	r7, #0
    e63e:	d0f2      	beq.n	e626 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    e640:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    e644:	f1a4 0914 	sub.w	r9, r4, #20
    e648:	f104 0014 	add.w	r0, r4, #20
    e64c:	f7ff fe92 	bl	e374 <z_abort_timeout>
		twork->poll_result = 0;
    e650:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
    e654:	4649      	mov	r1, r9
    e656:	4638      	mov	r0, r7
    e658:	f7ff fd3c 	bl	e0d4 <z_work_submit_to_queue>
		poller->is_polling = false;
    e65c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    e660:	e7ba      	b.n	e5d8 <signal_poll_event+0x1e>
		poller->is_polling = false;
    e662:	2300      	movs	r3, #0
    e664:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    e666:	f06f 000a 	mvn.w	r0, #10
}
    e66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e66e <clear_event_registrations>:
	while (num_events--) {
    e66e:	2314      	movs	r3, #20
{
    e670:	b5f0      	push	{r4, r5, r6, r7, lr}
    e672:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    e676:	2400      	movs	r4, #0
	switch (event->type) {
    e678:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
    e67c:	b901      	cbnz	r1, e680 <clear_event_registrations+0x12>
}
    e67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
    e680:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
    e684:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
    e688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e68c:	2b08      	cmp	r3, #8
    e68e:	f1a0 0714 	sub.w	r7, r0, #20
    e692:	d80c      	bhi.n	e6ae <clear_event_registrations+0x40>
    e694:	fa26 f303 	lsr.w	r3, r6, r3
    e698:	07db      	lsls	r3, r3, #31
    e69a:	d508      	bpl.n	e6ae <clear_event_registrations+0x40>
	return node->next != NULL;
    e69c:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
    e6a0:	b12b      	cbz	r3, e6ae <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
    e6a2:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
    e6a6:	602b      	str	r3, [r5, #0]
	next->prev = prev;
    e6a8:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    e6aa:	e940 4405 	strd	r4, r4, [r0, #-20]
    e6ae:	f382 8811 	msr	BASEPRI, r2
    e6b2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    e6b6:	f04f 0320 	mov.w	r3, #32
    e6ba:	f3ef 8211 	mrs	r2, BASEPRI
    e6be:	f383 8812 	msr	BASEPRI_MAX, r3
    e6c2:	f3bf 8f6f 	isb	sy
	return k;
    e6c6:	3901      	subs	r1, #1
    e6c8:	4638      	mov	r0, r7
    e6ca:	e7d7      	b.n	e67c <clear_event_registrations+0xe>

0000e6cc <z_handle_obj_poll_events>:
{
    e6cc:	4603      	mov	r3, r0
	return list->head == list;
    e6ce:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    e6d0:	4283      	cmp	r3, r0
    e6d2:	d008      	beq.n	e6e6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    e6d4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    e6d8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e6da:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e6dc:	2300      	movs	r3, #0
	node->prev = NULL;
    e6de:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    e6e2:	f7ff bf6a 	b.w	e5ba <signal_poll_event>
}
    e6e6:	4770      	bx	lr

0000e6e8 <k_free>:
	if (ptr != NULL) {
    e6e8:	b120      	cbz	r0, e6f4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    e6ea:	1f01      	subs	r1, r0, #4
    e6ec:	f850 0c04 	ldr.w	r0, [r0, #-4]
    e6f0:	f000 b856 	b.w	e7a0 <k_heap_free>
}
    e6f4:	4770      	bx	lr

0000e6f6 <k_heap_init>:
{
    e6f6:	b410      	push	{r4}
    e6f8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    e6fc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    e700:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    e702:	f7fd bf75 	b.w	c5f0 <sys_heap_init>

0000e706 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    e706:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e70a:	b085      	sub	sp, #20
    e70c:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    e710:	4607      	mov	r7, r0
    e712:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e714:	4650      	mov	r0, sl
    e716:	4621      	mov	r1, r4
{
    e718:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e71a:	f7ff fe5b 	bl	e3d4 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e71e:	f1b4 3fff 	cmp.w	r4, #4294967295
    e722:	bf08      	it	eq
    e724:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e728:	4605      	mov	r5, r0
    e72a:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e72c:	bf04      	itt	eq
    e72e:	f04f 35ff 	moveq.w	r5, #4294967295
    e732:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    e736:	f107 0a14 	add.w	sl, r7, #20
    e73a:	f04f 0320 	mov.w	r3, #32
    e73e:	f3ef 8411 	mrs	r4, BASEPRI
    e742:	f383 8812 	msr	BASEPRI_MAX, r3
    e746:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e74a:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    e74e:	464a      	mov	r2, r9
    e750:	4641      	mov	r1, r8
    e752:	4638      	mov	r0, r7
    e754:	f7fd fee5 	bl	c522 <sys_heap_aligned_alloc>
    e758:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    e75a:	f7fd f99d 	bl	ba98 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    e75e:	9b03      	ldr	r3, [sp, #12]
    e760:	b13b      	cbz	r3, e772 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    e762:	f384 8811 	msr	BASEPRI, r4
    e766:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    e76a:	4618      	mov	r0, r3
    e76c:	b005      	add	sp, #20
    e76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    e772:	1a28      	subs	r0, r5, r0
    e774:	eb66 0101 	sbc.w	r1, r6, r1
    e778:	2801      	cmp	r0, #1
    e77a:	f171 0200 	sbcs.w	r2, r1, #0
    e77e:	dbf0      	blt.n	e762 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e780:	e9cd 0100 	strd	r0, r1, [sp]
    e784:	465a      	mov	r2, fp
    e786:	4621      	mov	r1, r4
    e788:	4650      	mov	r0, sl
    e78a:	f7fc fe19 	bl	b3c0 <z_pend_curr>
	__asm__ volatile(
    e78e:	f04f 0320 	mov.w	r3, #32
    e792:	f3ef 8411 	mrs	r4, BASEPRI
    e796:	f383 8812 	msr	BASEPRI_MAX, r3
    e79a:	f3bf 8f6f 	isb	sy
    e79e:	e7d6      	b.n	e74e <k_heap_aligned_alloc+0x48>

0000e7a0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    e7a0:	b538      	push	{r3, r4, r5, lr}
    e7a2:	4604      	mov	r4, r0
    e7a4:	f04f 0320 	mov.w	r3, #32
    e7a8:	f3ef 8511 	mrs	r5, BASEPRI
    e7ac:	f383 8812 	msr	BASEPRI_MAX, r3
    e7b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    e7b4:	f7fd fe7d 	bl	c4b2 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    e7b8:	f104 000c 	add.w	r0, r4, #12
    e7bc:	f7ff fda7 	bl	e30e <z_unpend_all>
    e7c0:	b130      	cbz	r0, e7d0 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    e7c2:	4629      	mov	r1, r5
    e7c4:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    e7c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    e7cc:	f7fc be5c 	b.w	b488 <z_reschedule>
	__asm__ volatile(
    e7d0:	f385 8811 	msr	BASEPRI, r5
    e7d4:	f3bf 8f6f 	isb	sy
}
    e7d8:	bd38      	pop	{r3, r4, r5, pc}

0000e7da <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    e7da:	4770      	bx	lr
